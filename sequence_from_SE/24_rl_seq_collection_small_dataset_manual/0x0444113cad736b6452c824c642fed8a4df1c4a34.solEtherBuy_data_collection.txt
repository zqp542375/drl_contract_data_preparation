C:\Users\SERC\anaconda3\envs\smartExecutor_env397\python.exe C:/Users/SERC/wei_pycharm/smartExecutor/semyth analyze .\tests\testdata\rl_contracts\0x0444113cad736b6452c824c642fed8a4df1c4a34.sol:EtherBuy --solv 0.5.12 -fdg -fss exeDataCollection

INFO: Could not find files for the given pattern(s).
Starting preprocessing.
number of genesis states: 1
total instructions: 4403
['constructor']:writes at the last depth:[]
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 82.42% coverage.
Ending preprocessing.
preprocessing time(s): 102.22227621078491
contract coverage: 35.23%
sales(uint256) is not reachable
cancel(uint256) is not reachable
buys(uint256,uint256) is not reachable
buyerFeedback(uint256,uint256,bool,string) is not reachable
buy(uint256,string) is not reachable
sellerFeedback(uint256,uint256,string) is not reachable
Function Reads: State variables read in conditions
	buyerFeedback(uint256,uint256,bool,string):[]
	sellerFeedback(uint256,uint256,string):[]
	sales(uint256):[]
	buy(uint256,string):[]
	buys(uint256,uint256):[]
	getCountOfSales():[]
	cancel(uint256):[]
	sell(string,string,uint256,uint256):[]
	getCountOfBuys(uint256):[]
Function Writes: State variables written
	cancel(uint256):['0', '1']
	sellerFeedback(uint256,uint256,string):['1']
	buyerFeedback(uint256,uint256,bool,string):['1']
	buy(uint256,string):['1']
	sell(string,string,uint256,uint256):['0']
============================
iteration:3
targets:['sales(uint256)', 'cancel(uint256)', 'buys(uint256,uint256)', 'buyerFeedback(uint256,uint256,bool,string)', 'buy(uint256,string)', 'sellerFeedback(uint256,uint256,string)']
['sell(string,string,uint256,uint256)']:writes at the last depth:['101', '0', '100']
['sell(string,string,uint256,uint256)']:writes at the last depth:['101', '0', '100']
['sell(string,string,uint256,uint256)']:writes at the last depth:['101', '0', '100']
['sell(string,string,uint256,uint256)']:writes at the last depth:['101', '0', '100']
['sell(string,string,uint256,uint256)']:writes at the last depth:['101', '0', '100']
['sell(string,string,uint256,uint256)']:writes at the last depth:['101', '0', '100']
['sell(string,string,uint256,uint256)']:writes at the last depth:['101', '0', '100']
['sell(string,string,uint256,uint256)']:writes at the last depth:['101', '0', '100']
['sell(string,string,uint256,uint256)']:writes at the last depth:['101', '0', '100']
contract coverage: 61.94%
============================
iteration:4
['sell(string,string,uint256,uint256)', 'cancel(uint256)']:writes at the last depth:['0']
['sell(string,string,uint256,uint256)', 'cancel(uint256)']:writes at the last depth:['0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['107', '106', '0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['107', '106', '0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['107', '106', '0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['107', '106', '0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['107', '106', '0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['107', '106', '0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['107', '106', '0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['107', '106', '0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['107', '106', '0']
contract coverage: 61.94%
============================
iteration:5
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)', 'cancel(uint256)']:writes at the last depth:['0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)', 'cancel(uint256)']:writes at the last depth:['0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['113', '112', '0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['113', '112', '0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['113', '112', '0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['113', '112', '0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['113', '112', '0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['113', '112', '0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['113', '112', '0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['113', '112', '0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)']:writes at the last depth:['113', '112', '0']
contract coverage: 61.94%
============================
iteration:6
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)', 'cancel(uint256)']:writes at the last depth:['0']
['sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)', 'sell(string,string,uint256,uint256)', 'cancel(uint256)']:writes at the last depth:['0']
contract coverage: 61.94%
============================
iteration:7
contract coverage: 61.94%
============================
iteration:8
contract coverage: 61.94%
============================
iteration:9
contract coverage: 61.94%
============================
iteration:10
contract coverage: 61.94%
============================
iteration:11
contract coverage: 61.94%
============================
iteration:12
contract coverage: 61.94%
============================
iteration:13
contract coverage: 61.94%
============================
iteration:14
contract coverage: 61.94%
============================
iteration:15
contract coverage: 61.94%
============================
iteration:16
contract coverage: 61.94%
============================
iteration:17
contract coverage: 61.94%
============================
iteration:18
contract coverage: 61.94%
============================
iteration:19
contract coverage: 61.94%
============================
iteration:20
contract coverage: 61.94%
============================
iteration:21
contract coverage: 61.94%
============================
iteration:22
contract coverage: 61.94%
============================
iteration:23
contract coverage: 61.94%
============================
iteration:24
contract coverage: 61.94%
============================
iteration:25
contract coverage: 61.94%
============================
iteration:26
contract coverage: 61.94%
============================
iteration:27
contract coverage: 61.94%
============================
iteration:28
contract coverage: 61.94%
============================
iteration:29
contract coverage: 61.94%
============================
iteration:30
contract coverage: 61.94%
============================
iteration:31
contract coverage: 61.94%
============================
iteration:32
contract coverage: 61.94%
============================
iteration:33
contract coverage: 61.94%
============================
iteration:34
contract coverage: 61.94%
#@statespace
1367 nodes, 1366 edges, 18601 total states
#@coverage
Achieved 0.45% coverage for code: 608060405234801561001057600080fd5b506118af806100206000396000f3fe6080604052600436106100865760003560e01c8063992ca17211610059578063992ca172146102b3578063ab49c6791461039b578063b5f522f714610477578063b7dc3b18146105e3578063d246780c146106a857610086565b80632888ed451461008b57806340e58ee5146100b6578063516b6d07146100f15780639468df9314610264575b600080fd5b34801561009757600080fd5b506100a0610887565b6040518082815260200191505060405180910390f35b3480156100c257600080fd5b506100ef600480360360208110156100d957600080fd5b8101908080359060200190929190505050610893565b005b3480156100fd57600080fd5b506102626004803603608081101561011457600080fd5b810190808035906020019064010000000081111561013157600080fd5b82018360208201111561014357600080fd5b8035906020019184600183028401116401000000008311171561016557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156101c857600080fd5b8201836020820111156101da57600080fd5b803590602001918460018302840111640100000000831117156101fc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050610b1c565b005b34801561027057600080fd5b5061029d6004803603602081101561028757600080fd5b8101908080359060200190929190505050610c79565b6040518082815260200191505060405180910390f35b3480156102bf57600080fd5b50610399600480360360808110156102d657600080fd5b8101908080359060200190929190803590602001909291908035151590602001909291908035906020019064010000000081111561031357600080fd5b82018360208201111561032557600080fd5b8035906020019184600183028401116401000000008311171561034757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610c99565b005b3480156103a757600080fd5b50610475600480360360608110156103be57600080fd5b810190808035906020019092919080359060200190929190803590602001906401000000008111156103ef57600080fd5b82018360208201111561040157600080fd5b8035906020019184600183028401116401000000008311171561042357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610f09565b005b34801561048357600080fd5b506104b06004803603602081101561049a57600080fd5b8101908080359060200190929190505050611007565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200186815260200185815260200184151515158152602001838103835288818151815260200191508051906020019080838360005b8381101561053c578082015181840152602081019050610521565b50505050905090810190601f1680156105695780820380516001836020036101000a031916815260200191505b50838103825287818151815260200191508051906020019080838360005b838110156105a2578082015181840152602081019050610587565b50505050905090810190601f1680156105cf5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b6106a6600480360360408110156105f957600080fd5b81019080803590602001909291908035906020019064010000000081111561062057600080fd5b82018360208201111561063257600080fd5b8035906020019184600183028401116401000000008311171561065457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506111ad565b005b3480156106b457600080fd5b506106eb600480360360408110156106cb57600080fd5b8101908080359060200190929190803590602001909291905050506114fd565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200186151515158152602001851515151581526020018060200180602001848103845289818151815260200191508051906020019080838360005b8381101561077957808201518184015260208101905061075e565b50505050905090810190601f1680156107a65780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156107df5780820151818401526020810190506107c4565b50505050905090810190601f16801561080c5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561084557808201518184015260208101905061082a565b50505050905090810190601f1680156108725780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b60008080549050905090565b600081815481106108a057fe5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461090957600080fd5b600080828154811061091757fe5b906000526020600020906006020160050160006101000a81548160ff021916908315150217905550600080828154811061094d57fe5b9060005260206000209060060201600401541115610ae257600080828154811061097357fe5b906000526020600020906006020160040154905060008090505b6001600084815260200190815260200160002080549050811015610adf57600015156001600085815260200190815260200160002082815481106109cd57fe5b906000526020600020906005020160020160009054906101000a900460ff1615151415610ad25760018060008581526020019081526020016000208281548110610a1357fe5b906000526020600020906005020160020160006101000a81548160ff021916908315150217905550600160008481526020019081526020016000208181548110610a5957fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610ad0573d6000803e3d6000fd5b505b808060010191505061098d565b50505b7fe933406ce445ea24d84ca4529e514adc8926e62cdc8b5a67c568c9fd578f1a8a816040518082815260200191505060405180910390a150565b60006040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152602001838152602001600115158152509080600181540180825580915050906001820390600052602060002090600602016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610bf2929190611755565b506040820151816002019080519060200190610c0f929190611755565b50606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083151502179055505050507fe7ab8792d0a3f1e9aadd919a27569b0a49c388dba7f680e8d1e8973820ed05f560405160405180910390a150505050565b600060016000838152602001908152602001600020805490509050919050565b600160008581526020019081526020016000208381548110610cb757fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d2057600080fd5b600160008581526020019081526020016000208381548110610d3e57fe5b906000526020600020906005020160020160009054906101000a900460ff16158015610d8757506000808581548110610d7357fe5b906000526020600020906006020160040154115b15610e395760018060008681526020019081526020016000208481548110610dab57fe5b906000526020600020906005020160020160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff166108fc60008681548110610dfa57fe5b9060005260206000209060060201600401549081150290604051600060405180830381858888f19350505050158015610e37573d6000803e3d6000fd5b505b81600160008681526020019081526020016000208481548110610e5857fe5b906000526020600020906005020160020160016101000a81548160ff02191690831515021790555080600160008681526020019081526020016000208481548110610e9f57fe5b90600052602060002090600502016003019080519060200190610ec39291906117d5565b507f3e23dda8b8ca613059d356a0b18b9946eb2f3fd714addd8b502f5c58dcc1c1028484604051808381526020018281526020019250505060405180910390a150505050565b60008381548110610f1657fe5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f7f57600080fd5b80600160008581526020019081526020016000208381548110610f9e57fe5b90600052602060002090600502016004019080519060200190610fc29291906117d5565b507f3e23dda8b8ca613059d356a0b18b9946eb2f3fd714addd8b502f5c58dcc1c1028383604051808381526020018281526020019250505060405180910390a1505050565b6000818154811061101457fe5b90600052602060002090600602016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110e65780601f106110bb576101008083540402835291602001916110e6565b820191906000526020600020905b8154815290600101906020018083116110c957829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111845780601f1061115957610100808354040283529160200191611184565b820191906000526020600020905b81548152906001019060200180831161116757829003601f168201915b5050505050908060030154908060040154908060050160009054906101000a900460ff16905086565b600082815481106111ba57fe5b906000526020600020906006020160050160009054906101000a900460ff166111e257600080fd5b600082815481106111ef57fe5b9060005260206000209060060201600401546000838154811061120e57fe5b90600052602060002090600602016003015401341461122c57600080fd5b600160008381526020019081526020016000206040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001838152602001600015158152602001600015158152602001604051806020016040528060008152508152602001604051806020016040528060008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190611334929190611755565b5060408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff0219169083151502179055506080820151816003019080519060200190611391929190611755565b5060a08201518160040190805190602001906113ae929190611755565b50505050600082815481106113bf57fe5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6000848154811061141757fe5b9060005260206000209060060201600301549081150290604051600060405180830381858888f19350505050158015611454573d6000803e3d6000fd5b507f4a65e8240db6c3a78bc2a14f33da52f24f69fe06f08a45b9bf5ebaf7bf5549a882826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114be5780820151818401526020810190506114a3565b50505050905090810190601f1680156114eb5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b6001602052816000526040600020818154811061151657fe5b9060005260206000209060050201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115e95780601f106115be576101008083540402835291602001916115e9565b820191906000526020600020905b8154815290600101906020018083116115cc57829003601f168201915b5050505050908060020160009054906101000a900460ff16908060020160019054906101000a900460ff1690806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116ad5780601f10611682576101008083540402835291602001916116ad565b820191906000526020600020905b81548152906001019060200180831161169057829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561174b5780601f106117205761010080835404028352916020019161174b565b820191906000526020600020905b81548152906001019060200180831161172e57829003601f168201915b5050505050905086565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061179657805160ff19168380011785556117c4565b828001600101855582156117c4579182015b828111156117c35782518255916020019190600101906117a8565b5b5090506117d19190611855565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061181657805160ff1916838001178555611844565b82800160010185558215611844579182015b82811115611843578251825591602001919060010190611828565b5b5090506118519190611855565b5090565b61187791905b8082111561187357600081600090555060010161185b565b5090565b9056fea265627a7a7231582003b1c8e639c137a71a819a688f0b70e391da23270ef7083137c57fcddf88609d64736f6c634300050c0032
#@coverage
Achieved 61.94% coverage for code: 6080604052600436106100865760003560e01c8063992ca17211610059578063992ca172146102b3578063ab49c6791461039b578063b5f522f714610477578063b7dc3b18146105e3578063d246780c146106a857610086565b80632888ed451461008b57806340e58ee5146100b6578063516b6d07146100f15780639468df9314610264575b600080fd5b34801561009757600080fd5b506100a0610887565b6040518082815260200191505060405180910390f35b3480156100c257600080fd5b506100ef600480360360208110156100d957600080fd5b8101908080359060200190929190505050610893565b005b3480156100fd57600080fd5b506102626004803603608081101561011457600080fd5b810190808035906020019064010000000081111561013157600080fd5b82018360208201111561014357600080fd5b8035906020019184600183028401116401000000008311171561016557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156101c857600080fd5b8201836020820111156101da57600080fd5b803590602001918460018302840111640100000000831117156101fc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050610b1c565b005b34801561027057600080fd5b5061029d6004803603602081101561028757600080fd5b8101908080359060200190929190505050610c79565b6040518082815260200191505060405180910390f35b3480156102bf57600080fd5b50610399600480360360808110156102d657600080fd5b8101908080359060200190929190803590602001909291908035151590602001909291908035906020019064010000000081111561031357600080fd5b82018360208201111561032557600080fd5b8035906020019184600183028401116401000000008311171561034757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610c99565b005b3480156103a757600080fd5b50610475600480360360608110156103be57600080fd5b810190808035906020019092919080359060200190929190803590602001906401000000008111156103ef57600080fd5b82018360208201111561040157600080fd5b8035906020019184600183028401116401000000008311171561042357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610f09565b005b34801561048357600080fd5b506104b06004803603602081101561049a57600080fd5b8101908080359060200190929190505050611007565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200186815260200185815260200184151515158152602001838103835288818151815260200191508051906020019080838360005b8381101561053c578082015181840152602081019050610521565b50505050905090810190601f1680156105695780820380516001836020036101000a031916815260200191505b50838103825287818151815260200191508051906020019080838360005b838110156105a2578082015181840152602081019050610587565b50505050905090810190601f1680156105cf5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b6106a6600480360360408110156105f957600080fd5b81019080803590602001909291908035906020019064010000000081111561062057600080fd5b82018360208201111561063257600080fd5b8035906020019184600183028401116401000000008311171561065457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506111ad565b005b3480156106b457600080fd5b506106eb600480360360408110156106cb57600080fd5b8101908080359060200190929190803590602001909291905050506114fd565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200186151515158152602001851515151581526020018060200180602001848103845289818151815260200191508051906020019080838360005b8381101561077957808201518184015260208101905061075e565b50505050905090810190601f1680156107a65780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156107df5780820151818401526020810190506107c4565b50505050905090810190601f16801561080c5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561084557808201518184015260208101905061082a565b50505050905090810190601f1680156108725780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b60008080549050905090565b600081815481106108a057fe5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461090957600080fd5b600080828154811061091757fe5b906000526020600020906006020160050160006101000a81548160ff021916908315150217905550600080828154811061094d57fe5b9060005260206000209060060201600401541115610ae257600080828154811061097357fe5b906000526020600020906006020160040154905060008090505b6001600084815260200190815260200160002080549050811015610adf57600015156001600085815260200190815260200160002082815481106109cd57fe5b906000526020600020906005020160020160009054906101000a900460ff1615151415610ad25760018060008581526020019081526020016000208281548110610a1357fe5b906000526020600020906005020160020160006101000a81548160ff021916908315150217905550600160008481526020019081526020016000208181548110610a5957fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610ad0573d6000803e3d6000fd5b505b808060010191505061098d565b50505b7fe933406ce445ea24d84ca4529e514adc8926e62cdc8b5a67c568c9fd578f1a8a816040518082815260200191505060405180910390a150565b60006040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152602001838152602001600115158152509080600181540180825580915050906001820390600052602060002090600602016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610bf2929190611755565b506040820151816002019080519060200190610c0f929190611755565b50606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083151502179055505050507fe7ab8792d0a3f1e9aadd919a27569b0a49c388dba7f680e8d1e8973820ed05f560405160405180910390a150505050565b600060016000838152602001908152602001600020805490509050919050565b600160008581526020019081526020016000208381548110610cb757fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d2057600080fd5b600160008581526020019081526020016000208381548110610d3e57fe5b906000526020600020906005020160020160009054906101000a900460ff16158015610d8757506000808581548110610d7357fe5b906000526020600020906006020160040154115b15610e395760018060008681526020019081526020016000208481548110610dab57fe5b906000526020600020906005020160020160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff166108fc60008681548110610dfa57fe5b9060005260206000209060060201600401549081150290604051600060405180830381858888f19350505050158015610e37573d6000803e3d6000fd5b505b81600160008681526020019081526020016000208481548110610e5857fe5b906000526020600020906005020160020160016101000a81548160ff02191690831515021790555080600160008681526020019081526020016000208481548110610e9f57fe5b90600052602060002090600502016003019080519060200190610ec39291906117d5565b507f3e23dda8b8ca613059d356a0b18b9946eb2f3fd714addd8b502f5c58dcc1c1028484604051808381526020018281526020019250505060405180910390a150505050565b60008381548110610f1657fe5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f7f57600080fd5b80600160008581526020019081526020016000208381548110610f9e57fe5b90600052602060002090600502016004019080519060200190610fc29291906117d5565b507f3e23dda8b8ca613059d356a0b18b9946eb2f3fd714addd8b502f5c58dcc1c1028383604051808381526020018281526020019250505060405180910390a1505050565b6000818154811061101457fe5b90600052602060002090600602016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110e65780601f106110bb576101008083540402835291602001916110e6565b820191906000526020600020905b8154815290600101906020018083116110c957829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111845780601f1061115957610100808354040283529160200191611184565b820191906000526020600020905b81548152906001019060200180831161116757829003601f168201915b5050505050908060030154908060040154908060050160009054906101000a900460ff16905086565b600082815481106111ba57fe5b906000526020600020906006020160050160009054906101000a900460ff166111e257600080fd5b600082815481106111ef57fe5b9060005260206000209060060201600401546000838154811061120e57fe5b90600052602060002090600602016003015401341461122c57600080fd5b600160008381526020019081526020016000206040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001838152602001600015158152602001600015158152602001604051806020016040528060008152508152602001604051806020016040528060008152508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190611334929190611755565b5060408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff0219169083151502179055506080820151816003019080519060200190611391929190611755565b5060a08201518160040190805190602001906113ae929190611755565b50505050600082815481106113bf57fe5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6000848154811061141757fe5b9060005260206000209060060201600301549081150290604051600060405180830381858888f19350505050158015611454573d6000803e3d6000fd5b507f4a65e8240db6c3a78bc2a14f33da52f24f69fe06f08a45b9bf5ebaf7bf5549a882826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114be5780820151818401526020810190506114a3565b50505050905090810190601f1680156114eb5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b6001602052816000526040600020818154811061151657fe5b9060005260206000209060050201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115e95780601f106115be576101008083540402835291602001916115e9565b820191906000526020600020905b8154815290600101906020018083116115cc57829003601f168201915b5050505050908060020160009054906101000a900460ff16908060020160019054906101000a900460ff1690806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116ad5780601f10611682576101008083540402835291602001916116ad565b820191906000526020600020905b81548152906001019060200180831161169057829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561174b5780601f106117205761010080835404028352916020019161174b565b820191906000526020600020905b81548152906001019060200180831161172e57829003601f168201915b5050505050905086565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061179657805160ff19168380011785556117c4565b828001600101855582156117c4579182015b828111156117c35782518255916020019190600101906117a8565b5b5090506117d19190611855565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061181657805160ff1916838001178555611844565b82800160010185558215611844579182015b82811115611843578251825591602001919060010190611828565b5b5090506118519190611855565b5090565b61187791905b8082111561187357600081600090555060010161185b565b5090565b9056fea265627a7a7231582003b1c8e639c137a71a819a688f0b70e391da23270ef7083137c57fcddf88609d64736f6c634300050c0032
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherBuy
Function name: cancel(uint256)
PC address: 2207
Estimated Gas Usage: 1068 - 1163
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: .\tests\testdata\rl_contracts\0x0444113cad736b6452c824c642fed8a4df1c4a34.sol:60

function cancel(uint SaleID) public {
		require(msg.sender==sales[SaleID].seller);
		sales[SaleID].available = false;
		if(sales[SaleID].locked>0) {
			uint lockedValue = sales[SaleID].locked;
			for (uint BuyID=0; BuyID<buys[SaleID].length; BuyID++) {
				if(buys[SaleID][BuyID].lockReleased==false) {
					buys[SaleID][BuyID].lockReleased = true;
					buys[SaleID][BuyID].buyer.transfer(lockedValue);
				}
			}
		}
		emit CancelEvent(SaleID);
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: cancel(uint256), txdata: 0x40e58ee5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5, decoded_data: (103985837001354544125481394380351101562348339170320349666807006814949437990373,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherBuy
Function name: buyerFeedback(uint256,uint256,bool,string)
PC address: 3254
Estimated Gas Usage: 1561 - 4528
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: .\tests\testdata\rl_contracts\0x0444113cad736b6452c824c642fed8a4df1c4a34.sol:75

function buyerFeedback(uint SaleID, uint BuyID, bool hasReceived, string memory comment) public {
		require(msg.sender==buys[SaleID][BuyID].buyer);

		if(!buys[SaleID][BuyID].lockReleased && sales[SaleID].locked>0) {
			buys[SaleID][BuyID].lockReleased = true;
			msg.sender.transfer(sales[SaleID].locked);
		}

		buys[SaleID][BuyID].hasReceived = hasReceived;
		buys[SaleID][BuyID].commentByBuyer = comment;
		emit FeedbackEvent(SaleID, BuyID);
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: buyerFeedback(uint256,uint256,bool,string), txdata: 0x992ca1720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010, decoded_data: (0, 8507059173023461586584365185794205286400, False, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherBuy
Function name: sellerFeedback(uint256,uint256,string)
PC address: 3861
Estimated Gas Usage: 1472 - 4249
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: .\tests\testdata\rl_contracts\0x0444113cad736b6452c824c642fed8a4df1c4a34.sol:88

function sellerFeedback(uint SaleID, uint BuyID, string memory comment) public {
		require(msg.sender==sales[SaleID].seller);
		buys[SaleID][BuyID].commentBySeller = comment;
		emit FeedbackEvent(SaleID, BuyID);
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellerFeedback(uint256,uint256,string), txdata: 0xab49c679000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (64, 0, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherBuy
Function name: sales(uint256)
PC address: 4115
Estimated Gas Usage: 1089 - 1184
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: .\tests\testdata\rl_contracts\0x0444113cad736b6452c824c642fed8a4df1c4a34.sol:22

oneSale[] public sales

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sales(uint256), txdata: 0xb5f522f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7, decoded_data: (112159396241635687331851110969199659763755632205542036540180483333155070670839,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EtherBuy
Function name: sales(uint256)
PC address: 4244
Estimated Gas Usage: 12650 - 17742
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: .\tests\testdata\rl_contracts\0x0444113cad736b6452c824c642fed8a4df1c4a34.sol:22

oneSale[] public sales

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sell(string,string,uint256,uint256), txdata: 0x516b6d07000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000210800026000000000008080002040400080020100810001000020040004008100020000801021, value: 0x0
Caller: [ATTACKER], function: sales(uint256), txdata: 0xb5f522f70000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EtherBuy
Function name: sales(uint256)
PC address: 4402
Estimated Gas Usage: 12650 - 17742
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: .\tests\testdata\rl_contracts\0x0444113cad736b6452c824c642fed8a4df1c4a34.sol:22

oneSale[] public sales

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sell(string,string,uint256,uint256), txdata: 0x516b6d070000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025020202020202020203010602039002010985261102001105400328031300050440021002533080024241, value: 0x0
Caller: [ATTACKER], function: sales(uint256), txdata: 0xb5f522f70000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherBuy
Function name: buy(uint256,string)
PC address: 4537
Estimated Gas Usage: 1465 - 4242
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: .\tests\testdata\rl_contracts\0x0444113cad736b6452c824c642fed8a4df1c4a34.sol:42

function buy(uint SaleID, string memory message) public payable {
		require(sales[SaleID].available);
		require(msg.value==sales[SaleID].price+sales[SaleID].locked);

		buys[SaleID].push(oneBuy(
			msg.sender,
			message,
			false,
			false,
			"",
			""
		));

		sales[SaleID].seller.transfer(sales[SaleID].price);
		
		emit BuyEvent(SaleID, message);
	}

--------------------
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: buy(uint256,string), txdata: 0xb7dc3b1800000020400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006, decoded_data: (869458280015608133378011236556383089224797907626933462515591430537216, ''), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherBuy
Function name: buys(uint256,uint256)
PC address: 5397
Estimated Gas Usage: 1223 - 1508
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: .\tests\testdata\rl_contracts\0x0444113cad736b6452c824c642fed8a4df1c4a34.sol:23

mapping(uint => oneBuy[]) public buys

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: buys(uint256,uint256), txdata: 0xd246780c00000000000000200000000800012008100000400001008000000080012000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (200867255544065822632474359823596508178562073344522475012096, 0), value: 0x0


#@time
time used(s):11912.114519357681
