++++ 0x2B6D87F12B106E1D3fA7137494751566329d1045.sol  :  0.5.4  :  TransferManager ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 13384
['constructor']:writes at the last depth:['0', '1', '4', '8', '9', '6', '7', '10']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 44.08% coverage.
dynamic svars:['41', '2', '3', '5']
static svars:['4', '9', '7', '8', '6', '10', '1', '0']
Ending preprocessing.
preprocessing time(s): 103.79292893409729
contract coverage: 78.44%
getPendingLimit(address) is not reachable
getCurrentLimit(address) is not reachable
isLimitDisabled(address) is not reachable
getDailyUnspent(address) is not reachable
recoverToken(address) is not reachable
Function Reads: State variables read in conditions
	defaultLimit():[]
	removeFromWhitelist(address,address):[]
	isLimitDisabled(address):[]
	callContract(address,address,uint256,bytes):[]
	priceProvider():[]
	relayer(address):[]
	isOnlyOwnerModule():[]
	getPendingTransfer(address,bytes32):[]
	execute(address,bytes,uint256,bytes,uint256,uint256):[]
	changeLimit(address,uint256):[]
	cancelPendingTransfer(address,bytes32):[]
	isWhitelisted(address,address):[]
	transferStorage():[]
	recoverToken(address):[]
	getPendingLimit(address):[]
	disableLimit(address):[]
	executePendingTransfer(address,address,address,uint256,bytes,uint256):[]
	getDailyUnspent(address):[]
	securityPeriod():[]
	oldLimitManager():[]
	transferToken(address,address,address,uint256,bytes):[]
	getCurrentLimit(address):[]
	addToWhitelist(address,address):[]
	addModule(address,address):[]
	isValidSignature(bytes32,bytes):[]
	init(address):[]
	isValidSignature(bytes,bytes):[]
	getNonce(address):[]
	securityWindow():[]
	approveTokenAndCallContract(address,address,address,uint256,bytes):[]
	approveToken(address,address,address,uint256):[]
Function Writes: State variables written
============================
iteration:3
targets:['getPendingLimit(address)', 'getCurrentLimit(address)', 'isLimitDisabled(address)', 'getDailyUnspent(address)', 'recoverToken(address)']
['isWhitelisted(address,address)']:writes at the last depth:[]
['isWhitelisted(address,address)']:writes at the last depth:[]
['recoverToken(address)']:writes at the last depth:[]
['addModule(address,address)']:writes at the last depth:[]
['init(address)']:writes at the last depth:['3']
['changeLimit(address,uint256)']:writes at the last depth:['3']
['removeFromWhitelist(address,address)']:writes at the last depth:[]
['disableLimit(address)']:writes at the last depth:['3']
['addToWhitelist(address,address)']:writes at the last depth:[]
['addToWhitelist(address,address)']:writes at the last depth:[]
['init(address)']:writes at the last depth:['3']
['init(address)']:writes at the last depth:['3']
['init(address)']:writes at the last depth:['3']
['init(address)']:writes at the last depth:['3']
['init(address)']:writes at the last depth:['3']
['init(address)']:writes at the last depth:['3']
['init(address)']:writes at the last depth:['3']
['init(address)']:writes at the last depth:['3']
['init(address)']:writes at the last depth:['3']
contract coverage: 80.65%
============================
iteration:4
['init(address)', 'isWhitelisted(address,address)']:writes at the last depth:[]
['init(address)', 'isWhitelisted(address,address)']:writes at the last depth:[]
['init(address)', 'recoverToken(address)']:writes at the last depth:[]
['init(address)', 'addModule(address,address)']:writes at the last depth:[]
['init(address)', 'changeLimit(address,uint256)']:writes at the last depth:['3']
['init(address)', 'removeFromWhitelist(address,address)']:writes at the last depth:[]
['init(address)', 'disableLimit(address)']:writes at the last depth:['3']
['init(address)', 'changeLimit(address,uint256)']:writes at the last depth:['3']
['init(address)', 'changeLimit(address,uint256)']:writes at the last depth:['3']
['init(address)', 'disableLimit(address)']:writes at the last depth:['3']
['init(address)', 'disableLimit(address)']:writes at the last depth:['3']
['init(address)', 'addToWhitelist(address,address)']:writes at the last depth:[]
['init(address)', 'addToWhitelist(address,address)']:writes at the last depth:[]
['init(address)', 'init(address)']:writes at the last depth:[]
['init(address)', 'init(address)']:writes at the last depth:['3']
['init(address)', 'init(address)']:writes at the last depth:['3']
['init(address)', 'init(address)']:writes at the last depth:['3']
['init(address)', 'init(address)']:writes at the last depth:['3']
['init(address)', 'init(address)']:writes at the last depth:['3']
['init(address)', 'init(address)']:writes at the last depth:['3']
['init(address)', 'init(address)']:writes at the last depth:['3']
['init(address)', 'init(address)']:writes at the last depth:['3']
['init(address)', 'init(address)']:writes at the last depth:['3']
contract coverage: 80.65%
============================
iteration:5
['init(address)', 'init(address)', 'isWhitelisted(address,address)']:writes at the last depth:[]
['init(address)', 'init(address)', 'isWhitelisted(address,address)']:writes at the last depth:[]
['init(address)', 'init(address)', 'recoverToken(address)']:writes at the last depth:[]
['init(address)', 'init(address)', 'addModule(address,address)']:writes at the last depth:[]
['init(address)', 'init(address)', 'changeLimit(address,uint256)']:writes at the last depth:['3']
['init(address)', 'init(address)', 'removeFromWhitelist(address,address)']:writes at the last depth:[]
['init(address)', 'init(address)', 'disableLimit(address)']:writes at the last depth:['3']
['init(address)', 'init(address)', 'changeLimit(address,uint256)']:writes at the last depth:['3']
['init(address)', 'init(address)', 'changeLimit(address,uint256)']:writes at the last depth:['3']
['init(address)', 'init(address)', 'disableLimit(address)']:writes at the last depth:['3']
['init(address)', 'init(address)', 'disableLimit(address)']:writes at the last depth:['3']
['init(address)', 'init(address)', 'addToWhitelist(address,address)']:writes at the last depth:[]
['init(address)', 'init(address)', 'addToWhitelist(address,address)']:writes at the last depth:[]
['init(address)', 'init(address)', 'init(address)']:writes at the last depth:[]
['init(address)', 'init(address)', 'init(address)']:writes at the last depth:['3']
['init(address)', 'init(address)', 'init(address)']:writes at the last depth:['3']
['init(address)', 'init(address)', 'init(address)']:writes at the last depth:['3']
['init(address)', 'init(address)', 'init(address)']:writes at the last depth:['3']
['init(address)', 'init(address)', 'init(address)']:writes at the last depth:['3']
['init(address)', 'init(address)', 'init(address)']:writes at the last depth:['3']
['init(address)', 'init(address)', 'init(address)']:writes at the last depth:['3']
['init(address)', 'init(address)', 'init(address)']:writes at the last depth:['3']
['init(address)', 'init(address)', 'init(address)']:writes at the last depth:['3']
contract coverage: 80.65%
============================
iteration:6
['init(address)', 'init(address)', 'init(address)', 'isWhitelisted(address,address)']:writes at the last depth:[]
['init(address)', 'init(address)', 'init(address)', 'isWhitelisted(address,address)']:writes at the last depth:[]
['init(address)', 'init(address)', 'init(address)', 'recoverToken(address)']:writes at the last depth:[]
['init(address)', 'init(address)', 'init(address)', 'addModule(address,address)']:writes at the last depth:[]
['init(address)', 'init(address)', 'init(address)', 'removeFromWhitelist(address,address)']:writes at the last depth:[]
['init(address)', 'init(address)', 'init(address)', 'changeLimit(address,uint256)']:writes at the last depth:['3']
['init(address)', 'init(address)', 'init(address)', 'changeLimit(address,uint256)']:writes at the last depth:['3']
['init(address)', 'init(address)', 'init(address)', 'disableLimit(address)']:writes at the last depth:['3']
['init(address)', 'init(address)', 'init(address)', 'disableLimit(address)']:writes at the last depth:['3']
contract coverage: 80.65%
============================
iteration:7
contract coverage: 80.65%
============================
iteration:8
contract coverage: 80.65%
============================
iteration:9
contract coverage: 80.65%
============================
iteration:10
contract coverage: 80.65%
============================
iteration:11
contract coverage: 80.65%
============================
iteration:12
contract coverage: 80.65%
============================
iteration:13
contract coverage: 80.65%
============================
iteration:14
contract coverage: 80.65%
============================
iteration:15
contract coverage: 80.65%
============================
iteration:16
contract coverage: 80.65%
============================
iteration:17
contract coverage: 80.65%
============================
iteration:18
contract coverage: 80.65%
============================
iteration:19
contract coverage: 80.65%
============================
iteration:20
contract coverage: 80.65%
============================
iteration:21
contract coverage: 80.65%
============================
iteration:22
contract coverage: 80.65%
============================
iteration:23
contract coverage: 80.65%
============================
iteration:24
contract coverage: 80.65%
============================
iteration:25
contract coverage: 80.65%
============================
iteration:26
contract coverage: 80.65%
============================
iteration:27
contract coverage: 80.65%
============================
iteration:28
contract coverage: 80.65%
============================
iteration:29
contract coverage: 80.65%
============================
iteration:30
contract coverage: 80.65%
============================
iteration:31
contract coverage: 80.65%
============================
iteration:32
contract coverage: 80.65%
============================
iteration:33
contract coverage: 80.65%
============================
iteration:34
contract coverage: 80.65%
============================
iteration:35
contract coverage: 80.65%
============================
iteration:36
contract coverage: 80.65%
============================
iteration:37
contract coverage: 80.65%
============================
iteration:38
contract coverage: 80.65%
============================
iteration:39
contract coverage: 80.65%
============================
iteration:40
contract coverage: 80.65%
============================
iteration:41
contract coverage: 80.65%
============================
iteration:42
contract coverage: 80.65%
============================
iteration:43
contract coverage: 80.65%
============================
iteration:44
contract coverage: 80.65%
============================
iteration:45
contract coverage: 80.65%
============================
iteration:46
contract coverage: 80.65%
============================
iteration:47
contract coverage: 80.65%
============================
iteration:48
contract coverage: 80.65%
============================
iteration:49
contract coverage: 80.65%
============================
iteration:50
contract coverage: 80.65%
============================
iteration:51
contract coverage: 80.65%
============================
iteration:52
contract coverage: 80.65%
============================
iteration:53
contract coverage: 80.65%
============================
iteration:54
contract coverage: 80.65%
============================
iteration:55
contract coverage: 80.65%
============================
iteration:56
contract coverage: 80.65%
============================
iteration:57
contract coverage: 80.65%
============================
iteration:58
contract coverage: 80.65%
============================
iteration:59
contract coverage: 80.65%
============================
iteration:60
contract coverage: 80.65%
============================
iteration:61
contract coverage: 80.65%
============================
iteration:62
contract coverage: 80.65%
============================
iteration:63
contract coverage: 80.65%
============================
iteration:64
contract coverage: 80.65%
============================
iteration:65
contract coverage: 80.65%
============================
iteration:66
contract coverage: 80.65%
============================
iteration:67
contract coverage: 80.65%
============================
iteration:68
contract coverage: 80.65%
#@statespace
9225 nodes, 9224 edges, 185553 total states
#@coverage
Achieved 2.03% coverage for code: 
#@coverage
Achieved 80.65% coverage for code: 608060405234801561001057600080fd5b5060043610610201576000357c010000000000000000000000000000000000000000000000000000000090048063961bfeee1161012c578063b888879e116100bf578063e26b013b1161008e578063e26b013b14610f28578063f8d3277d14610f46578063f9f6499e14610faa578063fd6ac3091461100657610201565b8063b888879e14610db4578063c9b5ef8e14610dfe578063d490da4d14610e56578063e1ee38ec14610eb257610201565b8063aacaaf88116100fb578063aacaaf8814610b78578063b20f3f3714610c9c578063b377a9d514610cea578063b6b3527214610d3857610201565b8063961bfeee14610a335780639be65a6014610a7d578063a0aec10514610ac1578063a3411c0a14610b3457610201565b80632df546f4116101a45780635ed4bf81116101735780635ed4bf811461086b5780637cb8f8ba146109585780637cc0d906146109cb57806395813db4146109e957610201565b80632df546f41461066857806343cd5c7e1461074b57806357518243146107a35780635a1db8c41461080757610201565b80631626ba7e116101e05780631626ba7e1461039557806319ab453c146104ac57806320c13b0b146104f05780632d0335ab1461061057610201565b80626fda351461020657806309d22c8e1461022457806312ef080d14610307575b600080fd5b61020e6110c9565b6040518082815260200191505060405180910390f35b610305600480360360a081101561023a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156102c157600080fd5b8201836020820111156102d357600080fd5b803590602001918460018302840111640100000000831117156102f557600080fd5b90919293919293905050506110cf565b005b6103936004803603608081101561031d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116ac565b005b610458600480360360408110156103ab57600080fd5b8101908080359060200190929190803590602001906401000000008111156103d257600080fd5b8201836020820111156103e457600080fd5b8035906020019184600183028401116401000000008311171561040657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611b96565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6104ee600480360360208110156104c257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cde565b005b6105bc6004803603604081101561050657600080fd5b810190808035906020019064010000000081111561052357600080fd5b82018360208201111561053557600080fd5b8035906020019184600183028401116401000000008311171561055757600080fd5b90919293919293908035906020019064010000000081111561057857600080fd5b82018360208201111561058a57600080fd5b803590602001918460018302840111640100000000831117156105ac57600080fd5b9091929391929390505050612652565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6106526004803603602081101561062657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612717565b6040518082815260200191505060405180910390f35b610749600480360360a081101561067e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561070557600080fd5b82018360208201111561071757600080fd5b8035906020019184600183028401116401000000008311171561073957600080fd5b9091929391929390505050612763565b005b61078d6004803603602081101561076157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612cd6565b6040518082815260200191505060405180910390f35b610805600480360360408110156107b957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d9a565b005b6108696004803603604081101561081d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506131c7565b005b610956600480360360c081101561088157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561090857600080fd5b82018360208201111561091a57600080fd5b8035906020019184600183028401116401000000008311171561093c57600080fd5b90919293919293908035906020019092919050505061348d565b005b61099a6004803603602081101561096e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613944565b604051808381526020018267ffffffffffffffff1667ffffffffffffffff1681526020019250505060405180910390f35b6109d3613a69565b6040518082815260200191505060405180910390f35b6109f1613a6f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610a3b613a95565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610abf60048036036020811015610a9357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613abb565b005b610b0360048036036020811015610ad757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613c97565b604051808381526020018267ffffffffffffffff1667ffffffffffffffff1681526020019250505060405180910390f35b610b7660048036036020811015610b4a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613d6e565b005b610c82600480360360c0811015610b8e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610bcb57600080fd5b820183602082011115610bdd57600080fd5b80359060200191846001830284011164010000000083111715610bff57600080fd5b90919293919293908035906020019092919080359060200190640100000000811115610c2a57600080fd5b820183602082011115610c3c57600080fd5b80359060200191846001830284011164010000000083111715610c5e57600080fd5b90919293919293908035906020019092919080359060200190929190505050613f83565b604051808215151515815260200191505060405180910390f35b610ce860048036036040811015610cb257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050614303565b005b610d3660048036036040811015610d0057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061451a565b005b610d9a60048036036040811015610d4e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061488a565b604051808215151515815260200191505060405180910390f35b610dbc6149d1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610e4060048036036020811015610e1457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506149f7565b6040518082815260200191505060405180910390f35b610e5e614a15565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b610efe60048036036040811015610ec857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050614a40565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b610f30614a9e565b6040518082815260200191505060405180910390f35b610fa860048036036040811015610f5c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614aa4565b005b610fec60048036036020811015610fc057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614e98565b604051808215151515815260200191505060405180910390f35b6110c76004803603608081101561101c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561108357600080fd5b82018360208201111561109557600080fd5b803590602001918460018302840111640100000000831117156110b757600080fd5b9091929391929390505050614ee3565b005b60075481565b853073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611110575061110f8133615210565b5b1515611167576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180616f7d6023913960400191505060405180910390fd5b86600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a4fbeec826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561122357600080fd5b505afa158015611237573d6000803e3d6000fd5b505050506040513d602081101561124d57600080fd5b81019080805190602001909291905050501515156112d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f424d3a2077616c6c6574206d75737420626520756e6c6f636b6564000000000081525060200191505060405180910390fd5b6112dd88876152e5565b6112e7888761488a565b1561134e576112f88888888861557b565b6113498887600087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506156ef565b6116a2565b60008773ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e8a896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561141d57600080fd5b505afa158015611431573d6000803e3d6000fd5b505050506040513d602081101561144757600080fd5b8101908080519060200190929190505050905080861115156114b9576114b48988600088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506156ef565b6116a0565b600081870390506000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce55c852838c6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561158557600080fd5b505afa158015611599573d6000803e3d6000fd5b505050506040513d60208110156115af57600080fd5b810190808051906020019092919050505090506115cc8b826157d4565b1515611640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f544d3a20417070726f76652061626f7665206461696c79206c696d697400000081525060200191505060405180910390fd5b61164c8b8b8b8b61557b565b61169d8b8a60008a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506156ef565b50505b505b5050505050505050565b833073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806116ed57506116ec8133615210565b5b1515611744576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180616f7d6023913960400191505060405180910390fd5b84600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a4fbeec826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561180057600080fd5b505afa158015611814573d6000803e3d6000fd5b505050506040513d602081101561182a57600080fd5b81019080805190602001909291905050501515156118b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f424d3a2077616c6c6574206d75737420626520756e6c6f636b6564000000000081525060200191505060405180910390fd5b6118ba868561488a565b156118d0576118cb8686868661557b565b611b8e565b60008573ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e88876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561199f57600080fd5b505afa1580156119b3573d6000803e3d6000fd5b505050506040513d60208110156119c957600080fd5b8101908080519060200190929190505050905080841115156119f6576119f18787878761557b565b611b8c565b600081850390506000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce55c852838a6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015611ac257600080fd5b505afa158015611ad6573d6000803e3d6000fd5b505050506040513d6020811015611aec57600080fd5b81019080805190602001909291905050509050611b0989826157d4565b1515611b7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f544d3a20417070726f76652061626f7665206461696c79206c696d697400000081525060200191505060405180910390fd5b611b898989898961557b565b50505b505b505050505050565b600060418251141515611c11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f544d3a20696e76616c6964207369676e6174757265206c656e6774680000000081525060200191505060405180910390fd5b6000611c1f848460006158d9565b9050611c2b3382615210565b1515611c9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f544d3a20496e76616c6964207369676e6572000000000000000000000000000081525060200191505060405180910390fd5b60405180807f697356616c69645369676e617475726528627974657333322c62797465732900815250601f019050604051809103902091505092915050565b808073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d82576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f424d3a2063616c6c6572206d7573742062652077616c6c65740000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166313da30b23060405180807f697356616c69645369676e61747572652862797465732c627974657329000000815250601d01905060405180910390206040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200192505050600060405180830381600087803b158015611e9857600080fd5b505af1158015611eac573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166313da30b23060405180807f697356616c69645369676e617475726528627974657333322c62797465732900815250601f01905060405180910390206040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200192505050600060405180830381600087803b158015611fc657600080fd5b505af1158015611fda573d6000803e3d6000fd5b50505050600073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156120435761203e82615999565b61264e565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343cd5c7e846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561210057600080fd5b505afa158015612114573d6000803e3d6000fd5b505050506040513d602081101561212a57600080fd5b81019080805190602001909291905050509050600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a0aec105866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b1580156121fa57600080fd5b505afa15801561220e573d6000803e3d6000fd5b505050506040513d604081101561222457600080fd5b8101908080519060200190929190805190602001909291905050509150915060008314801561225d575060008167ffffffffffffffff16145b156122735761226b85615999565b50505061264e565b818314156122fc5782600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550612439565b606060405190810160405280846fffffffffffffffffffffffffffffffff168152602001836fffffffffffffffffffffffffffffffff1681526020018267ffffffffffffffff16815250600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050505b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cb8f8ba886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b1580156124f657600080fd5b505afa15801561250a573d6000803e3d6000fd5b505050506040513d604081101561252057600080fd5b81019080805190602001909291908051906020019092919050505091509150428167ffffffffffffffff16111561264857604080519081016040528061256f8488615b2f90919063ffffffff16565b6fffffffffffffffffffffffffffffffff1681526020018267ffffffffffffffff16815250600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050505b50505050505b5050565b60008085856040516020018083838082843780830192505050925050506040516020818303038152906040528051906020012090506126d58185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611b96565b5060405180807f697356616c69645369676e61747572652862797465732c627974657329000000815250601d0190506040518091039020915050949350505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b853073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806127a457506127a38133615210565b5b15156127fb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180616f7d6023913960400191505060405180910390fd5b86600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a4fbeec826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156128b757600080fd5b505afa1580156128cb573d6000803e3d6000fd5b505050506040513d60208110156128e157600080fd5b8101908080519060200190929190505050151515612967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f424d3a2077616c6c6574206d75737420626520756e6c6f636b6564000000000081525060200191505060405180910390fd5b612971888761488a565b156129cc576129c78888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050615b51565b612ccc565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614612b1857600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce55c852878a6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015612ad857600080fd5b505afa158015612aec573d6000803e3d6000fd5b505050506040513d6020811015612b0257600080fd5b8101908080519060200190929190505050612b1a565b855b9050612b2689826157d4565b15612b8157612b7c8989898989898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050615b51565b612cca565b600080612bd760008c8c8c8c8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050615d97565b9150915080828c73ffffffffffffffffffffffffffffffffffffffff167fc63146cfd39cd6097f6e314e8595c4554faf95175b45c6215517903c12e765d98d8d8d8d8d604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050965050505050505060405180910390a450505b505b5050505050505050565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019050612d808160000160009054906101000a90046fffffffffffffffffffffffffffffffff168260000160109054906101000a90046fffffffffffffffffffffffffffffffff168360010160009054906101000a900467ffffffffffffffff16616023565b6fffffffffffffffffffffffffffffffff16915050919050565b813073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612ddb5750612dda8133615210565b5b1515612e32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180616f7d6023913960400191505060405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a4fbeec826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612eee57600080fd5b505afa158015612f02573d6000803e3d6000fd5b505050506040513d6020811015612f1857600080fd5b8101908080519060200190929190505050151515612f9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f424d3a2077616c6c6574206d75737420626520756e6c6f636b6564000000000081525060200191505060405180910390fd5b612fa8848461488a565b15151561301d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f54543a2074617267657420616c72656164792077686974656c6973746564000081525060200191505060405180910390fd5b60006130346006544261605f90919063ffffffff16565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166380bfbe688686846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561312f57600080fd5b505af1158015613143573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f1f57f9641d3e8733ed672fef5ac85464bd7215ef2f21e83428e8408248b13dcd83604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390a35050505050565b813073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061320857506132078133615210565b5b151561325f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180616f7d6023913960400191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630bcd4ebb836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561331957600080fd5b505afa15801561332d573d6000803e3d6000fd5b505050506040513d602081101561334357600080fd5b810190808051906020019092919050505015156133c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f424d3a206d6f64756c65206973206e6f7420726567697374657265640000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16631f17732d8360016040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018215151515815260200192505050600060405180830381600087803b15801561347057600080fd5b505af1158015613484573d6000803e3d6000fd5b50505050505050565b86600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a4fbeec826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561354957600080fd5b505afa15801561355d573d6000803e3d6000fd5b505050506040513d602081101561357357600080fd5b81019080805190602001909291905050501515156135f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f424d3a2077616c6c6574206d75737420626520756e6c6f636b6564000000000081525060200191505060405180910390fd5b6000808888888888886040516020018088600081111561361557fe5b60ff167f01000000000000000000000000000000000000000000000000000000000000000281526001018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401858152602001848480828437808301925050508281526020019750505050505050506040516020818303038152906040528051906020012090506000600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008381526020019081526020016000205490506000811115156137cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f54543a20756e6b6e6f776e2070656e64696e67207472616e736665720000000081525060200191505060405180910390fd5b60006137e26007548361605f90919063ffffffff16565b90504282111580156137f45750804211155b151561384b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180616f51602c913960400191505060405180910390fd5b600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000848152602001908152602001600020600090556138f38b8b8b8b8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050615b51565b828b73ffffffffffffffffffffffffffffffffffffffff167f53d984c4cd3917405bdcc3baabad7c1269dd3baf7c2c53ca571d8d7de9629bc960405160405180910390a35050505050505050505050565b600080600061395284612cd6565b90506000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020190508060000160109054906101000a900467ffffffffffffffff1667ffffffffffffffff164211156139d4578193506201518042019250613a62565b8060000160109054906101000a900467ffffffffffffffff169250818160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff161015613a61578060000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16820393505b5b5050915091565b60065481565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015613b5657600080fd5b505afa158015613b6a573d6000803e3d6000fd5b505050506040513d6020811015613b8057600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613c5757600080fd5b505af1158015613c6b573d6000803e3d6000fd5b505050506040513d6020811015613c8157600080fd5b8101908080519060200190929190505050505050565b6000806000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190508060010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff164210613d1757600080819150809050613d64565b8060000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168160010160009054906101000a900467ffffffffffffffff165b9250925050915091565b803073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480613daf5750613dae8133615210565b5b1515613e06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180616f7d6023913960400191505060405180910390fd5b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a4fbeec826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015613ec257600080fd5b505afa158015613ed6573d6000803e3d6000fd5b505050506040513d6020811015613eec57600080fd5b8101908080519060200190929190505050151515613f72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f424d3a2077616c6c6574206d75737420626520756e6c6f636b6564000000000081525060200191505060405180910390fd5b613f7e83600654616080565b505050565b6000805a90506000613fdf308c60008d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508c8a8a6160c1565b9050613fec8b8983616316565b1515614060576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f524d3a204475706c69636174652072657175657374000000000000000000000081525060200191505060405180910390fd5b6140ae8b8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061632b565b1515614105576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604a815260200180616ee4604a913960600191505060405180910390fd5b60006141558c8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506163e8565b9050878790506041820214156142a3576141718c8688846163f4565b156142a257600081148061421557506142148c8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050848b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050616549565b5b156142a1573073ffffffffffffffffffffffffffffffffffffffff168b8b6040518083838082843780830192505050925050506000604051808303816000865af19150503d8060008114614285576040519150601f19603f3d011682016040523d82523d6000602084013e61428a565b606091505b5050809450506142a08c5a85038888853361656f565b5b5b5b8315158c73ffffffffffffffffffffffffffffffffffffffff167f6bb0b384ce772133df63560651bc8c727c53306cec1d51e2cbf8ea35fb8f2ec1846040518082815260200191505060405180910390a350505098975050505050505050565b813073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061434457506143438133615210565b5b151561439b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180616f7d6023913960400191505060405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a4fbeec826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561445757600080fd5b505afa15801561446b573d6000803e3d6000fd5b505050506040513d602081101561448157600080fd5b8101908080519060200190929190505050151515614507576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f424d3a2077616c6c6574206d75737420626520756e6c6f636b6564000000000081525060200191505060405180910390fd5b61451484846006546165e3565b50505050565b813073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061455b575061455a8133615210565b5b15156145b2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180616f7d6023913960400191505060405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a4fbeec826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561466e57600080fd5b505afa158015614682573d6000803e3d6000fd5b505050506040513d602081101561469857600080fd5b810190808051906020019092919050505015151561471e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f424d3a2077616c6c6574206d75737420626520756e6c6f636b6564000000000081525060200191505060405180910390fd5b6000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000858152602001908152602001600020541115156147e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f54543a20756e6b6e6f776e2070656e64696e6720616374696f6e00000000000081525060200191505060405180910390fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600084815260200190815260200160002060009055828473ffffffffffffffffffffffffffffffffffffffff167f2914460f2e2359d06bcda666d815164a8e77d104644dfbe6360885abfa2da59c60405160405180910390a350505050565b600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166313f4a0ea85856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561497c57600080fd5b505afa158015614990573d6000803e3d6000fd5b505050506040513d60208110156149a657600080fd5b810190808051906020019092919050505090506000811180156149c857504281105b91505092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090508060000154905081565b600063d490da4d7c010000000000000000000000000000000000000000000000000000000002905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600083815260200190815260200160002054905092915050565b60045481565b813073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480614ae55750614ae48133615210565b5b1515614b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180616f7d6023913960400191505060405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a4fbeec826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015614bf857600080fd5b505afa158015614c0c573d6000803e3d6000fd5b505050506040513d6020811015614c2257600080fd5b8101908080519060200190929190505050151515614ca8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f424d3a2077616c6c6574206d75737420626520756e6c6f636b6564000000000081525060200191505060405180910390fd5b614cb2848461488a565b1515614d26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f54543a20746172676574206e6f742077686974656c697374656400000000000081525060200191505060405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166380bfbe68858560006040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015614e2057600080fd5b505af1158015614e34573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fd288ab5da2e1f37cf384a1565a3f905ad289b092fbdd31950dbbfef148c04f8860405160405180910390a350505050565b600080614ea483612cd6565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff168114915050919050565b843073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480614f245750614f238133615210565b5b1515614f7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180616f7d6023913960400191505060405180910390fd5b85600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a4fbeec826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561503757600080fd5b505afa15801561504b573d6000803e3d6000fd5b505050506040513d602081101561506157600080fd5b81019080805190602001909291905050501515156150e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f424d3a2077616c6c6574206d75737420626520756e6c6f636b6564000000000081525060200191505060405180910390fd5b6150f187876152e5565b6150fb878761488a565b156151555761515087878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506156ef565b615207565b61515f87866157d4565b15156151b6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180616f2e6023913960400191505060405180910390fd5b61520687878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506156ef565b5b50505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561528b57600080fd5b505afa15801561529f573d6000803e3d6000fd5b505050506040513d60208110156152b557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614905092915050565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156153f257508173ffffffffffffffffffffffffffffffffffffffff1663d6eb1bbf826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156153b557600080fd5b505afa1580156153c9573d6000803e3d6000fd5b505050506040513d60208110156153df57600080fd5b8101908080519060200190929190505050155b801561550357506000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663837479c9836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156154b657600080fd5b505afa1580156154ca573d6000803e3d6000fd5b505050506040513d60208110156154e057600080fd5b81019080805190602001909291905050501480615502575061550182614e98565b5b5b1515615577576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f544d3a20466f7262696464656e20636f6e74726163740000000000000000000081525060200191505060405180910390fd5b5050565b60608282604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040527f095ea7b3000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061564e85856000846167e6565b508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fdc47705473b4a899de6e16a740ecc86f2a65dc7dbb9eadd0a06ce5421a44e2308486604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a35050505050565b6156fb848484846167e6565b508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fbfbd7fb6c6d7dd1ef01d18a7e98333f084363d82d5ce600328e8b941a53d665484846040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015615793578082015181840152602081019050615778565b50505050905090810190601f1680156157c05780820380516001836020036101000a031916815260200191505b50935050505060405180910390a350505050565b6000808214156157e757600190506158d3565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001905060006158928260000160009054906101000a90046fffffffffffffffffffffffffffffffff168360000160109054906101000a90046fffffffffffffffffffffffffffffffff168460010160009054906101000a900467ffffffffffffffff16616023565b90506158b185826fffffffffffffffffffffffffffffffff1686616aea565b156158cc576158c1858286616c60565b6001925050506158d3565b6000925050505b92915050565b60008060008084604102602001860151915084604102604001860151905060ff85604102604101870151169250601b8360ff16148061591b5750601c8360ff16145b151561592657600080fd5b60018784848460405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015615983573d6000803e3d6000fd5b5050506020604051035193505050509392505050565b808073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515615a3d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f424d3a2063616c6c6572206d7573742062652077616c6c65740000000000000081525060200191505060405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001905060008160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16148015615ae7575060008160010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16145b15615b2a576004548160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b505050565b6000828211151515615b4057600080fd5b600082840390508091505092915050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415615bbb57615bb585848460206040519081016040528060008152506167e6565b50615c91565b60608383604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050615c8e86866000846167e6565b50505b818473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fd5c97f2e041b2046be3b4337472f05720760a198f4d7d84980b7155eec7cca6f8685604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015615d55578082015181840152602081019050615d3a565b50505050905090810190601f168015615d825780820380516001836020036101000a031916815260200191505b50935050505060405180910390a45050505050565b60008087868686864360405160200180876000811115615db357fe5b60ff167f01000000000000000000000000000000000000000000000000000000000000000281526001018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140184815260200183805190602001908083835b602083101515615e965780518252602082019150602081019050602083039250615e71565b6001836020036101000a03801982511681845116808217855250505050505090500182815260200196505050505050506040516020818303038152906040528051906020012091506000600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600084815260200190815260200160002054141515615fa9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f544d3a206475706c69636174652070656e64696e6720616374696f6e0000000081525060200191505060405180910390fd5b615fbe6006544261605f90919063ffffffff16565b905080600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600084815260200190815260200160002081905550965096945050505050565b6000808267ffffffffffffffff161180156160475750428267ffffffffffffffff16105b1561605457829050616058565b8390505b9392505050565b600080828401905083811015151561607657600080fd5b8091505092915050565b6160bd827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff16836165e3565b5050565b600060197f01000000000000000000000000000000000000000000000000000000000000000260007f01000000000000000000000000000000000000000000000000000000000000000289898989898989604051602001808a7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101897effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526001018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140186815260200185805190602001908083835b6020831015156162665780518252602082019150602081019050602083039250616241565b6001836020036101000a03801982511681845116808217855250505050505090500184815260200183815260200182815260200199505050505050505050506040516020818303038152906040528051906020012060405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050979650505050505050565b60006163228484616df1565b90509392505050565b600060248251101515156163a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f524d3a20496e76616c6964206461746157616c6c65740000000000000000000081525060200191505060405180910390fd5b6000602483015190508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161491505092915050565b60006001905092915050565b600080831180156164055750600082115b801561652e57508284028573ffffffffffffffffffffffffffffffffffffffff1631108061644b5750600015156164478661643f88612cd6565b868802616aea565b1515145b8061652d5750600015158573ffffffffffffffffffffffffffffffffffffffff1663d6eb1bbf306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156164ee57600080fd5b505afa158015616502573d6000803e3d6000fd5b505050506040513d602081101561651857600080fd5b81019080805190602001909291905050501515145b5b1561653c5760009050616541565b600190505b949350505050565b600080616558848460006158d9565b90506165648682615210565b915050949350505050565b600085618f080190506000851180156165885750600083115b80156165945750838111155b156165da573a8511156165ab573a810290506165b1565b84810290505b6165bb87826157d4565b506165d887838360206040519081016040528060008152506167e6565b505b50505050505050565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190506000808260010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1611801561667d5750428260010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16105b6166a7578160000160009054906101000a90046fffffffffffffffffffffffffffffffff166166c9565b8160000160109054906101000a90046fffffffffffffffffffffffffffffffff165b9050808260000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550838260000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550616754834261605f90919063ffffffff16565b8260010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550616791834261605f90919063ffffffff16565b67ffffffffffffffff16848673ffffffffffffffffffffffffffffffffffffffff167f8a747eae44b6307d1b112c127968367d02d9f52ffef8533b3e899983ff2b1d4a60405160405180910390a45050505050565b606060008573ffffffffffffffffffffffffffffffffffffffff16858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561687f578082015181840152602081019050616864565b50505050905090810190601f1680156168ac5780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040527f8f6f0332000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831015156169655780518252602082019150602081019050602083039250616940565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146169c7576040519150601f19603f3d011682016040523d82523d6000602084013e6169cc565b606091505b5080935081925050508080156169e3575060008251115b15616a57578180602001905160208110156169fd57600080fd5b810190808051640100000000811115616a1557600080fd5b82810190506020810184811115616a2b57600080fd5b8151856001820283011164010000000082111715616a4857600080fd5b50509291905050509150616ae1565b600082511115616a6b573d6000803e3d6000fd5b801515616ae0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f424d3a2077616c6c657420696e766f6b6520726576657274656400000000000081525060200191505060405180910390fd5b5b50949350505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff16831415616b2f5760019050616c59565b6000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019050428160000160109054906101000a900467ffffffffffffffff1667ffffffffffffffff161015616bab5783831115915050616c59565b83838260000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff160111158015616c5557508060000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16838260000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff160110155b9150505b9392505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff16141515616dec576000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019050428160000160109054906101000a900467ffffffffffffffff1667ffffffffffffffff161015616d8d576201518042018160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550818160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550616dea565b818160000160008282829054906101000a90046fffffffffffffffffffffffffffffffff160192506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b505b505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015482111515616e475760009050616edd565b600060807fffffffffffffffffffffffffffffffff000000000000000000000000000000008416908060020a820491505090506127104301811115616e90576000915050616edd565b82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060019150505b9291505056fe524d3a207468652077616c6c657420617574686f72697a656420697320646966666572656e74207468656e2074686520746172676574206f66207468652072656c617965642064617461544d3a2043616c6c20636f6e74726163742061626f7665206461696c79206c696d697454543a207472616e73666572206f757473696465206f662074686520657865637574696f6e2077696e646f77424d3a206d75737420626520616e206f776e657220666f72207468652077616c6c6574a165627a7a72305820afa728cf18e2e3e98636c2e63f16394308238fe092611b284cba5e7356a9c3240029
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TransferManager
Function name: approveTokenAndCallContract(address,address,address,uint256,bytes)
PC address: 4844
Estimated Gas Usage: 11736 - 185631
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:847

if(isWhitelisted(_wallet, _contract)) {
            doApproveToken(_wallet, _token, _contract, _amount);
            doCallContract(_wallet, _contract, 0, _data);
        }
        else {
            
            uint256 currentAllowance = ERC20(_token).allowance(address(_wallet), _contract);
            if(_amount <= currentAllowance) {
                
                doCallContract(_wallet, _contract, 0, _data);
            }
            else {
                
                uint delta = _amount - currentAllowance;
                uint256 deltaInEth = priceProvider.getEtherValue(delta, _token);
                require(checkAndUpdateDailySpent(_wallet, deltaInEth), "TM: Approve above daily limit");
                
                doApproveToken(_wallet, _token, _contract, _amount);
                doCallContract(_wallet, _contract, 0, _data);
            }
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: approveTokenAndCallContract(address,address,address,uint256,bytes), txdata: 0x09d22c8e000000000000000000000000000000000000000000000000000000000000005340808080028080010108800000012080080802001080100000200002004000080000000000000000000000002001020280400140808080800210044020020101800180a0204040100104022020045000002000202000401001040220200450000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TransferManager
Function name: approveToken(address,address,address,uint256)
PC address: 6335
Estimated Gas Usage: 7296 - 111737
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:785

if(isWhitelisted(_wallet, _spender)) {
            
            doApproveToken(_wallet, _token, _spender, _amount);
        }
        else {
            
            uint256 currentAllowance = ERC20(_token).allowance(address(_wallet), _spender);
            if(_amount <= currentAllowance) {
                
                doApproveToken(_wallet, _token, _spender, _amount);
            }
            else {
                
                uint delta = _amount - currentAllowance;
                uint256 deltaInEth = priceProvider.getEtherValue(delta, _token);
                require(checkAndUpdateDailySpent(_wallet, deltaInEth), "TM: Approve above daily limit");
                
                doApproveToken(_wallet, _token, _spender, _amount);
            }
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: approveToken(address,address,address,uint256), txdata: 0x12ef080d81040200000000000000000000000000000000000000010000000000000007c0008000028000001040082010000000000000000000000000000000000000000000000000000000000000000000010000000000000007c00000000000000000000000000000000000000000000000000000000000000005000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TransferManager
Function name: init(address)
PC address: 7835
Estimated Gas Usage: 42212 - 320349
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:711

_wallet.enableStaticCall(address(this), ERC721_ISVALIDSIGNATURE_BYTES)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c800000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TransferManager
Function name: init(address)
PC address: 8137
Estimated Gas Usage: 42212 - 320349
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:712

_wallet.enableStaticCall(address(this), ERC721_ISVALIDSIGNATURE_BYTES32)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c800000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TransferManager
Function name: init(address)
PC address: 8137
Estimated Gas Usage: 42212 - 320349
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:712

_wallet.enableStaticCall(address(this), ERC721_ISVALIDSIGNATURE_BYTES32)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c800000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 8188
Estimated Gas Usage: 42212 - 320349
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:715

oldLimitManager

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 8267
Estimated Gas Usage: 42212 - 320349
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:720

oldLimitManager

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 8518
Estimated Gas Usage: 42212 - 320349
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:721

oldLimitManager

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 8905
Estimated Gas Usage: 42212 - 320349
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:729

limits[address(_wallet)].limit.current = uint128(current)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 8950
Estimated Gas Usage: 42212 - 320349
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:729

limits[address(_wallet)].limit.current = uint128(current)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 9113
Estimated Gas Usage: 42212 - 320349
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:732

limits[address(_wallet)].limit = Limit(uint128(current), uint128(pending), changeAfter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 9158
Estimated Gas Usage: 42212 - 320349
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:732

limits[address(_wallet)].limit = Limit(uint128(current), uint128(pending), changeAfter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 9176
Estimated Gas Usage: 42212 - 320349
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:732

limits[address(_wallet)].limit = Limit(uint128(current), uint128(pending), changeAfter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 9221
Estimated Gas Usage: 42212 - 320349
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:732

limits[address(_wallet)].limit = Limit(uint128(current), uint128(pending), changeAfter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 9239
Estimated Gas Usage: 42212 - 320349
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:732

limits[address(_wallet)].limit = Limit(uint128(current), uint128(pending), changeAfter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 9268
Estimated Gas Usage: 42212 - 320349
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:732

limits[address(_wallet)].limit = Limit(uint128(current), uint128(pending), changeAfter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 9282
Estimated Gas Usage: 42212 - 320349
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:735

oldLimitManager

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TransferManager
Function name: init(address)
PC address: 9553
Estimated Gas Usage: 18246 - 213557
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:737

if(periodEnd > now) {
            limits[address(_wallet)].dailySpent = DailySpent(uint128(current.sub(unspent)), periodEnd);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453caa2682000000000000000002deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 9703
Estimated Gas Usage: 42212 - 320349
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:738

limits[address(_wallet)].dailySpent = DailySpent(uint128(current.sub(unspent)), periodEnd)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 9748
Estimated Gas Usage: 42212 - 320349
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:738

limits[address(_wallet)].dailySpent = DailySpent(uint128(current.sub(unspent)), periodEnd)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 9766
Estimated Gas Usage: 42212 - 320349
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:738

limits[address(_wallet)].dailySpent = DailySpent(uint128(current.sub(unspent)), periodEnd)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 9795
Estimated Gas Usage: 42212 - 320349
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:738

limits[address(_wallet)].dailySpent = DailySpent(uint128(current.sub(unspent)), periodEnd)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TransferManager
Function name: transferToken(address,address,address,uint256,bytes)
PC address: 10614
Estimated Gas Usage: 7427 - 111868
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:756

if(isWhitelisted(_wallet, _to)) {
            
            doTransfer(_wallet, _token, _to, _amount, _data);
        }
        else {
            uint256 etherAmount = (_token == ETH_TOKEN) ? _amount : priceProvider.getEtherValue(_amount, _token);
            if (checkAndUpdateDailySpent(_wallet, etherAmount)) {
                
                doTransfer(_wallet, _token, _to, _amount, _data);
            }
            else {
                
                (bytes32 id, uint256 executeAfter) = addPendingAction(ActionType.Transfer, _wallet, _token, _to, _amount, _data);
                emit PendingTransferCreated(address(_wallet), id, executeAfter, _token, _to, _amount, _data);
            }
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferToken(address,address,address,uint256,bytes), txdata: 0x2df546f41a000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TransferManager
Function name: addToWhitelist(address,address)
PC address: 12017
Estimated Gas Usage: 12246 - 152120
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:151

guardianStorage.isLocked(_wallet)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addToWhitelist(address,address), txdata: 0x57518243884aa76aa003a180400480508008041010ceda230bc1dee7e00400000000400080ffffffff01ffffffffffff0020000020104000804080c04014111004100144, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TransferManager
Function name: addToWhitelist(address,address)
PC address: 12207
Estimated Gas Usage: 7241 - 111682
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:879

require(!isWhitelisted(_wallet, _target), "TT: target already whitelisted")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addToWhitelist(address,address), txdata: 0x5751824380000000000000000000000000000000000000000100000000000000000004540010000240400008402010008001011002084020080000400208100004040280, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TransferManager
Function name: addToWhitelist(address,address)
PC address: 12594
Estimated Gas Usage: 12246 - 152120
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:882

transferStorage.setWhitelist(_wallet, _target, whitelistAfter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: addToWhitelist(address,address), txdata: 0x5751824300000000000000000000000000800000000002000040480000000000002000010200201008400000000000204000021008000140800080100000048001001080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TransferManager
Function name: addModule(address,address)
PC address: 13084
Estimated Gas Usage: 6251 - 110176
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:408

registry.isRegisteredModule(address(_module))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addModule(address,address), txdata: 0x5a1db8c43757c7c0a1e9db4b7baefbfbf7f5ffc8007fffffffffffffffffffffffffffa80880020804004080042001800000002000008000804008030001040240008020, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TransferManager
Function name: addModule(address,address)
PC address: 13427
Estimated Gas Usage: 6251 - 110176
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:409

_wallet.authoriseModule(address(_module), true)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: addModule(address,address), txdata: 0x5a1db8c4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TransferManager
Function name: getDailyUnspent(address)
PC address: 14788
Estimated Gas Usage: 4071 - 5866
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:538

if(now > expense.periodEnd) {
            _unspent = limit;
            
            _periodEnd = uint64(now + 24 hours);
        }
        else {
            _periodEnd = expense.periodEnd;
            if(expense.alreadySpent < limit) {
                _unspent = limit - expense.alreadySpent;
            }
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getDailyUnspent(address), txdata: 0x7cb8f8ba800000000000000000000000011846118823081800000001000000000102015d, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TransferManager
Function name: getDailyUnspent(address)
PC address: 14797
Estimated Gas Usage: 4222 - 6393
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:541

now + 24 hours

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getDailyUnspent(address), txdata: 0x7cb8f8ba1084200042100421084200a4ac6a02d4b585693fffffffffffffffffffffffdc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TransferManager
Function name: recoverToken(address)
PC address: 15450
Estimated Gas Usage: 4491 - 74135
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:196

ERC20(_token).transfer(address(registry), total)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: recoverToken(address), txdata: 0x9be65a60800000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TransferManager
Function name: recoverToken(address)
PC address: 15450
Estimated Gas Usage: 4491 - 74135
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:196

ERC20(_token).transfer(address(registry), total)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: recoverToken(address), txdata: 0x9be65a608200000000000000000000000000000000000007fffffffffe7fffffe3ff9fbb, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TransferManager
Function name: getPendingLimit(address)
PC address: 15625
Estimated Gas Usage: 1290 - 1905
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:530

(now < limit.changeAfter)? (uint256(limit.pending), limit.changeAfter) : (0,0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getPendingLimit(address), txdata: 0xa0aec1050000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TransferManager
Function name: disableLimit(address)
PC address: 16069
Estimated Gas Usage: 27127 - 158863
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:151

guardianStorage.isLocked(_wallet)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: disableLimit(address), txdata: 0xa3411c0aa17433b60c0b804200000000000000000000327cc04030a2500b0068100000a0, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TransferManager
Function name: changeLimit(address,uint256)
PC address: 17498
Estimated Gas Usage: 27071 - 158807
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:151

guardianStorage.isLocked(_wallet)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: changeLimit(address,uint256), txdata: 0xb20f3f3705181202830fbd5582b691c7b4e680000000000000000000000000000100001b20ffe000ffff407efe7fffbd0000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TransferManager
Function name: removeFromWhitelist(address,address)
PC address: 19451
Estimated Gas Usage: 11253 - 151032
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:151

guardianStorage.isLocked(_wallet)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: removeFromWhitelist(address,address), txdata: 0xf8d3277d000000000000000000000000080000000800000200002000000000000000010d0210040080800100008001800000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TransferManager
Function name: removeFromWhitelist(address,address)
PC address: 19640
Estimated Gas Usage: 7214 - 111655
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:895

require(isWhitelisted(_wallet, _target), "TT: target not whitelisted")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeFromWhitelist(address,address), txdata: 0xf8d3277da4235ac0a1ad2b4000000000000000000000000000000d00000000000000001f4010000000002080020001002000042000408000040080010810040808002004, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TransferManager
Function name: removeFromWhitelist(address,address)
PC address: 20003
Estimated Gas Usage: 11253 - 151032
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:896

transferStorage.setWhitelist(_wallet, _target, 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeFromWhitelist(address,address), txdata: 0xf8d3277d0000000000000000000000000000000000000000000000001000000002400c004040004080800000800800400000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TransferManager
Function name: callContract(address,address,uint256,bytes)
PC address: 20736
Estimated Gas Usage: 11744 - 185639
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:821

if(isWhitelisted(_wallet, _contract)) {
            
            doCallContract(_wallet, _contract, _value, _data);
        }
        else {
            require(checkAndUpdateDailySpent(_wallet, _value), "TM: Call contract above daily limit");
            
            doCallContract(_wallet, _contract, _value, _data);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: callContract(address,address,uint256,bytes), txdata: 0xfd6ac309c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003b00000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 23181
Estimated Gas Usage: 42212 - 320349
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:489

limit.current

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 23242
Estimated Gas Usage: 42212 - 320349
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:489

limit.changeAfter

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 23279
Estimated Gas Usage: 42212 - 320349
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:490

defaultLimit

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 23291
Estimated Gas Usage: 42212 - 320349
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:490

limit.current = uint128(defaultLimit)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TransferManager
Function name: init(address)
PC address: 23336
Estimated Gas Usage: 42212 - 320349
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:490

limit.current = uint128(defaultLimit)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TransferManager
Function name: changeLimit(address,uint256)
PC address: 24689
Estimated Gas Usage: 19089 - 130053
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:112

require(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeLimit(address,uint256), txdata: 0xb20f3f370004c301000000380010000600000f1d9cc6b18004000000004002020000000a0802401020010420402080028020000000800000008000080080800204100200, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TransferManager
Function name: transferToken(address,address,address,uint256,bytes)
PC address: 27551
Estimated Gas Usage: 11309 - 117450
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:586

if (expense.periodEnd < now) {
            return (_amount <= _limit);
        } else {
            return (expense.alreadySpent + _amount <= _limit && expense.alreadySpent + _amount >= expense.alreadySpent);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferToken(address,address,address,uint256,bytes), txdata: 0x2df546f4bffffffffffffff88020000100000000000000000000000000000007ffffff08000004801000044108004002eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000048, value: 0x0


time_used: 36256.39092588425 seconds
#@contract_info_time
0x2B6D87F12B106E1D3fA7137494751566329d1045.sol:0.5.4:TransferManager:36256.39092588425:36100:60:36000
