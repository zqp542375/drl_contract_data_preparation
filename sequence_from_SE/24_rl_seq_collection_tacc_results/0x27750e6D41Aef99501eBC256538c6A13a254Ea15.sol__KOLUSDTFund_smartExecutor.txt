++++ 0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol  :  0.4.23  :  KOLUSDTFund ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 4564
['constructor']:writes at the last depth:['1', '2', '5', '6', '0', '3', '4']
preprocessing: Achieved 99.98% coverage.
dynamic svars:['1', '2', '8', '10', '7']
static svars:['6', '3', '4', '0', '5']
Ending preprocessing.
preprocessing time(s): 73.64804768562317
contract coverage: 62.97%
excuteVote(uint256) is not reachable
voteMission(uint256,bool) is not reachable
getOfferings(uint256,uint256) is not reachable
addKolOffering(uint256,address,uint256) is not reachable
name() is not reachable
symbol() is not reachable
Function Reads: State variables read in conditions
	excuteVote(uint256):['0']
	name():[]
	kol():[]
	usdt():[]
	voteMission(uint256,bool):[]
	minSuperNodes():[]
	getOfferings(uint256,uint256):[]
	halfSuperNodes():[]
	addKolOffering(uint256,address,uint256):[]
	createKolMission(bytes32,uint256,bool):[]
	owner():[]
	symbol():[]
	TENKOL():[]
	missionId():[]
	getMission2(uint256):[]
	dealTime():[]
	voted(address,uint256):[]
	getMission1(uint256):[]
	TENUSDT():[]
Function Writes: State variables written
	excuteVote(uint256):['8']
	createKolMission(bytes32,uint256,bool):['8', '6']
	addKolOffering(uint256,address,uint256):['10', '8']
	voteMission(uint256,bool):['8', '7']
============================
iteration:3
targets:['excuteVote(uint256)', 'voteMission(uint256,bool)', 'getOfferings(uint256,uint256)', 'addKolOffering(uint256,address,uint256)', 'name()', 'symbol()']
['addKolOffering(uint256,address,uint256)']:writes at the last depth:['10', '8']
['createKolMission(bytes32,uint256,bool)']:writes at the last depth:['6', '8']
contract coverage: 79.12%
============================
iteration:4
['createKolMission(bytes32,uint256,bool)', 'addKolOffering(uint256,address,uint256)']:writes at the last depth:['10', '8', '1']
['createKolMission(bytes32,uint256,bool)', 'createKolMission(bytes32,uint256,bool)']:writes at the last depth:['6', '8']
['createKolMission(bytes32,uint256,bool)', 'addKolOffering(uint256,address,uint256)']:writes at the last depth:['10', '8', '1']
['createKolMission(bytes32,uint256,bool)', 'voteMission(uint256,bool)']:writes at the last depth:['8', '7']
['createKolMission(bytes32,uint256,bool)', 'voteMission(uint256,bool)']:writes at the last depth:['8', '7']
['createKolMission(bytes32,uint256,bool)', 'voteMission(uint256,bool)']:writes at the last depth:['8', '7']
['createKolMission(bytes32,uint256,bool)', 'voteMission(uint256,bool)']:writes at the last depth:['8', '7']
['createKolMission(bytes32,uint256,bool)', 'voteMission(uint256,bool)']:writes at the last depth:['8', '7']
['createKolMission(bytes32,uint256,bool)', 'voteMission(uint256,bool)']:writes at the last depth:['8', '7']
['createKolMission(bytes32,uint256,bool)', 'voteMission(uint256,bool)']:writes at the last depth:['8', '7']
['createKolMission(bytes32,uint256,bool)', 'voteMission(uint256,bool)']:writes at the last depth:['8', '7']
['createKolMission(bytes32,uint256,bool)', 'addKolOffering(uint256,address,uint256)']:writes at the last depth:['10', '8', '1']
contract coverage: 81.88%
============================
iteration:5
['createKolMission(bytes32,uint256,bool)', 'addKolOffering(uint256,address,uint256)', 'addKolOffering(uint256,address,uint256)']:writes at the last depth:['', '10', '8']
['createKolMission(bytes32,uint256,bool)', 'addKolOffering(uint256,address,uint256)', 'createKolMission(bytes32,uint256,bool)']:writes at the last depth:['', '6']
['createKolMission(bytes32,uint256,bool)', 'addKolOffering(uint256,address,uint256)', 'addKolOffering(uint256,address,uint256)']:writes at the last depth:['', '10', '8']
['createKolMission(bytes32,uint256,bool)', 'addKolOffering(uint256,address,uint256)', 'voteMission(uint256,bool)']:writes at the last depth:['8', '7']
['createKolMission(bytes32,uint256,bool)', 'addKolOffering(uint256,address,uint256)', 'voteMission(uint256,bool)']:writes at the last depth:['8', '7']
['createKolMission(bytes32,uint256,bool)', 'addKolOffering(uint256,address,uint256)', 'voteMission(uint256,bool)']:writes at the last depth:['8', '7']
['createKolMission(bytes32,uint256,bool)', 'addKolOffering(uint256,address,uint256)', 'voteMission(uint256,bool)']:writes at the last depth:['8', '7']
['createKolMission(bytes32,uint256,bool)', 'addKolOffering(uint256,address,uint256)', 'addKolOffering(uint256,address,uint256)']:writes at the last depth:['', '10', '8']
contract coverage: 81.88%
============================
iteration:6
['createKolMission(bytes32,uint256,bool)', 'addKolOffering(uint256,address,uint256)', 'addKolOffering(uint256,address,uint256)', 'addKolOffering(uint256,address,uint256)']:writes at the last depth:['', '10', '8']
['createKolMission(bytes32,uint256,bool)', 'addKolOffering(uint256,address,uint256)', 'addKolOffering(uint256,address,uint256)', 'createKolMission(bytes32,uint256,bool)']:writes at the last depth:['', '6']
contract coverage: 81.88%
============================
iteration:7
['createKolMission(bytes32,uint256,bool)', 'addKolOffering(uint256,address,uint256)', 'voteMission(uint256,bool)', 'createKolMission(bytes32,uint256,bool)']:writes at the last depth:['', '6']
['createKolMission(bytes32,uint256,bool)', 'addKolOffering(uint256,address,uint256)', 'voteMission(uint256,bool)', 'addKolOffering(uint256,address,uint256)']:writes at the last depth:['', '10', '8']
contract coverage: 81.88%
============================
iteration:8
contract coverage: 81.88%
============================
iteration:9
['createKolMission(bytes32,uint256,bool)', 'addKolOffering(uint256,address,uint256)', 'voteMission(uint256,bool)', 'addKolOffering(uint256,address,uint256)']:writes at the last depth:['', '10', '8']
contract coverage: 81.88%
============================
iteration:10
contract coverage: 81.88%
============================
iteration:11
contract coverage: 81.88%
============================
iteration:12
contract coverage: 81.88%
============================
iteration:13
contract coverage: 81.95%
============================
iteration:14
['createKolMission(bytes32,uint256,bool)', 'voteMission(uint256,bool)', 'createKolMission(bytes32,uint256,bool)']:writes at the last depth:['', '6']
['createKolMission(bytes32,uint256,bool)', 'voteMission(uint256,bool)', 'voteMission(uint256,bool)']:writes at the last depth:['8', '7']
['createKolMission(bytes32,uint256,bool)', 'voteMission(uint256,bool)', 'voteMission(uint256,bool)']:writes at the last depth:['8', '7']
contract coverage: 81.95%
============================
iteration:15
contract coverage: 81.95%
============================
iteration:16
contract coverage: 81.95%
============================
iteration:17
['createKolMission(bytes32,uint256,bool)', 'voteMission(uint256,bool)', 'createKolMission(bytes32,uint256,bool)', 'createKolMission(bytes32,uint256,bool)']:writes at the last depth:['', '6']
contract coverage: 81.95%
============================
iteration:18
contract coverage: 81.95%
============================
iteration:19
contract coverage: 81.95%
============================
iteration:20
['createKolMission(bytes32,uint256,bool)', 'voteMission(uint256,bool)', 'createKolMission(bytes32,uint256,bool)']:writes at the last depth:['', '6']
contract coverage: 81.95%
============================
iteration:21
contract coverage: 81.95%
============================
iteration:22
contract coverage: 81.95%
============================
iteration:23
contract coverage: 81.95%
============================
iteration:24
contract coverage: 81.95%
============================
iteration:25
contract coverage: 81.95%
============================
iteration:26
contract coverage: 81.95%
============================
iteration:27
contract coverage: 81.95%
============================
iteration:28
contract coverage: 81.95%
============================
iteration:29
contract coverage: 81.95%
#@statespace
2606 nodes, 2605 edges, 44218 total states
#@coverage
Achieved 5.70% coverage for code: 60806040526040805190810160405280601381526020017f4b4f4c205553445420466f756e646174696f6e000000000000000000000000008152506001908051906020019062000051929190620001b1565b506040805190810160405280600b81526020017f4b4f4c5553445446756e64000000000000000000000000000000000000000000815250600290805190602001906200009f929190620001b1565b506203f4806005556000600655348015620000b957600080fd5b506040516040806200204d8339810180604052810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000260565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001f457805160ff191683800117855562000225565b8280016001018555821562000225579182015b828111156200022457825182559160200191906001019062000207565b5b50905062000234919062000238565b5090565b6200025d91905b80821115620002595760008160009055506001016200023f565b5090565b90565b611ddd80620002706000396000f300608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301424b2c1461010c57806306fdde03146101395780630dcba2d1146101c95780632f48ab7d146102205780633c10edaa146102775780635797654d146102b05780635883f032146102e35780636bfa24ea146103685780637291437c1461039b57806378daffd1146103f25780638da5cb5b1461043957806395d89b411461049057806398e4c5e814610520578063af26b7621461054b578063bbc1a30014610576578063c446b6de146105e4578063c591aa981461060f578063d23db1cd14610674578063e01b9d34146106e4575b600080fd5b34801561011857600080fd5b506101376004803603810190808035906020019092919050505061070f565b005b34801561014557600080fd5b5061014e610c19565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561018e578082015181840152602081019050610173565b50505050905090810190601f1680156101bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d557600080fd5b506101de610cb7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561022c57600080fd5b50610235610cdd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561028357600080fd5b506102ae60048036038101908080359060200190929190803515159060200190929190505050610d03565b005b3480156102bc57600080fd5b506102c5611229565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156102ef57600080fd5b50610318600480360381019080803590602001909291908035906020019092919050505061122e565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b34801561037457600080fd5b5061037d6112db565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156103a757600080fd5b506103f060048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112e0565b005b3480156103fe57600080fd5b50610437600480360381019080803560001916906020019092919080359060200190929190803515159060200190929190505050611791565b005b34801561044557600080fd5b5061044e611a8b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049c57600080fd5b506104a5611ab0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104e55780820151818401526020810190506104ca565b50505050905090810190601f1680156105125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561052c57600080fd5b50610535611b4e565b6040518082815260200191505060405180910390f35b34801561055757600080fd5b50610560611b5c565b6040518082815260200191505060405180910390f35b34801561058257600080fd5b506105a160048036038101908080359060200190929190505050611b62565b604051808561ffff1661ffff1681526020018461ffff1661ffff168152602001831515151581526020018215151515815260200194505050505060405180910390f35b3480156105f057600080fd5b506105f9611c09565b6040518082815260200191505060405180910390f35b34801561061b57600080fd5b5061065a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c0f565b604051808215151515815260200191505060405180910390f35b34801561068057600080fd5b5061069f60048036038101908080359060200190929190505050611c77565b60405180871515151581526020018681526020018581526020018481526020018381526020018260001916600019168152602001965050505050505060405180910390f35b3480156106f057600080fd5b506106f9611d2c565b6040518082815260200191505060405180910390f35b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561076d57600080fd5b6008600084815260200190815260200160002060060160059054906101000a900460ff1615151561079d57600080fd5b600554600860008581526020019081526020016000206002015401421015156107c557600080fd5b6008600084815260200190815260200160002060060160049054906101000a900460ff1615156107f457600080fd5b6008600084815260200190815260200160002060040154600860008581526020019081526020016000206003015414151561082e57600080fd5b6008600084815260200190815260200160002060000160009054906101000a900460ff169150600090505b600a600084815260200190815260200160002080549050811015610b72578115610a0557600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600a6000868152602001908152602001600020838154811015156108db57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a60008781526020019081526020016000208481548110151561092d57fe5b9060005260206000209060020201600101546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156109c457600080fd5b505af11580156109d8573d6000803e3d6000fd5b505050506040513d60208110156109ee57600080fd5b810190808051906020019092919050505050610b65565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600a600086815260200190815260200160002083815481101515610a6357fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a600087815260200190815260200160002084815481101515610ab557fe5b9060005260206000209060020201600101546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610b4c57600080fd5b505af1158015610b60573d6000803e3d6000fd5b505050505b8080600101915050610859565b60016008600085815260200190815260200160002060060160056101000a81548160ff0219169083151502179055507f1022a2c4ccad65760f1f251079912a70e8690dba3a6efc0e30332501a68092d5836008600086815260200190815260200160002060040154600a60008781526020019081526020016000208054905060405180848152602001838152602001828152602001935050505060405180910390a1505050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610caf5780601f10610c8457610100808354040283529160200191610caf565b820191906000526020600020905b815481529060010190602001808311610c9257829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4a1dbad336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610dc557600080fd5b505af1158015610dd9573d6000803e3d6000fd5b505050506040513d6020811015610def57600080fd5b81019080805190602001909291905050501515610e0b57600080fd5b600860008681526020019081526020016000206002015442101515610e2f57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4a1dbad336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610eec57600080fd5b505af1158015610f00573d6000803e3d6000fd5b505050506040513d6020811015610f1657600080fd5b81019080805190602001909291905050501515610f3257600080fd5b6008600086815260200190815260200160002060060160059054906101000a900460ff16151515610f6257600080fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060009054906101000a900460ff16151515610fcc57600080fd5b600f9250600b91506008600086815260200190815260200160002060000160009054906101000a900460ff161561100f5769152d02c7e14af68000009050611018565b64174876e80090505b80600860008781526020019081526020016000206003015410151561103c57600f91505b6001151584151514156110975760086000868152602001908152602001600020600601600081819054906101000a900461ffff168092919060010191906101000a81548161ffff021916908361ffff160217905550506110e1565b60086000868152602001908152602001600020600601600281819054906101000a900461ffff168092919060010191906101000a81548161ffff021916908361ffff160217905550505b8161ffff166008600087815260200190815260200160002060060160009054906101000a900461ffff1661ffff161015156111535760016008600087815260200190815260200160002060060160046101000a81548160ff02191690831515021790555061114e85611d35565b6111b9565b8161ffff166008600087815260200190815260200160002060060160029054906101000a900461ffff1661ffff161015156111b85760016008600087815260200190815260200160002060060160056101000a81548160ff0219169083151502179055505b5b6001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050565b600f81565b6000806000600a60008681526020019081526020016000208481548110151561125357fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a6000878152602001908152602001600020858154811015156112a557fe5b906000526020600020906002020160010154600a6000888152602001908152602001600020805490509250925092509250925092565b600b81565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4a1dbad336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561139d57600080fd5b505af11580156113b1573d6000803e3d6000fd5b505050506040513d60208110156113c757600080fd5b810190808051906020019092919050505015156113e357600080fd5b6008600084815260200190815260200160002060060160059054906101000a900460ff1615151561141357600080fd5b6008600084815260200190815260200160002060000160009054906101000a900460ff161561163f57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bac30981836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156114f957600080fd5b505af115801561150d573d6000803e3d6000fd5b505050506040513d602081101561152357600080fd5b8101908080519060200190929190505050806116335750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4a1dbad836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156115f757600080fd5b505af115801561160b573d6000803e3d6000fd5b505050506040513d602081101561162157600080fd5b81019080805190602001909291905050505b151561163e57600080fd5b5b600860008481526020019081526020016000206003015461167f826008600087815260200190815260200160002060040154611d9590919063ffffffff16565b1115151561168c57600080fd5b600a600084815260200190815260200160002060408051908101604052808473ffffffffffffffffffffffffffffffffffffffff168152602001838152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505050611772816008600086815260200190815260200160002060040154611d9590919063ffffffff16565b6008600085815260200190815260200160002060040181905550505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4a1dbad336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561185057600080fd5b505af1158015611864573d6000803e3d6000fd5b505050506040513d602081101561187a57600080fd5b8101908080519060200190929190505050151561189657600080fd5b839050610140604051908101604052808315158152602001428152602001600554420181526020018481526020016000815260200182600019168152602001600061ffff168152602001600061ffff1681526020016000151581526020016000151581525060086000600654815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005019060001916905560c08201518160060160006101000a81548161ffff021916908361ffff16021790555060e08201518160060160026101000a81548161ffff021916908361ffff1602179055506101008201518160060160046101000a81548160ff0219169083151502179055506101208201518160060160056101000a81548160ff0219169083151502179055509050506006600081548092919060010191905055507fc96853e9a347a4993a1ab1a2f1f683db63a40fab5e2ce45e29c81b5149c58e4681600160065403336040518084600019166000191681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a150505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b465780601f10611b1b57610100808354040283529160200191611b46565b820191906000526020600020905b815481529060010190602001808311611b2957829003601f168201915b505050505081565b69152d02c7e14af680000081565b60065481565b6000806000806008600086815260200190815260200160002060060160009054906101000a900461ffff166008600087815260200190815260200160002060060160029054906101000a900461ffff166008600088815260200190815260200160002060060160049054906101000a900460ff166008600089815260200190815260200160002060060160059054906101000a900460ff1693509350935093509193509193565b60055481565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806000806000806008600088815260200190815260200160002060000160009054906101000a900460ff166008600089815260200190815260200160002060010154600860008a815260200190815260200160002060020154600860008b815260200190815260200160002060030154600860008c815260200190815260200160002060040154600860008d81526020019081526020016000206005015495509550955095509550955091939550919395565b64174876e80081565b7f3aa94a81513bec2a88fbe53be130cc208c447c9914b300256c34c95ed7d5d8ab8160086000848152602001908152602001600020600501546040518083815260200182600019166000191681526020019250505060405180910390a150565b60008183019050828110151515611da857fe5b809050929150505600a165627a7a72305820b2dac60ac0cd207a5703a592cadd3baf33917c127594eb9ceea467d50c90c84c0029
#@coverage
Achieved 81.95% coverage for code: 608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301424b2c1461010c57806306fdde03146101395780630dcba2d1146101c95780632f48ab7d146102205780633c10edaa146102775780635797654d146102b05780635883f032146102e35780636bfa24ea146103685780637291437c1461039b57806378daffd1146103f25780638da5cb5b1461043957806395d89b411461049057806398e4c5e814610520578063af26b7621461054b578063bbc1a30014610576578063c446b6de146105e4578063c591aa981461060f578063d23db1cd14610674578063e01b9d34146106e4575b600080fd5b34801561011857600080fd5b506101376004803603810190808035906020019092919050505061070f565b005b34801561014557600080fd5b5061014e610c19565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561018e578082015181840152602081019050610173565b50505050905090810190601f1680156101bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d557600080fd5b506101de610cb7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561022c57600080fd5b50610235610cdd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561028357600080fd5b506102ae60048036038101908080359060200190929190803515159060200190929190505050610d03565b005b3480156102bc57600080fd5b506102c5611229565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156102ef57600080fd5b50610318600480360381019080803590602001909291908035906020019092919050505061122e565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b34801561037457600080fd5b5061037d6112db565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156103a757600080fd5b506103f060048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112e0565b005b3480156103fe57600080fd5b50610437600480360381019080803560001916906020019092919080359060200190929190803515159060200190929190505050611791565b005b34801561044557600080fd5b5061044e611a8b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049c57600080fd5b506104a5611ab0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104e55780820151818401526020810190506104ca565b50505050905090810190601f1680156105125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561052c57600080fd5b50610535611b4e565b6040518082815260200191505060405180910390f35b34801561055757600080fd5b50610560611b5c565b6040518082815260200191505060405180910390f35b34801561058257600080fd5b506105a160048036038101908080359060200190929190505050611b62565b604051808561ffff1661ffff1681526020018461ffff1661ffff168152602001831515151581526020018215151515815260200194505050505060405180910390f35b3480156105f057600080fd5b506105f9611c09565b6040518082815260200191505060405180910390f35b34801561061b57600080fd5b5061065a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c0f565b604051808215151515815260200191505060405180910390f35b34801561068057600080fd5b5061069f60048036038101908080359060200190929190505050611c77565b60405180871515151581526020018681526020018581526020018481526020018381526020018260001916600019168152602001965050505050505060405180910390f35b3480156106f057600080fd5b506106f9611d2c565b6040518082815260200191505060405180910390f35b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561076d57600080fd5b6008600084815260200190815260200160002060060160059054906101000a900460ff1615151561079d57600080fd5b600554600860008581526020019081526020016000206002015401421015156107c557600080fd5b6008600084815260200190815260200160002060060160049054906101000a900460ff1615156107f457600080fd5b6008600084815260200190815260200160002060040154600860008581526020019081526020016000206003015414151561082e57600080fd5b6008600084815260200190815260200160002060000160009054906101000a900460ff169150600090505b600a600084815260200190815260200160002080549050811015610b72578115610a0557600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600a6000868152602001908152602001600020838154811015156108db57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a60008781526020019081526020016000208481548110151561092d57fe5b9060005260206000209060020201600101546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156109c457600080fd5b505af11580156109d8573d6000803e3d6000fd5b505050506040513d60208110156109ee57600080fd5b810190808051906020019092919050505050610b65565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600a600086815260200190815260200160002083815481101515610a6357fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a600087815260200190815260200160002084815481101515610ab557fe5b9060005260206000209060020201600101546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610b4c57600080fd5b505af1158015610b60573d6000803e3d6000fd5b505050505b8080600101915050610859565b60016008600085815260200190815260200160002060060160056101000a81548160ff0219169083151502179055507f1022a2c4ccad65760f1f251079912a70e8690dba3a6efc0e30332501a68092d5836008600086815260200190815260200160002060040154600a60008781526020019081526020016000208054905060405180848152602001838152602001828152602001935050505060405180910390a1505050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610caf5780601f10610c8457610100808354040283529160200191610caf565b820191906000526020600020905b815481529060010190602001808311610c9257829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4a1dbad336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610dc557600080fd5b505af1158015610dd9573d6000803e3d6000fd5b505050506040513d6020811015610def57600080fd5b81019080805190602001909291905050501515610e0b57600080fd5b600860008681526020019081526020016000206002015442101515610e2f57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4a1dbad336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610eec57600080fd5b505af1158015610f00573d6000803e3d6000fd5b505050506040513d6020811015610f1657600080fd5b81019080805190602001909291905050501515610f3257600080fd5b6008600086815260200190815260200160002060060160059054906101000a900460ff16151515610f6257600080fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060009054906101000a900460ff16151515610fcc57600080fd5b600f9250600b91506008600086815260200190815260200160002060000160009054906101000a900460ff161561100f5769152d02c7e14af68000009050611018565b64174876e80090505b80600860008781526020019081526020016000206003015410151561103c57600f91505b6001151584151514156110975760086000868152602001908152602001600020600601600081819054906101000a900461ffff168092919060010191906101000a81548161ffff021916908361ffff160217905550506110e1565b60086000868152602001908152602001600020600601600281819054906101000a900461ffff168092919060010191906101000a81548161ffff021916908361ffff160217905550505b8161ffff166008600087815260200190815260200160002060060160009054906101000a900461ffff1661ffff161015156111535760016008600087815260200190815260200160002060060160046101000a81548160ff02191690831515021790555061114e85611d35565b6111b9565b8161ffff166008600087815260200190815260200160002060060160029054906101000a900461ffff1661ffff161015156111b85760016008600087815260200190815260200160002060060160056101000a81548160ff0219169083151502179055505b5b6001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050565b600f81565b6000806000600a60008681526020019081526020016000208481548110151561125357fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a6000878152602001908152602001600020858154811015156112a557fe5b906000526020600020906002020160010154600a6000888152602001908152602001600020805490509250925092509250925092565b600b81565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4a1dbad336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561139d57600080fd5b505af11580156113b1573d6000803e3d6000fd5b505050506040513d60208110156113c757600080fd5b810190808051906020019092919050505015156113e357600080fd5b6008600084815260200190815260200160002060060160059054906101000a900460ff1615151561141357600080fd5b6008600084815260200190815260200160002060000160009054906101000a900460ff161561163f57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bac30981836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156114f957600080fd5b505af115801561150d573d6000803e3d6000fd5b505050506040513d602081101561152357600080fd5b8101908080519060200190929190505050806116335750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4a1dbad836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156115f757600080fd5b505af115801561160b573d6000803e3d6000fd5b505050506040513d602081101561162157600080fd5b81019080805190602001909291905050505b151561163e57600080fd5b5b600860008481526020019081526020016000206003015461167f826008600087815260200190815260200160002060040154611d9590919063ffffffff16565b1115151561168c57600080fd5b600a600084815260200190815260200160002060408051908101604052808473ffffffffffffffffffffffffffffffffffffffff168152602001838152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505050611772816008600086815260200190815260200160002060040154611d9590919063ffffffff16565b6008600085815260200190815260200160002060040181905550505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4a1dbad336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561185057600080fd5b505af1158015611864573d6000803e3d6000fd5b505050506040513d602081101561187a57600080fd5b8101908080519060200190929190505050151561189657600080fd5b839050610140604051908101604052808315158152602001428152602001600554420181526020018481526020016000815260200182600019168152602001600061ffff168152602001600061ffff1681526020016000151581526020016000151581525060086000600654815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005019060001916905560c08201518160060160006101000a81548161ffff021916908361ffff16021790555060e08201518160060160026101000a81548161ffff021916908361ffff1602179055506101008201518160060160046101000a81548160ff0219169083151502179055506101208201518160060160056101000a81548160ff0219169083151502179055509050506006600081548092919060010191905055507fc96853e9a347a4993a1ab1a2f1f683db63a40fab5e2ce45e29c81b5149c58e4681600160065403336040518084600019166000191681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a150505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b465780601f10611b1b57610100808354040283529160200191611b46565b820191906000526020600020905b815481529060010190602001808311611b2957829003601f168201915b505050505081565b69152d02c7e14af680000081565b60065481565b6000806000806008600086815260200190815260200160002060060160009054906101000a900461ffff166008600087815260200190815260200160002060060160029054906101000a900461ffff166008600088815260200190815260200160002060060160049054906101000a900460ff166008600089815260200190815260200160002060060160059054906101000a900460ff1693509350935093509193509193565b60055481565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806000806000806008600088815260200190815260200160002060000160009054906101000a900460ff166008600089815260200190815260200160002060010154600860008a815260200190815260200160002060020154600860008b815260200190815260200160002060030154600860008c815260200190815260200160002060040154600860008d81526020019081526020016000206005015495509550955095509550955091939550919395565b64174876e80081565b7f3aa94a81513bec2a88fbe53be130cc208c447c9914b300256c34c95ed7d5d8ab8160086000848152602001908152602001600020600501546040518083815260200182600019166000191681526020019250505060405180910390a150565b60008183019050828110151515611da857fe5b809050929150505600a165627a7a72305820b2dac60ac0cd207a5703a592cadd3baf33917c127594eb9ceea467d50c90c84c0029
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: KOLUSDTFund
Function name: excuteVote(uint256)
PC address: 1984
Estimated Gas Usage: 3715 - 4850
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:206

require(uint256(now) < (missionList[_missionId].endTime + uint256(dealTime)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: excuteVote(uint256), txdata: 0x01424b2c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 3528
Estimated Gas Usage: 24958 - 139567
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:115

kol.querySuperNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000000000000000100000800000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 3618
Estimated Gas Usage: 24958 - 139567
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:161

missionList[_missionId].endTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000010000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 3626
Estimated Gas Usage: 3729 - 38906
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:161

require(now < missionList[_missionId].endTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 3637
Estimated Gas Usage: 24958 - 139567
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:162

kol

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000010000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 3823
Estimated Gas Usage: 24958 - 139567
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:162

kol.querySuperNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000000000000000100000800000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 3823
Estimated Gas Usage: 24958 - 139567
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:162

kol.querySuperNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10002000000000000000000000000000000000000000000000000000000000002000000000000002000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 3823
Estimated Gas Usage: 24958 - 139567
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:162

kol.querySuperNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000010000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 3916
Estimated Gas Usage: 24958 - 139567
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:163

missionList[_missionId].done

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000010000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 4022
Estimated Gas Usage: 24958 - 139567
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:164

Voter[msg.sender][_missionId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000010000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 4078
Estimated Gas Usage: 24958 - 139567
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:170

missionList[_missionId].isKol

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000010000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 4144
Estimated Gas Usage: 24958 - 139567
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:176

missionList[_missionId].totalAmount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000010000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 4197
Estimated Gas Usage: 24958 - 139567
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:181

missionList[_missionId].agreeSuperNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000010000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 4223
Estimated Gas Usage: 24958 - 139567
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:181

missionList[_missionId].agreeSuperNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000010000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 4240
Estimated Gas Usage: 24958 - 139567
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:181

missionList[_missionId].agreeSuperNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000010000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 4275
Estimated Gas Usage: 24958 - 139567
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:184

missionList[_missionId].refuseSuperNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000010000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 4301
Estimated Gas Usage: 24958 - 139567
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:184

missionList[_missionId].refuseSuperNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000010000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 4318
Estimated Gas Usage: 24958 - 139567
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:184

missionList[_missionId].refuseSuperNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000010000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 4352
Estimated Gas Usage: 24958 - 139567
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:186

missionList[_missionId].agreeSuperNodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000010000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 4466
Estimated Gas Usage: 24958 - 139567
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:189

missionList[_missionId].refuseSuperNodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000010000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 4627
Estimated Gas Usage: 24958 - 139567
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:192

Voter[msg.sender][_missionId] = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000010000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: voteMission(uint256,bool)
PC address: 4641
Estimated Gas Usage: 24958 - 139567
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:192

Voter[msg.sender][_missionId] = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000010000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: voteMission(uint256,bool), txdata: 0x3c10edaa000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: KOLUSDTFund
Function name: getOfferings(uint256,uint256)
PC address: 4690
Estimated Gas Usage: 1260 - 1545
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:247

function getOfferings(uint256 _missionId,uint256 _id) public view returns(address,uint256,uint256){
    return(offeringList[_missionId][_id].target,offeringList[_missionId][_id].targetAmount,offeringList[_missionId].length);
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getOfferings(uint256,uint256), txdata: 0x5883f032, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5024
Estimated Gas Usage: 29818 - 147784
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:115

kol.querySuperNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7c7c7c7c7c7c7c7c7c7c7c7cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5117
Estimated Gas Usage: 29818 - 147784
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:195

missionList[_missionId].done

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5165
Estimated Gas Usage: 29818 - 147784
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:196

missionList[_missionId].isKol

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5186
Estimated Gas Usage: 34837 - 222587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:197

kol

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7c7c7c7c7c7c7c7c7c7c7c7cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000402000000000011008000000000000000000000000000000000000000004800004000000000000000000000000000000000010000000000000000000000080, value: 0x0
Caller: [CREATOR], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5372
Estimated Gas Usage: 34837 - 222587
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:197

kol.queryNode(_target)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: afafafafafafafafafafafafdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10020004000010080000010000004002080000001108002084008201001808020100000000040000000010100000800800000400110010000028000010100008201, value: 0x0
Caller: [CREATOR], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5372
Estimated Gas Usage: 34837 - 222587
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:197

kol.queryNode(_target)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000000000000000000000000000000000000001000000000000000000000080800000000000000000000000000000000000000000000000000000000000000010, value: 0x0
Caller: [SOMEGUY], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5372
Estimated Gas Usage: 34837 - 222587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:197

kol.queryNode(_target)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7c7c7c7c7c7c7c7c7c7c7c7cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000402000000000011008000000000000000000000000000000000000000004800004000000000000000000000000000000000010000000000000000000000080, value: 0x0
Caller: [CREATOR], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5440
Estimated Gas Usage: 34837 - 222587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:197

kol

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7c7c7c7c7c7c7c7c7c7c7c7cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000402000000000011008000000000000000000000000000000000000000004800004000000000000000000000000000000000010000000000000000000000080, value: 0x0
Caller: [CREATOR], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5626
Estimated Gas Usage: 34837 - 222587
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:197

kol.querySuperNode(_target)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: afafafafafafafafafafafafdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10020004000010080000010000004002080000001108002084008201001808020100000000040000000010100000800800000400110010000028000010100008201, value: 0x0
Caller: [CREATOR], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5626
Estimated Gas Usage: 34837 - 222587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:197

kol.querySuperNode(_target)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7c7c7c7c7c7c7c7c7c7c7c7cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd10000402000000000011008000000000000000000000000000000000000000004800004000000000000000000000000000000000010000000000000000000000080, value: 0x0
Caller: [CREATOR], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5718
Estimated Gas Usage: 29818 - 147784
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:199

missionList[_missionId].totalAmount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5745
Estimated Gas Usage: 29818 - 147784
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:199

missionList[_missionId].offeringAmount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5840
Estimated Gas Usage: 29818 - 147784
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5844
Estimated Gas Usage: 29818 - 147784
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5894
Estimated Gas Usage: 29818 - 147784
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:200

offeringList[_missionId].push(KolOffering(_target,_targetAmount))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5947
Estimated Gas Usage: 29818 - 147784
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:200

offeringList[_missionId].push(KolOffering(_target,_targetAmount))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5958
Estimated Gas Usage: 29818 - 147784
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:200

offeringList[_missionId].push(KolOffering(_target,_targetAmount))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 5988
Estimated Gas Usage: 29818 - 147784
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:201

missionList[_missionId].offeringAmount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: addKolOffering(uint256,address,uint256)
PC address: 6027
Estimated Gas Usage: 29818 - 147784
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:201

missionList[_missionId].offeringAmount = missionList[_missionId].offeringAmount.add(_targetAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addKolOffering(uint256,address,uint256), txdata: 0x7291437c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6227
Estimated Gas Usage: 66977 - 326599
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:115

kol.querySuperNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6327
Estimated Gas Usage: 66977 - 326599
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:148

dealTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6329
Estimated Gas Usage: 66977 - 326599
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:148

now + dealTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6402
Estimated Gas Usage: 66977 - 326599
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:146

missionId

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6433
Estimated Gas Usage: 66977 - 326599
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:146

missionList[missionId] = KolMission(_isKol,
                                          uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6447
Estimated Gas Usage: 66977 - 326599
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:146

missionList[missionId] = KolMission(_isKol,
                                          uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6458
Estimated Gas Usage: 66977 - 326599
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:146

missionList[missionId] = KolMission(_isKol,
                                          uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6468
Estimated Gas Usage: 66977 - 326599
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:146

missionList[missionId] = KolMission(_isKol,
                                          uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6478
Estimated Gas Usage: 66977 - 326599
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:146

missionList[missionId] = KolMission(_isKol,
                                          uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6488
Estimated Gas Usage: 66977 - 326599
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:146

missionList[missionId] = KolMission(_isKol,
                                          uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6504
Estimated Gas Usage: 66977 - 326599
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:146

missionList[missionId] = KolMission(_isKol,
                                          uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6521
Estimated Gas Usage: 66977 - 326599
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:146

missionList[missionId] = KolMission(_isKol,
                                          uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6538
Estimated Gas Usage: 66977 - 326599
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:146

missionList[missionId] = KolMission(_isKol,
                                          uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6556
Estimated Gas Usage: 66977 - 326599
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:146

missionList[missionId] = KolMission(_isKol,
                                          uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6573
Estimated Gas Usage: 66977 - 326599
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:146

missionList[missionId] = KolMission(_isKol,
                                          uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6592
Estimated Gas Usage: 66977 - 326599
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:146

missionList[missionId] = KolMission(_isKol,
                                          uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6606
Estimated Gas Usage: 66977 - 326599
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:146

missionList[missionId] = KolMission(_isKol,
                                          uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6625
Estimated Gas Usage: 66977 - 326599
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:146

missionList[missionId] = KolMission(_isKol,
                                          uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6639
Estimated Gas Usage: 66977 - 326599
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:146

missionList[missionId] = KolMission(_isKol,
                                          uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6649
Estimated Gas Usage: 66977 - 326599
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:157

missionId++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6660
Estimated Gas Usage: 66977 - 326599
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:157

missionId++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLUSDTFund
Function name: createKolMission(bytes32,uint256,bool)
PC address: 6700
Estimated Gas Usage: 66977 - 326599
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:158

missionId

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256,bool), txdata: 0x78daffd1, value: 0x0


time_used: 33469.128094911575 seconds
#@contract_info_time
0x27750e6D41Aef99501eBC256538c6A13a254Ea15.sol:0.4.23:KOLUSDTFund:33469.128094911575:36100:60:36000
