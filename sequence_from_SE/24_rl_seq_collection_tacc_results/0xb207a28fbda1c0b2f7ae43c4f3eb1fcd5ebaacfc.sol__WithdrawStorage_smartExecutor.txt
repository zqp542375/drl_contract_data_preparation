++++ 0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol  :  0.5.0  :  WithdrawStorage ++++
655251735853922694967911662580490717076041977877 is added into actors.
Starting preprocessing.
number of genesis states: 1
total instructions: 9278
['constructor']:writes at the last depth:['0', '1', '2', '3', '4']
preprocessing: Achieved 68.30% coverage.
dynamic svars:['1']
static svars:['0', '2', '4', '3']
Ending preprocessing.
preprocessing time(s): 60.17128372192383
contract coverage: 44.32%
Function Reads: State variables read in conditions
	setRewardsAmount(address,uint256):['2']
	getLastWithdrawalPrice(address,address):['2']
	getWithdrawalLimitBalance(address,address):[]
	getCumulativePrice(address):['2']
	getStorageAddress():['2']
	unpause():[]
	isPauser(address):[]
	getWithdrawalLimitTotal(address,address):['2']
	getPendingWithdrawal(address,address):[]
	paused():[]
	renouncePauser():['1']
	renounceOwnership():['0']
	setWithdrawalLimitTotal(address,address,uint256):['2']
	addPauser(address):['1']
	setLastWithdrawalPrice(address,address,uint256):['2']
	pause():['1', '2']
	owner():[]
	isOwner():[]
	setStorage(address):['0']
	setWithdrawalLimitBalance(address,address,uint256):['2']
	changeOwner(address):['0']
	setCumulativePrice(address,uint256):['2']
	getLastCumulativeGlobalHoldersPrice(address,address):['2']
	configAddress():[]
	getRewardsAmount(address):['2']
	setPendingWithdrawal(address,address,uint256):['2']
	transferOwnership(address):['0']
	setLastCumulativeGlobalHoldersPrice(address,address,uint256):['2']
	createStorage():['0', '2']
	deleteAddress(bytes32):[]
	getAddress(bytes32):[]
	deleteBool(bytes32):[]
	setInt(bytes32,int256):[]
	deleteBytes(bytes32):[]
	setString(bytes32,string):['2']
	getBool(bytes32):[]
	deleteInt(bytes32):[]
	getString(bytes32):['1', '2']
	setBool(bytes32,bool):['2']
	getUint(bytes32):[]
	getBytes(bytes32):[]
	setAddress(bytes32,address):[]
	setBytes(bytes32,bytes32):[]
	getInt(bytes32):[]
	setUint(bytes32,uint256):[]
	deleteUint(bytes32):[]
	deleteString(bytes32):[]
	validate3Addresses(address,address,address,address):[]
	validateAddress(address,address):[]
	validateAddresses(address,address,address):[]
	validateGroups(address,address,address):[]
	validateIllegalAddress(address):[]
	validateGroup(address,address):[]
Function Writes: State variables written
	renounceOwnership():['0']
	getString(bytes32):['2']
	renouncePauser():['1']
	setStorage(address):['2']
	pause():['2']
	constructor:['0']
	transferOwnership(address):['0']
	createStorage():['2']
	addPauser(address):['1']
============================
iteration:3
targets:['setString(bytes32,string)', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'getCumulativePrice(address)', 'getRewardsAmount(address)', 'getLastWithdrawalPrice(address,address)', 'getWithdrawalLimitTotal(address,address)', 'setBool(bytes32,bool)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'setLastWithdrawalPrice(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'setCumulativePrice(address,uint256)', 'getStorageAddress()', 'createStorage()', 'getString(bytes32)', 'pause()', 'changeOwner(address)']
['renounceOwnership()']:writes at the last depth:['0']
['setStorage(address)']:writes at the last depth:['2']
['renouncePauser()']:writes at the last depth:['1']
['pause()']:writes at the last depth:['2']
['transferOwnership(address)']:writes at the last depth:['0']
['createStorage()']:writes at the last depth:['2']
['addPauser(address)']:writes at the last depth:['1']
contract coverage: 45.34%
============================
iteration:4
['addPauser(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 45.34%
============================
iteration:5
['addPauser(address)', 'addPauser(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 45.34%
============================
iteration:6
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 65.64%
============================
iteration:7
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 65.64%
============================
iteration:8
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 65.64%
============================
iteration:9
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 66.61%
============================
iteration:10
['addPauser(address)', 'addPauser(address)', 'pause()', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'pause()', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'pause()', 'getString(bytes32)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'pause()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'pause()', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'pause()', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'pause()', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'pause()', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 66.61%
============================
iteration:11
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 67.82%
============================
iteration:12
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:13
['addPauser(address)', 'addPauser(address)', 'renounceOwnership()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'renounceOwnership()', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'renounceOwnership()', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 67.82%
============================
iteration:14
['addPauser(address)', 'createStorage()', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:15
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:16
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:17
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:18
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:19
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:20
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:21
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:22
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastCumulativeGlobalHoldersPrice(address,address)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:23
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:24
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBool(bytes32,bool)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:25
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:26
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setString(bytes32,string)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:27
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:28
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:29
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setLastCumulativeGlobalHoldersPrice(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:30
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setString(bytes32,string)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setBool(bytes32,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'getLastCumulativeGlobalHoldersPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 67.82%
============================
iteration:31
contract coverage: 67.82%
============================
iteration:32
contract coverage: 67.82%
============================
iteration:33
contract coverage: 67.82%
============================
iteration:34
contract coverage: 67.82%
============================
iteration:35
contract coverage: 67.82%
============================
iteration:36
contract coverage: 67.82%
============================
iteration:37
contract coverage: 67.82%
============================
iteration:38
contract coverage: 67.82%
============================
iteration:39
contract coverage: 67.82%
============================
iteration:40
contract coverage: 67.82%
============================
iteration:41
contract coverage: 67.82%
============================
iteration:42
contract coverage: 67.82%
============================
iteration:43
contract coverage: 67.82%
============================
iteration:44
contract coverage: 67.82%
============================
iteration:45
contract coverage: 67.82%
============================
iteration:46
contract coverage: 67.82%
============================
iteration:47
contract coverage: 67.82%
#@statespace
19749 nodes, 19748 edges, 251761 total states
#@coverage
Achieved 3.28% coverage for code: 60806040523480156200001157600080fd5b5060405160208062006059833981018060405260208110156200003357600080fd5b810190808051906020019092919050505080600062000060620001fc640100000000026401000000009004565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620001306200011b620001fc640100000000026401000000009004565b62000204640100000000026401000000009004565b6000600260006101000a81548160ff02191690831515021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200019762000481565b604051809103906000f080158015620001b4573d6000803e3d6000fd5b50600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000492565b600033905090565b620002288160016200026e6401000000000262003766179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6200028982826200035d640100000000026401000000009004565b151515620002ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200042a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b604051610d16806200534383390190565b614ea180620004a26000396000f3fe608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630630ba681461017a57806306aa2d48146101d55780630ac252b91461025a5780631382da2c146102df578063393a4d34146103445780633f4ba83a1461039b57806346fbf68e146103b25780634f9bce8f1461041b5780635699c7b1146104a05780635c975abb146105255780636ef8d66d14610554578063715018a61461056b57806376446e831461058257806382dc1ec4146105fd57806383b41a401461064e5780638456cb59146106c95780638da5cb5b146106e05780638f32d59b146107375780639137c1a714610766578063a6f797aa146107b7578063a6f9dae114610832578063afca58a714610883578063d5d6be04146108de578063d6c3187114610963578063dbe93451146109ba578063dcaf498e14610a1f578063f2fde38b14610a9a578063f46694e614610aeb578063fb971d0114610b66575b600080fd5b34801561018657600080fd5b506101d36004803603604081101561019d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b7d565b005b3480156101e157600080fd5b50610244600480360360408110156101f857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dae565b6040518082815260200191505060405180910390f35b34801561026657600080fd5b506102c96004803603604081101561027d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e70565b6040518082815260200191505060405180910390f35b3480156102eb57600080fd5b5061032e6004803603602081101561030257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f32565b6040518082815260200191505060405180910390f35b34801561035057600080fd5b50610359610ff2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103a757600080fd5b506103b06110e2565b005b3480156103be57600080fd5b50610401600480360360208110156103d557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611297565b604051808215151515815260200191505060405180910390f35b34801561042757600080fd5b5061048a6004803603604081101561043e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112b4565b6040518082815260200191505060405180910390f35b3480156104ac57600080fd5b5061050f600480360360408110156104c357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611376565b6040518082815260200191505060405180910390f35b34801561053157600080fd5b5061053a611438565b604051808215151515815260200191505060405180910390f35b34801561056057600080fd5b5061056961144f565b005b34801561057757600080fd5b50610580611461565b005b34801561058e57600080fd5b506105fb600480360360608110156105a557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061159c565b005b34801561060957600080fd5b5061064c6004803603602081101561062057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117cf565b005b34801561065a57600080fd5b506106c76004803603606081101561067157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611885565b005b3480156106d557600080fd5b506106de611ab8565b005b3480156106ec57600080fd5b506106f5611c6e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561074357600080fd5b5061074c611c97565b604051808215151515815260200191505060405180910390f35b34801561077257600080fd5b506107b56004803603602081101561078957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cf5565b005b3480156107c357600080fd5b50610830600480360360608110156107da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611db5565b005b34801561083e57600080fd5b506108816004803603602081101561085557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fe8565b005b34801561088f57600080fd5b506108dc600480360360408110156108a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061213c565b005b3480156108ea57600080fd5b5061094d6004803603604081101561090157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061236d565b6040518082815260200191505060405180910390f35b34801561096f57600080fd5b5061097861242f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109c657600080fd5b50610a09600480360360208110156109dd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612459565b6040518082815260200191505060405180910390f35b348015610a2b57600080fd5b50610a9860048036036060811015610a4257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612519565b005b348015610aa657600080fd5b50610ae960048036036020811015610abd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061274c565b005b348015610af757600080fd5b50610b6460048036036060811015610b0e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506127d4565b005b348015610b7257600080fd5b50610b7b612a07565b005b610b85612bb6565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933610ba9612be0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610c0a57600080fd5b505afa158015610c1e573d6000803e3d6000fd5b505050506040513d6020811015610c3457600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015610cf457600080fd5b505afa158015610d08573d6000803e3d6000fd5b50505050610d14612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a610d3884612d7d565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610d9257600080fd5b505af1158015610da6573d6000803e3d6000fd5b505050505050565b6000610db8612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610ddd8585612e10565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610e2d57600080fd5b505afa158015610e41573d6000803e3d6000fd5b505050506040513d6020811015610e5757600080fd5b8101908080519060200190929190505050905092915050565b6000610e7a612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610e9f8585612ee7565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610eef57600080fd5b505afa158015610f03573d6000803e3d6000fd5b505050506040513d6020811015610f1957600080fd5b8101908080519060200190929190505050905092915050565b6000610f3c612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610f6084612fbe565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610fb057600080fd5b505afa158015610fc4573d6000803e3d6000fd5b505050506040513d6020811015610fda57600080fd5b81019080805190602001909291905050509050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156110ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6110f26110ed613051565b611297565b151561118c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900460ff161515611210576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611254613051565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60006112ad82600161305990919063ffffffff16565b9050919050565b60006112be612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56112e3858561317c565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561133357600080fd5b505afa158015611347573d6000803e3d6000fd5b505050506040513d602081101561135d57600080fd5b8101908080519060200190929190505050905092915050565b6000611380612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56113a58585613253565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156113f557600080fd5b505afa158015611409573d6000803e3d6000fd5b505050506040513d602081101561141f57600080fd5b8101908080519060200190929190505050905092915050565b6000600260009054906101000a900460ff16905090565b61145f61145a613051565b61332a565b565b611469611c97565b15156114dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6115a4612bb6565b73ffffffffffffffffffffffffffffffffffffffff166349616d79336115c8612be0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561162957600080fd5b505afa15801561163d573d6000803e3d6000fd5b505050506040513d602081101561165357600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561171357600080fd5b505afa158015611727573d6000803e3d6000fd5b50505050611733612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611758858561317c565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156117b257600080fd5b505af11580156117c6573d6000803e3d6000fd5b50505050505050565b6117df6117da613051565b611297565b1515611879576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b61188281613384565b50565b61188d612bb6565b73ffffffffffffffffffffffffffffffffffffffff166349616d79336118b1612be0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561191257600080fd5b505afa158015611926573d6000803e3d6000fd5b505050506040513d602081101561193c57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156119fc57600080fd5b505afa158015611a10573d6000803e3d6000fd5b50505050611a1c612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611a418585612e10565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611a9b57600080fd5b505af1158015611aaf573d6000803e3d6000fd5b50505050505050565b611ac8611ac3613051565b611297565b1515611b62576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900460ff16151515611be7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c2b613051565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611cd9613051565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b611cfd611c97565b1515611d71576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611dbd612bb6565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611de1612be0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611e4257600080fd5b505afa158015611e56573d6000803e3d6000fd5b505050506040513d6020811015611e6c57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015611f2c57600080fd5b505afa158015611f40573d6000803e3d6000fd5b50505050611f4c612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611f718585612ee7565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611fcb57600080fd5b505af1158015611fdf573d6000803e3d6000fd5b50505050505050565b611ff0611c97565b1515612064576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a6f9dae1826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561212157600080fd5b505af1158015612135573d6000803e3d6000fd5b5050505050565b612144612bb6565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933612168612be0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156121c957600080fd5b505afa1580156121dd573d6000803e3d6000fd5b505050506040513d60208110156121f357600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156122b357600080fd5b505afa1580156122c7573d6000803e3d6000fd5b505050506122d3612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6122f784612fbe565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561235157600080fd5b505af1158015612365573d6000803e3d6000fd5b505050505050565b6000612377612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f561239c85856133de565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156123ec57600080fd5b505afa158015612400573d6000803e3d6000fd5b505050506040513d602081101561241657600080fd5b8101908080519060200190929190505050905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000612463612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f561248784612d7d565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156124d757600080fd5b505afa1580156124eb573d6000803e3d6000fd5b505050506040513d602081101561250157600080fd5b81019080805190602001909291905050509050919050565b612521612bb6565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933612545612be0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156125a657600080fd5b505afa1580156125ba573d6000803e3d6000fd5b505050506040513d60208110156125d057600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561269057600080fd5b505afa1580156126a4573d6000803e3d6000fd5b505050506126b0612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6126d58585613253565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561272f57600080fd5b505af1158015612743573d6000803e3d6000fd5b50505050505050565b612754611c97565b15156127c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6127d1816134db565b50565b6127dc612bb6565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933612800612be0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561286157600080fd5b505afa158015612875573d6000803e3d6000fd5b505050506040513d602081101561288b57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561294b57600080fd5b505afa15801561295f573d6000803e3d6000fd5b5050505061296b612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a61299085856133de565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156129ea57600080fd5b505af11580156129fe573d6000803e3d6000fd5b50505050505050565b612a0f611c97565b1515612a83576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612b49576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f73746f726167652069732073657474656400000000000000000000000000000081525060200191505060405180910390fd5b6000612b53613843565b604051809103906000f080158015612b6f573d6000803e3d6000fd5b50905080600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612cd2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b60001515612cde611438565b1515141515612d55576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f596f752063616e6e6f742075736520746861740000000000000000000000000081525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008160405160200180807f5f72657761726473416d6f756e74000000000000000000000000000000000000815250600e018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b6000828260405160200180807f5f6c6173745769746864726177616c50726963650000000000000000000000008152506014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b6000828260405160200180807f5f7769746864726177616c4c696d697442616c616e63650000000000000000008152506017018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b60008160405160200180807f5f63756d756c61746976655072696365000000000000000000000000000000008152506010018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515613125576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000828260405160200180807f5f7769746864726177616c4c696d6974546f74616c00000000000000000000008152506015018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b6000828260405160200180807f5f70656e64696e675769746864726177616c00000000000000000000000000008152506012018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b61333e81600161366490919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b61339881600161376690919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6000828260405160200180807f5f6c61737443756d756c6174697665476c6f62616c486f6c646572735072696381526020017f65000000000000000000000000000000000000000000000000000000000000008152506021018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156135a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61366e8282613059565b1515613708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c81526020017f650000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6137708282613059565b1515156137e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b604051611622806138548339019056fe6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b506115c2806100606000396000f3fe608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a72305820658348ee549785b781d61b311f2e29ecc8f564ab568175288429f9af1a9042b80029a165627a7a72305820cd86db3385e041916b5e09d5bb004fb0d50945facf4733ee86b4ae534862235c0029608060405234801561001057600080fd5b50610cf6806100206000396000f3fe608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631bde7d8f1461007d57806349616d791461012e5780636dd893b91461019f578063a219296314610230578063b292b549146102c1578063d16ff47014610312575b600080fd5b34801561008957600080fd5b5061012c600480360360808110156100a057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610383565b005b34801561013a57600080fd5b5061019d6004803603604081101561015157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061050a565b005b3480156101ab57600080fd5b5061022e600480360360608110156101c257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061061c565b005b34801561023c57600080fd5b506102bf6004803603606081101561025357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610769565b005b3480156102cd57600080fd5b50610310600480360360208110156102e457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a00565b005b34801561031e57600080fd5b506103816004803603604081101561033557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b13565b005b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156103bc57610504565b8173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156103f557610504565b8073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610502576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104c75780820151818401526020810190506104ac565b50505050905090810190601f1680156104f45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b50505050565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610617576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156105dc5780820151818401526020810190506105c1565b50505050905090810190601f1680156106095780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561065557610764565b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610762576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561072757808201518184015260208101905061070c565b50505050905090810190601f1680156107545780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b8173ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561080257600080fd5b505afa158015610816573d6000803e3d6000fd5b505050506040513d602081101561082c57600080fd5b810190808051906020019092919050505015610847576109fb565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156108e057600080fd5b505afa1580156108f4573d6000803e3d6000fd5b505050506040513d602081101561090a57600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156109f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109be5780820151818401526020810190506109a3565b50505050905090810190601f1680156109eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610b0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ad4578082015181840152602081019050610ab9565b50505050905090810190601f168015610b015780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610bac57600080fd5b505afa158015610bc0573d6000803e3d6000fd5b505050506040513d6020811015610bd657600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610cc5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c8a578082015181840152602081019050610c6f565b50505050905090810190601f168015610cb75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505056fea165627a7a72305820757ba9c1807965a4b2ebd460fbef2d8c2cbab93906a965339f945e6a2e9003130029
#@coverage
Achieved 0.94% coverage for code: 608060405234801561001057600080fd5b50610cf6806100206000396000f3fe608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631bde7d8f1461007d57806349616d791461012e5780636dd893b91461019f578063a219296314610230578063b292b549146102c1578063d16ff47014610312575b600080fd5b34801561008957600080fd5b5061012c600480360360808110156100a057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610383565b005b34801561013a57600080fd5b5061019d6004803603604081101561015157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061050a565b005b3480156101ab57600080fd5b5061022e600480360360608110156101c257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061061c565b005b34801561023c57600080fd5b506102bf6004803603606081101561025357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610769565b005b3480156102cd57600080fd5b50610310600480360360208110156102e457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a00565b005b34801561031e57600080fd5b506103816004803603604081101561033557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b13565b005b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156103bc57610504565b8173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156103f557610504565b8073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610502576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104c75780820151818401526020810190506104ac565b50505050905090810190601f1680156104f45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b50505050565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610617576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156105dc5780820151818401526020810190506105c1565b50505050905090810190601f1680156106095780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561065557610764565b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610762576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561072757808201518184015260208101905061070c565b50505050905090810190601f1680156107545780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b8173ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561080257600080fd5b505afa158015610816573d6000803e3d6000fd5b505050506040513d602081101561082c57600080fd5b810190808051906020019092919050505015610847576109fb565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156108e057600080fd5b505afa1580156108f4573d6000803e3d6000fd5b505050506040513d602081101561090a57600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156109f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109be5780820151818401526020810190506109a3565b50505050905090810190601f1680156109eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610b0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ad4578082015181840152602081019050610ab9565b50505050905090810190601f168015610b015780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610bac57600080fd5b505afa158015610bc0573d6000803e3d6000fd5b505050506040513d6020811015610bd657600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610cc5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c8a578082015181840152602081019050610c6f565b50505050905090810190601f168015610cb75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505056fea165627a7a72305820757ba9c1807965a4b2ebd460fbef2d8c2cbab93906a965339f945e6a2e900313002900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
#@coverage
Achieved 67.82% coverage for code: 608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630630ba681461017a57806306aa2d48146101d55780630ac252b91461025a5780631382da2c146102df578063393a4d34146103445780633f4ba83a1461039b57806346fbf68e146103b25780634f9bce8f1461041b5780635699c7b1146104a05780635c975abb146105255780636ef8d66d14610554578063715018a61461056b57806376446e831461058257806382dc1ec4146105fd57806383b41a401461064e5780638456cb59146106c95780638da5cb5b146106e05780638f32d59b146107375780639137c1a714610766578063a6f797aa146107b7578063a6f9dae114610832578063afca58a714610883578063d5d6be04146108de578063d6c3187114610963578063dbe93451146109ba578063dcaf498e14610a1f578063f2fde38b14610a9a578063f46694e614610aeb578063fb971d0114610b66575b600080fd5b34801561018657600080fd5b506101d36004803603604081101561019d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b7d565b005b3480156101e157600080fd5b50610244600480360360408110156101f857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dae565b6040518082815260200191505060405180910390f35b34801561026657600080fd5b506102c96004803603604081101561027d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e70565b6040518082815260200191505060405180910390f35b3480156102eb57600080fd5b5061032e6004803603602081101561030257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f32565b6040518082815260200191505060405180910390f35b34801561035057600080fd5b50610359610ff2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103a757600080fd5b506103b06110e2565b005b3480156103be57600080fd5b50610401600480360360208110156103d557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611297565b604051808215151515815260200191505060405180910390f35b34801561042757600080fd5b5061048a6004803603604081101561043e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112b4565b6040518082815260200191505060405180910390f35b3480156104ac57600080fd5b5061050f600480360360408110156104c357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611376565b6040518082815260200191505060405180910390f35b34801561053157600080fd5b5061053a611438565b604051808215151515815260200191505060405180910390f35b34801561056057600080fd5b5061056961144f565b005b34801561057757600080fd5b50610580611461565b005b34801561058e57600080fd5b506105fb600480360360608110156105a557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061159c565b005b34801561060957600080fd5b5061064c6004803603602081101561062057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117cf565b005b34801561065a57600080fd5b506106c76004803603606081101561067157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611885565b005b3480156106d557600080fd5b506106de611ab8565b005b3480156106ec57600080fd5b506106f5611c6e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561074357600080fd5b5061074c611c97565b604051808215151515815260200191505060405180910390f35b34801561077257600080fd5b506107b56004803603602081101561078957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cf5565b005b3480156107c357600080fd5b50610830600480360360608110156107da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611db5565b005b34801561083e57600080fd5b506108816004803603602081101561085557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fe8565b005b34801561088f57600080fd5b506108dc600480360360408110156108a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061213c565b005b3480156108ea57600080fd5b5061094d6004803603604081101561090157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061236d565b6040518082815260200191505060405180910390f35b34801561096f57600080fd5b5061097861242f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109c657600080fd5b50610a09600480360360208110156109dd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612459565b6040518082815260200191505060405180910390f35b348015610a2b57600080fd5b50610a9860048036036060811015610a4257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612519565b005b348015610aa657600080fd5b50610ae960048036036020811015610abd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061274c565b005b348015610af757600080fd5b50610b6460048036036060811015610b0e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506127d4565b005b348015610b7257600080fd5b50610b7b612a07565b005b610b85612bb6565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933610ba9612be0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610c0a57600080fd5b505afa158015610c1e573d6000803e3d6000fd5b505050506040513d6020811015610c3457600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015610cf457600080fd5b505afa158015610d08573d6000803e3d6000fd5b50505050610d14612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a610d3884612d7d565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610d9257600080fd5b505af1158015610da6573d6000803e3d6000fd5b505050505050565b6000610db8612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610ddd8585612e10565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610e2d57600080fd5b505afa158015610e41573d6000803e3d6000fd5b505050506040513d6020811015610e5757600080fd5b8101908080519060200190929190505050905092915050565b6000610e7a612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610e9f8585612ee7565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610eef57600080fd5b505afa158015610f03573d6000803e3d6000fd5b505050506040513d6020811015610f1957600080fd5b8101908080519060200190929190505050905092915050565b6000610f3c612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610f6084612fbe565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610fb057600080fd5b505afa158015610fc4573d6000803e3d6000fd5b505050506040513d6020811015610fda57600080fd5b81019080805190602001909291905050509050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156110ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6110f26110ed613051565b611297565b151561118c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900460ff161515611210576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611254613051565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60006112ad82600161305990919063ffffffff16565b9050919050565b60006112be612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56112e3858561317c565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561133357600080fd5b505afa158015611347573d6000803e3d6000fd5b505050506040513d602081101561135d57600080fd5b8101908080519060200190929190505050905092915050565b6000611380612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56113a58585613253565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156113f557600080fd5b505afa158015611409573d6000803e3d6000fd5b505050506040513d602081101561141f57600080fd5b8101908080519060200190929190505050905092915050565b6000600260009054906101000a900460ff16905090565b61145f61145a613051565b61332a565b565b611469611c97565b15156114dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6115a4612bb6565b73ffffffffffffffffffffffffffffffffffffffff166349616d79336115c8612be0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561162957600080fd5b505afa15801561163d573d6000803e3d6000fd5b505050506040513d602081101561165357600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561171357600080fd5b505afa158015611727573d6000803e3d6000fd5b50505050611733612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611758858561317c565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156117b257600080fd5b505af11580156117c6573d6000803e3d6000fd5b50505050505050565b6117df6117da613051565b611297565b1515611879576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b61188281613384565b50565b61188d612bb6565b73ffffffffffffffffffffffffffffffffffffffff166349616d79336118b1612be0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561191257600080fd5b505afa158015611926573d6000803e3d6000fd5b505050506040513d602081101561193c57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156119fc57600080fd5b505afa158015611a10573d6000803e3d6000fd5b50505050611a1c612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611a418585612e10565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611a9b57600080fd5b505af1158015611aaf573d6000803e3d6000fd5b50505050505050565b611ac8611ac3613051565b611297565b1515611b62576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900460ff16151515611be7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c2b613051565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611cd9613051565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b611cfd611c97565b1515611d71576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611dbd612bb6565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611de1612be0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611e4257600080fd5b505afa158015611e56573d6000803e3d6000fd5b505050506040513d6020811015611e6c57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015611f2c57600080fd5b505afa158015611f40573d6000803e3d6000fd5b50505050611f4c612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611f718585612ee7565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611fcb57600080fd5b505af1158015611fdf573d6000803e3d6000fd5b50505050505050565b611ff0611c97565b1515612064576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a6f9dae1826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561212157600080fd5b505af1158015612135573d6000803e3d6000fd5b5050505050565b612144612bb6565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933612168612be0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156121c957600080fd5b505afa1580156121dd573d6000803e3d6000fd5b505050506040513d60208110156121f357600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156122b357600080fd5b505afa1580156122c7573d6000803e3d6000fd5b505050506122d3612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6122f784612fbe565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561235157600080fd5b505af1158015612365573d6000803e3d6000fd5b505050505050565b6000612377612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f561239c85856133de565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156123ec57600080fd5b505afa158015612400573d6000803e3d6000fd5b505050506040513d602081101561241657600080fd5b8101908080519060200190929190505050905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000612463612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f561248784612d7d565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156124d757600080fd5b505afa1580156124eb573d6000803e3d6000fd5b505050506040513d602081101561250157600080fd5b81019080805190602001909291905050509050919050565b612521612bb6565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933612545612be0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156125a657600080fd5b505afa1580156125ba573d6000803e3d6000fd5b505050506040513d60208110156125d057600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561269057600080fd5b505afa1580156126a4573d6000803e3d6000fd5b505050506126b0612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6126d58585613253565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561272f57600080fd5b505af1158015612743573d6000803e3d6000fd5b50505050505050565b612754611c97565b15156127c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6127d1816134db565b50565b6127dc612bb6565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933612800612be0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561286157600080fd5b505afa158015612875573d6000803e3d6000fd5b505050506040513d602081101561288b57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561294b57600080fd5b505afa15801561295f573d6000803e3d6000fd5b5050505061296b612c0a565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a61299085856133de565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156129ea57600080fd5b505af11580156129fe573d6000803e3d6000fd5b50505050505050565b612a0f611c97565b1515612a83576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612b49576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f73746f726167652069732073657474656400000000000000000000000000000081525060200191505060405180910390fd5b6000612b53613843565b604051809103906000f080158015612b6f573d6000803e3d6000fd5b50905080600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612cd2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b60001515612cde611438565b1515141515612d55576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f596f752063616e6e6f742075736520746861740000000000000000000000000081525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008160405160200180807f5f72657761726473416d6f756e74000000000000000000000000000000000000815250600e018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b6000828260405160200180807f5f6c6173745769746864726177616c50726963650000000000000000000000008152506014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b6000828260405160200180807f5f7769746864726177616c4c696d697442616c616e63650000000000000000008152506017018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b60008160405160200180807f5f63756d756c61746976655072696365000000000000000000000000000000008152506010018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515613125576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000828260405160200180807f5f7769746864726177616c4c696d6974546f74616c00000000000000000000008152506015018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b6000828260405160200180807f5f70656e64696e675769746864726177616c00000000000000000000000000008152506012018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b61333e81600161366490919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b61339881600161376690919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6000828260405160200180807f5f6c61737443756d756c6174697665476c6f62616c486f6c646572735072696381526020017f65000000000000000000000000000000000000000000000000000000000000008152506021018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156135a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61366e8282613059565b1515613708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c81526020017f650000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6137708282613059565b1515156137e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b604051611622806138548339019056fe6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b506115c2806100606000396000f3fe608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a72305820658348ee549785b781d61b311f2e29ecc8f564ab568175288429f9af1a9042b80029a165627a7a72305820cd86db3385e041916b5e09d5bb004fb0d50945facf4733ee86b4ae534862235c0029
#@coverage
Achieved 1.24% coverage for code: 6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b506115c2806100606000396000f3fe608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a72305820658348ee549785b781d61b311f2e29ecc8f564ab568175288429f9af1a9042b800290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
#@coverage
Achieved 15.25% coverage for code: 608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a72305820658348ee549785b781d61b311f2e29ecc8f564ab568175288429f9af1a9042b80029
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setRewardsAmount(address,uint256)
PC address: 3319
Estimated Gas Usage: 9682 - 115495
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:552

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c48001010201040101010280808080800280800402, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [ATTACKER], function: setRewardsAmount(address,uint256), txdata: 0x0630ba681d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000001d1d1d1d1d1d1d1d1d1d1d1d0000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: WithdrawStorage
Function name: setRewardsAmount(address,uint256)
PC address: 3477
Estimated Gas Usage: 9682 - 115495
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:554

eternalStorage().setUint(getRewardsAmountKey(_property), _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000002001010108800202010101012020010101200101, decoded_data: ('0x2001010108800202010101012020010101200101',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c40208041008018001400810018004804002800101, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a7010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setRewardsAmount(address,uint256), txdata: 0x0630ba681e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e0000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setRewardsAmount(address,uint256)
PC address: 3477
Estimated Gas Usage: 9682 - 115495
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:554

eternalStorage().setUint(getRewardsAmountKey(_property), _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0
Caller: [ATTACKER], function: addPauser(address), txdata: 0x82dc1ec41e1e1e1e1e1e1e1e1e1e1e1e8080010180002000026a10024000800080010410, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a78080808080808080808080802000000000080000000000000000010000000000, value: 0x0
Caller: [CREATOR], function: setRewardsAmount(address,uint256), txdata: 0x0630ba6880808080808080808080808000000000000000000000000000000000000000008080808080808080808080800000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setWithdrawalLimitTotal(address,address,uint256)
PC address: 5910
Estimated Gas Usage: 10029 - 115937
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:604

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c40820028080028020408002400410400880402040, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setWithdrawalLimitTotal(address,address,uint256), txdata: 0x76446e83808080808080808080808080000000000000000000000000000000000000000080808080808080808080808000000000000000000000000000000000000000008080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: WithdrawStorage
Function name: setWithdrawalLimitTotal(address,address,uint256)
PC address: 6069
Estimated Gas Usage: 10029 - 115937
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:606

eternalStorage().setUint(
			getWithdrawalLimitTotalKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000002000080000084002af4020801020041080044004, decoded_data: ('0x2000080000084002af4020801020041080044004',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c48001008000000002208002000100040210022001, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a7010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setWithdrawalLimitTotal(address,address,uint256), txdata: 0x76446e831e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setWithdrawalLimitTotal(address,address,uint256)
PC address: 6069
Estimated Gas Usage: 10029 - 115937
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:606

eternalStorage().setUint(
			getWithdrawalLimitTotalKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000000100000000040200044000010004010280000208, decoded_data: ('0x0100000000040200044000010004010280000208',), value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [ATTACKER], function: setWithdrawalLimitTotal(address,address,uint256), txdata: 0x76446e831e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000001000000000001e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setLastWithdrawalPrice(address,address,uint256)
PC address: 6655
Estimated Gas Usage: 10070 - 115978
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:676

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0
Caller: [ATTACKER], function: addPauser(address), txdata: 0x82dc1ec41e1e1e1e1e1e1e1e1e1e1e1e8008000201804008800110014080010420014004, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setLastWithdrawalPrice(address,address,uint256), txdata: 0x83b41a40808080808080808080808080000000000000000000000000000000000000000080808080808080808080808000000000000000000000000000000000000000008080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: WithdrawStorage
Function name: setLastWithdrawalPrice(address,address,uint256)
PC address: 6814
Estimated Gas Usage: 10070 - 115978
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:678

eternalStorage().setUint(
			getLastWithdrawalPriceKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000000120010101080140208040084000018000088004, decoded_data: ('0x0120010101080140208040084000018000088004',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c44020400080800200020040800002080840088008, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a71e1e1e1e1e1e1e1e1e1e1e1edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setLastWithdrawalPrice(address,address,uint256), txdata: 0x83b41a401e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setLastWithdrawalPrice(address,address,uint256)
PC address: 6814
Estimated Gas Usage: 10070 - 115978
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:678

eternalStorage().setUint(
			getLastWithdrawalPriceKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec48080808080808080808080800101020108011001020108010110082001012040, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a71e1e1e1e1e1e1e1e1e1e1e1e0100040000000000000000000020010101400104, value: 0x0
Caller: [CREATOR], function: setLastWithdrawalPrice(address,address,uint256), txdata: 0x83b41a40808080808080808080808080000000000000000000000000000000000000000080808080808080808080808000000000000000000000000000000000000000008080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setWithdrawalLimitBalance(address,address,uint256)
PC address: 7983
Estimated Gas Usage: 10183 - 116091
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:640

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec400000000000000000000000070c68180a82e82617a92d1be0d7975d662025010, decoded_data: ('0x70c68180a82e82617a92d1be0d7975d662025010',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec41e1e1e1e1e1e1e1e1e1e1e1e0101800180012004048002208080011080080000, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setWithdrawalLimitBalance(address,address,uint256), txdata: 0xa6f797aa0d0d0d0d0d0d0d0d0d0d0d0d00000000000000000000000000000000000000000d0d0d0d0d0d0d0d0d0d0d0d00000000000000000000000000000000000000000d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: WithdrawStorage
Function name: setWithdrawalLimitBalance(address,address,uint256)
PC address: 8142
Estimated Gas Usage: 10183 - 116091
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:642

eternalStorage().setUint(
			getWithdrawalLimitBalanceKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c40000000080008010808002048020102010020240, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a71e1e1e1e1e1e1e1e1e1e1e1edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setWithdrawalLimitBalance(address,address,uint256), txdata: 0xa6f797aa1e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setWithdrawalLimitBalance(address,address,uint256)
PC address: 8142
Estimated Gas Usage: 10183 - 116091
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:642

eternalStorage().setUint(
			getWithdrawalLimitBalanceKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000400280ff40014001010101010401020801041001, decoded_data: ('0x400280ff40014001010101010401020801041001',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4ffffffffffffffffffffffff0140080210801001808001014001400802010180, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a70101010101010101010101010000000000000000000002100000004080018080, value: 0x0
Caller: [CREATOR], function: setWithdrawalLimitBalance(address,address,uint256), txdata: 0xa6f797aa1e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: WithdrawStorage
Function name: changeOwner(address)
PC address: 8484
Estimated Gas Usage: 4029 - 39160
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:404

EternalStorage(_storage).changeOwner(newOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000804010fe80204001010480082040012001018001, decoded_data: ('0x804010fe80204001010480082040012001018001',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec48080808080808080808080800101010101020000000000000000000000100000, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a7808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: changeOwner(address), txdata: 0xa6f9dae11e1e1e1e1e1e1e1e1e1e1e1e0000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setCumulativePrice(address,uint256)
PC address: 8886
Estimated Gas Usage: 10144 - 115957
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:577

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000000140400101208002010208200101021008400201, decoded_data: ('0x0140400101208002010208200101021008400201',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c40401014004010401014001800804800800200100, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setCumulativePrice(address,uint256), txdata: 0xafca58a71e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e0000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: WithdrawStorage
Function name: setCumulativePrice(address,uint256)
PC address: 9044
Estimated Gas Usage: 10144 - 115957
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:579

eternalStorage().setUint(getCumulativePriceKey(_property), _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c40000000110808080af8010808002081004801040, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a7010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setCumulativePrice(address,uint256), txdata: 0xafca58a720202020202020202020202000000000000000000000000000000000000000002020202020202020202020200000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setCumulativePrice(address,uint256)
PC address: 9044
Estimated Gas Usage: 10144 - 115957
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:579

eternalStorage().setUint(getCumulativePriceKey(_property), _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0
Caller: [ATTACKER], function: addPauser(address), txdata: 0x82dc1ec4adadadadadadadadadadadad0202028001804020080101014000010102800210, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a72020202020202020202020208001000000000000000001010101011000010000, value: 0x0
Caller: [CREATOR], function: setCumulativePrice(address,uint256), txdata: 0xafca58a720202020202020202020202000000000000000000000000000000000000000002020202020202020202020200000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setPendingWithdrawal(address,address,uint256)
PC address: 9875
Estimated Gas Usage: 10312 - 116220
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:712

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000000004200104018002010280010001010100808002, decoded_data: ('0x0004200104018002010280010001010100808002',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec41e1e1e1e1e1e1e1e1e1e1e1e0101802004040240048002020110000280400000, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setPendingWithdrawal(address,address,uint256), txdata: 0xdcaf498e1d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000001d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000001d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: WithdrawStorage
Function name: setPendingWithdrawal(address,address,uint256)
PC address: 10034
Estimated Gas Usage: 10312 - 116220
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:714

eternalStorage().setUint(
			getPendingWithdrawalKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c40000000000000000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a7010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setPendingWithdrawal(address,address,uint256), txdata: 0xdcaf498e1e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setPendingWithdrawal(address,address,uint256)
PC address: 10034
Estimated Gas Usage: 10312 - 116220
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:714

eternalStorage().setUint(
			getPendingWithdrawalKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000001001800120200208800108404001408008020110, decoded_data: ('0x1001800120200208800108404001408008020110',), value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setPendingWithdrawal(address,address,uint256), txdata: 0xdcaf498e1d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000001d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000001d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setLastCumulativeGlobalHoldersPrice(address,address,uint256)
PC address: 10574
Estimated Gas Usage: 10380 - 116383
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:744

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000008008088080804080088001800280080102800180, decoded_data: ('0x8008088080804080088001800280080102800180',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c44001080201041001048080808080808080014080, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [ATTACKER], function: setLastCumulativeGlobalHoldersPrice(address,address,uint256), txdata: 0xf46694e61e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setLastCumulativeGlobalHoldersPrice(address,address,uint256)
PC address: 10733
Estimated Gas Usage: 10380 - 116383
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:746

eternalStorage().setUint(
			getLastCumulativeGlobalHoldersPriceKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000002080000100040020000040200240080108102004, decoded_data: ('0x2080000100040020000040200240080108102004',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c40102042080202020108020400202010480021004, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a71e1e1e1e1e1e1e1e1e1e1e1e0000000000000000020240000008010102008040, value: 0x0
Caller: [CREATOR], function: setLastCumulativeGlobalHoldersPrice(address,address,uint256), txdata: 0xf46694e6202020202020202020202020000000000000000000000000000000000000000020202020202020202020202000000000000000000000000000000000000000002020202020202020202020202020202020202020202020202020202020202020, value: 0x0


time_used: 36130.7069337368 seconds
#@contract_info_time
0xb207a28fbda1c0b2f7ae43c4f3eb1fcd5ebaacfc.sol:0.5.0:WithdrawStorage:36130.7069337368:36100:60:36000
