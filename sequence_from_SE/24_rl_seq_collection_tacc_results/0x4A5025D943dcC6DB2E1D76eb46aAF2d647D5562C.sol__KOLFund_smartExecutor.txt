++++ 0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol  :  0.4.23  :  KOLFund ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 5949
['constructor']:writes at the last depth:['1', '2', '4', '5', '0', '3']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 99.53% coverage.
dynamic svars:['1', '2', '7', '6', '9']
static svars:['5', '0', '4', '3']
Ending preprocessing.
preprocessing time(s): 103.0044755935669
contract coverage: 72.40%
getOfferings(uint256,uint256) is not reachable
name() is not reachable
symbol() is not reachable
Function Reads: State variables read in conditions
	excuteVote(uint256):['0', '7', '9']
	name():[]
	createKolMission(bytes32,uint256):[]
	minNodes():[]
	minSuperNodes():[]
	getOfferings(uint256,uint256):[]
	most():[]
	halfSuperNodes():[]
	addKolOffering(uint256,address,uint256):['7']
	voteMission(uint16,uint256,bool):['6', '7']
	owner():[]
	totalNodes():[]
	symbol():[]
	mostNodes():[]
	totalSuperNodes():[]
	missionId():[]
	getMission2(uint256):[]
	dealTime():[]
	voted(address,uint256):[]
	less():[]
	getMission1(uint256):[]
	halfNodes():[]
	half():[]
	token():[]
Function Writes: State variables written
	createKolMission(bytes32,uint256):['7', '5']
	excuteVote(uint256):['7']
	voteMission(uint16,uint256,bool):['6', '7']
	addKolOffering(uint256,address,uint256):['9']
============================
iteration:3
targets:['excuteVote(uint256)', 'getOfferings(uint256,uint256)', 'addKolOffering(uint256,address,uint256)', 'voteMission(uint16,uint256,bool)', 'name()', 'symbol()']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['createKolMission(bytes32,uint256)']:writes at the last depth:['7', '5']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['createKolMission(bytes32,uint256)']:writes at the last depth:['7', '5']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
contract coverage: 72.45%
============================
iteration:4
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
contract coverage: 72.45%
============================
iteration:5
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
contract coverage: 72.45%
============================
iteration:6
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
contract coverage: 72.45%
============================
iteration:7
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
contract coverage: 72.45%
============================
iteration:8
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
contract coverage: 72.45%
============================
iteration:9
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
contract coverage: 72.45%
============================
iteration:10
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
contract coverage: 72.45%
============================
iteration:11
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
contract coverage: 72.45%
============================
iteration:12
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'createKolMission(bytes32,uint256)']:writes at the last depth:['', '5']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
['voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)', 'voteMission(uint16,uint256,bool)']:writes at the last depth:['6', '7']
contract coverage: 72.45%
============================
iteration:13
contract coverage: 72.45%
============================
iteration:14
contract coverage: 72.45%
============================
iteration:15
contract coverage: 72.45%
============================
iteration:16
contract coverage: 72.45%
============================
iteration:17
contract coverage: 72.45%
============================
iteration:18
contract coverage: 72.45%
============================
iteration:19
contract coverage: 72.45%
============================
iteration:20
contract coverage: 72.45%
============================
iteration:21
contract coverage: 72.45%
============================
iteration:22
contract coverage: 72.45%
============================
iteration:23
contract coverage: 72.45%
============================
iteration:24
contract coverage: 72.45%
============================
iteration:25
contract coverage: 72.45%
============================
iteration:26
contract coverage: 72.45%
============================
iteration:27
contract coverage: 72.45%
============================
iteration:28
contract coverage: 72.45%
============================
iteration:29
contract coverage: 72.45%
============================
iteration:30
contract coverage: 72.45%
============================
iteration:31
contract coverage: 72.45%
============================
iteration:32
contract coverage: 72.45%
============================
iteration:33
contract coverage: 72.45%
============================
iteration:34
contract coverage: 72.45%
============================
iteration:35
contract coverage: 72.45%
============================
iteration:36
contract coverage: 72.45%
============================
iteration:37
contract coverage: 72.45%
============================
iteration:38
contract coverage: 72.45%
============================
iteration:39
contract coverage: 72.45%
============================
iteration:40
contract coverage: 72.45%
============================
iteration:41
contract coverage: 72.45%
============================
iteration:42
contract coverage: 72.45%
============================
iteration:43
contract coverage: 72.45%
============================
iteration:44
contract coverage: 72.45%
============================
iteration:45
contract coverage: 72.45%
============================
iteration:46
contract coverage: 72.45%
============================
iteration:47
contract coverage: 72.45%
============================
iteration:48
contract coverage: 72.45%
============================
iteration:49
contract coverage: 72.45%
============================
iteration:50
contract coverage: 72.45%
============================
iteration:51
contract coverage: 72.45%
============================
iteration:52
contract coverage: 72.45%
============================
iteration:53
contract coverage: 72.45%
============================
iteration:54
contract coverage: 72.45%
============================
iteration:55
contract coverage: 72.45%
============================
iteration:56
contract coverage: 72.45%
============================
iteration:57
contract coverage: 72.45%
============================
iteration:58
contract coverage: 72.45%
============================
iteration:59
contract coverage: 72.45%
============================
iteration:60
contract coverage: 72.45%
============================
iteration:61
contract coverage: 72.45%
============================
iteration:62
contract coverage: 72.45%
============================
iteration:63
contract coverage: 72.45%
#@statespace
3936 nodes, 3935 edges, 75582 total states
#@coverage
Achieved 3.97% coverage for code: 60806040526040805190810160405280600e81526020017f4b4f4c20466f756e646174696f6e000000000000000000000000000000000000815250600190805190602001906200005192919062000165565b506040805190810160405280600781526020017f4b4f4c46756e6400000000000000000000000000000000000000000000000000815250600290805190602001906200009f92919062000165565b506203f4806004556000600555348015620000b957600080fd5b506040516020806200287c83398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000214565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001a857805160ff1916838001178555620001d9565b82800160010185558215620001d9579182015b82811115620001d8578251825591602001919060010190620001bb565b5b509050620001e89190620001ec565b5090565b6200021191905b808211156200020d576000816000905550600101620001f3565b5090565b90565b61265880620002246000396000f30060806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301424b2c1461014357806306fdde03146101705780631ff3c3c514610200578063495122141461023b5780635797654d1461026e5780635883f032146102a157806358d7889c146103265780636bfa24ea146103595780637291437c1461038c57806384312e72146103e35780638da5cb5b1461042a5780639592d4241461048157806395d89b41146104b45780639625e0fb1461054457806399619fa614610577578063af26b762146105aa578063bbc1a300146105d5578063c446b6de1461066c578063c591aa9814610697578063d0b42373146106fc578063d23db1cd1461072f578063d886ad4914610794578063f6a6462c146107c7578063fc0c546a146107fa575b600080fd5b34801561014f57600080fd5b5061016e60048036038101908080359060200190929190505050610851565b005b34801561017c57600080fd5b50610185610bf7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101c55780820151818401526020810190506101aa565b50505050905090810190601f1680156101f25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020c57600080fd5b50610239600480360381019080803560001916906020019092919080359060200190929190505050610c95565b005b34801561024757600080fd5b506102506110ec565b604051808261ffff1661ffff16815260200191505060405180910390f35b34801561027a57600080fd5b506102836110f1565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156102ad57600080fd5b506102d660048036038101908080359060200190929190803590602001909291905050506110f6565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b34801561033257600080fd5b5061033b6111a3565b604051808261ffff1661ffff16815260200191505060405180910390f35b34801561036557600080fd5b5061036e6111a8565b604051808261ffff1661ffff16815260200191505060405180910390f35b34801561039857600080fd5b506103e160048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111ad565b005b3480156103ef57600080fd5b50610428600480360381019080803561ffff16906020019092919080359060200190929190803515159060200190929190505050611762565b005b34801561043657600080fd5b5061043f612281565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561048d57600080fd5b506104966122a6565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156104c057600080fd5b506104c96122ac565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105095780820151818401526020810190506104ee565b50505050905090810190601f1680156105365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561055057600080fd5b5061055961234a565b604051808261ffff1661ffff16815260200191505060405180910390f35b34801561058357600080fd5b5061058c612350565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156105b657600080fd5b506105bf612355565b6040518082815260200191505060405180910390f35b3480156105e157600080fd5b506106006004803603810190808035906020019092919050505061235b565b604051808861ffff1661ffff1681526020018761ffff1661ffff1681526020018661ffff1661ffff1681526020018561ffff1661ffff16815260200184151515158152602001831515151581526020018215151515815260200197505050505050505060405180910390f35b34801561067857600080fd5b5061068161247f565b6040518082815260200191505060405180910390f35b3480156106a357600080fd5b506106e2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612485565b604051808215151515815260200191505060405180910390f35b34801561070857600080fd5b506107116124ed565b604051808261ffff1661ffff16815260200191505060405180910390f35b34801561073b57600080fd5b5061075a600480360381019080803590602001909291905050506124f2565b6040518086815260200185815260200184815260200183815260200182600019166000191681526020019550505050505060405180910390f35b3480156107a057600080fd5b506107a9612580565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156107d357600080fd5b506107dc612585565b604051808261ffff1661ffff16815260200191505060405180910390f35b34801561080657600080fd5b5061080f61258a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108ae57600080fd5b60076000838152602001908152602001600020600501600a9054906101000a900460ff161515156108de57600080fd5b6004546007600084815260200190815260200160002060010154014210151561090657600080fd5b6007600083815260200190815260200160002060050160089054906101000a900460ff16151561093557600080fd5b6007600083815260200190815260200160002060050160099054906101000a900460ff16151561096457600080fd5b6007600083815260200190815260200160002060030154600760008481526020019081526020016000206002015414151561099e57600080fd5b600090505b6009600083815260200190815260200160002080549050811015610b5157600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6009600085815260200190815260200160002083815481101515610a1f57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166009600086815260200190815260200160002084815481101515610a7157fe5b9060005260206000209060020201600101546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610b0857600080fd5b505af1158015610b1c573d6000803e3d6000fd5b505050506040513d6020811015610b3257600080fd5b81019080805190602001909291905050505080806001019150506109a3565b600160076000848152602001908152602001600020600501600a6101000a81548160ff0219169083151502179055507f1022a2c4ccad65760f1f251079912a70e8690dba3a6efc0e30332501a68092d5826007600085815260200190815260200160002060030154600960008681526020019081526020016000208054905060405180848152602001838152602001828152602001935050505060405180910390a15050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c8d5780601f10610c6257610100808354040283529160200191610c8d565b820191906000526020600020905b815481529060010190602001808311610c7057829003601f168201915b505050505081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4a1dbad336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610d5457600080fd5b505af1158015610d68573d6000803e3d6000fd5b505050506040513d6020811015610d7e57600080fd5b810190808051906020019092919050505080610e8e5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bac30981336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610e5257600080fd5b505af1158015610e66573d6000803e3d6000fd5b505050506040513d6020811015610e7c57600080fd5b81019080805190602001909291905050505b1515610e9957600080fd5b82905061018060405190810160405280428152602001600454420181526020018381526020016000815260200182600019168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff16815260200160001515815260200160001515815260200160001515815250600760006005548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004019060001916905560a08201518160050160006101000a81548161ffff021916908361ffff16021790555060c08201518160050160026101000a81548161ffff021916908361ffff16021790555060e08201518160050160046101000a81548161ffff021916908361ffff1602179055506101008201518160050160066101000a81548161ffff021916908361ffff1602179055506101208201518160050160086101000a81548160ff0219169083151502179055506101408201518160050160096101000a81548160ff02191690831515021790555061016082015181600501600a6101000a81548160ff0219169083151502179055509050506005600081548092919060010191905055507fc96853e9a347a4993a1ab1a2f1f683db63a40fab5e2ce45e29c81b5149c58e4681600160055403336040518084600019166000191681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1505050565b606581565b600f81565b6000806000600960008681526020019081526020016000208481548110151561111b57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600960008781526020019081526020016000208581548110151561116d57fe5b90600052602060002090600202016001015460096000888152602001908152602001600020805490509250925092509250925092565b604381565b600b81565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4a1dbad336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561126a57600080fd5b505af115801561127e573d6000803e3d6000fd5b505050506040513d602081101561129457600080fd5b8101908080519060200190929190505050806113a45750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bac30981336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561136857600080fd5b505af115801561137c573d6000803e3d6000fd5b505050506040513d602081101561139257600080fd5b81019080805190602001909291905050505b15156113af57600080fd5b6007600084815260200190815260200160002060050160089054906101000a900460ff1615156113de57600080fd5b60076000848152602001908152602001600020600501600a9054906101000a900460ff1615151561140e57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bac30981836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156114cb57600080fd5b505af11580156114df573d6000803e3d6000fd5b505050506040513d60208110156114f557600080fd5b8101908080519060200190929190505050806116055750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4a1dbad836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156115c957600080fd5b505af11580156115dd573d6000803e3d6000fd5b505050506040513d60208110156115f357600080fd5b81019080805190602001909291905050505b151561161057600080fd5b60076000848152602001908152602001600020600201546116508260076000878152602001908152602001600020600301546125b090919063ffffffff16565b1115151561165d57600080fd5b6009600084815260200190815260200160002060408051908101604052808473ffffffffffffffffffffffffffffffffffffffff168152602001838152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050506117438160076000868152602001908152602001600020600301546125b090919063ffffffff16565b6007600085815260200190815260200160002060030181905550505050565b6000806000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4a1dbad336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561182757600080fd5b505af115801561183b573d6000803e3d6000fd5b505050506040513d602081101561185157600080fd5b8101908080519060200190929190505050806119615750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bac30981336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561192557600080fd5b505af1158015611939573d6000803e3d6000fd5b505050506040513d602081101561194f57600080fd5b81019080805190602001909291905050505b151561196c57600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060009054906101000a900460ff161515156119d657600080fd5b60076000888152602001908152602001600020600501600a9054906101000a900460ff16151515611a0657600080fd5b60659450600f935060fb9250600b91506033905060018861ffff161415611b2f57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4a1dbad336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611ae457600080fd5b505af1158015611af8573d6000803e3d6000fd5b505050506040513d6020811015611b0e57600080fd5b81019080805190602001909291905050501515611b2a57600080fd5b611c41565b60028861ffff161415611c4057600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bac30981336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611bf957600080fd5b505af1158015611c0d573d6000803e3d6000fd5b505050506040513d6020811015611c2357600080fd5b81019080805190602001909291905050501515611c3f57600080fd5b5b5b6007600088815260200190815260200160002060010154421115611ecc5760018861ffff161415611d99578361ffff166007600089815260200190815260200160002060050160069054906101000a900461ffff16600760008a815260200190815260200160002060050160049054906101000a900461ffff160161ffff1610158015611d565750606481600760008a815260200190815260200160002060050160069054906101000a900461ffff16600760008b815260200190815260200160002060050160049054906101000a900461ffff16010261ffff16811515611d2557fe5b0461ffff166007600089815260200190815260200160002060050160049054906101000a900461ffff1661ffff1610155b15611d945760016007600089815260200190815260200160002060050160086101000a81548160ff021916908315150217905550611d93876125cc565b5b611ec7565b60028861ffff161415611ec6578461ffff166007600089815260200190815260200160002060050160029054906101000a900461ffff16600760008a815260200190815260200160002060050160009054906101000a900461ffff160161ffff1610158015611e905750606481600760008a815260200190815260200160002060050160029054906101000a900461ffff16600760008b815260200190815260200160002060050160029054906101000a900461ffff16010261ffff16811515611e5f57fe5b0461ffff166007600089815260200190815260200160002060050160009054906101000a900461ffff1661ffff1610155b15611ec55760016007600089815260200190815260200160002060050160096101000a81548160ff0219169083151502179055505b5b5b61220e565b600115158615151415611f915760018861ffff161415611f345760076000888152602001908152602001600020600501600481819054906101000a900461ffff168092919060010191906101000a81548161ffff021916908361ffff16021790555050611f8c565b60028861ffff161415611f8b5760076000888152602001908152602001600020600501600081819054906101000a900461ffff168092919060010191906101000a81548161ffff021916908361ffff160217905550505b5b612045565b60018861ffff161415611fec5760076000888152602001908152602001600020600501600681819054906101000a900461ffff168092919060010191906101000a81548161ffff021916908361ffff16021790555050612044565b60028861ffff1614156120435760076000888152602001908152602001600020600501600281819054906101000a900461ffff168092919060010191906101000a81548161ffff021916908361ffff160217905550505b5b5b60018861ffff16141561212f578161ffff166007600089815260200190815260200160002060050160049054906101000a900461ffff1661ffff161015156120c45760016007600089815260200190815260200160002060050160086101000a81548160ff0219169083151502179055506120bf876125cc565b61212a565b8161ffff166007600089815260200190815260200160002060050160069054906101000a900461ffff1661ffff1610151561212957600160076000898152602001908152602001600020600501600a6101000a81548160ff0219169083151502179055505b5b61220d565b60028861ffff16141561220c578261ffff166007600089815260200190815260200160002060050160009054906101000a900461ffff1661ffff161015156121a55760016007600089815260200190815260200160002060050160096101000a81548160ff02191690831515021790555061220b565b8261ffff166007600089815260200190815260200160002060050160029054906101000a900461ffff1661ffff1610151561220a57600160076000898152602001908152602001600020600501600a6101000a81548160ff0219169083151502179055505b5b5b5b5b6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101f481565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123425780601f1061231757610100808354040283529160200191612342565b820191906000526020600020905b81548152906001019060200180831161232557829003601f168201915b505050505081565b61014f81565b601581565b60055481565b60008060008060008060006007600089815260200190815260200160002060050160009054906101000a900461ffff16600760008a815260200190815260200160002060050160029054906101000a900461ffff16600760008b815260200190815260200160002060050160049054906101000a900461ffff16600760008c815260200190815260200160002060050160069054906101000a900461ffff16600760008d815260200190815260200160002060050160089054906101000a900460ff16600760008e815260200190815260200160002060050160099054906101000a900460ff16600760008f8152602001908152602001600020600501600a9054906101000a900460ff169650965096509650965096509650919395979092949650565b60045481565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b602181565b6000806000806000600760008781526020019081526020016000206000015460076000888152602001908152602001600020600101546007600089815260200190815260200160002060020154600760008a815260200190815260200160002060030154600760008b8152602001908152602001600020600401549450945094509450945091939590929450565b60fb81565b603381565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081830190508281101515156125c357fe5b80905092915050565b7f3aa94a81513bec2a88fbe53be130cc208c447c9914b300256c34c95ed7d5d8ab8160076000848152602001908152602001600020600401546040518083815260200182600019166000191681526020019250505060405180910390a1505600a165627a7a723058205bdfc06489a75879c638dc922ed83195bef7a709c4e2bc63e371112b0f6ed4920029
#@coverage
Achieved 72.45% coverage for code: 
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: KOLFund
Function name: excuteVote(uint256)
PC address: 2305
Estimated Gas Usage: 3712 - 4847
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:710

require(uint256(now) < (missionList[_missionId].endTime + uint256(dealTime)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: excuteVote(uint256), txdata: 0x01424b2c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 3415
Estimated Gas Usage: 81108 - 416658
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:584

token.querySuperNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 3483
Estimated Gas Usage: 81108 - 416658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:584

token

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 3669
Estimated Gas Usage: 81108 - 416658
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:584

token.queryNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 3669
Estimated Gas Usage: 81108 - 416658
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:584

token.queryNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 3669
Estimated Gas Usage: 81108 - 416658
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:584

token.queryNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 3762
Estimated Gas Usage: 81108 - 416658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:617

dealTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 3764
Estimated Gas Usage: 81108 - 416658
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:617

now + dealTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 3868
Estimated Gas Usage: 81108 - 416658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionId

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 3892
Estimated Gas Usage: 81108 - 416658
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 3902
Estimated Gas Usage: 81108 - 416658
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 3912
Estimated Gas Usage: 81108 - 416658
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 3922
Estimated Gas Usage: 81108 - 416658
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 3938
Estimated Gas Usage: 81108 - 416658
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 3955
Estimated Gas Usage: 81108 - 416658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 3972
Estimated Gas Usage: 81108 - 416658
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 3990
Estimated Gas Usage: 81108 - 416658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 4007
Estimated Gas Usage: 81108 - 416658
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 4025
Estimated Gas Usage: 81108 - 416658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 4042
Estimated Gas Usage: 81108 - 416658
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 4061
Estimated Gas Usage: 81108 - 416658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 4078
Estimated Gas Usage: 81108 - 416658
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 4097
Estimated Gas Usage: 81108 - 416658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 4111
Estimated Gas Usage: 81108 - 416658
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 4130
Estimated Gas Usage: 81108 - 416658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 4144
Estimated Gas Usage: 81108 - 416658
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 4163
Estimated Gas Usage: 81108 - 416658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 4177
Estimated Gas Usage: 81108 - 416658
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:616

missionList[missionId] = KolMission(uint256(now),
                                          uint256(now + dealTime),
                                          _totalAmount,
                                          0,
                                          iName,
                                          0,
                                          0,
                                          0,
                                          0,
                                          false,
                                          false,
                                          false)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 4187
Estimated Gas Usage: 81108 - 416658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:629

missionId++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 4198
Estimated Gas Usage: 81108 - 416658
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:629

missionId++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: createKolMission(bytes32,uint256)
PC address: 4238
Estimated Gas Usage: 81108 - 416658
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:630

missionId

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: createKolMission(bytes32,uint256), txdata: 0x1ff3c3c5, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: KOLFund
Function name: getOfferings(uint256,uint256)
PC address: 4378
Estimated Gas Usage: 1238 - 1523
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:750

function getOfferings(uint256 _missionId,uint256 _id) public view returns(address,uint256,uint256){
    return(offeringList[_missionId][_id].target,offeringList[_missionId][_id].targetAmount,offeringList[_missionId].length);
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getOfferings(uint256,uint256), txdata: 0x5883f032, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 6186
Estimated Gas Usage: 25958 - 174749
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:584

token.querySuperNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 6254
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:584

token

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 6440
Estimated Gas Usage: 25958 - 174749
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:584

token.queryNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 6440
Estimated Gas Usage: 25958 - 174749
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:584

token.queryNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 6440
Estimated Gas Usage: 25958 - 174749
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:584

token.queryNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 6592
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:633

Voter[msg.sender][_missionId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 6640
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:634

missionList[_missionId].done

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 6701
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:642

token

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 6887
Estimated Gas Usage: 25958 - 174749
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:642

token.querySuperNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 6887
Estimated Gas Usage: 23401 - 137300
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:642

token.querySuperNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000010000000000000000000000000000000000000001000000000000000000000000100000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 6887
Estimated Gas Usage: 25958 - 174749
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:642

token.querySuperNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 6978
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:644

token

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 7164
Estimated Gas Usage: 25958 - 174749
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:644

token.queryNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 7164
Estimated Gas Usage: 23467 - 137366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:644

token.queryNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 7164
Estimated Gas Usage: 25958 - 174749
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:644

token.queryNode(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 7256
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:647

missionList[_missionId].endTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 7263
Estimated Gas Usage: 5972 - 42379
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:647

if(now > missionList[_missionId].endTime){
      if ( _type == 1 ){
        if (
          (missionList[_missionId].agreeSuperNodes + missionList[_missionId].refuseSuperNodes)>=minSuperNodesNum
          &&
          missionList[_missionId].agreeSuperNodes >= (missionList[_missionId].agreeSuperNodes + missionList[_missionId].refuseSuperNodes) * rate/100
          ){
            missionList[_missionId].superPassed = true;
            missionPassed(_missionId);
        }
      }else if (_type ==2 ){
        
        if (
          (missionList[_missionId].agreeNodes + missionList[_missionId].refuseNodes)>=minNodesNum
          &&
          missionList[_missionId].agreeNodes >= (missionList[_missionId].refuseNodes + missionList[_missionId].refuseNodes) * rate/100
          ){
            missionList[_missionId].nodePassed = true;
        }
      }
    }else{
      if(_agree == true){
        if (_type == 1){
          missionList[_missionId].agreeSuperNodes++;
        }else if(_type == 2){
          missionList[_missionId].agreeNodes++;
        }
      }
      else{
        if (_type == 1){
          missionList[_missionId].refuseSuperNodes++;
        }else if(_type == 2){
          missionList[_missionId].refuseNodes++;
        }
      }
      if (_type == 1){
        if (missionList[_missionId].agreeSuperNodes >= passSuperNodes) {
            missionList[_missionId].superPassed = true;
            missionPassed(_missionId);
        }else if (missionList[_missionId].refuseSuperNodes >= passSuperNodes) {
            missionList[_missionId].done = true;
        }
      }else if (_type ==2){
        if (missionList[_missionId].agreeNodes >= passNodes) {
            missionList[_missionId].nodePassed = true;
        }else if (missionList[_missionId].refuseNodes >= passNodes) {
            missionList[_missionId].done = true;
        }
      }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e72, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 7307
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:650

missionList[_missionId].refuseSuperNodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 7344
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:650

missionList[_missionId].agreeSuperNodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 7621
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:660

missionList[_missionId].refuseNodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 7658
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:660

missionList[_missionId].agreeNodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 7938
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:670

missionList[_missionId].agreeSuperNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 7964
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:670

missionList[_missionId].agreeSuperNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 7981
Estimated Gas Usage: 25958 - 174749
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:670

missionList[_missionId].agreeSuperNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 8029
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:672

missionList[_missionId].agreeNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 8055
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:672

missionList[_missionId].agreeNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 8072
Estimated Gas Usage: 25958 - 174749
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:672

missionList[_missionId].agreeNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 8122
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:677

missionList[_missionId].refuseSuperNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 8148
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:677

missionList[_missionId].refuseSuperNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 8165
Estimated Gas Usage: 25958 - 174749
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:677

missionList[_missionId].refuseSuperNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 8213
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:679

missionList[_missionId].refuseNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 8239
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:679

missionList[_missionId].refuseNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 8256
Estimated Gas Usage: 25958 - 174749
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:679

missionList[_missionId].refuseNodes++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 8305
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:683

missionList[_missionId].agreeSuperNodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 8419
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:686

missionList[_missionId].refuseSuperNodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 8539
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:690

missionList[_missionId].agreeNodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 8644
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:692

missionList[_missionId].refuseNodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 8808
Estimated Gas Usage: 25958 - 174749
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:697

Voter[msg.sender][_missionId] = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLFund
Function name: voteMission(uint16,uint256,bool)
PC address: 8822
Estimated Gas Usage: 25958 - 174749
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:697

Voter[msg.sender][_missionId] = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: voteMission(uint16,uint256,bool), txdata: 0x84312e720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001, value: 0x0


time_used: 36451.417133808136 seconds
#@contract_info_time
0x4A5025D943dcC6DB2E1D76eb46aAF2d647D5562C.sol:0.4.23:KOLFund:36451.417133808136:36100:60:36000
