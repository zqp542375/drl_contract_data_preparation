++++ 0xad345eb2e446412d0c29de94a8ee49c36290d1dd.sol  :  0.5.0  :  Cryptid ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 3286
['constructor']:writes at the last depth:['5', '0', '1', '2', '3']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 99.97% coverage.
dynamic svars:['1', '2', '3', '4']
static svars:['5', '0']
Ending preprocessing.
preprocessing time(s): 100.95001602172852
contract coverage: 97.47%
name() is not reachable
symbol() is not reachable
Function Reads: State variables read in conditions
	name():[]
	approve(address,uint256):[]
	totalSupply():[]
	multiTransfer(address[],uint256[]):['3']
	transferFrom(address,address,uint256):['3', '4']
	decimals():[]
	increaseAllowance(address,uint256):[]
	burn(uint256):['3', '5']
	balanceOf(address):[]
	burnFrom(address,uint256):['4']
	symbol():[]
	decreaseAllowance(address,uint256):['4']
	transfer(address,uint256):['3']
	allowance(address,address):[]
Function Writes: State variables written
	approve(address,uint256):['4']
	burn(uint256):['5', '3']
	increaseAllowance(address,uint256):['4']
	decreaseAllowance(address,uint256):['4']
	transferFrom(address,address,uint256):['3', '5', '4']
	burnFrom(address,uint256):['4', '5', '3']
	transfer(address,uint256):['3', '5']
	multiTransfer(address[],uint256[]):['3', '5']
============================
iteration:3
targets:['name()', 'symbol()']
['approve(address,uint256)']:writes at the last depth:['4']
['increaseAllowance(address,uint256)']:writes at the last depth:['4']
['decreaseAllowance(address,uint256)']:writes at the last depth:['4']
['burn(uint256)']:writes at the last depth:['5', '3']
['transfer(address,uint256)']:writes at the last depth:['5', '3']
['transferFrom(address,address,uint256)']:writes at the last depth:['4', '5', '3']
['multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
['multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
contract coverage: 97.47%
============================
iteration:4
['multiTransfer(address[],uint256[])', 'approve(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'increaseAllowance(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'decreaseAllowance(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'burn(uint256)']:writes at the last depth:['5', '3']
['multiTransfer(address[],uint256[])', 'transfer(address,uint256)']:writes at the last depth:['5', '3']
['multiTransfer(address[],uint256[])', 'transferFrom(address,address,uint256)']:writes at the last depth:['4', '5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
contract coverage: 97.47%
============================
iteration:5
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'approve(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'increaseAllowance(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'decreaseAllowance(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'burn(uint256)']:writes at the last depth:['5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'transfer(address,uint256)']:writes at the last depth:['5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'transferFrom(address,address,uint256)']:writes at the last depth:['4', '5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
contract coverage: 97.47%
============================
iteration:6
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'approve(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'increaseAllowance(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'decreaseAllowance(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'burn(uint256)']:writes at the last depth:['5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'transfer(address,uint256)']:writes at the last depth:['5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'transferFrom(address,address,uint256)']:writes at the last depth:['4', '5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
contract coverage: 97.47%
============================
iteration:7
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'approve(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'decreaseAllowance(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'burn(uint256)']:writes at the last depth:['5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'transfer(address,uint256)']:writes at the last depth:['5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'transferFrom(address,address,uint256)']:writes at the last depth:['4', '5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
contract coverage: 97.47%
============================
iteration:8
contract coverage: 97.47%
============================
iteration:9
contract coverage: 97.47%
============================
iteration:10
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'burn(uint256)', 'approve(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'burn(uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'burn(uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'burn(uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['4', '5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'burn(uint256)', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'burn(uint256)', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
contract coverage: 97.47%
============================
iteration:11
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'decreaseAllowance(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'decreaseAllowance(address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'decreaseAllowance(address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'decreaseAllowance(address,uint256)', 'burn(uint256)']:writes at the last depth:['5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'decreaseAllowance(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'decreaseAllowance(address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['4', '5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'decreaseAllowance(address,uint256)', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'decreaseAllowance(address,uint256)', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
contract coverage: 97.47%
============================
iteration:12
contract coverage: 97.50%
============================
iteration:13
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'approve(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'approve(address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'approve(address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'approve(address,uint256)', 'burn(uint256)']:writes at the last depth:['5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'approve(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'approve(address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['4', '5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'approve(address,uint256)', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'approve(address,uint256)', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
contract coverage: 97.50%
============================
iteration:14
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'approve(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'decreaseAllowance(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'burn(uint256)']:writes at the last depth:['5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'transfer(address,uint256)']:writes at the last depth:['5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
contract coverage: 97.50%
============================
iteration:15
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'approve(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'transfer(address,uint256)']:writes at the last depth:['5', '3']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
contract coverage: 97.50%
============================
iteration:16
contract coverage: 97.50%
============================
iteration:17
contract coverage: 97.50%
============================
iteration:18
contract coverage: 97.50%
============================
iteration:19
contract coverage: 97.50%
============================
iteration:20
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'approve(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'multiTransfer(address[],uint256[])', 'approve(address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['4']
contract coverage: 97.50%
============================
iteration:21
contract coverage: 97.50%
============================
iteration:22
contract coverage: 97.50%
============================
iteration:23
['multiTransfer(address[],uint256[])', 'burn(uint256)', 'approve(address,uint256)']:writes at the last depth:['4']
contract coverage: 97.50%
============================
iteration:24
contract coverage: 97.50%
============================
iteration:25
contract coverage: 97.50%
============================
iteration:26
contract coverage: 97.50%
============================
iteration:27
['multiTransfer(address[],uint256[])', 'approve(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'approve(address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['4']
['multiTransfer(address[],uint256[])', 'approve(address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['4', '5', '3']
['multiTransfer(address[],uint256[])', 'approve(address,uint256)', 'multiTransfer(address[],uint256[])']:writes at the last depth:['', '5', '3']
contract coverage: 97.50%
============================
iteration:28
contract coverage: 97.50%
============================
iteration:29
contract coverage: 97.50%
============================
iteration:30
['multiTransfer(address[],uint256[])', 'approve(address,uint256)', 'decreaseAllowance(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['4']
contract coverage: 97.50%
============================
iteration:31
contract coverage: 97.50%
============================
iteration:32
['multiTransfer(address[],uint256[])', 'approve(address,uint256)']:writes at the last depth:['4']
contract coverage: 97.50%
============================
iteration:33
contract coverage: 97.50%
============================
iteration:34
contract coverage: 97.50%
============================
iteration:35
contract coverage: 97.50%
============================
iteration:36
contract coverage: 97.50%
============================
iteration:37
contract coverage: 97.50%
============================
iteration:38
contract coverage: 97.50%
============================
iteration:39
contract coverage: 97.50%
#@statespace
3604 nodes, 3603 edges, 56010 total states
#@coverage
Achieved 8.85% coverage for code: 60806040526a066f0222d28f57292400006005556040805190810160405280600781526020017f43727970746964000000000000000000000000000000000000000000000000008152506040805190810160405280600381526020017f43494400000000000000000000000000000000000000000000000000000000008152506012806000806101000a81548160ff021916908360ff1602179055508260019080519060200190620000b392919062000232565b508160029080519060200190620000cc92919062000232565b50505050620000ed33600554620000f3640100000000026401000000009004565b620002e1565b600081141515156200010457600080fd5b6200016681600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200021364010000000002620018e4179091906401000000009004565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008082840190508381101515156200022857fe5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200027557805160ff1916838001178555620002a6565b82800160010185558215620002a6579182015b82811115620002a557825182559160200191906001019062000288565b5b509050620002b59190620002b9565b5090565b620002de91905b80821115620002da576000816000905550600101620002c0565b5090565b90565b611be380620002f16000396000f3fe6080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d5578063095ea7b31461016557806318160ddd146101d85780631e89d5451461020357806323b872dd1461035c578063313ce567146103ef578063395093511461042057806342966c681461049357806370a08231146104ce57806379cc67901461053357806395d89b411461058e578063a457c2d71461061e578063a9059cbb14610691578063dd62ed3e14610704575b600080fd5b3480156100e157600080fd5b506100ea610789565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012a57808201518184015260208101905061010f565b50505050905090810190601f1680156101575780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017157600080fd5b506101be6004803603604081101561018857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061082b565b604051808215151515815260200191505060405180910390f35b3480156101e457600080fd5b506101ed610958565b6040518082815260200191505060405180910390f35b34801561020f57600080fd5b5061035a6004803603604081101561022657600080fd5b810190808035906020019064010000000081111561024357600080fd5b82018360208201111561025557600080fd5b8035906020019184602083028401116401000000008311171561027757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156102d757600080fd5b8201836020820111156102e957600080fd5b8035906020019184602083028401116401000000008311171561030b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610962565b005b34801561036857600080fd5b506103d56004803603606081101561037f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109bc565b604051808215151515815260200191505060405180910390f35b3480156103fb57600080fd5b50610404610e2e565b604051808260ff1660ff16815260200191505060405180910390f35b34801561042c57600080fd5b506104796004803603604081101561044357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e44565b604051808215151515815260200191505060405180910390f35b34801561049f57600080fd5b506104cc600480360360208110156104b657600080fd5b810190808035906020019092919050505061107b565b005b3480156104da57600080fd5b5061051d600480360360208110156104f157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611088565b6040518082815260200191505060405180910390f35b34801561053f57600080fd5b5061058c6004803603604081101561055657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110d1565b005b34801561059a57600080fd5b506105a3611279565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105e35780820151818401526020810190506105c8565b50505050905090810190601f1680156106105780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561062a57600080fd5b506106776004803603604081101561064157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061131b565b604051808215151515815260200191505060405180910390f35b34801561069d57600080fd5b506106ea600480360360408110156106b457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611552565b604051808215151515815260200191505060405180910390f35b34801561071057600080fd5b506107736004803603604081101561072757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611829565b6040518082815260200191505060405180910390f35b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108215780601f106107f657610100808354040283529160200191610821565b820191906000526020600020905b81548152906001019060200180831161080457829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561086857600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600554905090565b60008090505b82518110156109b7576109a9838281518110151561098257fe5b90602001906020020151838381518110151561099a57fe5b90602001906020020151611552565b508080600101915050610968565b505050565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610a0c57600080fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610a9757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610ad357600080fd5b610b2582600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118b090919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000610b7e6064846118c990919063ffffffff16565b90506000610b9582856118b090919063ffffffff16565b9050610be981600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118e490919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c41826005546118b090919063ffffffff16565b600581905550610cd684600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118b090919063ffffffff16565b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001925050509392505050565b60008060009054906101000a900460ff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610e8157600080fd5b610f1082600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118e490919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6110853382611902565b50565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561115c57600080fd5b6111eb81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118b090919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112758282611902565b5050565b606060028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113115780601f106112e657610100808354040283529160200191611311565b820191906000526020600020905b8154815290600101906020018083116112f457829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561135857600080fd5b6113e782600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118b090919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156115a257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156115de57600080fd5b60006115f46064846118c990919063ffffffff16565b9050600061160b82856118b090919063ffffffff16565b905061165f84600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118b090919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116f481600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118e490919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061174c826005546118b090919063ffffffff16565b6005819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019250505092915050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008282111515156118be57fe5b818303905092915050565b60008082848115156118d757fe5b0490508091505092915050565b60008082840190508381101515156118f857fe5b8091505092915050565b6000811415151561191257600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561196057600080fd5b611975816005546118b090919063ffffffff16565b6005819055506119cd81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118b090919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3611aa473b9e17b1ffae8301395ee4371d3cb612d152f9d73611a96610e2e565b60ff16600a0a600702611aa8565b5050565b60008114151515611ab857600080fd5b611b0a81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118e490919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505056fea165627a7a7230582018823d8f16b8209bc2207abe14c916a6a9c006a3c16d563237c1c346db2cfcd00029
#@coverage
Achieved 97.50% coverage for code: 6080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d5578063095ea7b31461016557806318160ddd146101d85780631e89d5451461020357806323b872dd1461035c578063313ce567146103ef578063395093511461042057806342966c681461049357806370a08231146104ce57806379cc67901461053357806395d89b411461058e578063a457c2d71461061e578063a9059cbb14610691578063dd62ed3e14610704575b600080fd5b3480156100e157600080fd5b506100ea610789565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012a57808201518184015260208101905061010f565b50505050905090810190601f1680156101575780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017157600080fd5b506101be6004803603604081101561018857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061082b565b604051808215151515815260200191505060405180910390f35b3480156101e457600080fd5b506101ed610958565b6040518082815260200191505060405180910390f35b34801561020f57600080fd5b5061035a6004803603604081101561022657600080fd5b810190808035906020019064010000000081111561024357600080fd5b82018360208201111561025557600080fd5b8035906020019184602083028401116401000000008311171561027757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156102d757600080fd5b8201836020820111156102e957600080fd5b8035906020019184602083028401116401000000008311171561030b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610962565b005b34801561036857600080fd5b506103d56004803603606081101561037f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109bc565b604051808215151515815260200191505060405180910390f35b3480156103fb57600080fd5b50610404610e2e565b604051808260ff1660ff16815260200191505060405180910390f35b34801561042c57600080fd5b506104796004803603604081101561044357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e44565b604051808215151515815260200191505060405180910390f35b34801561049f57600080fd5b506104cc600480360360208110156104b657600080fd5b810190808035906020019092919050505061107b565b005b3480156104da57600080fd5b5061051d600480360360208110156104f157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611088565b6040518082815260200191505060405180910390f35b34801561053f57600080fd5b5061058c6004803603604081101561055657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110d1565b005b34801561059a57600080fd5b506105a3611279565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105e35780820151818401526020810190506105c8565b50505050905090810190601f1680156106105780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561062a57600080fd5b506106776004803603604081101561064157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061131b565b604051808215151515815260200191505060405180910390f35b34801561069d57600080fd5b506106ea600480360360408110156106b457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611552565b604051808215151515815260200191505060405180910390f35b34801561071057600080fd5b506107736004803603604081101561072757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611829565b6040518082815260200191505060405180910390f35b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108215780601f106107f657610100808354040283529160200191610821565b820191906000526020600020905b81548152906001019060200180831161080457829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561086857600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600554905090565b60008090505b82518110156109b7576109a9838281518110151561098257fe5b90602001906020020151838381518110151561099a57fe5b90602001906020020151611552565b508080600101915050610968565b505050565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610a0c57600080fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610a9757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610ad357600080fd5b610b2582600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118b090919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000610b7e6064846118c990919063ffffffff16565b90506000610b9582856118b090919063ffffffff16565b9050610be981600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118e490919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c41826005546118b090919063ffffffff16565b600581905550610cd684600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118b090919063ffffffff16565b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001925050509392505050565b60008060009054906101000a900460ff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610e8157600080fd5b610f1082600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118e490919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6110853382611902565b50565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561115c57600080fd5b6111eb81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118b090919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112758282611902565b5050565b606060028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113115780601f106112e657610100808354040283529160200191611311565b820191906000526020600020905b8154815290600101906020018083116112f457829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561135857600080fd5b6113e782600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118b090919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156115a257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156115de57600080fd5b60006115f46064846118c990919063ffffffff16565b9050600061160b82856118b090919063ffffffff16565b905061165f84600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118b090919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116f481600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118e490919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061174c826005546118b090919063ffffffff16565b6005819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019250505092915050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008282111515156118be57fe5b818303905092915050565b60008082848115156118d757fe5b0490508091505092915050565b60008082840190508381101515156118f857fe5b8091505092915050565b6000811415151561191257600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561196057600080fd5b611975816005546118b090919063ffffffff16565b6005819055506119cd81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118b090919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3611aa473b9e17b1ffae8301395ee4371d3cb612d152f9d73611a96610e2e565b60ff16600a0a600702611aa8565b5050565b60008114151515611ab857600080fd5b611b0a81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118e490919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505056fea165627a7a7230582018823d8f16b8209bc2207abe14c916a6a9c006a3c16d563237c1c346db2cfcd00029
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Cryptid
Function name: multiTransfer(address[],uint256[])
PC address: 2457
Estimated Gas Usage: 23784 - 92104
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0xad345eb2e446412d0c29de94a8ee49c36290d1dd.sol:131

for (uint256 i = 0; i < receivers.length; i++) {
      transfer(receivers[i], amounts[i]);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d54500000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, decoded_data: (['0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000000'], [0]), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Cryptid
Function name: decreaseAllowance(address,uint256)
PC address: 6333
Estimated Gas Usage: 1577 - 2052
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0xad345eb2e446412d0c29de94a8ee49c36290d1dd.sol:173

_allowed[msg.sender][spender].sub(subtractedValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: decreaseAllowance(address,uint256), txdata: 0xa457c2d700000000000000000000000001018080200880408002048080400180020102102040204000082001100400010000000000000000000000000000000000000000, decoded_data: ('0x0101808020088040800204808040018002010210', 14587311948133367458523711355978287403015636986201326772566393362555028373504), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Cryptid
Function name: burn(uint256)
PC address: 6815
Estimated Gas Usage: 23592 - 86371
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0xad345eb2e446412d0c29de94a8ee49c36290d1dd.sol:194

7 * (10 ** uint256(decimals()))

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: burn(uint256), txdata: 0x42966c68000000000000000000000000000000000000000000026f0222d28f5f01201001, decoded_data: (2942073721541516989566977,), value: 0x0


time_used: 27417.070153713226 seconds
#@contract_info_time
0xad345eb2e446412d0c29de94a8ee49c36290d1dd.sol:0.5.0:Cryptid:27417.070153713226:36100:60:36000
