++++ 0x6209cfbdee10e7796bbcabfc6400acdc06ac26f2.sol  :  0.5.14  :  cTokenKyberBridge ++++
618392237034260790696952574810978057808940683765 is added into actors.
Starting preprocessing.
number of genesis states: 1
total instructions: 3922
['constructor']:writes at the last depth:['2', '0', '1', '4', '4', '4', '4', '4', '4', '4', '4', '4', '3']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 98.93% coverage.
dynamic svars:['2', '0', '4']
static svars:['3', '1']
Ending preprocessing.
preprocessing time(s): 101.34725618362427
contract coverage: 77.21%
name() is not reachable
Function Reads: State variables read in conditions
	kill():['1']
	delAdmin(address):['0']
	addAdmin(address):['0']
	setProxy(address):['0']
	delcToken(address):['0']
	proxy():[]
	name():[]
	executeSwap(address,address,uint256):['4']
	addcToken(address):['0']
	getSwapQuantity(address,address,uint256):['4']
	isAdmin(address):[]
Function Writes: State variables written
	setProxy(address):['3']
	delAdmin(address):['0']
	addAdmin(address):['0']
	addcToken(address):['4']
	delcToken(address):['4']
============================
iteration:3
targets:['executeSwap(address,address,uint256)', 'name()', 'getSwapQuantity(address,address,uint256)']
['setProxy(address)']:writes at the last depth:['3']
['delAdmin(address)']:writes at the last depth:['0']
['addAdmin(address)']:writes at the last depth:['0']
['addcToken(address)']:writes at the last depth:['4']
['delcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
contract coverage: 77.21%
============================
iteration:4
['getSwapQuantity(address,address,uint256)', 'setProxy(address)']:writes at the last depth:['3']
['getSwapQuantity(address,address,uint256)', 'delAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'addAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'addcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'delcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
contract coverage: 77.21%
============================
iteration:5
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)']:writes at the last depth:['3']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
contract coverage: 77.21%
============================
iteration:6
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)']:writes at the last depth:['3']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
contract coverage: 77.21%
============================
iteration:7
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)']:writes at the last depth:['3']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
contract coverage: 77.21%
============================
iteration:8
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)']:writes at the last depth:['3']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
contract coverage: 77.21%
============================
iteration:9
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)']:writes at the last depth:['3']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
contract coverage: 92.89%
============================
iteration:10
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)', 'setProxy(address)']:writes at the last depth:['3']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)', 'delAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)', 'addAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)', 'addcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)', 'delcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)', 'executeSwap(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)', 'executeSwap(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)', 'executeSwap(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delcToken(address)', 'executeSwap(address,address,uint256)']:writes at the last depth:[]
contract coverage: 92.89%
============================
iteration:11
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)', 'setProxy(address)']:writes at the last depth:['3']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)', 'delAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)', 'addAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)', 'addcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)', 'delcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)', 'executeSwap(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)', 'executeSwap(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)', 'executeSwap(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addcToken(address)', 'executeSwap(address,address,uint256)']:writes at the last depth:[]
contract coverage: 92.89%
============================
iteration:12
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)', 'setProxy(address)']:writes at the last depth:['3']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)', 'delAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)', 'addAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)', 'addcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)', 'delcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)', 'executeSwap(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)', 'executeSwap(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)', 'executeSwap(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'addAdmin(address)', 'executeSwap(address,address,uint256)']:writes at the last depth:[]
contract coverage: 92.89%
============================
iteration:13
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)', 'setProxy(address)']:writes at the last depth:['3']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)', 'delAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)', 'addAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)', 'addcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)', 'delcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)', 'executeSwap(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)', 'executeSwap(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)', 'executeSwap(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'delAdmin(address)', 'executeSwap(address,address,uint256)']:writes at the last depth:[]
contract coverage: 92.89%
============================
iteration:14
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)', 'setProxy(address)']:writes at the last depth:['3']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)', 'delAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)', 'addAdmin(address)']:writes at the last depth:['0']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)', 'addcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)', 'delcToken(address)']:writes at the last depth:['4']
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
['getSwapQuantity(address,address,uint256)', 'getSwapQuantity(address,address,uint256)', 'setProxy(address)', 'getSwapQuantity(address,address,uint256)']:writes at the last depth:[]
contract coverage: 92.89%
============================
iteration:15
contract coverage: 92.89%
============================
iteration:16
contract coverage: 92.89%
============================
iteration:17
contract coverage: 92.89%
============================
iteration:18
contract coverage: 92.89%
============================
iteration:19
contract coverage: 92.89%
============================
iteration:20
contract coverage: 92.89%
============================
iteration:21
contract coverage: 92.89%
============================
iteration:22
contract coverage: 92.89%
============================
iteration:23
contract coverage: 92.89%
============================
iteration:24
contract coverage: 92.89%
============================
iteration:25
contract coverage: 92.89%
============================
iteration:26
contract coverage: 92.89%
============================
iteration:27
contract coverage: 92.89%
============================
iteration:28
contract coverage: 92.89%
============================
iteration:29
contract coverage: 92.89%
============================
iteration:30
contract coverage: 92.89%
#@statespace
4289 nodes, 4288 edges, 74770 total states
#@coverage
Achieved 12.32% coverage for code: 60806040526040518060400160405280601181526020017f63546f6b656e4b7962657242726964676500000000000000000000000000000081525060029080519060200190620000519291906200051f565b503480156200005f57600080fd5b5060016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160046000736c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160046000735d3a536e4d6dbd6114cc1ead35777bab948e364373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160046000734ddc2d193948926d02f9b1fe9e1daa0718270ed573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600073158079ee67fce2f58472a96584a73c7ab9ac95c173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600073f5dce57282a584d2746faf1593d3121fcac444dc73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600460007339aa39c021dfbae8fac545936693ac917d5e756373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600073f650c3d88d12db855b8bf7d11be6c55a4e07dcc973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600073c11b1268c1a384e55c48c2391d8d480264a3a7f473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600073b3319f5d18bc0d84dd1b4825dcde5d5f7266d40773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550736c51aabd10b939c1d607694571fd6d6cf4dcd1f5600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620005ce565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200056257805160ff191683800117855562000593565b8280016001018555821562000593579182015b828111156200059257825182559160200191906001019062000575565b5b509050620005a29190620005a6565b5090565b620005cb91905b80821115620005c7576000816000905550600101620005ad565b5090565b90565b611d9080620005de6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806341c0e1b51161007157806341c0e1b5146102c157806362d91855146102cb578063704802751461030f57806397107d6d14610353578063e00a5bba14610397578063ec556889146103db576100a9565b806306fdde03146100ae5780630da3a02914610131578063109b88df1461019f5780631c9fa593146101e357806324d7806c14610265575b600080fd5b6100b6610425565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61019d6004803603606081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506104c3565b005b6101e1600480360360208110156101b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bdf565b005b61024f600480360360608110156101f957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cb5565b6040518082815260200191505060405180910390f35b6102a76004803603602081101561027b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111e9565b604051808215151515815260200191505060405180910390f35b6102c961123e565b005b61030d600480360360208110156102e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061133c565b005b6103516004803603602081101561032557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611411565b005b6103956004803603602081101561036957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114e6565b005b6103d9600480360360208110156103ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115a5565b005b6103e361167b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104bb5780601f10610490576101008083540402835291602001916104bb565b820191906000526020600020905b81548152906001019060200180831161049e57829003601f168201915b505050505081565b60008060008060006104d588876116a1565b610547576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f556e61626c6520746f207472616e7366657246726f6d2829000000000000000081525060200191505060405180910390fd5b610550886117a6565b156106515761055e886117fc565b809450819550505060011515841515146105c3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180611d3b6021913960400191505060405180910390fd5b6105cf8660018a611928565b610641576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f556e61626c6520746f2072656564656d2066726f6d20636f6d706f756e64000081525060200191505060405180910390fd5b61064a83611ae6565b9050610658565b8792508590505b8294508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561070457600080fd5b505af1158015610718573d6000803e3d6000fd5b505050506040513d602081101561072e57600080fd5b81019080805190602001909291905050506107b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f556e61626c6520746f206170706f76652829000000000000000000000000000081525060200191505060405180910390fd5b6107ba876117a6565b15610832576107c8876117fc565b8093508195505050600115158415151461082d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180611d1a6021913960400191505060405180910390fd5b610836565b8691505b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f13a678848385306040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001945050505050602060405180830381600087803b15801561094757600080fd5b505af115801561095b573d6000803e3d6000fd5b505050506040513d602081101561097157600080fd5b8101908080519060200190929190505050935060011515841515146109fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f556e61626c6520746f206578656375746520737761700000000000000000000081525060200191505060405180910390fd5b610a07876117a6565b15610a96576000610a218389610a1c86611ae6565b611bac565b1415610a95576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f556e61626c6520746f20737570706c7920746f20436f6d706f756e640000000081525060200191505060405180910390fd5b5b8694508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33610abf8a611ae6565b6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610b2857600080fd5b505af1158015610b3c573d6000803e3d6000fd5b505050506040513d6020811015610b5257600080fd5b8101908080519060200190929190505050610bd5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f556e61626c6520746f207472616e736665722064737420746f6b656e0000000081525060200191505060405180910390fd5b5050505050505050565b610be8336111e9565b610c5a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5468652063616c6c6572206973206e6f742041646d696e00000000000000000081525060200191505060405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000806000806000806000610cc98a6117a6565b15610df25760008a90508073ffffffffffffffffffffffffffffffffffffffff16636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1957600080fd5b505afa158015610d2d573d6000803e3d6000fd5b505050506040513d6020811015610d4357600080fd5b81019080805190602001909291905050509650670de0b6b3a76400008173ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610da557600080fd5b505afa158015610db9573d6000803e3d6000fd5b505050506040513d6020811015610dcf57600080fd5b81019080805190602001909291905050508a0281610de957fe5b04945050610df9565b8995508793505b610e02896117a6565b15610f9b5760008990508073ffffffffffffffffffffffffffffffffffffffff16636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610e5257600080fd5b505afa158015610e66573d6000803e3d6000fd5b505050506040513d6020811015610e7c57600080fd5b810190808051906020019092919050505095508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed557600080fd5b505afa158015610ee9573d6000803e3d6000fd5b505050506040513d6020811015610eff57600080fd5b810190808051906020019092919050505093508073ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5857600080fd5b505afa158015610f6c573d6000803e3d6000fd5b505050506040513d6020811015610f8257600080fd5b8101908080519060200190929190505050925050611026565b8894508873ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe457600080fd5b505afa158015610ff8573d6000803e3d6000fd5b505050506040513d602081101561100e57600080fd5b81019080805190602001909291905050509250600191505b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141561109d57611063896117a6565b15611087578183602403600a0a85028161107957fe5b0496505050505050506111e2565b82601203600a0a840296505050505050506111e2565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c9fa5938787876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561117857600080fd5b505afa15801561118c573d6000803e3d6000fd5b505050506040513d60208110156111a257600080fd5b810190808051906020019092919050505090506111be896117a6565b156111d8578183602403600a0a8202816111d457fe5b0490505b8096505050505050505b9392505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5468652063616c6c6572206973206e6f74204f776e657200000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b611345336111e9565b6113b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5468652063616c6c6572206973206e6f742041646d696e00000000000000000081525060200191505060405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61141a336111e9565b61148c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5468652063616c6c6572206973206e6f742041646d696e00000000000000000081525060200191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6114ef336111e9565b611561576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5468652063616c6c6572206973206e6f742041646d696e00000000000000000081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6115ae336111e9565b611620576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5468652063616c6c6572206973206e6f742041646d696e00000000000000000081525060200191505060405180910390fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808390508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561176257600080fd5b505af1158015611776573d6000803e3d6000fd5b505050506040513d602081101561178c57600080fd5b810190808051906020019092919050505091505092915050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60008060008390508073ffffffffffffffffffffffffffffffffffffffff1663fe9c44ae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561184a57600080fd5b505afa15801561185e573d6000803e3d6000fd5b505050506040513d602081101561187457600080fd5b8101908080519060200190929190505050156119175760018173ffffffffffffffffffffffffffffffffffffffff16636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156118d257600080fd5b505afa1580156118e6573d6000803e3d6000fd5b505050506040513d60208110156118fc57600080fd5b81019080805190602001909291905050509250925050611923565b60008080905092509250505b915091565b60008082905060006001151585151514156119d2578173ffffffffffffffffffffffffffffffffffffffff1663db006a75876040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561199057600080fd5b505af11580156119a4573d6000803e3d6000fd5b505050506040513d60208110156119ba57600080fd5b81019080805190602001909291905050509050611a63565b8173ffffffffffffffffffffffffffffffffffffffff1663852a12e3876040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611a2557600080fd5b505af1158015611a39573d6000803e3d6000fd5b505050506040513d6020811015611a4f57600080fd5b810190808051906020019092919050505090505b60008114611ad9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f72656465656d526573756c74206572726f72000000000000000000000000000081525060200191505060405180910390fd5b6001925050509392505050565b6000808290508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611b6957600080fd5b505afa158015611b7d573d6000803e3d6000fd5b505050506040513d6020811015611b9357600080fd5b8101908080519060200190929190505050915050919050565b60008084905060008490508173ffffffffffffffffffffffffffffffffffffffff1663095ea7b386866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611c3e57600080fd5b505af1158015611c52573d6000803e3d6000fd5b505050506040513d6020811015611c6857600080fd5b81019080805190602001909291905050505060008173ffffffffffffffffffffffffffffffffffffffff1663a0712d68866040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611ccf57600080fd5b505af1158015611ce3573d6000803e3d6000fd5b505050506040513d6020811015611cf957600080fd5b81019080805190602001909291905050509050809350505050939250505056fe4d61796265207468652064737420746f6b656e206973206e6f742063546f6b656e4d61796265207468652073726320746f6b656e206973206e6f742063546f6b656ea265627a7a723158205c0e58c33aaa3297cdc825e69726ec84be155ad0c127899c04103e515a9a95c064736f6c634300050e0032
#@coverage
Achieved 92.89% coverage for code: 608060405234801561001057600080fd5b50600436106100a95760003560e01c806341c0e1b51161007157806341c0e1b5146102c157806362d91855146102cb578063704802751461030f57806397107d6d14610353578063e00a5bba14610397578063ec556889146103db576100a9565b806306fdde03146100ae5780630da3a02914610131578063109b88df1461019f5780631c9fa593146101e357806324d7806c14610265575b600080fd5b6100b6610425565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61019d6004803603606081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506104c3565b005b6101e1600480360360208110156101b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bdf565b005b61024f600480360360608110156101f957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cb5565b6040518082815260200191505060405180910390f35b6102a76004803603602081101561027b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111e9565b604051808215151515815260200191505060405180910390f35b6102c961123e565b005b61030d600480360360208110156102e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061133c565b005b6103516004803603602081101561032557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611411565b005b6103956004803603602081101561036957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114e6565b005b6103d9600480360360208110156103ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115a5565b005b6103e361167b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104bb5780601f10610490576101008083540402835291602001916104bb565b820191906000526020600020905b81548152906001019060200180831161049e57829003601f168201915b505050505081565b60008060008060006104d588876116a1565b610547576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f556e61626c6520746f207472616e7366657246726f6d2829000000000000000081525060200191505060405180910390fd5b610550886117a6565b156106515761055e886117fc565b809450819550505060011515841515146105c3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180611d3b6021913960400191505060405180910390fd5b6105cf8660018a611928565b610641576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f556e61626c6520746f2072656564656d2066726f6d20636f6d706f756e64000081525060200191505060405180910390fd5b61064a83611ae6565b9050610658565b8792508590505b8294508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561070457600080fd5b505af1158015610718573d6000803e3d6000fd5b505050506040513d602081101561072e57600080fd5b81019080805190602001909291905050506107b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f556e61626c6520746f206170706f76652829000000000000000000000000000081525060200191505060405180910390fd5b6107ba876117a6565b15610832576107c8876117fc565b8093508195505050600115158415151461082d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180611d1a6021913960400191505060405180910390fd5b610836565b8691505b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f13a678848385306040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001945050505050602060405180830381600087803b15801561094757600080fd5b505af115801561095b573d6000803e3d6000fd5b505050506040513d602081101561097157600080fd5b8101908080519060200190929190505050935060011515841515146109fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f556e61626c6520746f206578656375746520737761700000000000000000000081525060200191505060405180910390fd5b610a07876117a6565b15610a96576000610a218389610a1c86611ae6565b611bac565b1415610a95576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f556e61626c6520746f20737570706c7920746f20436f6d706f756e640000000081525060200191505060405180910390fd5b5b8694508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33610abf8a611ae6565b6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610b2857600080fd5b505af1158015610b3c573d6000803e3d6000fd5b505050506040513d6020811015610b5257600080fd5b8101908080519060200190929190505050610bd5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f556e61626c6520746f207472616e736665722064737420746f6b656e0000000081525060200191505060405180910390fd5b5050505050505050565b610be8336111e9565b610c5a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5468652063616c6c6572206973206e6f742041646d696e00000000000000000081525060200191505060405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000806000806000806000610cc98a6117a6565b15610df25760008a90508073ffffffffffffffffffffffffffffffffffffffff16636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1957600080fd5b505afa158015610d2d573d6000803e3d6000fd5b505050506040513d6020811015610d4357600080fd5b81019080805190602001909291905050509650670de0b6b3a76400008173ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610da557600080fd5b505afa158015610db9573d6000803e3d6000fd5b505050506040513d6020811015610dcf57600080fd5b81019080805190602001909291905050508a0281610de957fe5b04945050610df9565b8995508793505b610e02896117a6565b15610f9b5760008990508073ffffffffffffffffffffffffffffffffffffffff16636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610e5257600080fd5b505afa158015610e66573d6000803e3d6000fd5b505050506040513d6020811015610e7c57600080fd5b810190808051906020019092919050505095508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed557600080fd5b505afa158015610ee9573d6000803e3d6000fd5b505050506040513d6020811015610eff57600080fd5b810190808051906020019092919050505093508073ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5857600080fd5b505afa158015610f6c573d6000803e3d6000fd5b505050506040513d6020811015610f8257600080fd5b8101908080519060200190929190505050925050611026565b8894508873ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe457600080fd5b505afa158015610ff8573d6000803e3d6000fd5b505050506040513d602081101561100e57600080fd5b81019080805190602001909291905050509250600191505b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141561109d57611063896117a6565b15611087578183602403600a0a85028161107957fe5b0496505050505050506111e2565b82601203600a0a840296505050505050506111e2565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c9fa5938787876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561117857600080fd5b505afa15801561118c573d6000803e3d6000fd5b505050506040513d60208110156111a257600080fd5b810190808051906020019092919050505090506111be896117a6565b156111d8578183602403600a0a8202816111d457fe5b0490505b8096505050505050505b9392505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5468652063616c6c6572206973206e6f74204f776e657200000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b611345336111e9565b6113b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5468652063616c6c6572206973206e6f742041646d696e00000000000000000081525060200191505060405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61141a336111e9565b61148c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5468652063616c6c6572206973206e6f742041646d696e00000000000000000081525060200191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6114ef336111e9565b611561576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5468652063616c6c6572206973206e6f742041646d696e00000000000000000081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6115ae336111e9565b611620576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5468652063616c6c6572206973206e6f742041646d696e00000000000000000081525060200191505060405180910390fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808390508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561176257600080fd5b505af1158015611776573d6000803e3d6000fd5b505050506040513d602081101561178c57600080fd5b810190808051906020019092919050505091505092915050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60008060008390508073ffffffffffffffffffffffffffffffffffffffff1663fe9c44ae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561184a57600080fd5b505afa15801561185e573d6000803e3d6000fd5b505050506040513d602081101561187457600080fd5b8101908080519060200190929190505050156119175760018173ffffffffffffffffffffffffffffffffffffffff16636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156118d257600080fd5b505afa1580156118e6573d6000803e3d6000fd5b505050506040513d60208110156118fc57600080fd5b81019080805190602001909291905050509250925050611923565b60008080905092509250505b915091565b60008082905060006001151585151514156119d2578173ffffffffffffffffffffffffffffffffffffffff1663db006a75876040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561199057600080fd5b505af11580156119a4573d6000803e3d6000fd5b505050506040513d60208110156119ba57600080fd5b81019080805190602001909291905050509050611a63565b8173ffffffffffffffffffffffffffffffffffffffff1663852a12e3876040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611a2557600080fd5b505af1158015611a39573d6000803e3d6000fd5b505050506040513d6020811015611a4f57600080fd5b810190808051906020019092919050505090505b60008114611ad9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f72656465656d526573756c74206572726f72000000000000000000000000000081525060200191505060405180910390fd5b6001925050509392505050565b6000808290508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611b6957600080fd5b505afa158015611b7d573d6000803e3d6000fd5b505050506040513d6020811015611b9357600080fd5b8101908080519060200190929190505050915050919050565b60008084905060008490508173ffffffffffffffffffffffffffffffffffffffff1663095ea7b386866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611c3e57600080fd5b505af1158015611c52573d6000803e3d6000fd5b505050506040513d6020811015611c6857600080fd5b81019080805190602001909291905050505060008173ffffffffffffffffffffffffffffffffffffffff1663a0712d68866040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611ccf57600080fd5b505af1158015611ce3573d6000803e3d6000fd5b505050506040513d6020811015611cf957600080fd5b81019080805190602001909291905050509050809350505050939250505056fe4d61796265207468652064737420746f6b656e206973206e6f742063546f6b656e4d61796265207468652073726320746f6b656e206973206e6f742063546f6b656ea265627a7a723158205c0e58c33aaa3297cdc825e69726ec84be155ad0c127899c04103e515a9a95c064736f6c634300050e0032
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: cTokenKyberBridge
Function name: getSwapQuantity(address,address,uint256)
PC address: 3496
Estimated Gas Usage: 11685 - 186286
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6209cfbdee10e7796bbcabfc6400acdc06ac26f2.sol:251

cToken.exchangeRateStored()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getSwapQuantity(address,address,uint256), txdata: 0x1c9fa59300000000000000000000000039aa39c021dfbae8fac545936693ac917d5e756300000000000000000000000039aa39c021dfbae8fac545936693ac917d5e75630000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x39aa39c021dfbae8fac545936693ac917d5e7563', '0x39aa39c021dfbae8fac545936693ac917d5e7563', 0), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: cTokenKyberBridge
Function name: getSwapQuantity(address,address,uint256)
PC address: 3554
Estimated Gas Usage: 8426 - 114093
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x6209cfbdee10e7796bbcabfc6400acdc06ac26f2.sol:251

srcQty * cToken.exchangeRateStored()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getSwapQuantity(address,address,uint256), txdata: 0x1c9fa5930000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643000000000000000000000000000000000104001000021000000120000000100000181663a6207e84342bc0000000000000000000000000000000000000000007, decoded_data: ('0x5d3a536e4d6dbd6114cc1ead35777bab948e3643', '0x0000000001040010000210000001200000001000', 42558854504238421715957428184479911382057978617454248964912601337553747975), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: cTokenKyberBridge
Function name: getSwapQuantity(address,address,uint256)
PC address: 3669
Estimated Gas Usage: 11685 - 186286
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6209cfbdee10e7796bbcabfc6400acdc06ac26f2.sol:260

cToken.underlying()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getSwapQuantity(address,address,uint256), txdata: 0x1c9fa5930000000000000000000000004ddc2d193948926d02f9b1fe9e1daa0718270ed500000000000000000000000039aa39c021dfbae8fac545936693ac917d5e75630000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x4ddc2d193948926d02f9b1fe9e1daa0718270ed5', '0x39aa39c021dfbae8fac545936693ac917d5e7563', 0), value: 0x0
Caller: [CREATOR], function: getSwapQuantity(address,address,uint256), txdata: 0x1c9fa593939393939393939393939393158079ee67fce2f58472a96584a73c7ab9ac95c19393939393939393939393936c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e9393939393939393939393939393939393939393939393939393939393939393, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: cTokenKyberBridge
Function name: getSwapQuantity(address,address,uint256)
PC address: 3800
Estimated Gas Usage: 8417 - 114084
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6209cfbdee10e7796bbcabfc6400acdc06ac26f2.sol:261

cToken.decimals()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getSwapQuantity(address,address,uint256), txdata: 0x1c9fa5930000000000000000000000000100010100020000010100000100010101000000000000000000000000000000158079ee67fce2f58472a96584a73c7ab9ac95c10000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0100010100020000010100000100010101000000', '0x158079ee67fce2f58472a96584a73c7ab9ac95c1', 0), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: cTokenKyberBridge
Function name: getSwapQuantity(address,address,uint256)
PC address: 3931
Estimated Gas Usage: 8417 - 114084
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6209cfbdee10e7796bbcabfc6400acdc06ac26f2.sol:262

cToken.exchangeRateStored()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getSwapQuantity(address,address,uint256), txdata: 0x1c9fa593000000000000000000000000f650c3d88d12db855b8bf7d11be6c55a4e07dcc9000000000000000000000000158079ee67fce2f58472a96584a73c7ab9ac95c10000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xf650c3d88d12db855b8bf7d11be6c55a4e07dcc9', '0x158079ee67fce2f58472a96584a73c7ab9ac95c1', 0), value: 0x0
Caller: [CREATOR], function: getSwapQuantity(address,address,uint256), txdata: 0x1c9fa5931c1c1c1c1c1c1c1c1c1c1c1c5900006e000080000000000000000000000000001c1c1c1c1c1c1c1c1c1c1c1cc11b1268c1a384e55c48c2391d8d480264a3a7f41c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: cTokenKyberBridge
Function name: getSwapQuantity(address,address,uint256)
PC address: 4071
Estimated Gas Usage: 8426 - 114093
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6209cfbdee10e7796bbcabfc6400acdc06ac26f2.sol:265

ERC20(dst).decimals()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getSwapQuantity(address,address,uint256), txdata: 0x1c9fa593000000000000000000000000b3319f5d18bc0d84dd1b4825dcde5d5f7266d407000000000000000000000000158079ee67fce2f58472a96584a73c7ab9ac95c10000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xb3319f5d18bc0d84dd1b4825dcde5d5f7266d407', '0x158079ee67fce2f58472a96584a73c7ab9ac95c1', 0), value: 0x0
Caller: [CREATOR], function: getSwapQuantity(address,address,uint256), txdata: 0x1c9fa593080808080808080808080808158079ee67fce2f58472a96584a73c7ab9ac95c108080808080808080808080838aa31c0210132e0fac545936693ac917d5e75630808080808080808080808080808080808080808080808080808080808080808, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: cTokenKyberBridge
Function name: getSwapQuantity(address,address,uint256)
PC address: 4205
Estimated Gas Usage: 8417 - 114084
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x6209cfbdee10e7796bbcabfc6400acdc06ac26f2.sol:272

36-dstDecimals

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getSwapQuantity(address,address,uint256), txdata: 0x1c9fa5930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f5dce57282a584d2746faf1593d3121fcac444dc0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', '0xf5dce57282a584d2746faf1593d3121fcac444dc', 0), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: cTokenKyberBridge
Function name: getSwapQuantity(address,address,uint256)
PC address: 4208
Estimated Gas Usage: 8417 - 114084
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x6209cfbdee10e7796bbcabfc6400acdc06ac26f2.sol:272

10**(36-dstDecimals)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getSwapQuantity(address,address,uint256), txdata: 0x1c9fa5930000000000000000000000000000000000000000000000000100000000000000000000000000000000000000b3319f5d18bc0d84dd1b4825dcde5d5f7266d4070000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000100000000000000', '0xb3319f5d18bc0d84dd1b4825dcde5d5f7266d407', 0), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: cTokenKyberBridge
Function name: getSwapQuantity(address,address,uint256)
PC address: 4210
Estimated Gas Usage: 8417 - 114084
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x6209cfbdee10e7796bbcabfc6400acdc06ac26f2.sol:272

srcQuantity * 10**(36-dstDecimals)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getSwapQuantity(address,address,uint256), txdata: 0x1c9fa5930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f650c3d88d12db855b8bf7d11be6c55a4e07dcc900000000022033cb952a0f8703008123405c000108111c440500010000200001, decoded_data: ('0x0000000000000000000000000000000000000000', '0xf650c3d88d12db855b8bf7d11be6c55a4e07dcc9', 223871851545091493438522116271139653446787496591059839115772035073), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: cTokenKyberBridge
Function name: getSwapQuantity(address,address,uint256)
PC address: 4216
Estimated Gas Usage: 8312 - 113698
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x6209cfbdee10e7796bbcabfc6400acdc06ac26f2.sol:128

function isCToken(address _token) internal view returns(bool) {
        return cTokens[_token];
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getSwapQuantity(address,address,uint256), txdata: 0x1c9fa5930000000000000000000000000000000101000000000000000000000000000000000000000000000000000000158079ee67fce2f58472a96584a73c7ab9ac95c10000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000101000000000000000000000000000000', '0x158079ee67fce2f58472a96584a73c7ab9ac95c1', 0), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: cTokenKyberBridge
Function name: getSwapQuantity(address,address,uint256)
PC address: 4235
Estimated Gas Usage: 5158 - 41891
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x6209cfbdee10e7796bbcabfc6400acdc06ac26f2.sol:274

18-dstDecimals

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getSwapQuantity(address,address,uint256), txdata: 0x1c9fa593000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: cTokenKyberBridge
Function name: getSwapQuantity(address,address,uint256)
PC address: 4238
Estimated Gas Usage: 5158 - 41891
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x6209cfbdee10e7796bbcabfc6400acdc06ac26f2.sol:274

10**(18-dstDecimals)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getSwapQuantity(address,address,uint256), txdata: 0x1c9fa593000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000100000000', '0x0000000000000000000000000000000100000000', 0), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: cTokenKyberBridge
Function name: getSwapQuantity(address,address,uint256)
PC address: 4240
Estimated Gas Usage: 8417 - 114084
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x6209cfbdee10e7796bbcabfc6400acdc06ac26f2.sol:274

srcQuantity * 10**(18-dstDecimals)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getSwapQuantity(address,address,uint256), txdata: 0x1c9fa5930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c11b1268c1a384e55c48c2391d8d480264a3a7f404a811e4184034685e45a04840060c126204324264c654add0e0626013088052, decoded_data: ('0x0000000000000000000000000000000000000000', '0xc11b1268c1a384e55c48c2391d8d480264a3a7f4', 2106205180325476959664486070131271428742636666112449857484517827378984550482), value: 0x0


time_used: 36046.31428527832 seconds
#@contract_info_time
0x6209cfbdee10e7796bbcabfc6400acdc06ac26f2.sol:0.5.14:cTokenKyberBridge:36046.31428527832:36100:60:36000
