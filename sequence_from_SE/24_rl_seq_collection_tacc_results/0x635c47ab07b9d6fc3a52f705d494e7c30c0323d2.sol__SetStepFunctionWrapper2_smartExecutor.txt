++++ 0x635c47ab07b9d6fc3a52f705d494e7c30c0323d2.sol  :  0.4.18  :  SetStepFunctionWrapper2 ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 3560
['constructor']:writes at the last depth:['0']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 92.98% coverage.
dynamic svars:['4', '5', '3', '2']
static svars:['6', '1', '0']
Ending preprocessing.
preprocessing time(s): 102.70075011253357
contract coverage: 63.01%
Function Reads: State variables read in conditions
	removeAlerter(address):['0', '3', '5']
	pendingAdmin():[]
	getOperators():['4']
	withdrawToken(address,uint256,address):['0']
	addAlerter(address):['0', '3', '5']
	transferAdmin(address):['0']
	claimAdmin():['1']
	transferAdminQuickly(address):['0']
	getAlerters():['5']
	addOperator(address):['0', '2', '4']
	removeOperator(address):['0', '2', '4']
	setImbalanceStepFunction(address,int256[],int256[],int256[],int256[]):['2']
	setConversionRateAddress(address):['2']
	withdrawEther(uint256,address):['0']
	SetStepFunctionWrapper(address,address):['0', '2', '4']
	rateContract():[]
	admin():[]
Function Writes: State variables written
	removeAlerter(address):['3', '5']
	setConversionRateAddress(address):['6']
	transferAdmin(address):['1']
	claimAdmin():['0', '1']
	removeOperator(address):['2', '4']
	transferAdminQuickly(address):['0']
	addAlerter(address):['3', '5']
	addOperator(address):['2', '4']
	SetStepFunctionWrapper(address,address):['2', '4', '0']
============================
iteration:3
targets:['claimAdmin()', 'removeOperator(address)', 'removeAlerter(address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setConversionRateAddress(address)', 'getOperators()', 'getAlerters()', 'addAlerter(address)', 'addOperator(address)', 'SetStepFunctionWrapper(address,address)']
['transferAdmin(address)']:writes at the last depth:['1']
['withdrawEther(uint256,address)']:writes at the last depth:[]
['transferAdminQuickly(address)']:writes at the last depth:['0']
['withdrawToken(address,uint256,address)']:writes at the last depth:[]
['addAlerter(address)']:writes at the last depth:['5', '3']
['addOperator(address)']:writes at the last depth:['2', '4']
['SetStepFunctionWrapper(address,address)']:writes at the last depth:['2', '4', '0']
contract coverage: 87.84%
============================
iteration:4
['SetStepFunctionWrapper(address,address)', 'setConversionRateAddress(address)']:writes at the last depth:['6']
['SetStepFunctionWrapper(address,address)', 'transferAdmin(address)']:writes at the last depth:['1']
['SetStepFunctionWrapper(address,address)', 'withdrawEther(uint256,address)']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'transferAdminQuickly(address)']:writes at the last depth:['0']
['SetStepFunctionWrapper(address,address)', 'withdrawToken(address,uint256,address)']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'addAlerter(address)']:writes at the last depth:['', '5', '3']
['SetStepFunctionWrapper(address,address)', 'addOperator(address)']:writes at the last depth:['', '4', '2']
['SetStepFunctionWrapper(address,address)', 'removeOperator(address)']:writes at the last depth:['', '4', '2']
['SetStepFunctionWrapper(address,address)', 'SetStepFunctionWrapper(address,address)']:writes at the last depth:['2', '', '4', '0']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
contract coverage: 87.84%
============================
iteration:5
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setConversionRateAddress(address)']:writes at the last depth:['6']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'transferAdmin(address)']:writes at the last depth:['1']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'withdrawEther(uint256,address)']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'transferAdminQuickly(address)']:writes at the last depth:['0']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'withdrawToken(address,uint256,address)']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'addAlerter(address)']:writes at the last depth:['', '5', '3']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'addOperator(address)']:writes at the last depth:['2', '', '4']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'removeOperator(address)']:writes at the last depth:['2', '', '4']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'SetStepFunctionWrapper(address,address)']:writes at the last depth:['2', '', '4', '0']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
contract coverage: 87.84%
============================
iteration:6
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setConversionRateAddress(address)']:writes at the last depth:['6']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'withdrawEther(uint256,address)']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'transferAdminQuickly(address)']:writes at the last depth:['0']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'withdrawToken(address,uint256,address)']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'addAlerter(address)']:writes at the last depth:['', '5', '3']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'addOperator(address)']:writes at the last depth:['2', '', '4']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
contract coverage: 87.84%
============================
iteration:7
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setConversionRateAddress(address)']:writes at the last depth:['6']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'transferAdmin(address)']:writes at the last depth:['1']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'withdrawEther(uint256,address)']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'transferAdminQuickly(address)']:writes at the last depth:['0']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'withdrawToken(address,uint256,address)']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'addAlerter(address)']:writes at the last depth:['', '5', '3']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'addOperator(address)']:writes at the last depth:['2', '', '4']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'removeOperator(address)']:writes at the last depth:['', '4', '2']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'SetStepFunctionWrapper(address,address)']:writes at the last depth:['2', '', '4', '0']
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['SetStepFunctionWrapper(address,address)', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
contract coverage: 87.84%
============================
iteration:8
contract coverage: 87.84%
============================
iteration:9
contract coverage: 87.84%
============================
iteration:10
contract coverage: 87.84%
============================
iteration:11
contract coverage: 87.84%
============================
iteration:12
contract coverage: 87.84%
============================
iteration:13
contract coverage: 87.84%
============================
iteration:14
contract coverage: 87.84%
============================
iteration:15
contract coverage: 87.84%
============================
iteration:16
contract coverage: 87.84%
============================
iteration:17
contract coverage: 87.84%
============================
iteration:18
contract coverage: 87.84%
============================
iteration:19
contract coverage: 87.84%
============================
iteration:20
contract coverage: 87.84%
============================
iteration:21
contract coverage: 87.84%
============================
iteration:22
contract coverage: 87.84%
============================
iteration:23
contract coverage: 87.84%
============================
iteration:24
contract coverage: 87.84%
============================
iteration:25
contract coverage: 87.84%
============================
iteration:26
contract coverage: 87.84%
============================
iteration:27
contract coverage: 87.84%
============================
iteration:28
contract coverage: 87.84%
============================
iteration:29
contract coverage: 87.84%
============================
iteration:30
contract coverage: 87.84%
============================
iteration:31
contract coverage: 87.84%
============================
iteration:32
contract coverage: 87.84%
============================
iteration:33
contract coverage: 87.84%
============================
iteration:34
contract coverage: 87.84%
============================
iteration:35
contract coverage: 87.84%
============================
iteration:36
contract coverage: 87.84%
============================
iteration:37
contract coverage: 87.84%
============================
iteration:38
contract coverage: 87.84%
============================
iteration:39
contract coverage: 87.84%
============================
iteration:40
contract coverage: 87.84%
============================
iteration:41
contract coverage: 87.84%
============================
iteration:42
contract coverage: 87.84%
============================
iteration:43
contract coverage: 87.84%
============================
iteration:44
contract coverage: 87.84%
============================
iteration:45
contract coverage: 87.84%
============================
iteration:46
contract coverage: 87.84%
============================
iteration:47
contract coverage: 87.84%
============================
iteration:48
contract coverage: 87.84%
============================
iteration:49
contract coverage: 87.84%
============================
iteration:50
contract coverage: 87.84%
============================
iteration:51
contract coverage: 87.84%
============================
iteration:52
contract coverage: 87.84%
============================
iteration:53
contract coverage: 87.84%
============================
iteration:54
contract coverage: 87.84%
============================
iteration:55
contract coverage: 87.84%
============================
iteration:56
contract coverage: 87.84%
============================
iteration:57
contract coverage: 87.84%
============================
iteration:58
contract coverage: 87.84%
============================
iteration:59
contract coverage: 87.84%
============================
iteration:60
contract coverage: 87.84%
============================
iteration:61
contract coverage: 87.84%
============================
iteration:62
contract coverage: 87.84%
============================
iteration:63
contract coverage: 87.84%
============================
iteration:64
contract coverage: 87.84%
============================
iteration:65
contract coverage: 87.84%
============================
iteration:66
contract coverage: 87.84%
============================
iteration:67
contract coverage: 87.84%
============================
iteration:68
contract coverage: 87.84%
============================
iteration:69
contract coverage: 87.84%
============================
iteration:70
contract coverage: 87.84%
============================
iteration:71
contract coverage: 87.84%
============================
iteration:72
contract coverage: 87.84%
============================
iteration:73
contract coverage: 87.84%
============================
iteration:74
contract coverage: 87.84%
============================
iteration:75
contract coverage: 87.84%
============================
iteration:76
contract coverage: 87.84%
============================
iteration:77
contract coverage: 87.84%
============================
iteration:78
contract coverage: 87.84%
============================
iteration:79
contract coverage: 87.84%
============================
iteration:80
contract coverage: 87.84%
============================
iteration:81
contract coverage: 87.84%
============================
iteration:82
contract coverage: 87.84%
============================
iteration:83
contract coverage: 87.84%
============================
iteration:84
contract coverage: 87.84%
============================
iteration:85
contract coverage: 87.84%
============================
iteration:86
contract coverage: 87.84%
============================
iteration:87
contract coverage: 87.84%
============================
iteration:88
contract coverage: 87.84%
============================
iteration:89
contract coverage: 87.84%
============================
iteration:90
contract coverage: 87.84%
============================
iteration:91
contract coverage: 87.84%
============================
iteration:92
contract coverage: 87.84%
============================
iteration:93
contract coverage: 87.84%
============================
iteration:94
contract coverage: 87.84%
============================
iteration:95
contract coverage: 87.84%
============================
iteration:96
contract coverage: 87.84%
============================
iteration:97
contract coverage: 87.84%
============================
iteration:98
contract coverage: 87.84%
============================
iteration:99
contract coverage: 87.84%
============================
iteration:100
contract coverage: 87.84%
============================
iteration:101
contract coverage: 87.84%
============================
iteration:102
contract coverage: 87.84%
============================
iteration:103
contract coverage: 87.84%
============================
iteration:104
contract coverage: 87.84%
============================
iteration:105
contract coverage: 87.84%
============================
iteration:106
contract coverage: 87.84%
============================
iteration:107
contract coverage: 87.84%
============================
iteration:108
contract coverage: 87.84%
============================
iteration:109
contract coverage: 87.84%
============================
iteration:110
contract coverage: 87.84%
============================
iteration:111
contract coverage: 87.84%
============================
iteration:112
contract coverage: 87.84%
============================
iteration:113
contract coverage: 87.84%
============================
iteration:114
contract coverage: 87.84%
============================
iteration:115
contract coverage: 87.84%
============================
iteration:116
contract coverage: 87.84%
============================
iteration:117
contract coverage: 87.84%
============================
iteration:118
contract coverage: 87.84%
============================
iteration:119
contract coverage: 87.84%
============================
iteration:120
contract coverage: 87.84%
============================
iteration:121
contract coverage: 87.84%
============================
iteration:122
contract coverage: 87.84%
============================
iteration:123
contract coverage: 87.84%
============================
iteration:124
contract coverage: 87.84%
============================
iteration:125
contract coverage: 87.84%
============================
iteration:126
contract coverage: 87.84%
============================
iteration:127
contract coverage: 87.84%
============================
iteration:128
contract coverage: 87.84%
============================
iteration:129
contract coverage: 87.84%
============================
iteration:130
contract coverage: 87.84%
============================
iteration:131
contract coverage: 87.84%
============================
iteration:132
contract coverage: 87.84%
============================
iteration:133
contract coverage: 87.84%
============================
iteration:134
contract coverage: 87.84%
============================
iteration:135
contract coverage: 87.84%
============================
iteration:136
contract coverage: 87.84%
============================
iteration:137
contract coverage: 87.84%
============================
iteration:138
contract coverage: 87.84%
============================
iteration:139
contract coverage: 87.84%
============================
iteration:140
contract coverage: 87.84%
============================
iteration:141
contract coverage: 87.84%
============================
iteration:142
contract coverage: 87.84%
============================
iteration:143
contract coverage: 87.84%
============================
iteration:144
contract coverage: 87.84%
============================
iteration:145
contract coverage: 87.84%
============================
iteration:146
contract coverage: 87.84%
============================
iteration:147
contract coverage: 87.84%
============================
iteration:148
contract coverage: 87.84%
============================
iteration:149
contract coverage: 87.84%
============================
iteration:150
contract coverage: 87.84%
============================
iteration:151
contract coverage: 87.84%
============================
iteration:152
contract coverage: 87.84%
============================
iteration:153
contract coverage: 87.84%
============================
iteration:154
contract coverage: 87.84%
============================
iteration:155
contract coverage: 87.84%
============================
iteration:156
contract coverage: 87.84%
============================
iteration:157
contract coverage: 87.84%
============================
iteration:158
contract coverage: 87.84%
============================
iteration:159
contract coverage: 87.84%
============================
iteration:160
contract coverage: 87.84%
============================
iteration:161
contract coverage: 87.84%
============================
iteration:162
contract coverage: 87.84%
============================
iteration:163
contract coverage: 87.84%
============================
iteration:164
contract coverage: 87.84%
============================
iteration:165
contract coverage: 87.84%
============================
iteration:166
contract coverage: 87.84%
============================
iteration:167
contract coverage: 87.84%
============================
iteration:168
contract coverage: 87.84%
============================
iteration:169
contract coverage: 87.84%
============================
iteration:170
contract coverage: 87.84%
============================
iteration:171
contract coverage: 87.84%
============================
iteration:172
contract coverage: 87.84%
============================
iteration:173
contract coverage: 87.84%
============================
iteration:174
contract coverage: 87.84%
============================
iteration:175
contract coverage: 87.84%
============================
iteration:176
contract coverage: 87.84%
============================
iteration:177
contract coverage: 87.84%
============================
iteration:178
contract coverage: 87.84%
============================
iteration:179
contract coverage: 87.84%
============================
iteration:180
contract coverage: 87.84%
============================
iteration:181
contract coverage: 87.84%
============================
iteration:182
contract coverage: 87.84%
============================
iteration:183
contract coverage: 87.84%
============================
iteration:184
contract coverage: 87.84%
#@statespace
7116 nodes, 7115 edges, 121956 total states
#@coverage
Achieved 0.86% coverage for code: 6060604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611e85806100536000396000f3006060604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301a12fd3146100f6578063267822471461012f57806327a099d8146101845780633ccdbb28146101ee578063408ee7fe1461024f57806375829def1461028857806377f50f97146102c15780637acc8678146102d65780637c423f541461030f5780639870d7fe14610379578063ac8a584a146103b2578063bc9cbcc8146103eb578063c6d8a20314610524578063ce56c4541461055d578063d05407d41461059f578063eee24219146105f7578063f851a4401461064c575b600080fd5b341561010157600080fd5b61012d600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506106a1565b005b341561013a57600080fd5b610142610963565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561018f57600080fd5b610197610989565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101da5780820151818401526020810190506101bf565b505050509050019250505060405180910390f35b34156101f957600080fd5b61024d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a1d565b005b341561025a57600080fd5b610286600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610bed565b005b341561029357600080fd5b6102bf600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610de3565b005b34156102cc57600080fd5b6102d4610f43565b005b34156102e157600080fd5b61030d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061111f565b005b341561031a57600080fd5b610322611314565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561036557808201518184015260208101905061034a565b505050509050019250505060405180910390f35b341561038457600080fd5b6103b0600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113a8565b005b34156103bd57600080fd5b6103e9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061159e565b005b34156103f657600080fd5b610522600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050611863565b005b341561052f57600080fd5b61055b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611bc1565b005b341561056857600080fd5b61059d600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c5d565b005b34156105aa57600080fd5b6105f5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611d67565b005b341561060257600080fd5b61060a611d7d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561065757600080fd5b61065f611da3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106fe57600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561075657600080fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600090505b60058054905081101561095f578173ffffffffffffffffffffffffffffffffffffffff166005828154811015156107e657fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561095457600560016005805490500381548110151561084557fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660058281548110151561088057fe5b906000526020600020900160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060058054809190600190036108de9190611dc8565b507f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762826000604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a161095f565b8060010190506107b3565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610991611df4565b6004805480602002602001604051908101604052809291908181526020018280548015610a1357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116109c9575b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a7857600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610b2357600080fd5b6102c65a03f11515610b3457600080fd5b505050604051805190501515610b4957600080fd5b7f72cb8a894ddb372ceec3d2a7648d86f17d5a15caae0e986c53109b8a9a9385e6838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c4857600080fd5b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610ca157600080fd5b6032600580549050101515610cb557600080fd5b7f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762816001604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a16001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060058054806001018281610d919190611e08565b9160005260206000209001600083909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e3e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e7a57600080fd5b7f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc40600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a180600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610f9f57600080fd5b7f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561117a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156111b657600080fd5b7f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc4081604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a17f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed816000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61131c611df4565b600580548060200260200160405190810160405280929190818152602001828054801561139e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611354575b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561140357600080fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561145c57600080fd5b603260048054905010151561147057600080fd5b7f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b816001604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a16001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506004805480600101828161154c9190611e08565b9160005260206000209001600083909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115fb57600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561165357600080fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600090505b60048054905081101561185f578173ffffffffffffffffffffffffffffffffffffffff166004828154811015156116e357fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561185457600460016004805490500381548110151561174257fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660048281548110151561177d57fe5b906000526020600020900160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016004818180549050039150816117de9190611dc8565b507f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b826000604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a161185f565b8060010190506116b0565b5050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156118bd57600080fd5b600090505b84518110156118ff57600085828151811015156118db57fe5b90602001906020020151121515156118f257600080fd5b80806001019150506118c2565b600090505b8351811015611941576000848281518110151561191d57fe5b906020019060200201511315151561193457600080fd5b8080600101915050611904565b600090505b8251811015611983576000838281518110151561195f57fe5b906020019060200201511315151561197657600080fd5b8080600101915050611946565b600090505b81518110156119c557600082828151811015156119a157fe5b90602001906020020151131515156119b857600080fd5b8080600101915050611988565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc9cbcc887878787876040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b83811015611ab4578082015181840152602081019050611a99565b50505050905001858103845288818151815260200191508051906020019060200280838360005b83811015611af6578082015181840152602081019050611adb565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015611b38578082015181840152602081019050611b1d565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015611b7a578082015181840152602081019050611b5f565b505050509050019950505050505050505050600060405180830381600087803b1515611ba557600080fd5b6102c65a03f11515611bb657600080fd5b505050505050505050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611c1957600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cb857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501515611cf857600080fd5b7fec47e7ed86c86774d1a72c19f35c639911393fe7c1a34031fdbd260890da90de8282604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b611d70816113a8565b611d798261111f565b5050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b815481835581811511611def57818360005260206000209182019101611dee9190611e34565b5b505050565b602060405190810160405280600081525090565b815481835581811511611e2f57818360005260206000209182019101611e2e9190611e34565b5b505050565b611e5691905b80821115611e52576000816000905550600101611e3a565b5090565b905600a165627a7a723058207be8c8a74d069fc90920d78874d024a5b0a7106e2bd919558f1ac040064a750c0029
#@coverage
Achieved 87.84% coverage for code: 6060604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301a12fd3146100f6578063267822471461012f57806327a099d8146101845780633ccdbb28146101ee578063408ee7fe1461024f57806375829def1461028857806377f50f97146102c15780637acc8678146102d65780637c423f541461030f5780639870d7fe14610379578063ac8a584a146103b2578063bc9cbcc8146103eb578063c6d8a20314610524578063ce56c4541461055d578063d05407d41461059f578063eee24219146105f7578063f851a4401461064c575b600080fd5b341561010157600080fd5b61012d600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506106a1565b005b341561013a57600080fd5b610142610963565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561018f57600080fd5b610197610989565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101da5780820151818401526020810190506101bf565b505050509050019250505060405180910390f35b34156101f957600080fd5b61024d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a1d565b005b341561025a57600080fd5b610286600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610bed565b005b341561029357600080fd5b6102bf600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610de3565b005b34156102cc57600080fd5b6102d4610f43565b005b34156102e157600080fd5b61030d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061111f565b005b341561031a57600080fd5b610322611314565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561036557808201518184015260208101905061034a565b505050509050019250505060405180910390f35b341561038457600080fd5b6103b0600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113a8565b005b34156103bd57600080fd5b6103e9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061159e565b005b34156103f657600080fd5b610522600480803573ffffffffffffffffffffffffffffffffffffffffb005b341561052f57600080fd5b61055b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611bc1565b005b341561056857600080fd5b61059d600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c5d565b005b34156105aa57600080fd5b6105f5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611d67565b005b341561060257600080fd5b61060a611d7d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561065757600080fd5b61065f611da3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106fe57600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561075657600080fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600090505b60058054905081101561095f578173ffffffffffffffffffffffffffffffffffffffff166005828154811015156107e657fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561095457600560016005805490500381548110151561084557fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660058281548110151561088057fe5b906000526020600020900160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060058054809190600190036108de9190611dc8565b507f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762826000604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a161095f565b8060010190506107b3565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610991611df4565b6004805480602002602001604051908101604052809291908181526020018280548015610a1357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116109c9575b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a7857600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610b2357600080fd5b6102c65a03f11515610b3457600080fd5b505050604051805190501515610b4957600080fd5b7f72cb8a894ddb372ceec3d2a7648d86f17d5a15caae0e986c53109b8a9a9385e6838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c4857600080fd5b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610ca157600080fd5b6032600580549050101515610cb557600080fd5b7f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762816001604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a16001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060058054806001018281610d919190611e08565b9160005260206000209001600083909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e3e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e7a57600080fd5b7f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc40600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a180600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610f9f57600080fd5b7f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561117a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156111b657600080fd5b7f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc4081604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a17f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed816000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61131c611df4565b600580548060200260200160405190810160405280929190818152602001828054801561139e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611354575b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561140357600080fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561145c57600080fd5b603260048054905010151561147057600080fd5b7f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b816001604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a16001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506004805480600101828161154c9190611e08565b9160005260206000209001600083909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115fb57600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561165357600080fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600090505b60048054905081101561185f578173ffffffffffffffffffffffffffffffffffffffff166004828154811015156116e357fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561185457600460016004805490500381548110151561174257fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660048281548110151561177d57fe5b906000526020600020900160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016004818180549050039150816117de9190611dc8565b507f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b826000604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a161185f565b8060010190506116b0565b5050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156118bd57600080fd5b600090505b84518110156118ff57600085828151811015156118db57fe5b90602001906020020151121515156118f257600080fd5b80806001019150506118c2565b600090505b8351811015611941576000848281518110151561191d57fe5b906020019060200201511315151561193457600080fd5b8080600101915050611904565b600090505b8251811015611983576000838281518110151561195f57fe5b906020019060200201511315151561197657600080fd5b8080600101915050611946565b600090505b81518110156119c557600082828151811015156119a157fe5b90602001906020020151131515156119b857600080fd5b8080600101915050611988565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc9cbcc887878787876040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b83811015611ab4578082015181840152602081019050611a99565b50505050905001858103845288818151815260200191508051906020019060200280838360005b83811015611af6578082015181840152602081019050611adb565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015611b38578082015181840152602081019050611b1d565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015611b7a578082015181840152602081019050611b5f565b505050509050019950505050505050505050600060405180830381600087803b1515611ba557600080fd5b6102c65a03f11515611bb657600080fd5b505050505050505050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611c1957600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cb857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501515611cf857600080fd5b7fec47e7ed86c86774d1a72c19f35c639911393fe7c1a34031fdbd260890da90de8282604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b611d70816113a8565b611d798261111f565b5050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b815481835581811511611def57818360005260206000209182019101611dee9190611e34565b5b505050565b602060405190810160405280600081525090565b815481835581811511611e2f57818360005260206000209182019101611e2e9190611e34565b5b505050565b611e5691905b80821115611e52576000816000905550600101611e3a565b5090565b905600a165627a7a723058207be8c8a74d069fc90920d78874d024a5b0a7106e2bd919558f1ac040064a750c0029
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SetStepFunctionWrapper2
Function name: withdrawToken(address,uint256,address)
PC address: 2857
Estimated Gas Usage: 3694 - 39691
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x635c47ab07b9d6fc3a52f705d494e7c30c0323d2.sol:150

token.transfer(sendTo, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address,uint256,address), txdata: 0x3ccdbb28000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: SetStepFunctionWrapper2
Function name: withdrawEther(uint256,address)
PC address: 7400
Estimated Gas Usage: 3000 - 38243
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x635c47ab07b9d6fc3a52f705d494e7c30c0323d2.sol:158

sendTo.transfer(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x12008000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000010, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: SetStepFunctionWrapper(address,address), txdata: 0xd05407d4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawEther(uint256,address), txdata: 0xce56c454000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefd4d4d4d4d4d4d4d4d4d4d4d4deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0


time_used: 36080.354831933975 seconds
#@contract_info_time
0x635c47ab07b9d6fc3a52f705d494e7c30c0323d2.sol:0.4.18:SetStepFunctionWrapper2:36080.354831933975:36100:60:36000
