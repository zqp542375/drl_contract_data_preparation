++++ 0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol  :  0.4.25  :  ONIX ++++
231844706173151184166525479645308069461910588331 is added into actors.
Starting preprocessing.
number of genesis states: 1
total instructions: 4798
['constructor']:writes at the last depth:['1', '5', '6', '7', '8', '10', '11', '12', '13', '9', '2']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 66.78% coverage.
dynamic svars:['2', '3', '4']
static svars:['8', '10', '13', '5', '7', '6', '9', '1', '12', '11']
Ending preprocessing.
preprocessing time(s): 100.00822949409485
contract coverage: 97.52%
fallback is not reachable
Function Reads: State variables read in conditions
	name():[]
	approve(address,uint256):['3']
	add(uint256):['1', '8']
	totalSupply():[]
	transferFrom(address,address,uint256):['2']
	deadline():[]
	withdraw(uint256):['1']
	decimals():[]
	burn(uint256):['1', '2']
	round2():[]
	balanceOf(address):[]
	requestMinimum():[]
	DistributeAirdrop(address,uint256):['1', '9', '8']
	round1():[]
	progress0drop():[]
	withdrawAll():['1']
	symbol():[]
	finishDistribution():['1', '13']
	updateTokensPerEth(uint256):['1']
	transfer(address,uint256):[]
	getTokens():['13']
	Claimed(address):[]
	distributionFinished():[]
	getTokenBalance(address,address):[]
	tokensPerEth():[]
	allowance(address,address):[]
	withdrawForeignTokens(address):[]
	target0drop():[]
	totalDistributed():[]
	transferOwnership(address):[]
	DistributeAirdropMultiple(address[],uint256):[]
Function Writes: State variables written
	approve(address,uint256):['3']
	add(uint256):['8']
	updateTokensPerEth(uint256):['10']
	finishDistribution():['13']
============================
iteration:3
targets:['fallback', 'getTokens()', 'finishDistribution()', 'approve(address,uint256)', 'DistributeAirdrop(address,uint256)']
['add(uint256)']:writes at the last depth:['8']
['withdraw(uint256)']:writes at the last depth:[]
['approve(address,uint256)']:writes at the last depth:['3']
['withdrawAll()']:writes at the last depth:[]
['updateTokensPerEth(uint256)']:writes at the last depth:['10']
['finishDistribution()']:writes at the last depth:['13']
['approve(address,uint256)']:writes at the last depth:['3']
['transferOwnership(address)']:writes at the last depth:['1']
['getTokenBalance(address,address)']:writes at the last depth:[]
['burn(uint256)']:writes at the last depth:['8', '9', '2']
['DistributeAirdrop(address,uint256)']:writes at the last depth:['13', '9', '2']
['transfer(address,uint256)']:writes at the last depth:['2']
['DistributeAirdrop(address,uint256)']:writes at the last depth:['13', '9', '2']
['withdrawForeignTokens(address)']:writes at the last depth:[]
['transferFrom(address,address,uint256)']:writes at the last depth:['2', '3']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['DistributeAirdropMultiple(address[],uint256)']:writes at the last depth:['', '13', '9']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2', '12', '4']
['DistributeAirdropMultiple(address[],uint256)']:writes at the last depth:['', '13', '9']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['13', '9', '2']
['fallback']:writes at the last depth:['13', '9', '2']
['getTokens()']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['13', '9', '2']
['getTokens()']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['13', '9', '2']
['getTokens()']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['9', '2', '12', '4']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['13', '9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2', '12', '4']
['fallback']:writes at the last depth:['9', '2']
['DistributeAirdropMultiple(address[],uint256)']:writes at the last depth:['', '13', '9']
['DistributeAirdropMultiple(address[],uint256)']:writes at the last depth:['', '13', '9']
['DistributeAirdropMultiple(address[],uint256)']:writes at the last depth:['', '13', '9']
contract coverage: 97.60%
============================
iteration:4
['DistributeAirdropMultiple(address[],uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['DistributeAirdropMultiple(address[],uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawAll()']:writes at the last depth:[]
['DistributeAirdropMultiple(address[],uint256)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['DistributeAirdropMultiple(address[],uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['DistributeAirdropMultiple(address[],uint256)', 'burn(uint256)']:writes at the last depth:['8', '9', '2']
['DistributeAirdropMultiple(address[],uint256)', 'transfer(address,uint256)']:writes at the last depth:['2']
contract coverage: 97.60%
============================
iteration:5
contract coverage: 97.60%
============================
iteration:6
contract coverage: 97.77%
============================
iteration:7
['DistributeAirdropMultiple(address[],uint256)', 'approve(address,uint256)', 'add(uint256)']:writes at the last depth:['8']
['DistributeAirdropMultiple(address[],uint256)', 'approve(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['DistributeAirdropMultiple(address[],uint256)', 'approve(address,uint256)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['DistributeAirdropMultiple(address[],uint256)', 'approve(address,uint256)', 'getTokenBalance(address,address)']:writes at the last depth:[]
contract coverage: 97.77%
============================
iteration:8
contract coverage: 97.77%
============================
iteration:9
contract coverage: 97.77%
============================
iteration:10
contract coverage: 97.77%
============================
iteration:11
contract coverage: 97.77%
============================
iteration:12
contract coverage: 97.77%
============================
iteration:13
contract coverage: 97.77%
============================
iteration:14
contract coverage: 97.77%
============================
iteration:15
contract coverage: 97.77%
============================
iteration:16
contract coverage: 97.77%
============================
iteration:17
['DistributeAirdropMultiple(address[],uint256)', 'add(uint256)']:writes at the last depth:['8']
['DistributeAirdropMultiple(address[],uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['DistributeAirdropMultiple(address[],uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawAll()']:writes at the last depth:[]
['DistributeAirdropMultiple(address[],uint256)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['DistributeAirdropMultiple(address[],uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['DistributeAirdropMultiple(address[],uint256)', 'transferOwnership(address)']:writes at the last depth:['1']
['DistributeAirdropMultiple(address[],uint256)', 'getTokenBalance(address,address)']:writes at the last depth:[]
['DistributeAirdropMultiple(address[],uint256)', 'burn(uint256)']:writes at the last depth:['8', '9', '2']
['DistributeAirdropMultiple(address[],uint256)', 'transfer(address,uint256)']:writes at the last depth:['2']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)']:writes at the last depth:[]
contract coverage: 97.77%
============================
iteration:18
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'add(uint256)']:writes at the last depth:['8']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'finishDistribution()']:writes at the last depth:['13']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'getTokenBalance(address,address)']:writes at the last depth:[]
contract coverage: 97.77%
============================
iteration:19
contract coverage: 97.77%
============================
iteration:20
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'finishDistribution()', 'add(uint256)']:writes at the last depth:['8']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'finishDistribution()', 'approve(address,uint256)']:writes at the last depth:['3']
contract coverage: 97.77%
============================
iteration:21
contract coverage: 97.77%
============================
iteration:22
contract coverage: 97.77%
============================
iteration:23
contract coverage: 97.77%
============================
iteration:24
['DistributeAirdropMultiple(address[],uint256)', 'getTokenBalance(address,address)', 'add(uint256)']:writes at the last depth:['8']
['DistributeAirdropMultiple(address[],uint256)', 'getTokenBalance(address,address)', 'approve(address,uint256)']:writes at the last depth:['3']
contract coverage: 97.77%
============================
iteration:25
contract coverage: 97.77%
============================
iteration:26
contract coverage: 97.77%
============================
iteration:27
['DistributeAirdropMultiple(address[],uint256)', 'transferOwnership(address)', 'withdraw(uint256)']:writes at the last depth:[]
['DistributeAirdropMultiple(address[],uint256)', 'transferOwnership(address)', 'approve(address,uint256)']:writes at the last depth:['3']
contract coverage: 97.77%
============================
iteration:28
contract coverage: 97.77%
============================
iteration:29
contract coverage: 97.77%
============================
iteration:30
contract coverage: 97.77%
============================
iteration:31
contract coverage: 97.77%
============================
iteration:32
contract coverage: 97.77%
============================
iteration:33
contract coverage: 97.77%
============================
iteration:34
contract coverage: 97.77%
============================
iteration:35
contract coverage: 97.77%
============================
iteration:36
['fallback', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'withdraw(uint256)']:writes at the last depth:[]
['fallback', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['fallback', 'finishDistribution()']:writes at the last depth:['13']
['fallback', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferOwnership(address)']:writes at the last depth:['1']
['fallback', 'getTokenBalance(address,address)']:writes at the last depth:[]
['fallback', 'burn(uint256)']:writes at the last depth:['8', '9', '2']
['fallback', 'transfer(address,uint256)']:writes at the last depth:['2']
['fallback', 'fallback']:writes at the last depth:['9', '2', '12', '4']
contract coverage: 97.77%
============================
iteration:37
contract coverage: 97.77%
============================
iteration:38
contract coverage: 97.77%
============================
iteration:39
['fallback', 'burn(uint256)', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'burn(uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['fallback', 'burn(uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'burn(uint256)', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'burn(uint256)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['fallback', 'burn(uint256)', 'finishDistribution()']:writes at the last depth:['13']
['fallback', 'burn(uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'burn(uint256)', 'burn(uint256)']:writes at the last depth:['8', '9', '2']
['fallback', 'burn(uint256)', 'transfer(address,uint256)']:writes at the last depth:['2']
['fallback', 'burn(uint256)', 'DistributeAirdrop(address,uint256)']:writes at the last depth:['13', '9', '2']
contract coverage: 97.77%
============================
iteration:40
contract coverage: 97.77%
============================
iteration:41
contract coverage: 97.77%
============================
iteration:42
['fallback', 'burn(uint256)', 'burn(uint256)', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'burn(uint256)', 'burn(uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['fallback', 'burn(uint256)', 'burn(uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'burn(uint256)', 'burn(uint256)', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'burn(uint256)', 'burn(uint256)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['fallback', 'burn(uint256)', 'burn(uint256)', 'finishDistribution()']:writes at the last depth:['13']
contract coverage: 97.77%
============================
iteration:43
contract coverage: 97.77%
============================
iteration:44
contract coverage: 97.77%
============================
iteration:45
contract coverage: 97.77%
============================
iteration:46
contract coverage: 97.77%
============================
iteration:47
contract coverage: 97.77%
============================
iteration:48
contract coverage: 97.77%
============================
iteration:49
contract coverage: 97.77%
============================
iteration:50
contract coverage: 97.77%
============================
iteration:51
contract coverage: 97.77%
============================
iteration:52
contract coverage: 97.77%
============================
iteration:53
contract coverage: 97.77%
============================
iteration:54
contract coverage: 97.77%
============================
iteration:55
contract coverage: 97.77%
============================
iteration:56
contract coverage: 97.77%
============================
iteration:57
contract coverage: 97.77%
============================
iteration:58
contract coverage: 97.77%
============================
iteration:59
contract coverage: 97.77%
============================
iteration:60
contract coverage: 97.77%
============================
iteration:61
contract coverage: 97.77%
============================
iteration:62
contract coverage: 97.77%
============================
iteration:63
contract coverage: 97.77%
============================
iteration:64
contract coverage: 97.77%
============================
iteration:65
contract coverage: 97.77%
============================
iteration:66
contract coverage: 97.77%
============================
iteration:67
contract coverage: 97.77%
============================
iteration:68
contract coverage: 97.77%
============================
iteration:69
contract coverage: 97.77%
============================
iteration:70
contract coverage: 97.77%
============================
iteration:71
contract coverage: 97.77%
============================
iteration:72
contract coverage: 97.77%
============================
iteration:73
contract coverage: 97.77%
============================
iteration:74
contract coverage: 97.77%
============================
iteration:75
contract coverage: 97.77%
============================
iteration:76
contract coverage: 97.77%
============================
iteration:77
contract coverage: 97.77%
============================
iteration:78
contract coverage: 97.77%
============================
iteration:79
contract coverage: 97.77%
============================
iteration:80
contract coverage: 97.77%
============================
iteration:81
contract coverage: 97.77%
============================
iteration:82
contract coverage: 97.77%
============================
iteration:83
contract coverage: 97.77%
============================
iteration:84
contract coverage: 97.77%
============================
iteration:85
contract coverage: 97.77%
============================
iteration:86
contract coverage: 97.77%
============================
iteration:87
contract coverage: 97.77%
============================
iteration:88
contract coverage: 97.77%
============================
iteration:89
contract coverage: 97.77%
============================
iteration:90
contract coverage: 97.77%
============================
iteration:91
contract coverage: 97.77%
============================
iteration:92
contract coverage: 97.77%
============================
iteration:93
contract coverage: 97.77%
============================
iteration:94
contract coverage: 97.77%
============================
iteration:95
contract coverage: 97.77%
============================
iteration:96
contract coverage: 97.77%
============================
iteration:97
contract coverage: 97.77%
============================
iteration:98
contract coverage: 97.77%
============================
iteration:99
contract coverage: 97.77%
============================
iteration:100
contract coverage: 97.77%
============================
iteration:101
contract coverage: 97.77%
============================
iteration:102
contract coverage: 97.77%
============================
iteration:103
contract coverage: 97.77%
============================
iteration:104
contract coverage: 97.77%
============================
iteration:105
contract coverage: 97.77%
============================
iteration:106
contract coverage: 97.77%
============================
iteration:107
contract coverage: 97.77%
#@statespace
3990 nodes, 3989 edges, 53713 total states
#@coverage
Achieved 6.59% coverage for code: 608060405233600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555063018b8200420160055562c5c100420160065562c5c100420160075564147d3570006008556305f5e100600a55611388600b556000600c5573289c46b3efbd35aee0e5fd2ce4612c5104a78bab600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600d60146101000a81548160ff021916908315150217905550348015620000fa57600080fd5b506000640a3e9ab800905033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000183600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826200018b640100000000026401000000009004565b505062000355565b6000600d60149054906101000a900460ff16151515620001aa57600080fd5b620001cf82600954620003386401000000000262002403179091906401000000009004565b6009819055506200023782600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620003386401000000000262002403179091906401000000009004565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600081830190508281101515156200034c57fe5b80905092915050565b6126b980620003656000396000f30060806040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610195578063095ea7b3146102255780631003e2d21461028a57806318160ddd146102b757806323b872dd146102e257806329dcb0cf146103675780632e1a7d4d14610392578063313ce567146103bf57806342966c68146103ea578063532b581c1461041757806370a082311461044257806374ff2324146104995780637809231c146104c4578063836e81801461051157806383afd6da1461053c578063853828b61461056757806395d89b411461057e5780639b1cbccc1461060e5780639ea407be1461063d578063a9059cbb1461066a578063aa6ca808146106cf578063b449c24d146106d9578063c108d54214610734578063c489744b14610763578063cbdd69b5146107da578063dd62ed3e14610805578063e58fc54c1461087c578063e6a092f5146108d7578063efca2eed14610902578063f2fde38b1461092d578063f3ccb40114610970575b6101936109b5565b005b3480156101a157600080fd5b506101aa610e26565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ea5780820151818401526020810190506101cf565b50505050905090810190601f1680156102175780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023157600080fd5b50610270600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e5f565b604051808215151515815260200191505060405180910390f35b34801561029657600080fd5b506102b560048036038101908080359060200190929190505050610fed565b005b3480156102c357600080fd5b506102cc6110a4565b6040518082815260200191505060405180910390f35b3480156102ee57600080fd5b5061034d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110aa565b604051808215151515815260200191505060405180910390f35b34801561037357600080fd5b5061037c611480565b6040518082815260200191505060405180910390f35b34801561039e57600080fd5b506103bd60048036038101908080359060200190929190505050611486565b005b3480156103cb57600080fd5b506103d4611554565b6040518082815260200191505060405180910390f35b3480156103f657600080fd5b5061041560048036038101908080359060200190929190505050611559565b005b34801561042357600080fd5b5061042c611725565b6040518082815260200191505060405180910390f35b34801561044e57600080fd5b50610483600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061172b565b6040518082815260200191505060405180910390f35b3480156104a557600080fd5b506104ae611774565b6040518082815260200191505060405180910390f35b3480156104d057600080fd5b5061050f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061177f565b005b34801561051d57600080fd5b506105266117e9565b6040518082815260200191505060405180910390f35b34801561054857600080fd5b506105516117ef565b6040518082815260200191505060405180910390f35b34801561057357600080fd5b5061057c6117f5565b005b34801561058a57600080fd5b506105936118de565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105d35780820151818401526020810190506105b8565b50505050905090810190601f1680156106005780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561061a57600080fd5b50610623611917565b604051808215151515815260200191505060405180910390f35b34801561064957600080fd5b50610668600480360381019080803590602001909291905050506119df565b005b34801561067657600080fd5b506106b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a7c565b604051808215151515815260200191505060405180910390f35b6106d76109b5565b005b3480156106e557600080fd5b5061071a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cb7565b604051808215151515815260200191505060405180910390f35b34801561074057600080fd5b50610749611cd7565b604051808215151515815260200191505060405180910390f35b34801561076f57600080fd5b506107c4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cea565b6040518082815260200191505060405180910390f35b3480156107e657600080fd5b506107ef611dd5565b6040518082815260200191505060405180910390f35b34801561081157600080fd5b50610866600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ddb565b6040518082815260200191505060405180910390f35b34801561088857600080fd5b506108bd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e62565b604051808215151515815260200191505060405180910390f35b3480156108e357600080fd5b506108ec6120a7565b6040518082815260200191505060405180910390f35b34801561090e57600080fd5b506109176120ad565b6040518082815260200191505060405180910390f35b34801561093957600080fd5b5061096e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120b3565b005b34801561097c57600080fd5b506109b36004803603810190808035906020019082018035906020019190919293919293908035906020019092919050505061218a565b005b600080600080600080600080600080600d60149054906101000a900460ff161515156109e057600080fd5b60009950600098506000975066b1a2bc2ec50000965067016345785d8a000095506706f05b59d3b200009450670de0b6b3a764000093506729a2241af62c00009250670de0b6b3a7640000610a4034600a5461223f90919063ffffffff16565b811515610a4957fe5b049950339150662386f26fc100003410158015610a67575060055442105b8015610a74575060075442105b8015610a81575060065442105b15610b5757863410158015610a9557508534105b15610ab1576064600a8b02811515610aa957fe5b049750610b52565b853410158015610ac057508434105b15610adc57606460148b02811515610ad457fe5b049750610b51565b843410158015610aeb57508334105b15610b0757606460238b02811515610aff57fe5b049750610b50565b833410158015610b1657508234105b15610b3257606460328b02811515610b2a57fe5b049750610b4f565b8234101515610b4e57606460558b02811515610b4a57fe5b0497505b5b5b5b5b610be1565b662386f26fc100003410158015610b6f575060055442105b8015610b7c575060075442115b8015610b89575060065442105b15610bdb57853410158015610b9d57508434105b15610bb957606460028b02811515610bb157fe5b049750610bd6565b8434101515610bd557606460038b02811515610bd157fe5b0497505b5b610be0565b600097505b5b878a01985060008a1415610cf3576122b8905060001515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515148015610c585750600b54600c5411155b15610cd757610c678282612277565b506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600c60008154809291906001019190505550610cee565b662386f26fc100003410151515610ced57600080fd5b5b610d88565b60008a118015610d0a5750662386f26fc100003410155b15610d70576005544210158015610d2357506007544210155b8015610d30575060065442105b15610d4557610d3f828b612277565b50610d6b565b8634101515610d5e57610d58828a612277565b50610d6a565b610d68828b612277565b505b5b610d87565b662386f26fc100003410151515610d8657600080fd5b5b5b600854600954101515610db1576001600d60146101000a81548160ff0219169083151502179055505b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610e19573d6000803e3d6000fd5b5050505050505050505050565b6040805190810160405280600481526020017f4f4e49580000000000000000000000000000000000000000000000000000000081525081565b6000808214158015610eee57506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610efc5760009050610fe7565b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561104b57600080fd5b6110608260085461240390919063ffffffff16565b9050806008819055507f90f1f758f0e2b40929b1fd48df7ebe10afc272a362e1f0d63a90b8b4715d799f826040518082815260200191505060405180910390a15050565b60085481565b60006060600481016000369050101515156110c157fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156110fd57600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561114b57600080fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111515156111d657600080fd5b61122883600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461241f90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112fa83600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461241f90919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113cc83600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461240390919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60055481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114e457600080fd5b819050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561154f573d6000803e3d6000fd5b505050565b600081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115b757600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561160557600080fd5b33905061165a82600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461241f90919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116b28260085461241f90919063ffffffff16565b6008819055506116cd8260095461241f90919063ffffffff16565b6009819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b60065481565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b662386f26fc1000081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117db57600080fd5b6117e58282612438565b5050565b60075481565b600c5481565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561185457600080fd5b3091508173ffffffffffffffffffffffffffffffffffffffff16319050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156118d9573d6000803e3d6000fd5b505050565b6040805190810160405280600481526020017f4f4e49580000000000000000000000000000000000000000000000000000000081525081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561197557600080fd5b600d60149054906101000a900460ff1615151561199157600080fd5b6001600d60146101000a81548160ff0219169083151502179055507f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc60405160405180910390a16001905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a3b57600080fd5b80600a819055507ff7729fa834bbef70b6d3257c2317a562aa88b56c81b544814f93dc5963a2c003816040518082815260200191505060405180910390a150565b6000604060048101600036905010151515611a9357fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515611acf57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515611b1d57600080fd5b611b6f83600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461241f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c0483600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461240390919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b60046020528060005260406000206000915054906101000a900460ff1681565b600d60149054906101000a900460ff1681565b60008060008491508173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611d8d57600080fd5b505af1158015611da1573d6000803e3d6000fd5b505050506040513d6020811015611db757600080fd5b81019080805190602001909291905050509050809250505092915050565b600a5481565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ec357600080fd5b8391508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611f6157600080fd5b505af1158015611f75573d6000803e3d6000fd5b505050506040513d6020811015611f8b57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561206357600080fd5b505af1158015612077573d6000803e3d6000fd5b505050506040513d602081101561208d57600080fd5b810190808051906020019092919050505092505050919050565b600b5481565b60095481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561210f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156121875780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121e857600080fd5b600090505b838390508110156122395761222c848483818110151561220957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1683612438565b80806001019150506121ed565b50505050565b6000808314156122525760009050612271565b818302905081838281151561226357fe5b0414151561226d57fe5b8090505b92915050565b6000600d60149054906101000a900460ff1615151561229557600080fd5b6122aa8260095461240390919063ffffffff16565b60098190555061230282600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461240390919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000818301905082811015151561241657fe5b80905092915050565b600082821115151561242d57fe5b818303905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561249457600080fd5b6000811115156124a357600080fd5b6008546009541015156124b557600080fd5b61250781600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461240390919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061255f8160095461240390919063ffffffff16565b60098190555060085460095410151561258e576001600d60146101000a81548160ff0219169083151502179055505b8173ffffffffffffffffffffffffffffffffffffffff167fada993ad066837289fe186cd37227aa338d27519a8a1547472ecb9831486d27282600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808381526020018281526020019250505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505600a165627a7a723058207f35c5f7f40ae4c75619880aa12cd8cee9d02b35634502b871cd60c54ebd71610029
#@coverage
Achieved 97.77% coverage for code: 60806040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610195578063095ea7b3146102255780631003e2d21461028a57806318160ddd146102b757806323b872dd146102e257806329dcb0cf146103675780632e1a7d4d14610392578063313ce567146103bf57806342966c68146103ea578063532b581c1461041757806370a082311461044257806374ff2324146104995780637809231c146104c4578063836e81801461051157806383afd6da1461053c578063853828b61461056757806395d89b411461057e5780639b1cbccc1461060e5780639ea407be1461063d578063a9059cbb1461066a578063aa6ca808146106cf578063b449c24d146106d9578063c108d54214610734578063c489744b14610763578063cbdd69b5146107da578063dd62ed3e14610805578063e58fc54c1461087c578063e6a092f5146108d7578063efca2eed14610902578063f2fde38b1461092d578063f3ccb40114610970575b6101936109b5565b005b3480156101a157600080fd5b506101aa610e26565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ea5780820151818401526020810190506101cf565b50505050905090810190601f1680156102175780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023157600080fd5b50610270600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e5f565b604051808215151515815260200191505060405180910390f35b34801561029657600080fd5b506102b560048036038101908080359060200190929190505050610fed565b005b3480156102c357600080fd5b506102cc6110a4565b6040518082815260200191505060405180910390f35b3480156102ee57600080fd5b5061034d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110aa565b604051808215151515815260200191505060405180910390f35b34801561037357600080fd5b5061037c611480565b6040518082815260200191505060405180910390f35b34801561039e57600080fd5b506103bd60048036038101908080359060200190929190505050611486565b005b3480156103cb57600080fd5b506103d4611554565b6040518082815260200191505060405180910390f35b3480156103f657600080fd5b5061041560048036038101908080359060200190929190505050611559565b005b34801561042357600080fd5b5061042c611725565b6040518082815260200191505060405180910390f35b34801561044e57600080fd5b50610483600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061172b565b6040518082815260200191505060405180910390f35b3480156104a557600080fd5b506104ae611774565b6040518082815260200191505060405180910390f35b3480156104d057600080fd5b5061050f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061177f565b005b34801561051d57600080fd5b506105266117e9565b6040518082815260200191505060405180910390f35b34801561054857600080fd5b506105516117ef565b6040518082815260200191505060405180910390f35b34801561057357600080fd5b5061057c6117f5565b005b34801561058a57600080fd5b506105936118de565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105d35780820151818401526020810190506105b8565b50505050905090810190601f1680156106005780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561061a57600080fd5b50610623611917565b604051808215151515815260200191505060405180910390f35b34801561064957600080fd5b50610668600480360381019080803590602001909291905050506119df565b005b34801561067657600080fd5b506106b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a7c565b604051808215151515815260200191505060405180910390f35b6106d76109b5565b005b3480156106e557600080fd5b5061071a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cb7565b604051808215151515815260200191505060405180910390f35b34801561074057600080fd5b50610749611cd7565b604051808215151515815260200191505060405180910390f35b34801561076f57600080fd5b506107c4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cea565b6040518082815260200191505060405180910390f35b3480156107e657600080fd5b506107ef611dd5565b6040518082815260200191505060405180910390f35b34801561081157600080fd5b50610866600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ddb565b6040518082815260200191505060405180910390f35b34801561088857600080fd5b506108bd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e62565b604051808215151515815260200191505060405180910390f35b3480156108e357600080fd5b506108ec6120a7565b6040518082815260200191505060405180910390f35b34801561090e57600080fd5b506109176120ad565b6040518082815260200191505060405180910390f35b34801561093957600080fd5b5061096e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120b3565b005b34801561097c57600080fd5b506109b36004803603810190808035906020019082018035906020019190919293919293908035906020019092919050505061218a565b005b600080600080600080600080600080600d60149054906101000a900460ff161515156109e057600080fd5b60009950600098506000975066b1a2bc2ec50000965067016345785d8a000095506706f05b59d3b200009450670de0b6b3a764000093506729a2241af62c00009250670de0b6b3a7640000610a4034600a5461223f90919063ffffffff16565b811515610a4957fe5b049950339150662386f26fc100003410158015610a67575060055442105b8015610a74575060075442105b8015610a81575060065442105b15610b5757863410158015610a9557508534105b15610ab1576064600a8b02811515610aa957fe5b049750610b52565b853410158015610ac057508434105b15610adc57606460148b02811515610ad457fe5b049750610b51565b843410158015610aeb57508334105b15610b0757606460238b02811515610aff57fe5b049750610b50565b833410158015610b1657508234105b15610b3257606460328b02811515610b2a57fe5b049750610b4f565b8234101515610b4e57606460558b02811515610b4a57fe5b0497505b5b5b5b5b610be1565b662386f26fc100003410158015610b6f575060055442105b8015610b7c575060075442115b8015610b89575060065442105b15610bdb57853410158015610b9d57508434105b15610bb957606460028b02811515610bb157fe5b049750610bd6565b8434101515610bd557606460038b02811515610bd157fe5b0497505b5b610be0565b600097505b5b878a01985060008a1415610cf3576122b8905060001515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515148015610c585750600b54600c5411155b15610cd757610c678282612277565b506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600c60008154809291906001019190505550610cee565b662386f26fc100003410151515610ced57600080fd5b5b610d88565b60008a118015610d0a5750662386f26fc100003410155b15610d70576005544210158015610d2357506007544210155b8015610d30575060065442105b15610d4557610d3f828b612277565b50610d6b565b8634101515610d5e57610d58828a612277565b50610d6a565b610d68828b612277565b505b5b610d87565b662386f26fc100003410151515610d8657600080fd5b5b5b600854600954101515610db1576001600d60146101000a81548160ff0219169083151502179055505b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610e19573d6000803e3d6000fd5b5050505050505050505050565b6040805190810160405280600481526020017f4f4e49580000000000000000000000000000000000000000000000000000000081525081565b6000808214158015610eee57506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610efc5760009050610fe7565b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561104b57600080fd5b6110608260085461240390919063ffffffff16565b9050806008819055507f90f1f758f0e2b40929b1fd48df7ebe10afc272a362e1f0d63a90b8b4715d799f826040518082815260200191505060405180910390a15050565b60085481565b60006060600481016000369050101515156110c157fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156110fd57600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561114b57600080fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111515156111d657600080fd5b61122883600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461241f90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112fa83600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461241f90919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113cc83600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461240390919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60055481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114e457600080fd5b819050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561154f573d6000803e3d6000fd5b505050565b600081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115b757600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561160557600080fd5b33905061165a82600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461241f90919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116b28260085461241f90919063ffffffff16565b6008819055506116cd8260095461241f90919063ffffffff16565b6009819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b60065481565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b662386f26fc1000081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117db57600080fd5b6117e58282612438565b5050565b60075481565b600c5481565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561185457600080fd5b3091508173ffffffffffffffffffffffffffffffffffffffff16319050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156118d9573d6000803e3d6000fd5b505050565b6040805190810160405280600481526020017f4f4e49580000000000000000000000000000000000000000000000000000000081525081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561197557600080fd5b600d60149054906101000a900460ff1615151561199157600080fd5b6001600d60146101000a81548160ff0219169083151502179055507f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc60405160405180910390a16001905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a3b57600080fd5b80600a819055507ff7729fa834bbef70b6d3257c2317a562aa88b56c81b544814f93dc5963a2c003816040518082815260200191505060405180910390a150565b6000604060048101600036905010151515611a9357fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515611acf57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515611b1d57600080fd5b611b6f83600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461241f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c0483600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461240390919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b60046020528060005260406000206000915054906101000a900460ff1681565b600d60149054906101000a900460ff1681565b60008060008491508173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611d8d57600080fd5b505af1158015611da1573d6000803e3d6000fd5b505050506040513d6020811015611db757600080fd5b81019080805190602001909291905050509050809250505092915050565b600a5481565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ec357600080fd5b8391508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611f6157600080fd5b505af1158015611f75573d6000803e3d6000fd5b505050506040513d6020811015611f8b57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561206357600080fd5b505af1158015612077573d6000803e3d6000fd5b505050506040513d602081101561208d57600080fd5b810190808051906020019092919050505092505050919050565b600b5481565b60095481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561210f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156121875780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121e857600080fd5b600090505b838390508110156122395761222c848483818110151561220957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1683612438565b80806001019150506121ed565b50505050565b6000808314156122525760009050612271565b818302905081838281151561226357fe5b0414151561226d57fe5b8090505b92915050565b6000600d60149054906101000a900460ff1615151561229557600080fd5b6122aa8260095461240390919063ffffffff16565b60098190555061230282600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461240390919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000818301905082811015151561241657fe5b80905092915050565b600082821115151561242d57fe5b818303905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561249457600080fd5b6000811115156124a357600080fd5b6008546009541015156124b557600080fd5b61250781600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461240390919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061255f8160095461240390919063ffffffff16565b60098190555060085460095410151561258e576001600d60146101000a81548160ff0219169083151502179055505b8173ffffffffffffffffffffffffffffffffffffffff167fada993ad066837289fe186cd37227aa338d27519a8a1547472ecb9831486d27282600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808381526020018281526020019250505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505600a165627a7a723058207f35c5f7f40ae4c75619880aa12cd8cee9d02b35634502b871cd60c54ebd71610029
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ONIX
Function name: constructor
PC address: 76
Estimated Gas Usage: 76311 - 342144
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:69

now + 300 * 1 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ONIX
Function name: constructor
PC address: 85
Estimated Gas Usage: 76311 - 342144
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:70

now + 150 * 1 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ONIX
Function name: constructor
PC address: 94
Estimated Gas Usage: 76311 - 342144
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:71

now + 150 * 1 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ONIX
Function name: fallback
PC address: 2669
Estimated Gas Usage: 2872 - 3297
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:184

msg.value >= requestMinimum && now < deadline && now < round1

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ONIX
Function name: fallback
PC address: 2682
Estimated Gas Usage: 2892 - 3317
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:184

msg.value >= requestMinimum && now < deadline && now < round1 && now < round2

--------------------
Initial State:

Account: [CREATOR], balance: 0x23880470010001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ONIX
Function name: fallback
PC address: 2694
Estimated Gas Usage: 2909 - 3334
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:184

if (msg.value >= requestMinimum && now < deadline && now < round1 && now < round2) {
            if(msg.value >= bonusCond1 && msg.value < bonusCond2){
                countbonus = tokens * 10 / 100;
            }else if(msg.value >= bonusCond2 && msg.value < bonusCond3){
                countbonus = tokens * 20 / 100;
            }else if(msg.value >= bonusCond3 && msg.value < bonusCond4){
                countbonus = tokens * 35 / 100;
            }else if(msg.value >= bonusCond4 && msg.value < bonusCond5){
                countbonus = tokens * 50 / 100;    
            }else if(msg.value >= bonusCond5){
                countbonus = tokens * 85 / 100;    
            }
        }else if(msg.value >= requestMinimum && now < deadline && now > round1 && now < round2){
            if(msg.value >= bonusCond2 && msg.value < bonusCond3){
                countbonus = tokens * 2 / 100;
            }else if(msg.value >= bonusCond3){
                countbonus = tokens * 3 / 100;
            }
        }else{
            countbonus = 0;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000080008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ONIX
Function name: fallback
PC address: 2933
Estimated Gas Usage: 3770 - 4195
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:196

msg.value >= requestMinimum && now < deadline && now > round1

--------------------
Initial State:

Account: [CREATOR], balance: 0x438af400000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ONIX
Function name: fallback
PC address: 2946
Estimated Gas Usage: 3790 - 4215
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:196

msg.value >= requestMinimum && now < deadline && now > round1 && now < round2

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000006fc10001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ONIX
Function name: fallback
PC address: 2958
Estimated Gas Usage: 3807 - 4232
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:196

if(msg.value >= requestMinimum && now < deadline && now > round1 && now < round2){
            if(msg.value >= bonusCond2 && msg.value < bonusCond3){
                countbonus = tokens * 2 / 100;
            }else if(msg.value >= bonusCond3){
                countbonus = tokens * 3 / 100;
            }
        }else{
            countbonus = 0;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000052fc10001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ONIX
Function name: fallback
PC address: 3355
Estimated Gas Usage: 6366 - 6791
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:218

now >= deadline && now >= round1

--------------------
Initial State:

Account: [CREATOR], balance: 0x30900300080000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ONIX
Function name: fallback
PC address: 3369
Estimated Gas Usage: 5579 - 6004
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:218

now >= deadline && now >= round1 && now < round2

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ONIX
Function name: fallback
PC address: 3381
Estimated Gas Usage: 5596 - 6021
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:218

if( now >= deadline && now >= round1 && now < round2){
                distr(investor, tokens);
            }else{
                if(msg.value >= bonusCond1){
                    distr(investor, bonus);
                }else{
                    distr(investor, tokens);
                }   
            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1014001cda01ebf8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ONIX
Function name: transferFrom(address,address,uint256)
PC address: 4288
Estimated Gas Usage: 384 - 479
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:259

function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {

        require(_to != address(0));
        require(_amount <= balances[_from]);
        require(_amount <= allowed[_from][msg.sender]);
        
        balances[_from] = balances[_from].sub(_amount);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(_from, _to, _amount);
        return true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ONIX
Function name: transfer(address,uint256)
PC address: 6802
Estimated Gas Usage: 681 - 776
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:248

function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

        require(_to != address(0));
        require(_amount <= balances[msg.sender]);
        
        balances[msg.sender] = balances[msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(msg.sender, _to, _amount);
        return true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ONIX
Function name: getTokenBalance(address,address)
PC address: 7568
Estimated Gas Usage: 2490 - 37428
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:285

t.balanceOf(who)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getTokenBalance(address,address), txdata: 0xc489744b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ONIX
Function name: withdrawForeignTokens(address)
PC address: 8036
Estimated Gas Usage: 5918 - 76173
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:317

token.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c800000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ONIX
Function name: withdrawForeignTokens(address)
PC address: 8128
Estimated Gas Usage: 5918 - 76173
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:318

owner

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c800000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ONIX
Function name: withdrawForeignTokens(address)
PC address: 8294
Estimated Gas Usage: 5918 - 76173
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:318

token.transfer(owner, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c800000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ONIX
Function name: withdrawForeignTokens(address)
PC address: 8294
Estimated Gas Usage: 5918 - 76173
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:318

token.transfer(owner, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ONIX
Function name: withdrawForeignTokens(address)
PC address: 8294
Estimated Gas Usage: 5918 - 76173
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:318

token.transfer(owner, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c800000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ONIX
Function name: add(uint256)
PC address: 9237
Estimated Gas Usage: 1987 - 2412
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:310

totalSupply.add(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: add(uint256), txdata: 0x1003e2d2ffffffffffffffffffffffffffffffffffffffffffffffffffffffec, decoded_data: (115792089237316195423570985008687907853269984665640564039457584007827230294016,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ONIX
Function name: DistributeAirdrop(address,uint256)
PC address: 9237
Estimated Gas Usage: 10895 - 32030
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:143

totalDistributed.add(_amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: DistributeAirdrop(address,uint256), txdata: 0x7809231c0000000000000000000000001040080180020000804002802000000400082000fffffffffffffffffffffffffffffffffffffffffffffffffffffff6, decoded_data: ('0x1040080180020000804002802000000400082000', 115792089237316195423570985008687907853269984665640564039457584007870179966976), value: 0x0


time_used: 36038.029571056366 seconds
#@contract_info_time
0x3f38cdae6c197ff2d011c2ed4ab768144375743a.sol:0.4.25:ONIX:36038.029571056366:36100:60:36000
