++++ 0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol  :  0.5.2  :  MintingPool ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 6978
['constructor']:writes at the last depth:['0']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 81.48% coverage.
dynamic svars:['2', '1', '3', '6', '4', '5']
static svars:['0']
Ending preprocessing.
preprocessing time(s): 101.79533672332764
contract coverage: 58.78%
Function Reads: State variables read in conditions
	redeemPositionTokens(address,uint256):['1']
	approveCollateralPool(address,uint256):['0']
	allAddresses(uint256):['2']
	received(address):[]
	transferOwnership(address):['0']
	isOwner():[]
	getAllAddresses():['2']
	whitelist(address):[]
	redeemed(address):[]
	internalMintPositionTokens(address,uint256,bool):['0']
	withdrawMarketToken(address,uint256):['0']
	internalRedeemPositionTokens(address,uint256):['0']
	renounceOwnership():['0']
	sent(address):[]
	owner():[]
	mintPositionTokens(address,uint256,bool):['1']
	minted(address):[]
	withdrawCollateral(address,uint256):['0']
	addAddress(address):['0']
	removeAddress(address):['0', '2']
Function Writes: State variables written
	renounceOwnership():['0']
	removeAddress(address):['1', '2']
	addAddress(address):['1', '2']
	transferOwnership(address):['0']
============================
iteration:3
targets:['mintPositionTokens(address,uint256,bool)', 'redeemPositionTokens(address,uint256)', 'removeAddress(address)', 'allAddresses(uint256)', 'getAllAddresses()', 'withdrawCollateral(address,uint256)', 'withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)']
['renounceOwnership()']:writes at the last depth:['0']
['transferOwnership(address)']:writes at the last depth:['0']
['removeAddress(address)']:writes at the last depth:['1']
['addAddress(address)']:writes at the last depth:['2', '1']
['internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawCollateral(address,uint256)']:writes at the last depth:[]
['approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 58.78%
============================
iteration:4
['withdrawMarketToken(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 58.78%
============================
iteration:5
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 58.78%
============================
iteration:6
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 58.78%
============================
iteration:7
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 58.78%
============================
iteration:8
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 58.78%
============================
iteration:9
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 58.78%
============================
iteration:10
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:11
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'addAddress(address)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'addAddress(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'addAddress(address)', 'addAddress(address)']:writes at the last depth:['', '2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'addAddress(address)', 'removeAddress(address)']:writes at the last depth:['', '2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'addAddress(address)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'addAddress(address)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'addAddress(address)', 'removeAddress(address)']:writes at the last depth:['', '2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'addAddress(address)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'addAddress(address)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'addAddress(address)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:12
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'removeAddress(address)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'removeAddress(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'removeAddress(address)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'removeAddress(address)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'removeAddress(address)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'removeAddress(address)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'removeAddress(address)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'removeAddress(address)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'removeAddress(address)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:13
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'transferOwnership(address)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'transferOwnership(address)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'transferOwnership(address)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'transferOwnership(address)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'transferOwnership(address)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'transferOwnership(address)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'transferOwnership(address)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)', 'transferOwnership(address)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:14
contract coverage: 73.32%
============================
iteration:15
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:16
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawMarketToken(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawMarketToken(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawMarketToken(address,uint256)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawMarketToken(address,uint256)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:17
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'approveCollateralPool(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'approveCollateralPool(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'approveCollateralPool(address,uint256)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'approveCollateralPool(address,uint256)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'approveCollateralPool(address,uint256)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:18
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawCollateral(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawCollateral(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawCollateral(address,uint256)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawCollateral(address,uint256)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawCollateral(address,uint256)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:19
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:20
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:21
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'addAddress(address)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'addAddress(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'addAddress(address)', 'addAddress(address)']:writes at the last depth:['', '2', '1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'addAddress(address)', 'removeAddress(address)']:writes at the last depth:['', '2', '1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'addAddress(address)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'addAddress(address)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'addAddress(address)', 'removeAddress(address)']:writes at the last depth:['', '2', '1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'addAddress(address)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'addAddress(address)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'addAddress(address)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:22
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'removeAddress(address)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'removeAddress(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'removeAddress(address)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'removeAddress(address)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'removeAddress(address)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'removeAddress(address)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'removeAddress(address)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'removeAddress(address)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'removeAddress(address)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:23
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'transferOwnership(address)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'transferOwnership(address)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'transferOwnership(address)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'transferOwnership(address)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'transferOwnership(address)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'transferOwnership(address)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'transferOwnership(address)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)', 'transferOwnership(address)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:24
contract coverage: 73.32%
============================
iteration:25
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:26
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawMarketToken(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawMarketToken(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawMarketToken(address,uint256)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawMarketToken(address,uint256)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawMarketToken(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawMarketToken(address,uint256)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawMarketToken(address,uint256)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:27
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'approveCollateralPool(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'approveCollateralPool(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'approveCollateralPool(address,uint256)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'approveCollateralPool(address,uint256)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'approveCollateralPool(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'approveCollateralPool(address,uint256)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'approveCollateralPool(address,uint256)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:28
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawCollateral(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawCollateral(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawCollateral(address,uint256)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawCollateral(address,uint256)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawCollateral(address,uint256)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawCollateral(address,uint256)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:29
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:30
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'removeAddress(address)']:writes at the last depth:['1']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'addAddress(address)']:writes at the last depth:['2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'internalRedeemPositionTokens(address,uint256)', 'withdrawMarketToken(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:31
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'addAddress(address)', 'renounceOwnership()']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'addAddress(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'addAddress(address)', 'addAddress(address)']:writes at the last depth:['', '2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'addAddress(address)', 'removeAddress(address)']:writes at the last depth:['', '2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'addAddress(address)', 'internalRedeemPositionTokens(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'addAddress(address)', 'internalMintPositionTokens(address,uint256,bool)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'addAddress(address)', 'removeAddress(address)']:writes at the last depth:['', '2', '1']
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'addAddress(address)', 'withdrawCollateral(address,uint256)']:writes at the last depth:[]
['withdrawMarketToken(address,uint256)', 'withdrawCollateral(address,uint256)', 'addAddress(address)', 'approveCollateralPool(address,uint256)']:writes at the last depth:[]
contract coverage: 73.32%
============================
iteration:32
contract coverage: 73.32%
============================
iteration:33
contract coverage: 73.32%
============================
iteration:34
contract coverage: 73.32%
============================
iteration:35
contract coverage: 73.32%
============================
iteration:36
contract coverage: 73.32%
============================
iteration:37
contract coverage: 73.32%
============================
iteration:38
contract coverage: 73.32%
============================
iteration:39
contract coverage: 73.32%
============================
iteration:40
contract coverage: 73.32%
============================
iteration:41
contract coverage: 73.32%
============================
iteration:42
contract coverage: 73.32%
============================
iteration:43
contract coverage: 73.32%
============================
iteration:44
contract coverage: 73.32%
============================
iteration:45
contract coverage: 73.32%
============================
iteration:46
contract coverage: 73.32%
============================
iteration:47
contract coverage: 73.32%
============================
iteration:48
contract coverage: 73.32%
#@statespace
8362 nodes, 8361 edges, 137177 total states
#@coverage
Achieved 0.81% coverage for code: 6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3613a56806100cf6000396000f3fe608060405234801561001057600080fd5b5060043610610149576000357c0100000000000000000000000000000000000000000000000000000000900480638f32d59b116100ca578063c1b214111161008e578063c1b21411146105ad578063c22ccad6146105fb578063dacc537014610649578063df0cb934146106b7578063f2fde38b1461070f57610149565b80638f32d59b1461041e5780639516a104146104405780639b19251a1461049f5780639f4568ef146104fb578063b6d2f1771461055357610149565b80634c7cb589116101115780634c7cb589146102d657806370676dc914610324578063715018a6146103725780637bf786f81461037c5780638da5cb5b146103d457610149565b8063125bb6a91461014e5780631e7269c5146101a8578063350c35e91461020057806338eada1c1461024e5780634ba79dfe14610292575b600080fd5b6101a66004803603606081101561016457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803515159060200190929190505050610753565b005b6101ea600480360360208110156101be57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ec4565b6040518082815260200191505060405180910390f35b61024c6004803603604081101561021657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610edc565b005b6102906004803603602081101561026457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111a2565b005b6102d4600480360360208110156102a857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611321565b005b610322600480360360408110156102ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611577565b005b6103706004803603604081101561033a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506118df565b005b61037a611b27565b005b6103be6004803603602081101561039257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c62565b6040518082815260200191505060405180910390f35b6103dc611c7a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610426611ca3565b604051808215151515815260200191505060405180910390f35b610448611cfa565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561048b578082015181840152602081019050610470565b505050509050019250505060405180910390f35b6104e1600480360360208110156104b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d88565b604051808215151515815260200191505060405180910390f35b61053d6004803603602081101561051157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611da8565b6040518082815260200191505060405180910390f35b6105ab6004803603606081101561056957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803515159060200190929190505050611dc0565b005b6105f9600480360360408110156105c357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612015565b005b6106476004803603604081101561061157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061275d565b005b6106756004803603602081101561065f57600080fd5b8101908080359060200190929190505050612cb3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106f9600480360360208110156106cd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612cf1565b6040518082815260200191505060405180910390f35b6107516004803603602081101561072557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d09565b005b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f53454e4445525f4e4f545f494e5f57484954454c4953545f4552524f5200000081525060200191505060405180910390fd5b60008211151561088c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f494e56414c49445f414d4f554e5400000000000000000000000000000000000081525060200191505060405180910390fd5b6000839050600061089d8285612ee8565b90506109683330838573ffffffffffffffffffffffffffffffffffffffff1663323bb7756040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561090757600080fd5b505afa15801561091b573d6000803e3d6000fd5b505050506040513d602081101561093157600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1661304f909392919063ffffffff16565b6109728585613171565b15610a11576109c984600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132d490919063ffffffff16565b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cca565b6000610a1d838661335e565b905060008373ffffffffffffffffffffffffffffffffffffffff1663eaafb4fa6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610a8357600080fd5b505afa158015610a97573d6000803e3d6000fd5b505050506040513d6020811015610aad57600080fd5b810190808051906020019092919050505090506000610b688273ffffffffffffffffffffffffffffffffffffffff16636b4a8ae06040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610b2757600080fd5b505afa158015610b3b573d6000803e3d6000fd5b505050506040513d6020811015610b5157600080fd5b810190808051906020019092919050505084613417565b90508173ffffffffffffffffffffffffffffffffffffffff1663125bb6a98989846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001821515151581526020019350505050600060405180830381600087803b158015610c1957600080fd5b505af1158015610c2d573d6000803e3d6000fd5b50505050610c8387600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132d490919063ffffffff16565b600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505b610d9133858473ffffffffffffffffffffffffffffffffffffffff166322d1c35e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610d3157600080fd5b505afa158015610d45573d6000803e3d6000fd5b505050506040513d6020811015610d5b57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166134f89092919063ffffffff16565b610e5833858473ffffffffffffffffffffffffffffffffffffffff16635b3f1e3f6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610df857600080fd5b505afa158015610e0c573d6000803e3d6000fd5b505050506040513d6020811015610e2257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166134f89092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8866040518082815260200191505060405180910390a35050505050565b60036020528060005260406000206000915090505481565b610ee4611ca3565b1515610f58576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e4f545f4f574e4552000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600081111515610fd0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f494e56414c49445f414d4f554e5400000000000000000000000000000000000081525060200191505060405180910390fd5b600082905061109c33838373ffffffffffffffffffffffffffffffffffffffff1663323bb7756040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561103c57600080fd5b505afa158015611050573d6000803e3d6000fd5b505050506040513d602081101561106657600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166134f89092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663323bb7756040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561111557600080fd5b505afa158015611129573d6000803e3d6000fd5b505050506040513d602081101561113f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb846040518082815260200191505060405180910390a3505050565b6111aa611ca3565b151561121e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e4f545f4f574e4552000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff167fa226db3f664042183ee0281230bba26cbf7b5057e50aee7f25a175ff45ce4d7f60405160405180910390a260018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060028190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b611329611ca3565b151561139d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e4f545f4f574e4552000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff167f24a12366c02e13fe4a9e03d86a8952e85bb74a456c16e4a18b6d8295700b74bb60405160405180910390a2600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905560008090505b600280549050811015611573578173ffffffffffffffffffffffffffffffffffffffff1660028281548110151561146857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156115665760026001600280549050038154811015156114c657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028281548110151561150057fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600281818054905003915081611560919061398e565b50611573565b8080600101915050611435565b5050565b61157f611ca3565b15156115f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e4f545f4f574e4552000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008111151561166b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f494e56414c49445f414d4f554e5400000000000000000000000000000000000081525060200191505060405180910390fd5b600082905060008173ffffffffffffffffffffffffffffffffffffffff1663eaafb4fa6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156116d457600080fd5b505afa1580156116e8573d6000803e3d6000fd5b505050506040513d60208110156116fe57600080fd5b810190808051906020019092919050505090506117d833848373ffffffffffffffffffffffffffffffffffffffff16636b4a8ae06040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561177857600080fd5b505afa15801561178c573d6000803e3d6000fd5b505050506040513d60208110156117a257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166134f89092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636b4a8ae06040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561185157600080fd5b505afa158015611865573d6000803e3d6000fd5b505050506040513d602081101561187b57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb856040518082815260200191505060405180910390a350505050565b6118e7611ca3565b151561195b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e4f545f4f574e4552000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600082905060008173ffffffffffffffffffffffffffffffffffffffff1663eaafb4fa6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156119c457600080fd5b505afa1580156119d8573d6000803e3d6000fd5b505050506040513d60208110156119ee57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663c1b2141185856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015611aa457600080fd5b505af1158015611ab8573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9856040518082815260200191505060405180910390a350505050565b611b2f611ca3565b1515611ba3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e4f545f4f574e4552000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60056020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60606002805480602002602001604051908101604052809291908181526020018280548015611d7e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611d34575b5050505050905090565b60016020528060005260406000206000915054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b611dc8611ca3565b1515611e3c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e4f545f4f574e4552000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600083905060008173ffffffffffffffffffffffffffffffffffffffff1663eaafb4fa6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611ea557600080fd5b505afa158015611eb9573d6000803e3d6000fd5b505050506040513d6020811015611ecf57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663125bb6a98686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001821515151581526020019350505050600060405180830381600087803b158015611f9157600080fd5b505af1158015611fa5573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8866040518082815260200191505060405180910390a35050505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156120d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f53454e4445525f4e4f545f494e5f57484954454c4953545f4552524f5200000081525060200191505060405180910390fd5b60008111151561214e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f494e56414c49445f414d4f554e5400000000000000000000000000000000000081525060200191505060405180910390fd5b600082905061221c3330848473ffffffffffffffffffffffffffffffffffffffff166322d1c35e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156121bb57600080fd5b505afa1580156121cf573d6000803e3d6000fd5b505050506040513d60208110156121e557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1661304f909392919063ffffffff16565b6122e53330848473ffffffffffffffffffffffffffffffffffffffff16635b3f1e3f6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561228457600080fd5b505afa158015612298573d6000803e3d6000fd5b505050506040513d60208110156122ae57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1661304f909392919063ffffffff16565b60006122f182846135e5565b90506123998273ffffffffffffffffffffffffffffffffffffffff1663323bb7756040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561235857600080fd5b505afa15801561236c573d6000803e3d6000fd5b505050506040513d602081101561238257600080fd5b810190808051906020019092919050505082613417565b15612438576123f083600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132d490919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061262b565b60008273ffffffffffffffffffffffffffffffffffffffff1663eaafb4fa6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561249c57600080fd5b505afa1580156124b0573d6000803e3d6000fd5b505050506040513d60208110156124c657600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663c1b2141186866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561257c57600080fd5b505af1158015612590573d6000803e3d6000fd5b505050506125e684600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132d490919063ffffffff16565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6126f233828473ffffffffffffffffffffffffffffffffffffffff1663323bb7756040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561269257600080fd5b505afa1580156126a6573d6000803e3d6000fd5b505050506040513d60208110156126bc57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166134f89092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9856040518082815260200191505060405180910390a350505050565b612765611ca3565b15156127d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e4f545f4f574e4552000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600082905060008173ffffffffffffffffffffffffffffffffffffffff1663eaafb4fa6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561284257600080fd5b505afa158015612856573d6000803e3d6000fd5b505050506040513d602081101561286c57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663323bb7756040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156128e157600080fd5b505afa1580156128f5573d6000803e3d6000fd5b505050506040513d602081101561290b57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663095ea7b38373ffffffffffffffffffffffffffffffffffffffff1663eaafb4fa6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561299957600080fd5b505afa1580156129ad573d6000803e3d6000fd5b505050506040513d60208110156129c357600080fd5b8101908080519060200190929190505050856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612a5a57600080fd5b505af1158015612a6e573d6000803e3d6000fd5b505050506040513d6020811015612a8457600080fd5b8101908080519060200190929190505050508073ffffffffffffffffffffffffffffffffffffffff16636b4a8ae06040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015612af857600080fd5b505afa158015612b0c573d6000803e3d6000fd5b505050506040513d6020811015612b2257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663095ea7b38373ffffffffffffffffffffffffffffffffffffffff1663eaafb4fa6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015612bb057600080fd5b505afa158015612bc4573d6000803e3d6000fd5b505050506040513d6020811015612bda57600080fd5b8101908080519060200190929190505050856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612c7157600080fd5b505af1158015612c85573d6000803e3d6000fd5b505050506040513d6020811015612c9b57600080fd5b81019080805190602001909291905050505050505050565b600281815481101515612cc257fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915090505481565b612d11611ca3565b1515612d85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e4f545f4f574e4552000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612e2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f494e56414c49445f4f574e45520000000000000000000000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000613047826130398573ffffffffffffffffffffffffffffffffffffffff16635c7c70596040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015612f5357600080fd5b505afa158015612f67573d6000803e3d6000fd5b505050506040513d6020811015612f7d57600080fd5b81019080805190602001909291905050508673ffffffffffffffffffffffffffffffffffffffff1663e158e02d6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015612ff057600080fd5b505afa158015613004573d6000803e3d6000fd5b505050506040513d602081101561301a57600080fd5b81019080805190602001909291905050506132d490919063ffffffff16565b61369e90919063ffffffff16565b905092915050565b61316b848573ffffffffffffffffffffffffffffffffffffffff166323b872dd90507c010000000000000000000000000000000000000000000000000000000002858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613728565b50505050565b60008083905061321d8173ffffffffffffffffffffffffffffffffffffffff166322d1c35e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156131dc57600080fd5b505afa1580156131f0573d6000803e3d6000fd5b505050506040513d602081101561320657600080fd5b810190808051906020019092919050505084613417565b80156132cb57506132ca8173ffffffffffffffffffffffffffffffffffffffff16635b3f1e3f6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561328957600080fd5b505afa15801561329d573d6000803e3d6000fd5b505050506040513d60208110156132b357600080fd5b810190808051906020019092919050505084613417565b5b91505092915050565b6000808284019050838110151515613354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600061340f828473ffffffffffffffffffffffffffffffffffffffff1663db3fa7716040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156133c657600080fd5b505afa1580156133da573d6000803e3d6000fd5b505050506040513d60208110156133f057600080fd5b810190808051906020019092919050505061369e90919063ffffffff16565b905092915050565b6000818373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156134b357600080fd5b505afa1580156134c7573d6000803e3d6000fd5b505050506040513d60208110156134dd57600080fd5b81019080805190602001909291905050501015905092915050565b6135e0838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb90507c0100000000000000000000000000000000000000000000000000000000028484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613728565b505050565b6000613696828473ffffffffffffffffffffffffffffffffffffffff1663e158e02d6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561364d57600080fd5b505afa158015613661573d6000803e3d6000fd5b505050506040513d602081101561367757600080fd5b810190808051906020019092919050505061369e90919063ffffffff16565b905092915050565b6000808314156136b15760009050613722565b600082840290508284828115156136c457fe5b0414151561371d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806139e06021913960400191505060405180910390fd5b809150505b92915050565b6137478273ffffffffffffffffffffffffffffffffffffffff1661397b565b15156137bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e74726163740081525060200191505060405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b60208310151561380c57805182526020820191506020810190506020830392506137e7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461386e576040519150601f19603f3d011682016040523d82523d6000602084013e613873565b606091505b50915091508115156138ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656481525060200191505060405180910390fd5b6000815111156139755780806020019051602081101561390c57600080fd5b81019080805190602001909291905050501515613974576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613a01602a913960400191505060405180910390fd5b5b50505050565b600080823b905060008111915050919050565b8154818355818111156139b5578183600052602060002091820191016139b491906139ba565b5b505050565b6139dc91905b808211156139d85760008160009055506001016139c0565b5090565b9056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a165627a7a72305820c9950d5064216487dd7f5f5d2de8d7eb38f2ecce028f385e8dfd50723590b3290029
#@coverage
Achieved 73.32% coverage for code: 
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MintingPool
Function name: withdrawCollateral(address,uint256)
PC address: 4376
Estimated Gas Usage: 8566 - 115044
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:365

marketContract.COLLATERAL_TOKEN_ADDRESS()

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawMarketToken(address,uint256), txdata: 0x4c7cb58900000000000000000000000000000000000040000000000000000000100000000101200020010802204001804080024010400180402004010102021040800204, decoded_data: ('0x0000000000004000000000000000000010000000', 454300554901559649126591449089661901645561181904278341616323213239494115844), value: 0x0
Caller: [CREATOR], function: withdrawCollateral(address,uint256), txdata: 0x350c35e900000000000000000000000000000000000040000000000000000000100000000810084000048020084020408008000408800201400400012010208010080104, decoded_data: ('0x0000000000004000000000000000000010000000', 3646829281111797672107715745723200744440810194368308133294281475275044159748), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MintingPool
Function name: withdrawMarketToken(address,uint256)
PC address: 6011
Estimated Gas Usage: 10142 - 151087
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:381

marketContractPool.mktToken()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawMarketToken(address,uint256), txdata: 0x4c7cb58901010101010101010101010100000010200000400420000180080040000080200108010101010101800101010101000101010102010101010101010180010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MintingPool
Function name: withdrawMarketToken(address,uint256)
PC address: 6228
Estimated Gas Usage: 10142 - 151087
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:383

marketContractPool.mktToken()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawMarketToken(address,uint256), txdata: 0x4c7cb589010101010101010101010101affeaffeaffeaffeaffeaffeaffeaffeaffeaefe0201010101010120010110800401010110201001010101080101040280080104, value: 0x0
Caller: [CREATOR], function: withdrawMarketToken(address,uint256), txdata: 0x4c7cb58901010101010101010101010100000000000000000000000000000000000000000101010101010102010201010101200101010101010101010101010110010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MintingPool
Function name: internalRedeemPositionTokens(address,uint256)
PC address: 6823
Estimated Gas Usage: 6037 - 75937
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:430

marketContractPool.redeemPositionTokens(marketContractAddress, qtyToRedeem)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: internalRedeemPositionTokens(address,uint256), txdata: 0x70676dc980808080808080808080808008000280400240088004048080102010408040808080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MintingPool
Function name: internalRedeemPositionTokens(address,uint256)
PC address: 6823
Estimated Gas Usage: 6037 - 75937
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:430

marketContractPool.redeemPositionTokens(marketContractAddress, qtyToRedeem)

--------------------
Initial State:

Account: [CREATOR], balance: 0x101, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: internalRedeemPositionTokens(address,uint256), txdata: 0x70676dc900000000000000000000000000040010000080000020400020100440000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0004001000008000002040002010044000000000', 0), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MintingPool
Function name: internalMintPositionTokens(address,uint256,bool)
PC address: 8084
Estimated Gas Usage: 6173 - 76168
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:404

marketContractPool.mintPositionTokens(
            marketContractAddress,
            qtyToMint,
            payInMKT
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: internalMintPositionTokens(address,uint256,bool), txdata: 0xb6d2f177000000000000000000000000000000100002000208208000040000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000001000020002082080000400000000000080', 0, False), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MintingPool
Function name: internalMintPositionTokens(address,uint256,bool)
PC address: 8084
Estimated Gas Usage: 6173 - 76168
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:404

marketContractPool.mintPositionTokens(
            marketContractAddress,
            qtyToMint,
            payInMKT
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: internalMintPositionTokens(address,uint256,bool), txdata: 0xb6d2f177020202020202020202020202404004000202808000401000020101400202202002020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MintingPool
Function name: approveCollateralPool(address,uint256)
PC address: 10468
Estimated Gas Usage: 12653 - 254727
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:549

marketContract.COLLATERAL_TOKEN_ADDRESS()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: approveCollateralPool(address,uint256), txdata: 0xc22ccad600000000000000000000000080400000000000000220400000084000000000800000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x8040000000000000022040000008400000000080', 0), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MintingPool
Function name: approveCollateralPool(address,uint256)
PC address: 10652
Estimated Gas Usage: 12653 - 254727
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:550

marketContract.COLLATERAL_POOL_ADDRESS()

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawMarketToken(address,uint256), txdata: 0x4c7cb589010101010101010101010101affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0401080101080201010201040102010202080201200202010102010201800104, value: 0x0
Caller: [CREATOR], function: approveCollateralPool(address,uint256), txdata: 0xc22ccad600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MintingPool
Function name: approveCollateralPool(address,uint256)
PC address: 10845
Estimated Gas Usage: 12653 - 254727
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:549

IERC20(marketContract.COLLATERAL_TOKEN_ADDRESS()).approve(
            marketContract.COLLATERAL_POOL_ADDRESS(),
            amount
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000800000001008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: approveCollateralPool(address,uint256), txdata: 0xc22ccad680808080808080808080808000800800800820010802800240040240200480018080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MintingPool
Function name: approveCollateralPool(address,uint256)
PC address: 10845
Estimated Gas Usage: 12653 - 254727
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:549

IERC20(marketContract.COLLATERAL_TOKEN_ADDRESS()).approve(
            marketContract.COLLATERAL_POOL_ADDRESS(),
            amount
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawMarketToken(address,uint256), txdata: 0x4c7cb58900000000000000000000000000000000000000000000000000000000000000000108102004080400088000011001804001082004084001040410010220402008, decoded_data: ('0x0000000000000000000000000000000000000000', 466558916185882064600530515582133769460102558729153161071243104719481085960), value: 0x0
Caller: [CREATOR], function: withdrawMarketToken(address,uint256), txdata: 0x4c7cb58900000000000000000000000000000000000000000000000000000000000000000410088010020402408020022040800880200201028010800240020020802008, decoded_data: ('0x0000000000000000000000000000000000000000', 1837579613899293283422326067021833931095443186550462206910365738826872135688), value: 0x0
Caller: [CREATOR], function: approveCollateralPool(address,uint256), txdata: 0xc22ccad600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MintingPool
Function name: approveCollateralPool(address,uint256)
PC address: 11003
Estimated Gas Usage: 12653 - 254727
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:554

marketContractPool.mktToken()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawMarketToken(address,uint256), txdata: 0x4c7cb58901010101010101010101010102000001000000000000000000000080000810000108018040010180010108012004010101100101010101020120010220010208, value: 0x0
Caller: [CREATOR], function: withdrawMarketToken(address,uint256), txdata: 0x4c7cb58900000000000000000000000000000000000000000000000000000000000000020101010108200202400102010440800801010201010101021001200101010280, decoded_data: ('0x0000000000000000000000000000000000000002', 454086625210003828224025782380892632776318048150214729968260829500886024832), value: 0x0
Caller: [CREATOR], function: withdrawMarketToken(address,uint256), txdata: 0x4c7cb58901010101010101010101010100000000000000000000000000000000000000010101014001021001010101010201010201020201020208010101010401010101, value: 0x0
Caller: [CREATOR], function: approveCollateralPool(address,uint256), txdata: 0xc22ccad600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MintingPool
Function name: approveCollateralPool(address,uint256)
PC address: 11187
Estimated Gas Usage: 12653 - 254727
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:555

marketContract.COLLATERAL_POOL_ADDRESS()

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawMarketToken(address,uint256), txdata: 0x4c7cb58900000000000000000000000000000000000000000000000000000000000000010110081020010201010110014001800804800202400201020110010820018001, decoded_data: ('0x0000000000000000000000000000000000000001', 480638050320049466278165339895136268431254141577636493979363466027456364545), value: 0x0
Caller: [CREATOR], function: withdrawMarketToken(address,uint256), txdata: 0x4c7cb58901010101010101010101010180020001022010000020200000008020001080800120080808080101400101040101010201040102010208010101800220018001, value: 0x0
Caller: [CREATOR], function: approveCollateralPool(address,uint256), txdata: 0xc22ccad600000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000002000000000', 0), value: 0x0
Caller: [CREATOR], function: approveCollateralPool(address,uint256), txdata: 0xc22ccad600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MintingPool
Function name: approveCollateralPool(address,uint256)
PC address: 11380
Estimated Gas Usage: 12653 - 254727
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:554

IERC20(marketContractPool.mktToken()).approve(
            marketContract.COLLATERAL_POOL_ADDRESS(),
            amount
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000001001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: approveCollateralPool(address,uint256), txdata: 0xc22ccad600000000000000000000000008008004104008002000088000402000000480800000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0800800410400800200008800040200000048080', 0), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MintingPool
Function name: approveCollateralPool(address,uint256)
PC address: 11380
Estimated Gas Usage: 12653 - 254727
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:554

IERC20(marketContractPool.mktToken()).approve(
            marketContract.COLLATERAL_POOL_ADDRESS(),
            amount
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawMarketToken(address,uint256), txdata: 0x4c7cb589010101010101010101010101affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0100010201800200010801020101010120200102010101010101201008011001, value: 0x0
Caller: [CREATOR], function: withdrawMarketToken(address,uint256), txdata: 0x4c7cb58901010101010101010101010101022040202004200180400108082000808040080101808001040101010102800101040108200101010101010120020208010101, value: 0x0
Caller: [CREATOR], function: withdrawCollateral(address,uint256), txdata: 0x350c35e901010101010101010101010100000000000000000000000000000000000000060101040101018080010140010801010101010101010240010101010001800180, value: 0x0
Caller: [CREATOR], function: approveCollateralPool(address,uint256), txdata: 0xc22ccad600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MintingPool
Function name: allAddresses(uint256)
PC address: 11457
Estimated Gas Usage: 1122 - 1217
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:54

address[] public allAddresses

--------------------
Initial State:

Account: [CREATOR], balance: 0x100280000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: allAddresses(uint256), txdata: 0xdacc53700000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MintingPool
Function name: withdrawCollateral(address,uint256)
PC address: 14399
Estimated Gas Usage: 8566 - 115044
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:325

address(token).call(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawCollateral(address,uint256), txdata: 0x350c35e901010101010101010101010100000000000000000000000000000000000000040101020401010101208001010101010101010102100101010101080101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MintingPool
Function name: withdrawMarketToken(address,uint256)
PC address: 14399
Estimated Gas Usage: 10142 - 151087
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:325

address(token).call(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawMarketToken(address,uint256), txdata: 0x4c7cb58901010101010101010101010100200004100208000404000020080020000080100101010101020101010101010140010101010001010101010101010101011001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MintingPool
Function name: withdrawCollateral(address,uint256)
PC address: 14399
Estimated Gas Usage: 8566 - 115044
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:325

address(token).call(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawCollateral(address,uint256), txdata: 0x350c35e901010101010101010101010180408001104000000008001010041001108000000101010101010101010101010101010101010101010101010201080104010101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MintingPool
Function name: withdrawCollateral(address,uint256)
PC address: 14424
Estimated Gas Usage: 8566 - 115044
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawCollateral(address,uint256), txdata: 0x350c35e901010101010101010101010120012002000000014080000200400180002001010140010104010120010101020101080101010101010201010101020101020101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MintingPool
Function name: withdrawMarketToken(address,uint256)
PC address: 14424
Estimated Gas Usage: 10142 - 151087
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawMarketToken(address,uint256), txdata: 0x4c7cb58901010101010101010101010100000000000000000000000002000000000400200101028001010101020101010101010101010101010101028001010101010101, value: 0x0


time_used: 36057.476157188416 seconds
#@contract_info_time
0x2e6ec929349d0eb57fd8f699f8b8445aa6e8e43f.sol:0.5.2:MintingPool:36057.476157188416:36100:60:36000
