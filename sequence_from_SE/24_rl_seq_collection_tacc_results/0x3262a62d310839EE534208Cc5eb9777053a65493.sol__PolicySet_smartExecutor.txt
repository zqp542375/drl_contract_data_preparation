++++ 0x3262a62d310839EE534208Cc5eb9777053a65493.sol  :  0.5.0  :  PolicySet ++++
655251735853922694967911662580490717076041977877 is added into actors.
Starting preprocessing.
number of genesis states: 1
total instructions: 6787
['constructor']:writes at the last depth:['0', '1', '3']
preprocessing: Achieved 56.89% coverage.
dynamic svars:['120', '0', '1']
static svars:['2', '3']
Ending preprocessing.
preprocessing time(s): 38.16046953201294
contract coverage: 34.23%
Function Reads: State variables read in conditions
	count():['2']
	getVotingGroupIndex():['2']
	getStorageAddress():['2']
	renounceOwnership():['1']
	voting(address):['2']
	owner():[]
	isOwner():[]
	setStorage(address):['1']
	get(uint256):['2']
	changeOwner(address):['1']
	addSet(address):['2']
	configAddress():[]
	reset():['2']
	setVotingEndBlockNumber(address):['2']
	transferOwnership(address):['1']
	createStorage():['1', '2']
	deleteAddress(bytes32):[]
	getAddress(bytes32):[]
	deleteBool(bytes32):[]
	setInt(bytes32,int256):[]
	deleteBytes(bytes32):[]
	setString(bytes32,string):[]
	getBool(bytes32):[]
	deleteInt(bytes32):[]
	getString(bytes32):[]
	setBool(bytes32,bool):[]
	getUint(bytes32):[]
	getBytes(bytes32):[]
	setAddress(bytes32,address):[]
	setBytes(bytes32,bytes32):[]
	getInt(bytes32):[]
	setUint(bytes32,uint256):[]
	deleteUint(bytes32):[]
	deleteString(bytes32):[]
	validate3Addresses(address,address,address,address):[]
	validateAddress(address,address):[]
	validateAddresses(address,address,address):[]
	validateGroups(address,address,address):[]
	validateIllegalAddress(address):[]
	validateGroup(address,address):[]
Function Writes: State variables written
	renounceOwnership():['1']
	setStorage(address):['2']
	constructor:['0']
	transferOwnership(address):['1']
	createStorage():['2']
============================
iteration:3
targets:['count()', 'reset()', 'getVotingGroupIndex()', 'get(uint256)', 'voting(address)', 'addSet(address)', 'getStorageAddress()', 'createStorage()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)']
['renounceOwnership()']:writes at the last depth:['1']
['setStorage(address)']:writes at the last depth:['2']
['transferOwnership(address)']:writes at the last depth:['1']
['createStorage()']:writes at the last depth:['2']
contract coverage: 53.22%
============================
iteration:4
['createStorage()', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'count()']:writes at the last depth:[]
['createStorage()', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'reset()']:writes at the last depth:[]
contract coverage: 53.22%
============================
iteration:5
['createStorage()', 'reset()', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'reset()', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'reset()', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'reset()', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'count()']:writes at the last depth:[]
['createStorage()', 'reset()', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'reset()', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'reset()', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'reset()']:writes at the last depth:[]
contract coverage: 53.22%
============================
iteration:6
['createStorage()', 'reset()', 'reset()', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'reset()', 'reset()', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'reset()', 'reset()', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'reset()', 'reset()', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'reset()', 'count()']:writes at the last depth:[]
['createStorage()', 'reset()', 'reset()', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'reset()', 'reset()', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'reset()', 'reset()', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'reset()', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'reset()', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'reset()', 'reset()']:writes at the last depth:[]
contract coverage: 54.60%
============================
iteration:7
['createStorage()', 'reset()', 'addSet(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'reset()', 'addSet(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'reset()', 'addSet(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'reset()', 'addSet(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'addSet(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'reset()', 'addSet(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'reset()', 'addSet(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'reset()', 'addSet(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'addSet(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'addSet(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'addSet(address)', 'reset()']:writes at the last depth:[]
contract coverage: 54.60%
============================
iteration:8
['createStorage()', 'reset()', 'setVotingEndBlockNumber(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'reset()', 'setVotingEndBlockNumber(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'reset()', 'setVotingEndBlockNumber(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'reset()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'setVotingEndBlockNumber(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'reset()', 'setVotingEndBlockNumber(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'reset()', 'setVotingEndBlockNumber(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'reset()', 'setVotingEndBlockNumber(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'setVotingEndBlockNumber(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'setVotingEndBlockNumber(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'setVotingEndBlockNumber(address)', 'reset()']:writes at the last depth:[]
contract coverage: 54.60%
============================
iteration:9
['createStorage()', 'reset()', 'voting(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'reset()', 'voting(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'reset()', 'voting(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'reset()', 'voting(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'voting(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'reset()', 'voting(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'reset()', 'voting(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'reset()', 'voting(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'voting(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'voting(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'voting(address)', 'reset()']:writes at the last depth:[]
contract coverage: 54.60%
============================
iteration:10
['createStorage()', 'reset()', 'get(uint256)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'reset()', 'get(uint256)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'reset()', 'get(uint256)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'reset()', 'get(uint256)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'get(uint256)', 'count()']:writes at the last depth:[]
['createStorage()', 'reset()', 'get(uint256)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'reset()', 'get(uint256)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'reset()', 'get(uint256)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'get(uint256)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'get(uint256)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'get(uint256)', 'reset()']:writes at the last depth:[]
contract coverage: 54.60%
============================
iteration:11
['createStorage()', 'reset()', 'getVotingGroupIndex()', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'reset()', 'getVotingGroupIndex()', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'reset()', 'getVotingGroupIndex()', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'reset()', 'getVotingGroupIndex()', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'getVotingGroupIndex()', 'count()']:writes at the last depth:[]
['createStorage()', 'reset()', 'getVotingGroupIndex()', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'reset()', 'getVotingGroupIndex()', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'reset()', 'getVotingGroupIndex()', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'getVotingGroupIndex()', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'getVotingGroupIndex()', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'getVotingGroupIndex()', 'reset()']:writes at the last depth:[]
contract coverage: 54.60%
============================
iteration:12
['createStorage()', 'reset()', 'count()', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'reset()', 'count()', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'reset()', 'count()', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'reset()', 'count()', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'count()', 'count()']:writes at the last depth:[]
['createStorage()', 'reset()', 'count()', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'reset()', 'count()', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'reset()', 'count()', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'count()', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'count()', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'count()', 'reset()']:writes at the last depth:[]
contract coverage: 54.60%
============================
iteration:13
['createStorage()', 'reset()', 'changeOwner(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'reset()', 'changeOwner(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'reset()', 'changeOwner(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'reset()', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'changeOwner(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'reset()', 'changeOwner(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'reset()', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'changeOwner(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'reset()', 'changeOwner(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'changeOwner(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'changeOwner(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'changeOwner(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'changeOwner(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'changeOwner(address)', 'reset()']:writes at the last depth:[]
['createStorage()', 'reset()', 'changeOwner(address)', 'reset()']:writes at the last depth:[]
contract coverage: 54.60%
============================
iteration:14
['createStorage()', 'reset()', 'transferOwnership(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'reset()', 'transferOwnership(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'reset()', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'reset()', 'transferOwnership(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'transferOwnership(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'reset()', 'transferOwnership(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'reset()', 'transferOwnership(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'reset()', 'transferOwnership(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'transferOwnership(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'transferOwnership(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'transferOwnership(address)', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:15
['createStorage()', 'reset()', 'setStorage(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'reset()', 'setStorage(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'reset()', 'setStorage(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'reset()', 'setStorage(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'setStorage(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'reset()', 'setStorage(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'reset()', 'setStorage(address)', 'createStorage()']:writes at the last depth:['2']
['createStorage()', 'reset()', 'setStorage(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'setStorage(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'reset()', 'setStorage(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'setStorage(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'setStorage(address)', 'reset()']:writes at the last depth:[]
['createStorage()', 'reset()', 'setStorage(address)', 'reset()']:writes at the last depth:[]
['createStorage()', 'reset()', 'setStorage(address)', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:16
['createStorage()', 'reset()', 'renounceOwnership()', 'count()']:writes at the last depth:[]
['createStorage()', 'reset()', 'renounceOwnership()', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'reset()', 'renounceOwnership()', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'reset()', 'renounceOwnership()', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'renounceOwnership()', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'renounceOwnership()', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'reset()', 'renounceOwnership()', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:17
['createStorage()', 'addSet(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'addSet(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:18
['createStorage()', 'addSet(address)', 'reset()', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'reset()', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'addSet(address)', 'reset()', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'reset()', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'reset()', 'count()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'reset()', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'reset()', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'reset()', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'reset()', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'reset()', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'reset()', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:19
['createStorage()', 'addSet(address)', 'addSet(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'addSet(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'addSet(address)', 'addSet(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'addSet(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'addSet(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'addSet(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'addSet(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'addSet(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'addSet(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'addSet(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'addSet(address)', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:20
['createStorage()', 'addSet(address)', 'setVotingEndBlockNumber(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'setVotingEndBlockNumber(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'addSet(address)', 'setVotingEndBlockNumber(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'setVotingEndBlockNumber(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'setVotingEndBlockNumber(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'setVotingEndBlockNumber(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'setVotingEndBlockNumber(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'setVotingEndBlockNumber(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'setVotingEndBlockNumber(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'setVotingEndBlockNumber(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'setVotingEndBlockNumber(address)', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:21
['createStorage()', 'addSet(address)', 'voting(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'voting(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'addSet(address)', 'voting(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'voting(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'voting(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'voting(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'voting(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'voting(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'voting(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'voting(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'voting(address)', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:22
['createStorage()', 'addSet(address)', 'get(uint256)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'get(uint256)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'addSet(address)', 'get(uint256)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'get(uint256)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'get(uint256)', 'count()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'get(uint256)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'get(uint256)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'get(uint256)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'get(uint256)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'get(uint256)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'get(uint256)', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:23
['createStorage()', 'addSet(address)', 'getVotingGroupIndex()', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'getVotingGroupIndex()', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'addSet(address)', 'getVotingGroupIndex()', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'getVotingGroupIndex()', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'getVotingGroupIndex()', 'count()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'getVotingGroupIndex()', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'getVotingGroupIndex()', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'getVotingGroupIndex()', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'getVotingGroupIndex()', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'getVotingGroupIndex()', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'getVotingGroupIndex()', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:24
['createStorage()', 'addSet(address)', 'count()', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'count()', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'addSet(address)', 'count()', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'count()', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'count()', 'count()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'count()', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'count()', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'count()', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'count()', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'count()', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'count()', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:25
['createStorage()', 'addSet(address)', 'changeOwner(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'changeOwner(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'addSet(address)', 'changeOwner(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'changeOwner(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'changeOwner(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'changeOwner(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'changeOwner(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'changeOwner(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'changeOwner(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'changeOwner(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'changeOwner(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'changeOwner(address)', 'reset()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'changeOwner(address)', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:26
['createStorage()', 'addSet(address)', 'transferOwnership(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'transferOwnership(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'addSet(address)', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'transferOwnership(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'transferOwnership(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'transferOwnership(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'transferOwnership(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'transferOwnership(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'transferOwnership(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'transferOwnership(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'transferOwnership(address)', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:27
['createStorage()', 'addSet(address)', 'setStorage(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'setStorage(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'addSet(address)', 'setStorage(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'setStorage(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'setStorage(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'setStorage(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'addSet(address)', 'setStorage(address)', 'createStorage()']:writes at the last depth:['2']
['createStorage()', 'addSet(address)', 'setStorage(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'setStorage(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'setStorage(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'setStorage(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'setStorage(address)', 'reset()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'setStorage(address)', 'reset()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'setStorage(address)', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:28
['createStorage()', 'addSet(address)', 'renounceOwnership()', 'count()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'renounceOwnership()', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'renounceOwnership()', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'renounceOwnership()', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'renounceOwnership()', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'renounceOwnership()', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'addSet(address)', 'renounceOwnership()', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:29
['createStorage()', 'setVotingEndBlockNumber(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'setVotingEndBlockNumber(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:30
['createStorage()', 'setVotingEndBlockNumber(address)', 'reset()', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'reset()', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'setVotingEndBlockNumber(address)', 'reset()', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'reset()', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'reset()', 'count()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'reset()', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'reset()', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'reset()', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'reset()', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'reset()', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'reset()', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:31
['createStorage()', 'setVotingEndBlockNumber(address)', 'addSet(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'addSet(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'setVotingEndBlockNumber(address)', 'addSet(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'addSet(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'addSet(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'addSet(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'addSet(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'addSet(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'addSet(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'addSet(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'addSet(address)', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:32
['createStorage()', 'setVotingEndBlockNumber(address)', 'setVotingEndBlockNumber(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'setVotingEndBlockNumber(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'setVotingEndBlockNumber(address)', 'setVotingEndBlockNumber(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'setVotingEndBlockNumber(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'setVotingEndBlockNumber(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'setVotingEndBlockNumber(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'setVotingEndBlockNumber(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'setVotingEndBlockNumber(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'setVotingEndBlockNumber(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'setVotingEndBlockNumber(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'setVotingEndBlockNumber(address)', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:33
['createStorage()', 'setVotingEndBlockNumber(address)', 'voting(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'voting(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'setVotingEndBlockNumber(address)', 'voting(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'voting(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'voting(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'voting(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'voting(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'voting(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'voting(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'voting(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'voting(address)', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:34
['createStorage()', 'setVotingEndBlockNumber(address)', 'get(uint256)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'get(uint256)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'setVotingEndBlockNumber(address)', 'get(uint256)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'get(uint256)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'get(uint256)', 'count()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'get(uint256)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'get(uint256)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'get(uint256)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'get(uint256)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'get(uint256)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'get(uint256)', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:35
['createStorage()', 'setVotingEndBlockNumber(address)', 'getVotingGroupIndex()', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'getVotingGroupIndex()', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'setVotingEndBlockNumber(address)', 'getVotingGroupIndex()', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'getVotingGroupIndex()', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'getVotingGroupIndex()', 'count()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'getVotingGroupIndex()', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'getVotingGroupIndex()', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'getVotingGroupIndex()', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'getVotingGroupIndex()', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'getVotingGroupIndex()', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'getVotingGroupIndex()', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:36
['createStorage()', 'setVotingEndBlockNumber(address)', 'count()', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'count()', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'setVotingEndBlockNumber(address)', 'count()', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'count()', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'count()', 'count()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'count()', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'count()', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'count()', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'count()', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'count()', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'count()', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:37
['createStorage()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)', 'count()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)', 'getVotingGroupIndex()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)', 'get(uint256)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)', 'voting(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)', 'setVotingEndBlockNumber(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)', 'addSet(address)']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)', 'reset()']:writes at the last depth:[]
['createStorage()', 'setVotingEndBlockNumber(address)', 'changeOwner(address)', 'reset()']:writes at the last depth:[]
contract coverage: 55.81%
============================
iteration:38
['createStorage()', 'setVotingEndBlockNumber(address)', 'transferOwnership(address)', 'renounceOwnership()']:writes at the last depth:['1']
['createStorage()', 'setVotingEndBlockNumber(address)', 'transferOwnership(address)', 'setStorage(address)']:writes at the last depth:['2']
['createStorage()', 'setVotingEndBlockNumber(address)', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['1']
contract coverage: 55.81%
============================
iteration:39
contract coverage: 55.81%
============================
iteration:40
contract coverage: 55.81%
============================
iteration:41
contract coverage: 55.81%
============================
iteration:42
contract coverage: 55.81%
============================
iteration:43
contract coverage: 55.81%
============================
iteration:44
contract coverage: 55.81%
============================
iteration:45
contract coverage: 55.81%
============================
iteration:46
contract coverage: 55.81%
============================
iteration:47
contract coverage: 55.81%
============================
iteration:48
contract coverage: 55.81%
============================
iteration:49
contract coverage: 55.81%
============================
iteration:50
contract coverage: 55.81%
============================
iteration:51
contract coverage: 55.81%
#@statespace
19548 nodes, 19547 edges, 240643 total states
#@coverage
Achieved 2.20% coverage for code: 60806040523480156200001157600080fd5b5060405160208062004645833981018060405260208110156200003357600080fd5b810190808051906020019092919050505080806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506000620000a1620001af640100000000026401000000009004565b905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506200014a620001b7565b604051809103906000f08015801562000167573d6000803e3d6000fd5b50600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001c8565b600033905090565b604051610d16806200392f83390190565b61375780620001d86000396000f3fe6080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306661abd146100eb578063107a49ae14610116578063393a4d3414610141578063715018a6146101985780638d5c9680146101af5780638da5cb5b146102185780638f32d59b1461026f5780639137c1a71461029e5780639507d39a146102ef578063a6f9dae11461036a578063d580ded4146103bb578063d6c318711461040c578063d826f88f14610463578063eb9224b31461047a578063f2fde38b146104cb578063fb971d011461051c575b600080fd5b3480156100f757600080fd5b50610100610533565b6040518082815260200191505060405180910390f35b34801561012257600080fd5b5061012b6105f0565b6040518082815260200191505060405180910390f35b34801561014d57600080fd5b506101566106b2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101a457600080fd5b506101ad6107a2565b005b3480156101bb57600080fd5b506101fe600480360360208110156101d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108df565b604051808215151515815260200191505060405180910390f35b34801561022457600080fd5b5061022d6109ad565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027b57600080fd5b506102846109d7565b604051808215151515815260200191505060405180910390f35b3480156102aa57600080fd5b506102ed600480360360208110156102c157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a36565b005b3480156102fb57600080fd5b506103286004803603602081101561031257600080fd5b8101908080359060200190929190505050610af6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037657600080fd5b506103b96004803603602081101561038d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bbb565b005b3480156103c757600080fd5b5061040a600480360360208110156103de57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d0f565b005b34801561041857600080fd5b506104216110df565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561046f57600080fd5b50610478611108565b005b34801561048657600080fd5b506104c96004803603602081101561049d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114e7565b005b3480156104d757600080fd5b5061051a600480360360208110156104ee57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061187a565b005b34801561052857600080fd5b50610531611902565b005b600061053d611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610560611ba1565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156105b057600080fd5b505afa1580156105c4573d6000803e3d6000fd5b505050506040513d60208110156105da57600080fd5b8101908080519060200190929190505050905090565b6000806105fb611bef565b9050610605611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561067157600080fd5b505afa158015610685573d6000803e3d6000fd5b505050506040513d602081101561069b57600080fd5b810190808051906020019092919050505091505090565b60008073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561077a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6107aa6109d7565b151561081e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000806108eb83611c3d565b905060006108f7611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561096357600080fd5b505afa158015610977573d6000803e3d6000fd5b505050506040513d602081101561098d57600080fd5b810190808051906020019092919050505090508043111592505050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610a1a611cd0565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b610a3e6109d7565b1515610ab2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080610b0283611cd8565b9050610b0c611ab1565b73ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610b7857600080fd5b505afa158015610b8c573d6000803e3d6000fd5b505050506040513d6020811015610ba257600080fd5b8101908080519060200190929190505050915050919050565b610bc36109d7565b1515610c37576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a6f9dae1826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610cf457600080fd5b505af1158015610d08573d6000803e3d6000fd5b5050505050565b610d17611d30565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933610d3b611d5a565b73ffffffffffffffffffffffffffffffffffffffff1663b06806466040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610d9c57600080fd5b505afa158015610db0573d6000803e3d6000fd5b505050506040513d6020811015610dc657600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015610e8657600080fd5b505afa158015610e9a573d6000803e3d6000fd5b505050506000610ea8611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610ecb611ba1565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610f1b57600080fd5b505afa158015610f2f573d6000803e3d6000fd5b505050506040513d6020811015610f4557600080fd5b810190808051906020019092919050505090506000610f6382611cd8565b9050610f6d611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663ca446dd982856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561100f57600080fd5b505af1158015611023573d6000803e3d6000fd5b5050505061103b600183611d8390919063ffffffff16565b9150611045611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611068611ba1565b846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156110c257600080fd5b505af11580156110d6573d6000803e3d6000fd5b50505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611110611d30565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611134611d5a565b73ffffffffffffffffffffffffffffffffffffffff1663b06806466040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561119557600080fd5b505afa1580156111a9573d6000803e3d6000fd5b505050506040513d60208110156111bf57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561127f57600080fd5b505afa158015611293573d6000803e3d6000fd5b5050505060006112a1611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56112c4611ba1565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d602081101561133e57600080fd5b8101908080519060200190929190505050905060008090505b8181101561143d57600061136a82611cd8565b9050611374611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663ca446dd98260006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561141757600080fd5b505af115801561142b573d6000803e3d6000fd5b50505050508080600101915050611357565b50611446611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611469611ba1565b60006040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156114c457600080fd5b505af11580156114d8573d6000803e3d6000fd5b505050506114e4611e0d565b50565b6114ef611d30565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611513611d5a565b73ffffffffffffffffffffffffffffffffffffffff1663b06806466040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561157457600080fd5b505afa158015611588573d6000803e3d6000fd5b505050506040513d602081101561159e57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561165e57600080fd5b505afa158015611672573d6000803e3d6000fd5b50505050600061168182611c3d565b9050600061168d611d5a565b73ffffffffffffffffffffffffffffffffffffffff16630505c8c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156116ee57600080fd5b505afa158015611702573d6000803e3d6000fd5b505050506040513d602081101561171857600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16636e47720e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561178a57600080fd5b505afa15801561179e573d6000803e3d6000fd5b505050506040513d60208110156117b457600080fd5b8101908080519060200190929190505050905060006117dc8243611d8390919063ffffffff16565b90506117e6611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a84836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561185c57600080fd5b505af1158015611870573d6000803e3d6000fd5b5050505050505050565b6118826109d7565b15156118f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6118ff81611f6e565b50565b61190a6109d7565b151561197e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611a44576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f73746f726167652069732073657474656400000000000000000000000000000081525060200191505060405180910390fd5b6000611a4e6120f9565b604051809103906000f080158015611a6a573d6000803e3d6000fd5b50905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611b79576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060405160200180807f5f706f6c696379536574496e6465780000000000000000000000000000000000815250600f01905060405160208183030381529060405280519060200120905090565b600060405160200180807f5f766f74696e6747726f7570496e646578000000000000000000000000000000815250601101905060405160208183030381529060405280519060200120905090565b60008160405160200180807f5f766f74696e67456e64426c6f636b4e756d62657200000000000000000000008152506015018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b600033905090565b60008160405160200180807f5f696e6465780000000000000000000000000000000000000000000000000000815250600601828152602001915050604051602081830303815290604052805190602001209050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000808284019050838110151515611e03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000611e17611bef565b90506000611e23611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611e8f57600080fd5b505afa158015611ea3573d6000803e3d6000fd5b505050506040513d6020811015611eb957600080fd5b810190808051906020019092919050505090508080600101915050611edc611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611f5257600080fd5b505af1158015611f66573d6000803e3d6000fd5b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612039576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040516116228061210a8339019056fe6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b506115c2806100606000396000f3fe608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a7230582047c08a0a7920a5a58cb42b0e3f01efc3a4cdb21357a3d2e13ce160b6290f23070029a165627a7a72305820652be97bade4e20b2b8d363e76b7cd96e9274a5a5993f1b4d93d3df442ed17220029608060405234801561001057600080fd5b50610cf6806100206000396000f3fe608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631bde7d8f1461007d57806349616d791461012e5780636dd893b91461019f578063a219296314610230578063b292b549146102c1578063d16ff47014610312575b600080fd5b34801561008957600080fd5b5061012c600480360360808110156100a057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610383565b005b34801561013a57600080fd5b5061019d6004803603604081101561015157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061050a565b005b3480156101ab57600080fd5b5061022e600480360360608110156101c257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061061c565b005b34801561023c57600080fd5b506102bf6004803603606081101561025357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610769565b005b3480156102cd57600080fd5b50610310600480360360208110156102e457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a00565b005b34801561031e57600080fd5b506103816004803603604081101561033557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b13565b005b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156103bc57610504565b8173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156103f557610504565b8073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610502576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104c75780820151818401526020810190506104ac565b50505050905090810190601f1680156104f45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b50505050565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610617576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156105dc5780820151818401526020810190506105c1565b50505050905090810190601f1680156106095780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561065557610764565b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610762576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561072757808201518184015260208101905061070c565b50505050905090810190601f1680156107545780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b8173ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561080257600080fd5b505afa158015610816573d6000803e3d6000fd5b505050506040513d602081101561082c57600080fd5b810190808051906020019092919050505015610847576109fb565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156108e057600080fd5b505afa1580156108f4573d6000803e3d6000fd5b505050506040513d602081101561090a57600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156109f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109be5780820151818401526020810190506109a3565b50505050905090810190601f1680156109eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610b0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ad4578082015181840152602081019050610ab9565b50505050905090810190601f168015610b015780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610bac57600080fd5b505afa158015610bc0573d6000803e3d6000fd5b505050506040513d6020811015610bd657600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610cc5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c8a578082015181840152602081019050610c6f565b50505050905090810190601f168015610cb75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505056fea165627a7a72305820922c9ce61b0b766efb835258cd4e2c929e098e640497566e6458dac80d2579300029
#@coverage
Achieved 0.94% coverage for code: 608060405234801561001057600080fd5b50610cf6806100206000396000f3fe608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631bde7d8f1461007d57806349616d791461012e5780636dd893b91461019f578063a219296314610230578063b292b549146102c1578063d16ff47014610312575b600080fd5b34801561008957600080fd5b5061012c600480360360808110156100a057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610383565b005b34801561013a57600080fd5b5061019d6004803603604081101561015157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061050a565b005b3480156101ab57600080fd5b5061022e600480360360608110156101c257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061061c565b005b34801561023c57600080fd5b506102bf6004803603606081101561025357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610769565b005b3480156102cd57600080fd5b50610310600480360360208110156102e457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a00565b005b34801561031e57600080fd5b506103816004803603604081101561033557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b13565b005b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156103bc57610504565b8173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156103f557610504565b8073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610502576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104c75780820151818401526020810190506104ac565b50505050905090810190601f1680156104f45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b50505050565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610617576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156105dc5780820151818401526020810190506105c1565b50505050905090810190601f1680156106095780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561065557610764565b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610762576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561072757808201518184015260208101905061070c565b50505050905090810190601f1680156107545780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b8173ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561080257600080fd5b505afa158015610816573d6000803e3d6000fd5b505050506040513d602081101561082c57600080fd5b810190808051906020019092919050505015610847576109fb565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156108e057600080fd5b505afa1580156108f4573d6000803e3d6000fd5b505050506040513d602081101561090a57600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156109f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109be5780820151818401526020810190506109a3565b50505050905090810190601f1680156109eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610b0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ad4578082015181840152602081019050610ab9565b50505050905090810190601f168015610b015780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610bac57600080fd5b505afa158015610bc0573d6000803e3d6000fd5b505050506040513d6020811015610bd657600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610cc5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c8a578082015181840152602081019050610c6f565b50505050905090810190601f168015610cb75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505056fea165627a7a72305820922c9ce61b0b766efb835258cd4e2c929e098e640497566e6458dac80d257930002900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
#@coverage
Achieved 55.81% coverage for code: 6080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306661abd146100eb578063107a49ae14610116578063393a4d3414610141578063715018a6146101985780638d5c9680146101af5780638da5cb5b146102185780638f32d59b1461026f5780639137c1a71461029e5780639507d39a146102ef578063a6f9dae11461036a578063d580ded4146103bb578063d6c318711461040c578063d826f88f14610463578063eb9224b31461047a578063f2fde38b146104cb578063fb971d011461051c575b600080fd5b3480156100f757600080fd5b50610100610533565b6040518082815260200191505060405180910390f35b34801561012257600080fd5b5061012b6105f0565b6040518082815260200191505060405180910390f35b34801561014d57600080fd5b506101566106b2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101a457600080fd5b506101ad6107a2565b005b3480156101bb57600080fd5b506101fe600480360360208110156101d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108df565b604051808215151515815260200191505060405180910390f35b34801561022457600080fd5b5061022d6109ad565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027b57600080fd5b506102846109d7565b604051808215151515815260200191505060405180910390f35b3480156102aa57600080fd5b506102ed600480360360208110156102c157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a36565b005b3480156102fb57600080fd5b506103286004803603602081101561031257600080fd5b8101908080359060200190929190505050610af6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037657600080fd5b506103b96004803603602081101561038d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bbb565b005b3480156103c757600080fd5b5061040a600480360360208110156103de57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d0f565b005b34801561041857600080fd5b506104216110df565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561046f57600080fd5b50610478611108565b005b34801561048657600080fd5b506104c96004803603602081101561049d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114e7565b005b3480156104d757600080fd5b5061051a600480360360208110156104ee57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061187a565b005b34801561052857600080fd5b50610531611902565b005b600061053d611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610560611ba1565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156105b057600080fd5b505afa1580156105c4573d6000803e3d6000fd5b505050506040513d60208110156105da57600080fd5b8101908080519060200190929190505050905090565b6000806105fb611bef565b9050610605611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561067157600080fd5b505afa158015610685573d6000803e3d6000fd5b505050506040513d602081101561069b57600080fd5b810190808051906020019092919050505091505090565b60008073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561077a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6107aa6109d7565b151561081e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000806108eb83611c3d565b905060006108f7611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561096357600080fd5b505afa158015610977573d6000803e3d6000fd5b505050506040513d602081101561098d57600080fd5b810190808051906020019092919050505090508043111592505050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610a1a611cd0565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b610a3e6109d7565b1515610ab2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080610b0283611cd8565b9050610b0c611ab1565b73ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610b7857600080fd5b505afa158015610b8c573d6000803e3d6000fd5b505050506040513d6020811015610ba257600080fd5b8101908080519060200190929190505050915050919050565b610bc36109d7565b1515610c37576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a6f9dae1826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610cf457600080fd5b505af1158015610d08573d6000803e3d6000fd5b5050505050565b610d17611d30565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933610d3b611d5a565b73ffffffffffffffffffffffffffffffffffffffff1663b06806466040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610d9c57600080fd5b505afa158015610db0573d6000803e3d6000fd5b505050506040513d6020811015610dc657600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015610e8657600080fd5b505afa158015610e9a573d6000803e3d6000fd5b505050506000610ea8611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610ecb611ba1565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610f1b57600080fd5b505afa158015610f2f573d6000803e3d6000fd5b505050506040513d6020811015610f4557600080fd5b810190808051906020019092919050505090506000610f6382611cd8565b9050610f6d611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663ca446dd982856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561100f57600080fd5b505af1158015611023573d6000803e3d6000fd5b5050505061103b600183611d8390919063ffffffff16565b9150611045611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611068611ba1565b846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156110c257600080fd5b505af11580156110d6573d6000803e3d6000fd5b50505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611110611d30565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611134611d5a565b73ffffffffffffffffffffffffffffffffffffffff1663b06806466040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561119557600080fd5b505afa1580156111a9573d6000803e3d6000fd5b505050506040513d60208110156111bf57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561127f57600080fd5b505afa158015611293573d6000803e3d6000fd5b5050505060006112a1611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56112c4611ba1565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d602081101561133e57600080fd5b8101908080519060200190929190505050905060008090505b8181101561143d57600061136a82611cd8565b9050611374611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663ca446dd98260006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561141757600080fd5b505af115801561142b573d6000803e3d6000fd5b50505050508080600101915050611357565b50611446611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611469611ba1565b60006040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156114c457600080fd5b505af11580156114d8573d6000803e3d6000fd5b505050506114e4611e0d565b50565b6114ef611d30565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611513611d5a565b73ffffffffffffffffffffffffffffffffffffffff1663b06806466040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561157457600080fd5b505afa158015611588573d6000803e3d6000fd5b505050506040513d602081101561159e57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561165e57600080fd5b505afa158015611672573d6000803e3d6000fd5b50505050600061168182611c3d565b9050600061168d611d5a565b73ffffffffffffffffffffffffffffffffffffffff16630505c8c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156116ee57600080fd5b505afa158015611702573d6000803e3d6000fd5b505050506040513d602081101561171857600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16636e47720e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561178a57600080fd5b505afa15801561179e573d6000803e3d6000fd5b505050506040513d60208110156117b457600080fd5b8101908080519060200190929190505050905060006117dc8243611d8390919063ffffffff16565b90506117e6611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a84836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561185c57600080fd5b505af1158015611870573d6000803e3d6000fd5b5050505050505050565b6118826109d7565b15156118f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6118ff81611f6e565b50565b61190a6109d7565b151561197e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611a44576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f73746f726167652069732073657474656400000000000000000000000000000081525060200191505060405180910390fd5b6000611a4e6120f9565b604051809103906000f080158015611a6a573d6000803e3d6000fd5b50905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611b79576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060405160200180807f5f706f6c696379536574496e6465780000000000000000000000000000000000815250600f01905060405160208183030381529060405280519060200120905090565b600060405160200180807f5f766f74696e6747726f7570496e646578000000000000000000000000000000815250601101905060405160208183030381529060405280519060200120905090565b60008160405160200180807f5f766f74696e67456e64426c6f636b4e756d62657200000000000000000000008152506015018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b600033905090565b60008160405160200180807f5f696e6465780000000000000000000000000000000000000000000000000000815250600601828152602001915050604051602081830303815290604052805190602001209050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000808284019050838110151515611e03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000611e17611bef565b90506000611e23611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611e8f57600080fd5b505afa158015611ea3573d6000803e3d6000fd5b505050506040513d6020811015611eb957600080fd5b810190808051906020019092919050505090508080600101915050611edc611ab1565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611f5257600080fd5b505af1158015611f66573d6000803e3d6000fd5b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612039576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040516116228061210a8339019056fe6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b506115c2806100606000396000f3fe608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a7230582047c08a0a7920a5a58cb42b0e3f01efc3a4cdb21357a3d2e13ce160b6290f23070029a165627a7a72305820652be97bade4e20b2b8d363e76b7cd96e9274a5a5993f1b4d93d3df442ed17220029
#@coverage
Achieved 1.24% coverage for code: 6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b506115c2806100606000396000f3fe608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a7230582047c08a0a7920a5a58cb42b0e3f01efc3a4cdb21357a3d2e13ce160b6290f230700290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
#@coverage
Achieved 23.68% coverage for code: 608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a7230582047c08a0a7920a5a58cb42b0e3f01efc3a4cdb21357a3d2e13ce160b6290f23070029
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PolicySet
Function name: addSet(address)
PC address: 3721
Estimated Gas Usage: 16149 - 193113
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:620

addressValidator().validateAddress(
			msg.sender,
			config().policyFactory()
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [ATTACKER], function: addSet(address), txdata: 0xd580ded40101010101010101010101010101010101020280010001000008001000000840, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PolicySet
Function name: addSet(address)
PC address: 3870
Estimated Gas Usage: 16149 - 193113
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:625

eternalStorage().getUint(getPlicySetIndexKey())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: reset(), txdata: 0xd826f88f, value: 0x0
Caller: [CREATOR], function: addSet(address), txdata: 0xd580ded40101010101010101010101010101010101010101018001010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PolicySet
Function name: addSet(address)
PC address: 4114
Estimated Gas Usage: 16149 - 193113
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:627

eternalStorage().setAddress(key, _addr)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [ATTACKER], function: reset(), txdata: 0xd826f88f, value: 0x0
Caller: [SOMEGUY], function: reset(), txdata: 0xd826f88f, value: 0x0
Caller: [SOMEGUY], function: addSet(address), txdata: 0xd580ded40101010101010101010101010101010102010102010101010000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PolicySet
Function name: addSet(address)
PC address: 4293
Estimated Gas Usage: 16149 - 193113
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:629

eternalStorage().setUint(getPlicySetIndexKey(), index)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [ATTACKER], function: reset(), txdata: 0xd826f88f, value: 0x0
Caller: [SOMEGUY], function: addSet(address), txdata: 0xd580ded40101010101010101010101010102010101010101010102010180000000000000, value: 0x0
Caller: [SOMEGUY], function: addSet(address), txdata: 0xd580ded40101010101010101010101010000000000000000000100001000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PolicySet
Function name: addSet(address)
PC address: 4293
Estimated Gas Usage: 16149 - 193113
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:629

eternalStorage().setUint(getPlicySetIndexKey(), index)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [ATTACKER], function: addSet(address), txdata: 0xd580ded40101010101010101010101010101010110040110044020001001082020000108, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PolicySet
Function name: reset()
PC address: 4738
Estimated Gas Usage: 19415 - 231506
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:633

addressValidator().validateAddress(
			msg.sender,
			config().policyFactory()
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [ATTACKER], function: reset(), txdata: 0xd826f88f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PolicySet
Function name: reset()
PC address: 4887
Estimated Gas Usage: 19415 - 231506
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:638

eternalStorage().getUint(getPlicySetIndexKey())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [ATTACKER], function: reset(), txdata: 0xd826f88f, value: 0x0
Caller: [SOMEGUY], function: reset(), txdata: 0xd826f88f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PolicySet
Function name: reset()
PC address: 5146
Estimated Gas Usage: 23029 - 270910
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:641

eternalStorage().setAddress(key, address(0))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [ATTACKER], function: reset(), txdata: 0xd826f88f, value: 0x0
Caller: [ATTACKER], function: addSet(address), txdata: 0xd580ded40101010101010101010101010201010101010102080000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: reset(), txdata: 0xd826f88f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PolicySet
Function name: reset()
PC address: 5319
Estimated Gas Usage: 19415 - 231506
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:643

eternalStorage().setUint(getPlicySetIndexKey(), 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [SOMEGUY], function: reset(), txdata: 0xd826f88f, value: 0x0
Caller: [SOMEGUY], function: reset(), txdata: 0xd826f88f, value: 0x0
Caller: [SOMEGUY], function: reset(), txdata: 0xd826f88f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PolicySet
Function name: setVotingEndBlockNumber(address)
PC address: 5729
Estimated Gas Usage: 13266 - 188013
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:648

addressValidator().validateAddress(
			msg.sender,
			config().policyFactory()
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setVotingEndBlockNumber(address), txdata: 0xeb9224b30101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PolicySet
Function name: setVotingEndBlockNumber(address)
PC address: 5873
Estimated Gas Usage: 13266 - 188013
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:653

config().policy()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [SOMEGUY], function: reset(), txdata: 0xd826f88f, value: 0x0
Caller: [SOMEGUY], function: setVotingEndBlockNumber(address), txdata: 0xeb9224b30000000000000000000000000000000000000000000000000000000000000400, decoded_data: ('0x0000000000000000000000000000000000000400',), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PolicySet
Function name: setVotingEndBlockNumber(address)
PC address: 6029
Estimated Gas Usage: 13266 - 188013
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:653

IPolicy(config().policy()).policyVotingBlocks()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [SOMEGUY], function: reset(), txdata: 0xd826f88f, value: 0x0
Caller: [CREATOR], function: reset(), txdata: 0xd826f88f, value: 0x0
Caller: [SOMEGUY], function: setVotingEndBlockNumber(address), txdata: 0xeb9224b30000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PolicySet
Function name: setVotingEndBlockNumber(address)
PC address: 6239
Estimated Gas Usage: 13266 - 188013
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:655

eternalStorage().setUint(key, votingEndBlockNumber)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [ATTACKER], function: reset(), txdata: 0xd826f88f, value: 0x0
Caller: [SOMEGUY], function: addSet(address), txdata: 0xd580ded40000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0
Caller: [SOMEGUY], function: setVotingEndBlockNumber(address), txdata: 0xeb9224b30008048040100020800080040000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PolicySet
Function name: addSet(address)
PC address: 6864
Estimated Gas Usage: 16149 - 193113
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:513

_storage

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [ATTACKER], function: addSet(address), txdata: 0xd580ded40101010101010101010101010101010110040110044020001001082020000108, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PolicySet
Function name: reset()
PC address: 6864
Estimated Gas Usage: 19415 - 231506
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:513

_storage

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [ATTACKER], function: reset(), txdata: 0xd826f88f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PolicySet
Function name: addSet(address)
PC address: 7039
Estimated Gas Usage: 16149 - 193113
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:523

_storage

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [ATTACKER], function: addSet(address), txdata: 0xd580ded40101010101010101010101010101010110040110044020001001082020000108, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PolicySet
Function name: reset()
PC address: 7039
Estimated Gas Usage: 19415 - 231506
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:523

_storage

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [ATTACKER], function: reset(), txdata: 0xd826f88f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: PolicySet
Function name: setVotingEndBlockNumber(address)
PC address: 7573
Estimated Gas Usage: 9867 - 149483
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:8

require(c >= a, "SafeMath: addition overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setVotingEndBlockNumber(address), txdata: 0xeb9224b30000000000000000000000000000000000000000000000000001000000000000, decoded_data: ('0x0000000000000000000000000001000000000000',), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PolicySet
Function name: reset()
PC address: 7826
Estimated Gas Usage: 19415 - 231506
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:680

eternalStorage().getUint(key)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [SOMEGUY], function: reset(), txdata: 0xd826f88f, value: 0x0
Caller: [ATTACKER], function: setVotingEndBlockNumber(address), txdata: 0xeb9224b34002040140401001802008401001000001800240080804800004014008108004, value: 0x0
Caller: [SOMEGUY], function: reset(), txdata: 0xd826f88f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PolicySet
Function name: reset()
PC address: 8021
Estimated Gas Usage: 19415 - 231506
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:682

eternalStorage().setUint(key, idx)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [SOMEGUY], function: reset(), txdata: 0xd826f88f, value: 0x0
Caller: [SOMEGUY], function: voting(address), txdata: 0x8d5c96800004108000400108080102100000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: reset(), txdata: 0xd826f88f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PolicySet
Function name: reset()
PC address: 8021
Estimated Gas Usage: 19415 - 231506
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3262a62d310839EE534208Cc5eb9777053a65493.sol:682

eternalStorage().setUint(key, idx)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [ATTACKER], function: reset(), txdata: 0xd826f88f, value: 0x0


time_used: 36111.76420235634 seconds
#@contract_info_time
0x3262a62d310839EE534208Cc5eb9777053a65493.sol:0.5.0:PolicySet:36111.76420235634:36100:60:36000
