++++ 0x22a39c2dd54b71ac884657bb3e37308abe2d02e1.sol  :  0.4.24  :  FiatTokenV1 ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 5556
['constructor']:writes at the last depth:['1', '11', '0']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 96.44% coverage.
dynamic svars:['4', '5', '7', '3', '12', '13', '10', '9']
static svars:['1', '8', '2', '11', '0', '6']
Ending preprocessing.
preprocessing time(s): 111.7887442111969
contract coverage: 77.45%
name() is not reachable
symbol() is not reachable
currency() is not reachable
Function Reads: State variables read in conditions
	name():[]
	approve(address,uint256):['1', '3']
	totalSupply():[]
	unBlacklist(address):['2']
	transferFrom(address,address,uint256):['1', '3', '9', '10']
	removeMinter(address):['8']
	decimals():[]
	initialize(string,string,string,uint8,address,address,address,address):['8']
	masterMinter():[]
	unpause():['1']
	mint(address,uint256):['1', '12', '3', '13']
	burn(uint256):['1', '12', '3', '9', '11']
	configureMinter(address,uint256):['1', '8']
	updatePauser(address):['0']
	paused():[]
	balanceOf(address):[]
	pause():['1']
	minterAllowance(address):[]
	owner():[]
	symbol():[]
	pauser():[]
	transfer(address,uint256):['1', '3', '9']
	updateMasterMinter(address):['0']
	isMinter(address):[]
	updateBlacklister(address):['0']
	blacklister():[]
	allowance(address,address):[]
	currency():[]
	transferOwnership(address):['0']
	blacklist(address):['2']
	isBlacklisted(address):[]
Function Writes: State variables written
	unpause():['1']
	unBlacklist(address):['3']
	removeMinter(address):['12', '13']
	pause():['1']
	updatePauser(address):['1']
	configureMinter(address,uint256):['12', '13']
	approve(address,uint256):['10']
	updateMasterMinter(address):['8']
	updateBlacklister(address):['2']
	blacklist(address):['3']
	burn(uint256):['11', '9']
	transferOwnership(address):['0']
	mint(address,uint256):['11', '9', '13']
	transfer(address,uint256):['9']
	transferFrom(address,address,uint256):['9', '10']
	initialize(string,string,string,uint8,address,address,address,address):['4', '5']
============================
iteration:3
targets:['mint(address,uint256)', 'burn(uint256)', 'removeMinter(address)', 'configureMinter(address,uint256)', 'unBlacklist(address)', 'blacklist(address)', 'unpause()', 'pause()', 'name()', 'symbol()', 'currency()', 'approve(address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'initialize(string,string,string,uint8,address,address,address,address)']
['updatePauser(address)']:writes at the last depth:['1']
['updateMasterMinter(address)']:writes at the last depth:['8']
['approve(address,uint256)']:writes at the last depth:['10']
['updateBlacklister(address)']:writes at the last depth:['2']
['transferOwnership(address)']:writes at the last depth:['0']
['transfer(address,uint256)']:writes at the last depth:['9']
['transferFrom(address,address,uint256)']:writes at the last depth:['10', '9']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['2', '6', '4', '0', '5', '1', '7', '8']
contract coverage: 88.80%
============================
iteration:4
['initialize(string,string,string,uint8,address,address,address,address)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'pause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'removeMinter(address)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'updatePauser(address)']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateMasterMinter(address)']:writes at the last depth:['8']
['initialize(string,string,string,uint8,address,address,address,address)', 'approve(address,uint256)']:writes at the last depth:['10']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateBlacklister(address)']:writes at the last depth:['2']
['initialize(string,string,string,uint8,address,address,address,address)', 'blacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'configureMinter(address,uint256)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['initialize(string,string,string,uint8,address,address,address,address)', 'transfer(address,uint256)']:writes at the last depth:['9']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '9']
contract coverage: 88.80%
============================
iteration:5
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'pause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'removeMinter(address)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updatePauser(address)']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateMasterMinter(address)']:writes at the last depth:['8']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)']:writes at the last depth:['10']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'blacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'configureMinter(address,uint256)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
contract coverage: 88.80%
============================
iteration:6
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'pause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'removeMinter(address)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'updatePauser(address)']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'updateMasterMinter(address)']:writes at the last depth:['8']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'approve(address,uint256)']:writes at the last depth:['10']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'blacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'configureMinter(address,uint256)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'transfer(address,uint256)']:writes at the last depth:['9']
contract coverage: 89.52%
============================
iteration:7
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'configureMinter(address,uint256)', 'updatePauser(address)']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'configureMinter(address,uint256)', 'updateMasterMinter(address)']:writes at the last depth:['8']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'configureMinter(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['10']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'configureMinter(address,uint256)', 'updateBlacklister(address)']:writes at the last depth:['2']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'configureMinter(address,uint256)', 'configureMinter(address,uint256)']:writes at the last depth:['13', '12']
contract coverage: 89.63%
============================
iteration:8
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'blacklist(address)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'blacklist(address)', 'updatePauser(address)']:writes at the last depth:['1']
contract coverage: 89.63%
============================
iteration:9
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'configureMinter(address,uint256)']:writes at the last depth:['13', '12']
contract coverage: 89.63%
============================
iteration:10
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateMasterMinter(address)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateMasterMinter(address)', 'removeMinter(address)']:writes at the last depth:['13', '12']
contract coverage: 89.63%
============================
iteration:11
contract coverage: 89.63%
============================
iteration:12
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'removeMinter(address)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'removeMinter(address)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'removeMinter(address)', 'removeMinter(address)']:writes at the last depth:['13', '12']
contract coverage: 89.63%
============================
iteration:13
contract coverage: 89.63%
============================
iteration:14
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'unBlacklist(address)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'unBlacklist(address)', 'removeMinter(address)']:writes at the last depth:['13', '12']
contract coverage: 89.63%
============================
iteration:15
contract coverage: 89.63%
============================
iteration:16
contract coverage: 89.63%
============================
iteration:17
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'pause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'removeMinter(address)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'updatePauser(address)']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'updateMasterMinter(address)']:writes at the last depth:['8']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'approve(address,uint256)']:writes at the last depth:['10']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'updateBlacklister(address)']:writes at the last depth:['2']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'blacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'configureMinter(address,uint256)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'transfer(address,uint256)']:writes at the last depth:['9']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '9']
contract coverage: 89.63%
============================
iteration:18
contract coverage: 89.63%
============================
iteration:19
contract coverage: 89.63%
============================
iteration:20
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'transferOwnership(address)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'transferOwnership(address)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'transferOwnership(address)', 'pause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'transferOwnership(address)', 'removeMinter(address)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'transferOwnership(address)', 'updatePauser(address)']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'transferOwnership(address)', 'updateMasterMinter(address)']:writes at the last depth:['8']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'transferOwnership(address)', 'approve(address,uint256)']:writes at the last depth:['10']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'transferOwnership(address)', 'updateBlacklister(address)']:writes at the last depth:['2']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'transferOwnership(address)', 'blacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'transferOwnership(address)', 'configureMinter(address,uint256)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'transferOwnership(address)', 'transfer(address,uint256)']:writes at the last depth:['9']
contract coverage: 96.29%
============================
iteration:21
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'configureMinter(address,uint256)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'configureMinter(address,uint256)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'configureMinter(address,uint256)', 'pause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'configureMinter(address,uint256)', 'removeMinter(address)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'configureMinter(address,uint256)', 'updatePauser(address)']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'configureMinter(address,uint256)', 'updateMasterMinter(address)']:writes at the last depth:['8']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'configureMinter(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['10']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'configureMinter(address,uint256)', 'updateBlacklister(address)']:writes at the last depth:['2']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'configureMinter(address,uint256)', 'blacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'configureMinter(address,uint256)', 'configureMinter(address,uint256)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'configureMinter(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'configureMinter(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['9']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'configureMinter(address,uint256)', 'mint(address,uint256)']:writes at the last depth:['13', '11', '9']
contract coverage: 96.56%
============================
iteration:22
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'blacklist(address)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'blacklist(address)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'blacklist(address)', 'pause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'blacklist(address)', 'removeMinter(address)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'blacklist(address)', 'updatePauser(address)']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'blacklist(address)', 'updateMasterMinter(address)']:writes at the last depth:['8']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'blacklist(address)', 'approve(address,uint256)']:writes at the last depth:['10']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'blacklist(address)', 'updateBlacklister(address)']:writes at the last depth:['2']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'blacklist(address)', 'blacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'blacklist(address)', 'configureMinter(address,uint256)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'blacklist(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'blacklist(address)', 'transfer(address,uint256)']:writes at the last depth:['9']
contract coverage: 96.56%
============================
iteration:23
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'updateBlacklister(address)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'updateBlacklister(address)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'updateBlacklister(address)', 'pause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'updateBlacklister(address)', 'removeMinter(address)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'updateBlacklister(address)', 'updatePauser(address)']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'updateBlacklister(address)', 'updateMasterMinter(address)']:writes at the last depth:['8']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'updateBlacklister(address)', 'approve(address,uint256)']:writes at the last depth:['10']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'updateBlacklister(address)', 'updateBlacklister(address)']:writes at the last depth:['2']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'updateBlacklister(address)', 'blacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'updateBlacklister(address)', 'configureMinter(address,uint256)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'updateBlacklister(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'updateBlacklister(address)', 'transfer(address,uint256)']:writes at the last depth:['9']
contract coverage: 96.56%
============================
iteration:24
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)', 'approve(address,uint256)', 'unBlacklist(address)']:writes at the last depth:['3']
contract coverage: 96.56%
============================
iteration:25
contract coverage: 96.56%
============================
iteration:26
contract coverage: 96.56%
============================
iteration:27
contract coverage: 96.56%
============================
iteration:28
contract coverage: 96.56%
============================
iteration:29
contract coverage: 96.56%
============================
iteration:30
contract coverage: 96.56%
============================
iteration:31
contract coverage: 96.56%
============================
iteration:32
contract coverage: 96.56%
============================
iteration:33
contract coverage: 96.56%
============================
iteration:34
contract coverage: 96.56%
============================
iteration:35
contract coverage: 96.56%
============================
iteration:36
contract coverage: 96.56%
============================
iteration:37
contract coverage: 96.56%
============================
iteration:38
contract coverage: 96.56%
============================
iteration:39
contract coverage: 96.56%
============================
iteration:40
contract coverage: 96.56%
============================
iteration:41
contract coverage: 96.56%
============================
iteration:42
contract coverage: 96.56%
============================
iteration:43
contract coverage: 96.56%
============================
iteration:44
contract coverage: 96.56%
============================
iteration:45
contract coverage: 96.56%
============================
iteration:46
contract coverage: 96.56%
============================
iteration:47
contract coverage: 96.56%
============================
iteration:48
contract coverage: 96.56%
============================
iteration:49
contract coverage: 96.56%
============================
iteration:50
contract coverage: 96.56%
============================
iteration:51
contract coverage: 96.56%
============================
iteration:52
contract coverage: 96.56%
============================
iteration:53
contract coverage: 96.56%
============================
iteration:54
contract coverage: 96.56%
============================
iteration:55
contract coverage: 96.56%
============================
iteration:56
contract coverage: 96.56%
============================
iteration:57
contract coverage: 96.56%
============================
iteration:58
contract coverage: 96.56%
============================
iteration:59
contract coverage: 96.56%
============================
iteration:60
contract coverage: 96.56%
============================
iteration:61
contract coverage: 96.56%
============================
iteration:62
contract coverage: 96.56%
============================
iteration:63
contract coverage: 96.56%
============================
iteration:64
contract coverage: 96.56%
============================
iteration:65
contract coverage: 96.56%
============================
iteration:66
contract coverage: 96.56%
============================
iteration:67
contract coverage: 96.56%
============================
iteration:68
contract coverage: 96.56%
============================
iteration:69
contract coverage: 96.56%
============================
iteration:70
contract coverage: 96.56%
============================
iteration:71
contract coverage: 96.56%
============================
iteration:72
contract coverage: 96.56%
============================
iteration:73
contract coverage: 96.56%
============================
iteration:74
contract coverage: 96.56%
============================
iteration:75
contract coverage: 96.56%
============================
iteration:76
contract coverage: 96.56%
============================
iteration:77
contract coverage: 96.56%
============================
iteration:78
contract coverage: 96.56%
============================
iteration:79
contract coverage: 96.56%
============================
iteration:80
contract coverage: 96.56%
============================
iteration:81
contract coverage: 96.56%
============================
iteration:82
contract coverage: 96.56%
============================
iteration:83
contract coverage: 96.56%
============================
iteration:84
contract coverage: 96.56%
============================
iteration:85
contract coverage: 96.56%
============================
iteration:86
contract coverage: 96.56%
============================
iteration:87
contract coverage: 96.56%
============================
iteration:88
contract coverage: 96.56%
============================
iteration:89
contract coverage: 96.56%
============================
iteration:90
contract coverage: 96.56%
============================
iteration:91
contract coverage: 96.56%
============================
iteration:92
contract coverage: 96.56%
============================
iteration:93
contract coverage: 96.56%
============================
iteration:94
contract coverage: 96.56%
============================
iteration:95
contract coverage: 96.56%
============================
iteration:96
contract coverage: 96.56%
============================
iteration:97
contract coverage: 96.56%
============================
iteration:98
contract coverage: 96.56%
============================
iteration:99
contract coverage: 96.56%
============================
iteration:100
contract coverage: 96.56%
============================
iteration:101
contract coverage: 96.56%
============================
iteration:102
contract coverage: 96.56%
============================
iteration:103
contract coverage: 96.56%
============================
iteration:104
contract coverage: 96.56%
============================
iteration:105
contract coverage: 96.56%
============================
iteration:106
contract coverage: 96.56%
============================
iteration:107
contract coverage: 96.56%
============================
iteration:108
contract coverage: 96.56%
============================
iteration:109
contract coverage: 96.56%
============================
iteration:110
contract coverage: 96.56%
#@statespace
4392 nodes, 4391 edges, 68557 total states
#@coverage
Achieved 1.26% coverage for code: 60806040526000600160146101000a81548160ff0219169083151502179055506000600b5561003c33610041640100000000026401000000009004565b610084565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612f5b806100936000396000f30060806040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610190578063095ea7b31461022057806318160ddd146102855780631a895266146102b057806323b872dd146102f35780633092afd514610378578063313ce567146103d35780633357162b1461040457806335d99f35146105865780633f4ba83a146105dd57806340c10f19146105f457806342966c68146106595780634e44d95614610686578063554bab3c146106eb5780635c975abb1461072e57806370a082311461075d5780638456cb59146107b45780638a6db9c3146107cb5780638da5cb5b1461082257806395d89b41146108795780639fd0506d14610909578063a9059cbb14610960578063aa20e1e4146109c5578063aa271e1a14610a08578063ad38bf2214610a63578063bd10243014610aa6578063dd62ed3e14610afd578063e5a6b10f14610b74578063f2fde38b14610c04578063f9f92be414610c47578063fe575a8714610c8a575b600080fd5b34801561019c57600080fd5b506101a5610ce5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e55780820151818401526020810190506101ca565b50505050905090810190601f1680156102125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022c57600080fd5b5061026b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d83565b604051808215151515815260200191505060405180910390f35b34801561029157600080fd5b5061029a610f53565b6040518082815260200191505060405180910390f35b3480156102bc57600080fd5b506102f1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f5d565b005b3480156102ff57600080fd5b5061035e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611057565b604051808215151515815260200191505060405180910390f35b34801561038457600080fd5b506103b9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611556565b604051808215151515815260200191505060405180910390f35b3480156103df57600080fd5b506103e861169d565b604051808260ff1660ff16815260200191505060405180910390f35b34801561041057600080fd5b50610584600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116b0565b005b34801561059257600080fd5b5061059b61190d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105e957600080fd5b506105f2611933565b005b34801561060057600080fd5b5061063f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506119d8565b604051808215151515815260200191505060405180910390f35b34801561066557600080fd5b5061068460048036038101908080359060200190929190505050611d7a565b005b34801561069257600080fd5b506106d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611fe1565b604051808215151515815260200191505060405180910390f35b3480156106f757600080fd5b5061072c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061214f565b005b34801561073a57600080fd5b50610743612275565b604051808215151515815260200191505060405180910390f35b34801561076957600080fd5b5061079e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612288565b6040518082815260200191505060405180910390f35b3480156107c057600080fd5b506107c96122d1565b005b3480156107d757600080fd5b5061080c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612375565b6040518082815260200191505060405180910390f35b34801561082e57600080fd5b506108376123be565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561088557600080fd5b5061088e6123e7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108ce5780820151818401526020810190506108b3565b50505050905090810190601f1680156108fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561091557600080fd5b5061091e612485565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561096c57600080fd5b506109ab600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506124ab565b604051808215151515815260200191505060405180910390f35b3480156109d157600080fd5b50610a06600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506127ae565b005b348015610a1457600080fd5b50610a49600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128d4565b604051808215151515815260200191505060405180910390f35b348015610a6f57600080fd5b50610aa4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061292a565b005b348015610ab257600080fd5b50610abb612a50565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b0957600080fd5b50610b5e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a76565b6040518082815260200191505060405180910390f35b348015610b8057600080fd5b50610b89612afd565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610bc9578082015181840152602081019050610bae565b50505050905090810190601f168015610bf65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610c1057600080fd5b50610c45600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b9b565b005b348015610c5357600080fd5b50610c88600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612cc2565b005b348015610c9657600080fd5b50610ccb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612dbc565b604051808215151515815260200191505060405180910390f35b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d7b5780601f10610d5057610100808354040283529160200191610d7b565b820191906000526020600020905b815481529060010190602001808311610d5e57829003601f168201915b505050505081565b6000600160149054906101000a900460ff16151515610da157600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610e0157600080fd5b8360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610e6157600080fd5b83600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925866040518082815260200191505060405180910390a360019250505092915050565b6000600b54905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fb957600080fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f117e3210bb9aa7d9baff172026820255c6f6c30ba8999d1c2fd88e2848137c4e60405160405180910390a250565b6000600160149054906101000a900460ff1615151561107557600080fd5b8260001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156110d557600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561113557600080fd5b8560001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561119557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141515156111d157600080fd5b600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054851115151561121f57600080fd5b600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485111515156112aa57600080fd5b6112fc85600960008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e1290919063ffffffff16565b600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061139185600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e2b90919063ffffffff16565b600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061146385600a60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e1290919063ffffffff16565b600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a3600193505050509392505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115b457600080fd5b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a260019050919050565b600660009054906101000a900460ff1681565b600860149054906101000a900460ff161515156116cc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561170857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561174457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561178057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156117bc57600080fd5b87600490805190602001906117d2929190612e8a565b5086600590805190602001906117e9929190612e8a565b508560079080519060200190611800929190612e8a565b5084600660006101000a81548160ff021916908360ff16021790555083600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506118e881612e47565b6001600860146101000a81548160ff0219169083151502179055505050505050505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561198f57600080fd5b6000600160146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600080600160149054906101000a900460ff161515156119f757600080fd5b60011515600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611a5657600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611ab657600080fd5b8460001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611b1657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515611b5257600080fd5b600085111515611b6157600080fd5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250828511151515611bb257600080fd5b611bc785600b54612e2b90919063ffffffff16565b600b81905550611c1f85600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e2b90919063ffffffff16565b600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c758584612e1290919063ffffffff16565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8876040518082815260200191505060405180910390a38573ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a36001935050505092915050565b6000600160149054906101000a900460ff16151515611d9857600080fd5b60011515600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611df757600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611e5757600080fd5b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150600083111515611ea857600080fd5b828210151515611eb757600080fd5b611ecc83600b54612e1290919063ffffffff16565b600b81905550611ee58383612e1290919063ffffffff16565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5846040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3505050565b6000600160149054906101000a900460ff16151515611fff57600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561205b57600080fd5b6001600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f46980fca912ef9bcdbd36877427b6b90e860769f604e89c0e67720cece530d20836040518082815260200191505060405180910390a26001905092915050565b6121576123be565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561219057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156121cc57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a60460405160405180910390a250565b600160149054906101000a900460ff1681565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561232d57600080fd5b60018060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561247d5780601f106124525761010080835404028352916020019161247d565b820191906000526020600020905b81548152906001019060200180831161246057829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160149054906101000a900460ff161515156124c957600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561252957600080fd5b8360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561258957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515156125c557600080fd5b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054841115151561261357600080fd5b61266584600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e1290919063ffffffff16565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506126fa84600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e2b90919063ffffffff16565b600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b6127b66123be565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127ef57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561282b57600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdb66dfa9c6b8f5226fe9aac7e51897ae8ee94ac31dc70bb6c9900b2574b707e660405160405180910390a250565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6129326123be565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561296b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156129a757600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fc67398012c111ce95ecb7429b933096c977380ee6c421175a71a4a4c6c88c06e60405160405180910390a250565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b935780601f10612b6857610100808354040283529160200191612b93565b820191906000526020600020905b815481529060010190602001808311612b7657829003601f168201915b505050505081565b612ba36123be565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bdc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612c1857600080fd5b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0612c416123be565b82604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1612cbf81612e47565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612d1e57600080fd5b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b85560405160405180910390a250565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000828211151515612e2057fe5b818303905092915050565b60008183019050828110151515612e3e57fe5b80905092915050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612ecb57805160ff1916838001178555612ef9565b82800160010185558215612ef9579182015b82811115612ef8578251825591602001919060010190612edd565b5b509050612f069190612f0a565b5090565b612f2c91905b80821115612f28576000816000905550600101612f10565b5090565b905600a165627a7a72305820bd60b3778b0fbffb0cf1fba5db348b9d8c8b1d978dfe5b61c6cb2ad3c3e801b20029
#@coverage
Achieved 96.56% coverage for code: 60806040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610190578063095ea7b31461022057806318160ddd146102855780631a895266146102b057806323b872dd146102f35780633092afd514610378578063313ce567146103d35780633357162b1461040457806335d99f35146105865780633f4ba83a146105dd57806340c10f19146105f457806342966c68146106595780634e44d95614610686578063554bab3c146106eb5780635c975abb1461072e57806370a082311461075d5780638456cb59146107b45780638a6db9c3146107cb5780638da5cb5b1461082257806395d89b41146108795780639fd0506d14610909578063a9059cbb14610960578063aa20e1e4146109c5578063aa271e1a14610a08578063ad38bf2214610a63578063bd10243014610aa6578063dd62ed3e14610afd578063e5a6b10f14610b74578063f2fde38b14610c04578063f9f92be414610c47578063fe575a8714610c8a575b600080fd5b34801561019c57600080fd5b506101a5610ce5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e55780820151818401526020810190506101ca565b50505050905090810190601f1680156102125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022c57600080fd5b5061026b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d83565b604051808215151515815260200191505060405180910390f35b34801561029157600080fd5b5061029a610f53565b6040518082815260200191505060405180910390f35b3480156102bc57600080fd5b506102f1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f5d565b005b3480156102ff57600080fd5b5061035e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611057565b604051808215151515815260200191505060405180910390f35b34801561038457600080fd5b506103b9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611556565b604051808215151515815260200191505060405180910390f35b3480156103df57600080fd5b506103e861169d565b604051808260ff1660ff16815260200191505060405180910390f35b34801561041057600080fd5b50610584600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116b0565b005b34801561059257600080fd5b5061059b61190d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105e957600080fd5b506105f2611933565b005b34801561060057600080fd5b5061063f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506119d8565b604051808215151515815260200191505060405180910390f35b34801561066557600080fd5b5061068460048036038101908080359060200190929190505050611d7a565b005b34801561069257600080fd5b506106d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611fe1565b604051808215151515815260200191505060405180910390f35b3480156106f757600080fd5b5061072c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061214f565b005b34801561073a57600080fd5b50610743612275565b604051808215151515815260200191505060405180910390f35b34801561076957600080fd5b5061079e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612288565b6040518082815260200191505060405180910390f35b3480156107c057600080fd5b506107c96122d1565b005b3480156107d757600080fd5b5061080c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612375565b6040518082815260200191505060405180910390f35b34801561082e57600080fd5b506108376123be565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561088557600080fd5b5061088e6123e7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108ce5780820151818401526020810190506108b3565b50505050905090810190601f1680156108fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561091557600080fd5b5061091e612485565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561096c57600080fd5b506109ab600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506124ab565b604051808215151515815260200191505060405180910390f35b3480156109d157600080fd5b50610a06600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506127ae565b005b348015610a1457600080fd5b50610a49600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128d4565b604051808215151515815260200191505060405180910390f35b348015610a6f57600080fd5b50610aa4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061292a565b005b348015610ab257600080fd5b50610abb612a50565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b0957600080fd5b50610b5e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a76565b6040518082815260200191505060405180910390f35b348015610b8057600080fd5b50610b89612afd565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610bc9578082015181840152602081019050610bae565b50505050905090810190601f168015610bf65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610c1057600080fd5b50610c45600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b9b565b005b348015610c5357600080fd5b50610c88600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612cc2565b005b348015610c9657600080fd5b50610ccb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612dbc565b604051808215151515815260200191505060405180910390f35b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d7b5780601f10610d5057610100808354040283529160200191610d7b565b820191906000526020600020905b815481529060010190602001808311610d5e57829003601f168201915b505050505081565b6000600160149054906101000a900460ff16151515610da157600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610e0157600080fd5b8360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610e6157600080fd5b83600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925866040518082815260200191505060405180910390a360019250505092915050565b6000600b54905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fb957600080fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f117e3210bb9aa7d9baff172026820255c6f6c30ba8999d1c2fd88e2848137c4e60405160405180910390a250565b6000600160149054906101000a900460ff1615151561107557600080fd5b8260001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156110d557600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561113557600080fd5b8560001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561119557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141515156111d157600080fd5b600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054851115151561121f57600080fd5b600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485111515156112aa57600080fd5b6112fc85600960008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e1290919063ffffffff16565b600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061139185600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e2b90919063ffffffff16565b600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061146385600a60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e1290919063ffffffff16565b600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a3600193505050509392505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115b457600080fd5b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a260019050919050565b600660009054906101000a900460ff1681565b600860149054906101000a900460ff161515156116cc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561170857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561174457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561178057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156117bc57600080fd5b87600490805190602001906117d2929190612e8a565b5086600590805190602001906117e9929190612e8a565b508560079080519060200190611800929190612e8a565b5084600660006101000a81548160ff021916908360ff16021790555083600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506118e881612e47565b6001600860146101000a81548160ff0219169083151502179055505050505050505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561198f57600080fd5b6000600160146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600080600160149054906101000a900460ff161515156119f757600080fd5b60011515600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611a5657600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611ab657600080fd5b8460001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611b1657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515611b5257600080fd5b600085111515611b6157600080fd5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250828511151515611bb257600080fd5b611bc785600b54612e2b90919063ffffffff16565b600b81905550611c1f85600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e2b90919063ffffffff16565b600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c758584612e1290919063ffffffff16565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8876040518082815260200191505060405180910390a38573ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a36001935050505092915050565b6000600160149054906101000a900460ff16151515611d9857600080fd5b60011515600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611df757600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611e5757600080fd5b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150600083111515611ea857600080fd5b828210151515611eb757600080fd5b611ecc83600b54612e1290919063ffffffff16565b600b81905550611ee58383612e1290919063ffffffff16565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5846040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3505050565b6000600160149054906101000a900460ff16151515611fff57600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561205b57600080fd5b6001600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f46980fca912ef9bcdbd36877427b6b90e860769f604e89c0e67720cece530d20836040518082815260200191505060405180910390a26001905092915050565b6121576123be565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561219057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156121cc57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a60460405160405180910390a250565b600160149054906101000a900460ff1681565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561232d57600080fd5b60018060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561247d5780601f106124525761010080835404028352916020019161247d565b820191906000526020600020905b81548152906001019060200180831161246057829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160149054906101000a900460ff161515156124c957600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561252957600080fd5b8360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561258957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515156125c557600080fd5b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054841115151561261357600080fd5b61266584600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e1290919063ffffffff16565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506126fa84600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e2b90919063ffffffff16565b600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b6127b66123be565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127ef57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561282b57600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdb66dfa9c6b8f5226fe9aac7e51897ae8ee94ac31dc70bb6c9900b2574b707e660405160405180910390a250565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6129326123be565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561296b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156129a757600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fc67398012c111ce95ecb7429b933096c977380ee6c421175a71a4a4c6c88c06e60405160405180910390a250565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b935780601f10612b6857610100808354040283529160200191612b93565b820191906000526020600020905b815481529060010190602001808311612b7657829003601f168201915b505050505081565b612ba36123be565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bdc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612c1857600080fd5b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0612c416123be565b82604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1612cbf81612e47565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612d1e57600080fd5b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b85560405160405180910390a250565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000828211151515612e2057fe5b818303905092915050565b60008183019050828110151515612e3e57fe5b80905092915050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612ecb57805160ff1916838001178555612ef9565b82800160010185558215612ef9579182015b82811115612ef8578251825591602001919060010190612edd565b5b509050612f069190612f0a565b5090565b612f2c91905b80821115612f28576000816000905550600101612f10565b5090565b905600a165627a7a72305820bd60b3778b0fbffb0cf1fba5db348b9d8c8b1d978dfe5b61c6cb2ad3c3e801b20029
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV1
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 1068
Estimated Gas Usage: 86311 - 397599
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x22a39c2dd54b71ac884657bb3e37308abe2d02e1.sol:253

function initialize(
        string _name,
        string _symbol,
        string _currency,
        uint8 _decimals,
        address _masterMinter,
        address _pauser,
        address _blacklister,
        address _owner
    ) public {
        require(!initialized);
        require(_masterMinter != address(0));
        require(_pauser != address(0));
        require(_blacklister != address(0));
        require(_owner != address(0));

        name = _name;
        symbol = _symbol;
        currency = _currency;
        decimals = _decimals;
        masterMinter = _masterMinter;
        pauser = _pauser;
        blacklister = _blacklister;
        setOwner(_owner);
        initialized = true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdcffffffffffffffffffffffff00000000000000000000000000000000000000008000000000000001a00004000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002100801040101100104010401404010010180040000000000000000000000008008010410010410081080400001080180020104000000000000000000000000010280010280010208040808020801010201020100000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV1
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 1074
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x22a39c2dd54b71ac884657bb3e37308abe2d02e1.sol:253

function initialize(
        string _name,
        string _symbol,
        string _currency,
        uint8 _decimals,
        address _masterMinter,
        address _pauser,
        address _blacklister,
        address _owner
    ) public {
        require(!initialized);
        require(_masterMinter != address(0));
        require(_pauser != address(0));
        require(_blacklister != address(0));
        require(_owner != address(0));

        name = _name;
        symbol = _symbol;
        currency = _currency;
        decimals = _decimals;
        masterMinter = _masterMinter;
        pauser = _pauser;
        blacklister = _blacklister;
        setOwner(_owner);
        initialized = true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00c02894000481102180000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaafffffffffffffffffffffffffffffffffffffffffeffffffffffffffffffffbaffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2000100040000102011008080102022000808080ffffffffffffffffffffffff2080200280084004204040020820100808400440ffffffffffffffffffffffff4002800280020402040280020101802020104001ffffffffffffffffffffffff08, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV1
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 1083
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x22a39c2dd54b71ac884657bb3e37308abe2d02e1.sol:253

function initialize(
        string _name,
        string _symbol,
        string _currency,
        uint8 _decimals,
        address _masterMinter,
        address _pauser,
        address _blacklister,
        address _owner
    ) public {
        require(!initialized);
        require(_masterMinter != address(0));
        require(_pauser != address(0));
        require(_blacklister != address(0));
        require(_owner != address(0));

        name = _name;
        symbol = _symbol;
        currency = _currency;
        decimals = _decimals;
        masterMinter = _masterMinter;
        pauser = _pauser;
        blacklister = _blacklister;
        setOwner(_owner);
        initialized = true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162b800000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef8000000000008000000000020000000000000000000000000000000000000ffd0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004000000000000000000000000001010101080101010101010101011001010101010000000000000000000000000102010101010101010101010401000201010101000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV1
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 1089
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x22a39c2dd54b71ac884657bb3e37308abe2d02e1.sol:253

function initialize(
        string _name,
        string _symbol,
        string _currency,
        uint8 _decimals,
        address _masterMinter,
        address _pauser,
        address _blacklister,
        address _owner
    ) public {
        require(!initialized);
        require(_masterMinter != address(0));
        require(_pauser != address(0));
        require(_blacklister != address(0));
        require(_owner != address(0));

        name = _name;
        symbol = _symbol;
        currency = _currency;
        decimals = _decimals;
        masterMinter = _masterMinter;
        pauser = _pauser;
        blacklister = _blacklister;
        setOwner(_owner);
        initialized = true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162b8000089d1a7200085013393e0100080000000000000006001400000000000000c00000000000000000000000000000000000000000000000000000000000000080000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010110010120044002012010200140018040010000000000000000000000000110100401040208080080080202808004014001000000000000000000000000010201010120010108010101080101010101010100000000000000000000000008, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV1
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 1144
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x22a39c2dd54b71ac884657bb3e37308abe2d02e1.sol:253

function initialize(
        string _name,
        string _symbol,
        string _currency,
        uint8 _decimals,
        address _masterMinter,
        address _pauser,
        address _blacklister,
        address _owner
    ) public {
        require(!initialized);
        require(_masterMinter != address(0));
        require(_pauser != address(0));
        require(_blacklister != address(0));
        require(_owner != address(0));

        name = _name;
        symbol = _symbol;
        currency = _currency;
        decimals = _decimals;
        masterMinter = _masterMinter;
        pauser = _pauser;
        blacklister = _blacklister;
        setOwner(_owner);
        initialized = true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00000000000000000000000000000000000000000000000000000000000000060a00000000000000000000000000000000000000000000000000000000000001afffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000010011001080104800102010201010820102004040000000000000000000000001004021040101040020208010808102001028000000000000000000000000000020001010101010102200100100201020140010100000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV1
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 1153
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x22a39c2dd54b71ac884657bb3e37308abe2d02e1.sol:253

function initialize(
        string _name,
        string _symbol,
        string _currency,
        uint8 _decimals,
        address _masterMinter,
        address _pauser,
        address _blacklister,
        address _owner
    ) public {
        require(!initialized);
        require(_masterMinter != address(0));
        require(_pauser != address(0));
        require(_blacklister != address(0));
        require(_owner != address(0));

        name = _name;
        symbol = _symbol;
        currency = _currency;
        decimals = _decimals;
        masterMinter = _masterMinter;
        pauser = _pauser;
        blacklister = _blacklister;
        setOwner(_owner);
        initialized = true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000040082004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162b800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000007800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220201010101010101ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc2000000000000000000000000048020802040080801014020100280100180400100000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV1
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 1159
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x22a39c2dd54b71ac884657bb3e37308abe2d02e1.sol:253

function initialize(
        string _name,
        string _symbol,
        string _currency,
        uint8 _decimals,
        address _masterMinter,
        address _pauser,
        address _blacklister,
        address _owner
    ) public {
        require(!initialized);
        require(_masterMinter != address(0));
        require(_pauser != address(0));
        require(_blacklister != address(0));
        require(_owner != address(0));

        name = _name;
        symbol = _symbol;
        currency = _currency;
        decimals = _decimals;
        masterMinter = _masterMinter;
        pauser = _pauser;
        blacklister = _blacklister;
        setOwner(_owner);
        initialized = true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0xf00040020296110, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe2648632021418040000010402040000000000000000000000000000000000000000837ea21539e10100000000000000000000008000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001080801010210010201040410080401010201010000000000000000000000000101200440010101800201100110010120010104000000000000000000000000404001080101010101020108040180010104020100000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV1
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 1229
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x22a39c2dd54b71ac884657bb3e37308abe2d02e1.sol:253

function initialize(
        string _name,
        string _symbol,
        string _currency,
        uint8 _decimals,
        address _masterMinter,
        address _pauser,
        address _blacklister,
        address _owner
    ) public {
        require(!initialized);
        require(_masterMinter != address(0));
        require(_pauser != address(0));
        require(_blacklister != address(0));
        require(_owner != address(0));

        name = _name;
        symbol = _symbol;
        currency = _currency;
        decimals = _decimals;
        masterMinter = _masterMinter;
        pauser = _pauser;
        blacklister = _blacklister;
        setOwner(_owner);
        initialized = true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162b8040000000140000000000000000000000000000000000000000000000000023800220000420246004000000000000000000000000000000003ffffffffffffc800000000000000080000000000000042930000000000000000000000000009f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010010101010101010108010101010101010180010000000000000000000000008001010101010401010101010101040101010101000000000000000000000000010101010101010101010001080101010101010100000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV1
Function name: name()
PC address: 3317
Estimated Gas Usage: 4111 - 5712
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x22a39c2dd54b71ac884657bb3e37308abe2d02e1.sol:234

string public name

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162b800000006850580000008000deadbeefdeadbeefdeadbeefdeadbeefdeadbee880000000000000000000000000000000000000000000000000000000000000088df3afc4bd3b2600010000000400000201b40000000200800000022000000029000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010102080101010101010110010102020101020000000000000000000000000101010101010101010110010102010101010101000000000000000000000000012001010101010101010101020202010120100100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: name(), txdata: 0x06fdde03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV1
Function name: currency()
PC address: 11021
Estimated Gas Usage: 4771 - 6890
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x22a39c2dd54b71ac884657bb3e37308abe2d02e1.sol:237

string public currency

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162b8000000000007ff620e77ffe000000000000000000000000000000000000400080000000000000000000000000000000000000000000000000008000000000008455e2431d594542fce6db26589eb0ae10ee59ccc8f1458e11ebc20000000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010120010102010240100120100104018080020000000000000000000000008001101002010801010401800101200201040102000000000000000000000000802020010108800480022001010801040180800100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: currency(), txdata: 0xe5a6b10f, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV1
Function name: currency()
PC address: 11073
Estimated Gas Usage: 4771 - 6890
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x22a39c2dd54b71ac884657bb3e37308abe2d02e1.sol:237

string public currency

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162b8000000000007ff620e77ffe000000000000000000000000000000000000400080000000000000000000000000000000000000000000000000008000000000008455e2431d594542fce6db26589eb0ae10ee59ccc8f1458e11ebc20000000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010120010102010240100120100104018080020000000000000000000000008001101002010801010401800101200201040102000000000000000000000000802020010108800480022001010801040180800100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: currency(), txdata: 0xe5a6b10f, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: FiatTokenV1
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 11982
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162bf48e711084800000000000000000000000000000000000000000000000000068800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004040101010110201004010108802001010104010000000000000000000000000202010220010202800120010100000000000000000000000000000000000000000000000000000000000000240801018040042000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: FiatTokenV1
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 11996
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08000000004000000000000000000000000000000000000000000000000000003fffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffba000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080012001100201040480014010800801012002020000000000000000000000000401800201200202100010100120100801088040000000000000000000000000010102040404011004010410800204014040100100000000000000000000000004, value: 0x0


time_used: 36062.774028778076 seconds
#@contract_info_time
0x22a39c2dd54b71ac884657bb3e37308abe2d02e1.sol:0.4.24:FiatTokenV1:36062.774028778076:36100:60:36000
