++++ 0x4c985a5a02a70e78f9c4474e73120884562c852a.sol  :  0.4.18  :  SetStepFunctionWrapper ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 3503
['constructor']:writes at the last depth:['0', '2', '4', '4']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 77.99% coverage.
dynamic svars:['4', '5', '3', '2']
static svars:['6', '1', '0']
Ending preprocessing.
preprocessing time(s): 99.92170238494873
contract coverage: 87.64%
claimAdmin() is not reachable
removeAlerter(address) is not reachable
getAlerters() is not reachable
removeOperator(address) is not reachable
addAlerter(address) is not reachable
Function Reads: State variables read in conditions
	removeAlerter(address):[]
	pendingAdmin():[]
	getOperators():[]
	withdrawToken(address,uint256,address):[]
	addAlerter(address):[]
	transferAdmin(address):[]
	claimAdmin():[]
	transferAdminQuickly(address):[]
	getAlerters():[]
	addOperator(address):[]
	removeOperator(address):[]
	setImbalanceStepFunction(address,int256[],int256[],int256[],int256[]):[]
	setConversionRateAddress(address):[]
	withdrawEther(uint256,address):[]
	rateContract():[]
	admin():[]
Function Writes: State variables written
	removeAlerter(address):['3', '5']
	setConversionRateAddress(address):['6']
	transferAdmin(address):['1']
	claimAdmin():['0', '1']
	removeOperator(address):['2']
	transferAdminQuickly(address):['0']
	addAlerter(address):['3', '5']
	addOperator(address):['2', '4']
============================
iteration:3
targets:['claimAdmin()', 'removeAlerter(address)', 'getAlerters()', 'removeOperator(address)', 'addAlerter(address)']
['setConversionRateAddress(address)']:writes at the last depth:['6']
['transferAdmin(address)']:writes at the last depth:['1']
['withdrawEther(uint256,address)']:writes at the last depth:[]
['transferAdminQuickly(address)']:writes at the last depth:['0']
['withdrawToken(address,uint256,address)']:writes at the last depth:[]
['addAlerter(address)']:writes at the last depth:['', '3', '5']
['addOperator(address)']:writes at the last depth:['', '4', '2']
['removeOperator(address)']:writes at the last depth:['', '4', '2']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
contract coverage: 87.64%
============================
iteration:4
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setConversionRateAddress(address)']:writes at the last depth:['6']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'transferAdmin(address)']:writes at the last depth:['1']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'withdrawEther(uint256,address)']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'transferAdminQuickly(address)']:writes at the last depth:['0']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'withdrawToken(address,uint256,address)']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'addAlerter(address)']:writes at the last depth:['', '3', '5']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'addOperator(address)']:writes at the last depth:['', '4', '2']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'removeOperator(address)']:writes at the last depth:['', '4', '2']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
contract coverage: 87.64%
============================
iteration:5
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setConversionRateAddress(address)']:writes at the last depth:['6']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'transferAdmin(address)']:writes at the last depth:['1']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'withdrawEther(uint256,address)']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'transferAdminQuickly(address)']:writes at the last depth:['0']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'withdrawToken(address,uint256,address)']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'addAlerter(address)']:writes at the last depth:['', '3', '5']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'removeOperator(address)']:writes at the last depth:['', '4', '2']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
contract coverage: 87.64%
============================
iteration:6
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setConversionRateAddress(address)']:writes at the last depth:['6']
contract coverage: 87.64%
============================
iteration:7
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'transferAdmin(address)']:writes at the last depth:['1']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'addAlerter(address)']:writes at the last depth:['', '3', '5']
contract coverage: 87.64%
============================
iteration:8
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setConversionRateAddress(address)']:writes at the last depth:['6']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'withdrawEther(uint256,address)']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'addOperator(address)']:writes at the last depth:['', '4', '2']
contract coverage: 87.64%
============================
iteration:9
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'withdrawEther(uint256,address)']:writes at the last depth:[]
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'transferAdminQuickly(address)']:writes at the last depth:['0']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'addAlerter(address)']:writes at the last depth:['', '3', '5']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'addOperator(address)']:writes at the last depth:['', '4', '2']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'removeOperator(address)']:writes at the last depth:['', '4', '2']
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])']:writes at the last depth:[]
contract coverage: 87.64%
============================
iteration:10
['setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'setImbalanceStepFunction(address,int256[],int256[],int256[],int256[])', 'transferAdmin(address)']:writes at the last depth:['1']
contract coverage: 87.64%
============================
iteration:11
contract coverage: 87.64%
============================
iteration:12
contract coverage: 87.64%
============================
iteration:13
contract coverage: 87.64%
============================
iteration:14
contract coverage: 87.64%
============================
iteration:15
contract coverage: 87.64%
============================
iteration:16
contract coverage: 87.64%
============================
iteration:17
contract coverage: 87.64%
============================
iteration:18
contract coverage: 87.64%
============================
iteration:19
contract coverage: 87.64%
============================
iteration:20
contract coverage: 87.64%
============================
iteration:21
contract coverage: 87.64%
============================
iteration:22
contract coverage: 87.64%
============================
iteration:23
contract coverage: 87.64%
============================
iteration:24
contract coverage: 87.64%
============================
iteration:25
contract coverage: 87.64%
============================
iteration:26
contract coverage: 87.64%
============================
iteration:27
contract coverage: 87.64%
============================
iteration:28
contract coverage: 87.64%
============================
iteration:29
contract coverage: 87.64%
============================
iteration:30
contract coverage: 87.64%
============================
iteration:31
contract coverage: 87.64%
============================
iteration:32
contract coverage: 87.64%
============================
iteration:33
contract coverage: 87.64%
============================
iteration:34
contract coverage: 87.64%
============================
iteration:35
contract coverage: 87.64%
============================
iteration:36
contract coverage: 87.64%
============================
iteration:37
contract coverage: 87.64%
============================
iteration:38
contract coverage: 87.64%
============================
iteration:39
contract coverage: 87.64%
============================
iteration:40
contract coverage: 87.64%
============================
iteration:41
contract coverage: 87.64%
============================
iteration:42
contract coverage: 87.64%
============================
iteration:43
contract coverage: 87.64%
============================
iteration:44
contract coverage: 87.64%
============================
iteration:45
contract coverage: 87.64%
============================
iteration:46
contract coverage: 87.64%
============================
iteration:47
contract coverage: 87.64%
============================
iteration:48
contract coverage: 87.64%
============================
iteration:49
contract coverage: 87.64%
============================
iteration:50
contract coverage: 87.64%
============================
iteration:51
contract coverage: 87.64%
============================
iteration:52
contract coverage: 87.64%
============================
iteration:53
contract coverage: 87.64%
============================
iteration:54
contract coverage: 87.64%
============================
iteration:55
contract coverage: 87.64%
============================
iteration:56
contract coverage: 87.64%
============================
iteration:57
contract coverage: 87.64%
============================
iteration:58
contract coverage: 87.64%
============================
iteration:59
contract coverage: 87.64%
============================
iteration:60
contract coverage: 87.64%
============================
iteration:61
contract coverage: 87.64%
============================
iteration:62
contract coverage: 87.64%
============================
iteration:63
contract coverage: 87.64%
============================
iteration:64
contract coverage: 87.64%
============================
iteration:65
contract coverage: 87.64%
============================
iteration:66
contract coverage: 87.64%
============================
iteration:67
contract coverage: 87.64%
============================
iteration:68
contract coverage: 87.64%
============================
iteration:69
contract coverage: 87.64%
============================
iteration:70
contract coverage: 87.64%
============================
iteration:71
contract coverage: 87.64%
============================
iteration:72
contract coverage: 87.64%
============================
iteration:73
contract coverage: 87.64%
============================
iteration:74
contract coverage: 87.64%
============================
iteration:75
contract coverage: 87.64%
============================
iteration:76
contract coverage: 87.64%
============================
iteration:77
contract coverage: 87.64%
============================
iteration:78
contract coverage: 87.64%
============================
iteration:79
contract coverage: 87.64%
============================
iteration:80
contract coverage: 87.64%
============================
iteration:81
contract coverage: 87.64%
============================
iteration:82
contract coverage: 87.64%
============================
iteration:83
contract coverage: 87.64%
============================
iteration:84
contract coverage: 87.64%
============================
iteration:85
contract coverage: 87.64%
============================
iteration:86
contract coverage: 87.64%
============================
iteration:87
contract coverage: 87.64%
============================
iteration:88
contract coverage: 87.64%
============================
iteration:89
contract coverage: 87.64%
============================
iteration:90
contract coverage: 87.64%
============================
iteration:91
contract coverage: 87.64%
============================
iteration:92
contract coverage: 87.64%
============================
iteration:93
contract coverage: 87.64%
============================
iteration:94
contract coverage: 87.64%
============================
iteration:95
contract coverage: 87.64%
============================
iteration:96
contract coverage: 87.64%
============================
iteration:97
contract coverage: 87.64%
============================
iteration:98
contract coverage: 87.64%
============================
iteration:99
contract coverage: 87.64%
============================
iteration:100
contract coverage: 87.64%
============================
iteration:101
contract coverage: 87.64%
============================
iteration:102
contract coverage: 87.64%
============================
iteration:103
contract coverage: 87.64%
============================
iteration:104
contract coverage: 87.64%
============================
iteration:105
contract coverage: 87.64%
============================
iteration:106
contract coverage: 87.64%
============================
iteration:107
contract coverage: 87.64%
============================
iteration:108
contract coverage: 87.64%
============================
iteration:109
contract coverage: 87.64%
============================
iteration:110
contract coverage: 87.64%
============================
iteration:111
contract coverage: 87.64%
============================
iteration:112
contract coverage: 87.64%
============================
iteration:113
contract coverage: 87.64%
============================
iteration:114
contract coverage: 87.64%
============================
iteration:115
contract coverage: 87.64%
============================
iteration:116
contract coverage: 87.64%
============================
iteration:117
contract coverage: 87.64%
============================
iteration:118
contract coverage: 87.64%
============================
iteration:119
contract coverage: 87.64%
============================
iteration:120
contract coverage: 87.64%
============================
iteration:121
contract coverage: 87.64%
============================
iteration:122
contract coverage: 87.64%
============================
iteration:123
contract coverage: 87.64%
============================
iteration:124
contract coverage: 87.64%
============================
iteration:125
contract coverage: 87.64%
============================
iteration:126
contract coverage: 87.64%
============================
iteration:127
contract coverage: 87.64%
============================
iteration:128
contract coverage: 87.64%
============================
iteration:129
contract coverage: 87.64%
============================
iteration:130
contract coverage: 87.64%
============================
iteration:131
contract coverage: 87.64%
============================
iteration:132
contract coverage: 87.64%
============================
iteration:133
contract coverage: 87.64%
============================
iteration:134
contract coverage: 87.64%
============================
iteration:135
contract coverage: 87.64%
============================
iteration:136
contract coverage: 87.64%
============================
iteration:137
contract coverage: 87.64%
============================
iteration:138
contract coverage: 87.64%
============================
iteration:139
contract coverage: 87.64%
============================
iteration:140
contract coverage: 87.64%
============================
iteration:141
contract coverage: 87.64%
============================
iteration:142
contract coverage: 87.64%
============================
iteration:143
contract coverage: 87.64%
============================
iteration:144
contract coverage: 87.64%
============================
iteration:145
contract coverage: 87.64%
============================
iteration:146
contract coverage: 87.64%
============================
iteration:147
contract coverage: 87.64%
============================
iteration:148
contract coverage: 87.64%
============================
iteration:149
contract coverage: 87.64%
============================
iteration:150
contract coverage: 87.64%
============================
iteration:151
contract coverage: 87.64%
============================
iteration:152
contract coverage: 87.64%
============================
iteration:153
contract coverage: 87.64%
============================
iteration:154
contract coverage: 87.64%
============================
iteration:155
contract coverage: 87.64%
============================
iteration:156
contract coverage: 87.64%
============================
iteration:157
contract coverage: 87.64%
============================
iteration:158
contract coverage: 87.64%
============================
iteration:159
contract coverage: 87.64%
============================
iteration:160
contract coverage: 87.64%
============================
iteration:161
contract coverage: 87.64%
============================
iteration:162
contract coverage: 87.64%
============================
iteration:163
contract coverage: 87.64%
============================
iteration:164
contract coverage: 87.64%
============================
iteration:165
contract coverage: 87.64%
============================
iteration:166
contract coverage: 87.64%
============================
iteration:167
contract coverage: 87.64%
============================
iteration:168
contract coverage: 87.64%
============================
iteration:169
contract coverage: 87.64%
============================
iteration:170
contract coverage: 87.64%
============================
iteration:171
contract coverage: 87.64%
============================
iteration:172
contract coverage: 87.64%
============================
iteration:173
contract coverage: 87.64%
============================
iteration:174
contract coverage: 87.64%
============================
iteration:175
contract coverage: 87.64%
============================
iteration:176
contract coverage: 87.64%
============================
iteration:177
contract coverage: 87.64%
============================
iteration:178
contract coverage: 87.64%
============================
iteration:179
contract coverage: 87.64%
============================
iteration:180
contract coverage: 87.64%
============================
iteration:181
contract coverage: 87.64%
============================
iteration:182
contract coverage: 87.64%
============================
iteration:183
contract coverage: 87.64%
============================
iteration:184
contract coverage: 87.64%
============================
iteration:185
contract coverage: 87.64%
============================
iteration:186
contract coverage: 87.64%
============================
iteration:187
contract coverage: 87.64%
============================
iteration:188
contract coverage: 87.64%
============================
iteration:189
contract coverage: 87.64%
============================
iteration:190
contract coverage: 87.64%
============================
iteration:191
contract coverage: 87.64%
============================
iteration:192
contract coverage: 87.64%
============================
iteration:193
contract coverage: 87.64%
============================
iteration:194
contract coverage: 87.64%
============================
iteration:195
contract coverage: 87.64%
============================
iteration:196
contract coverage: 87.64%
============================
iteration:197
contract coverage: 87.64%
============================
iteration:198
contract coverage: 87.64%
============================
iteration:199
contract coverage: 87.64%
============================
iteration:200
contract coverage: 87.64%
============================
iteration:201
contract coverage: 87.64%
============================
iteration:202
contract coverage: 87.64%
============================
iteration:203
contract coverage: 87.64%
============================
iteration:204
contract coverage: 87.64%
============================
iteration:205
contract coverage: 87.64%
============================
iteration:206
contract coverage: 87.64%
============================
iteration:207
contract coverage: 87.64%
============================
iteration:208
contract coverage: 87.64%
============================
iteration:209
contract coverage: 87.64%
============================
iteration:210
contract coverage: 87.64%
============================
iteration:211
contract coverage: 87.64%
============================
iteration:212
contract coverage: 87.64%
============================
iteration:213
contract coverage: 87.64%
============================
iteration:214
contract coverage: 87.64%
============================
iteration:215
contract coverage: 87.64%
============================
iteration:216
contract coverage: 87.64%
============================
iteration:217
contract coverage: 87.64%
============================
iteration:218
contract coverage: 87.64%
============================
iteration:219
contract coverage: 87.64%
#@statespace
6682 nodes, 6681 edges, 112973 total states
#@coverage
Achieved 12.45% coverage for code: 
#@coverage
Achieved 87.64% coverage for code: 6060604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301a12fd3146100eb578063267822471461012457806327a099d8146101795780633ccdbb28146101e3578063408ee7fe1461024457806375829def1461027d57806377f50f97146102b65780637acc8678146102cb5780637c423f54146103045780639870d7fe1461036e578063ac8a584a146103a7578063bc9cbcc8146103e0578063c6d8a20314610519578063ce56c45414610552578063eee2421914610594578063f851a440146105e9575b600080fd5b34156100f657600080fd5b610122600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061063e565b005b341561012f57600080fd5b610137610900565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561018457600080fd5b61018c610926565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101cf5780820151818401526020810190506101b4565b505050509050019250505060405180910390f35b34156101ee57600080fd5b610242600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506109ba565b005b341561024f57600080fd5b61027b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b8a565b005b341561028857600080fd5b6102b4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d80565b005b34156102c157600080fd5b6102c9610ee0565b005b34156102d657600080fd5b610302600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110bc565b005b341561030f57600080fd5b6103176112b1565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561035a57808201518184015260208101905061033f565b505050509050019250505060405180910390f35b341561037957600080fd5b6103a5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611345565b005b34156103b257600080fd5b6103de600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061153b565b005b34156103eb57600080fd5b610517600480803573ffffffffffffffffffffffffffffffffffffffffb005b341561052457600080fd5b610550600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b5e565b005b341561055d57600080fd5b610592600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611bfa565b005b341561059f57600080fd5b6105a7611d04565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105f457600080fd5b6105fc611d2a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561069b57600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156106f357600080fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600090505b6005805490508110156108fc578173ffffffffffffffffffffffffffffffffffffffff1660058281548110151561078357fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156108f15760056001600580549050038154811015156107e257fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660058281548110151561081d57fe5b906000526020600020900160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600580548091906001900361087b9190611d4f565b507f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762826000604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a16108fc565b806001019050610750565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61092e611d7b565b60048054806020026020016040519081016040528092919081815260200182805480156109b057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610966575b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a1557600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610ac057600080fd5b6102c65a03f11515610ad157600080fd5b505050604051805190501515610ae657600080fd5b7f72cb8a894ddb372ceec3d2a7648d86f17d5a15caae0e986c53109b8a9a9385e6838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610be557600080fd5b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610c3e57600080fd5b6032600580549050101515610c5257600080fd5b7f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762816001604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a16001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060058054806001018281610d2e9190611d8f565b9160005260206000209001600083909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ddb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e1757600080fd5b7f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc40600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a180600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610f3c57600080fd5b7f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561111757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561115357600080fd5b7f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc4081604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a17f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed816000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6112b9611d7b565b600580548060200260200160405190810160405280929190818152602001828054801561133b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116112f1575b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a057600080fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156113f957600080fd5b603260048054905010151561140d57600080fd5b7f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b816001604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a16001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600480548060010182816114e99190611d8f565b9160005260206000209001600083909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561159857600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156115f057600080fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600090505b6004805490508110156117fc578173ffffffffffffffffffffffffffffffffffffffff1660048281548110151561168057fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156117f15760046001600480549050038154811015156116df57fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660048281548110151561171a57fe5b906000526020600020900160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160048181805490500391508161177b9190611d4f565b507f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b826000604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a16117fc565b80600101905061164d565b5050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561185a57600080fd5b600090505b845181101561189c576000858281518110151561187857fe5b906020019060200201511215151561188f57600080fd5b808060010191505061185f565b600090505b83518110156118de57600084828151811015156118ba57fe5b90602001906020020151131515156118d157600080fd5b80806001019150506118a1565b600090505b825181101561192057600083828151811015156118fc57fe5b906020019060200201511315151561191357600080fd5b80806001019150506118e3565b600090505b8151811015611962576000828281518110151561193e57fe5b906020019060200201511315151561195557600080fd5b8080600101915050611925565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc9cbcc887878787876040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b83811015611a51578082015181840152602081019050611a36565b50505050905001858103845288818151815260200191508051906020019060200280838360005b83811015611a93578082015181840152602081019050611a78565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015611ad5578082015181840152602081019050611aba565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015611b17578082015181840152602081019050611afc565b505050509050019950505050505050505050600060405180830381600087803b1515611b4257600080fd5b6102c65a03f11515611b5357600080fd5b505050505050505050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611bb657600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c5557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501515611c9557600080fd5b7fec47e7ed86c86774d1a72c19f35c639911393fe7c1a34031fdbd260890da90de8282604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b815481835581811511611d7657818360005260206000209182019101611d759190611dbb565b5b505050565b602060405190810160405280600081525090565b815481835581811511611db657818360005260206000209182019101611db59190611dbb565b5b505050565b611ddd91905b80821115611dd9576000816000905550600101611dc1565b5090565b905600a165627a7a72305820a5aa0890eb02c4761e6ab32d1d2b6039b2535adc58b65b72ad07f433fc9814880029
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SetStepFunctionWrapper
Function name: withdrawToken(address,uint256,address)
PC address: 2758
Estimated Gas Usage: 3694 - 39691
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x4c985a5a02a70e78f9c4474e73120884562c852a.sol:150

token.transfer(sendTo, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000080, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: withdrawToken(address,uint256,address), txdata: 0x3ccdbb28000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: SetStepFunctionWrapper
Function name: withdrawEther(uint256,address)
PC address: 7301
Estimated Gas Usage: 3000 - 38243
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x4c985a5a02a70e78f9c4474e73120884562c852a.sol:158

sendTo.transfer(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000020, decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawEther(uint256,address), txdata: 0xce56c4540000000000000000000000000000000000000000000000000000000000000002000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: (2, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0


time_used: 36059.043332099915 seconds
#@contract_info_time
0x4c985a5a02a70e78f9c4474e73120884562c852a.sol:0.4.18:SetStepFunctionWrapper:36059.043332099915:36100:60:36000
