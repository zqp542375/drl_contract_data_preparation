++++ 0x2CB60a4291CD613aCc1F141bb87B96c2B816dCC7.sol  :  0.5.12  :  GemJoin ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 1593
['constructor']:writes at the last depth:['0', '5', '1', '2', '3', '4']
preprocessing: Achieved 99.25% coverage.
dynamic svars:['0']
static svars:['5', '1', '4', '2', '3']
Ending preprocessing.
preprocessing time(s): 14.047173261642456
contract coverage: 96.86%
join(address,uint256) is not reachable
Function Reads: State variables read in conditions
	live():[]
	deny(address):[]
	dec():[]
	wards(address):[]
	ilk():[]
	exit(address,uint256):[]
	vat():[]
	join(address,uint256):[]
	rely(address):[]
	cage():[]
	gem():[]
Function Writes: State variables written
	cage():['5']
	deny(address):['0']
	rely(address):['0']
============================
iteration:3
targets:['join(address,uint256)']
['cage()']:writes at the last depth:['5']
['deny(address)']:writes at the last depth:['0']
['rely(address)']:writes at the last depth:['0']
['join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)']:writes at the last depth:[]
contract coverage: 96.86%
============================
iteration:4
['exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 96.86%
============================
iteration:5
['exit(address,uint256)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 96.86%
============================
iteration:6
['exit(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 96.86%
============================
iteration:7
['exit(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 96.86%
============================
iteration:8
['exit(address,uint256)', 'exit(address,uint256)', 'rely(address)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'exit(address,uint256)', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'exit(address,uint256)', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'exit(address,uint256)', 'rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'exit(address,uint256)', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 96.86%
============================
iteration:9
['exit(address,uint256)', 'exit(address,uint256)', 'deny(address)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'exit(address,uint256)', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'exit(address,uint256)', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'exit(address,uint256)', 'deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'exit(address,uint256)', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:10
['exit(address,uint256)', 'exit(address,uint256)', 'cage()', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'exit(address,uint256)', 'cage()', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'exit(address,uint256)', 'cage()', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'exit(address,uint256)', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:11
['exit(address,uint256)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:12
['exit(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:13
['exit(address,uint256)', 'join(address,uint256)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'join(address,uint256)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'join(address,uint256)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'join(address,uint256)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'join(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:14
['exit(address,uint256)', 'join(address,uint256)', 'rely(address)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'join(address,uint256)', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'join(address,uint256)', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'join(address,uint256)', 'rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'join(address,uint256)', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:15
['exit(address,uint256)', 'join(address,uint256)', 'deny(address)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'join(address,uint256)', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'join(address,uint256)', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'join(address,uint256)', 'deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'join(address,uint256)', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:16
['exit(address,uint256)', 'join(address,uint256)', 'cage()', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'join(address,uint256)', 'cage()', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'join(address,uint256)', 'cage()', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'join(address,uint256)', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:17
['exit(address,uint256)', 'rely(address)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:18
['exit(address,uint256)', 'rely(address)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'rely(address)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'rely(address)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'rely(address)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'rely(address)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:19
['exit(address,uint256)', 'rely(address)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'rely(address)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'rely(address)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'rely(address)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'rely(address)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:20
['exit(address,uint256)', 'rely(address)', 'rely(address)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'rely(address)', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'rely(address)', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'rely(address)', 'rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'rely(address)', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:21
['exit(address,uint256)', 'rely(address)', 'deny(address)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'rely(address)', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'rely(address)', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'rely(address)', 'deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'rely(address)', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:22
['exit(address,uint256)', 'rely(address)', 'cage()', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'rely(address)', 'cage()', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'rely(address)', 'cage()', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'rely(address)', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:23
['exit(address,uint256)', 'deny(address)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:24
['exit(address,uint256)', 'deny(address)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'deny(address)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'deny(address)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'deny(address)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'deny(address)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:25
['exit(address,uint256)', 'deny(address)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'deny(address)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'deny(address)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'deny(address)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'deny(address)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:26
['exit(address,uint256)', 'deny(address)', 'rely(address)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'deny(address)', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'deny(address)', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'deny(address)', 'rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'deny(address)', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:27
['exit(address,uint256)', 'deny(address)', 'deny(address)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'deny(address)', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'deny(address)', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'deny(address)', 'deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['exit(address,uint256)', 'deny(address)', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:28
['exit(address,uint256)', 'deny(address)', 'cage()', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'deny(address)', 'cage()', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'deny(address)', 'cage()', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'deny(address)', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:29
['exit(address,uint256)', 'cage()', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'cage()', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'cage()', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:30
['exit(address,uint256)', 'cage()', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'cage()', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'cage()', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'cage()', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:31
['exit(address,uint256)', 'cage()', 'rely(address)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'cage()', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'cage()', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'cage()', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:32
['exit(address,uint256)', 'cage()', 'deny(address)', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'cage()', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'cage()', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'cage()', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:33
['exit(address,uint256)', 'cage()', 'cage()', 'cage()']:writes at the last depth:['5']
['exit(address,uint256)', 'cage()', 'cage()', 'deny(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'cage()', 'cage()', 'rely(address)']:writes at the last depth:['0']
['exit(address,uint256)', 'cage()', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:34
['join(address,uint256)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:35
['join(address,uint256)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:36
['join(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:37
['join(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:38
['join(address,uint256)', 'exit(address,uint256)', 'rely(address)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'exit(address,uint256)', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'exit(address,uint256)', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'exit(address,uint256)', 'rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'exit(address,uint256)', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:39
['join(address,uint256)', 'exit(address,uint256)', 'deny(address)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'exit(address,uint256)', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'exit(address,uint256)', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'exit(address,uint256)', 'deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'exit(address,uint256)', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:40
['join(address,uint256)', 'exit(address,uint256)', 'cage()', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'exit(address,uint256)', 'cage()', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'exit(address,uint256)', 'cage()', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'exit(address,uint256)', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:41
['join(address,uint256)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:42
['join(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:43
['join(address,uint256)', 'join(address,uint256)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'join(address,uint256)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'join(address,uint256)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'join(address,uint256)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'join(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:44
['join(address,uint256)', 'join(address,uint256)', 'rely(address)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'join(address,uint256)', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'join(address,uint256)', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'join(address,uint256)', 'rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'join(address,uint256)', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:45
['join(address,uint256)', 'join(address,uint256)', 'deny(address)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'join(address,uint256)', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'join(address,uint256)', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'join(address,uint256)', 'deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'join(address,uint256)', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:46
['join(address,uint256)', 'join(address,uint256)', 'cage()', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'join(address,uint256)', 'cage()', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'join(address,uint256)', 'cage()', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'join(address,uint256)', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:47
['join(address,uint256)', 'rely(address)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:48
['join(address,uint256)', 'rely(address)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'rely(address)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'rely(address)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'rely(address)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'rely(address)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:49
['join(address,uint256)', 'rely(address)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'rely(address)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'rely(address)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'rely(address)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'rely(address)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:50
['join(address,uint256)', 'rely(address)', 'rely(address)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'rely(address)', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'rely(address)', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'rely(address)', 'rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'rely(address)', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:51
['join(address,uint256)', 'rely(address)', 'deny(address)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'rely(address)', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'rely(address)', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'rely(address)', 'deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'rely(address)', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:52
['join(address,uint256)', 'rely(address)', 'cage()', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'rely(address)', 'cage()', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'rely(address)', 'cage()', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'rely(address)', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:53
['join(address,uint256)', 'deny(address)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:54
['join(address,uint256)', 'deny(address)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'deny(address)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'deny(address)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'deny(address)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'deny(address)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:55
['join(address,uint256)', 'deny(address)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'deny(address)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'deny(address)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'deny(address)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'deny(address)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:56
['join(address,uint256)', 'deny(address)', 'rely(address)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'deny(address)', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'deny(address)', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'deny(address)', 'rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'deny(address)', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:57
['join(address,uint256)', 'deny(address)', 'deny(address)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'deny(address)', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'deny(address)', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'deny(address)', 'deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['join(address,uint256)', 'deny(address)', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:58
['join(address,uint256)', 'deny(address)', 'cage()', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'deny(address)', 'cage()', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'deny(address)', 'cage()', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'deny(address)', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:59
['join(address,uint256)', 'cage()', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'cage()', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'cage()', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:60
['join(address,uint256)', 'cage()', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'cage()', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'cage()', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'cage()', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:61
['join(address,uint256)', 'cage()', 'rely(address)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'cage()', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'cage()', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'cage()', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:62
['join(address,uint256)', 'cage()', 'deny(address)', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'cage()', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'cage()', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'cage()', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:63
['join(address,uint256)', 'cage()', 'cage()', 'cage()']:writes at the last depth:['5']
['join(address,uint256)', 'cage()', 'cage()', 'deny(address)']:writes at the last depth:['0']
['join(address,uint256)', 'cage()', 'cage()', 'rely(address)']:writes at the last depth:['0']
['join(address,uint256)', 'cage()', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:64
['rely(address)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:65
['rely(address)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:66
['rely(address)', 'exit(address,uint256)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'exit(address,uint256)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'exit(address,uint256)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'exit(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'exit(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:67
['rely(address)', 'exit(address,uint256)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'exit(address,uint256)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'exit(address,uint256)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'exit(address,uint256)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'exit(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:68
['rely(address)', 'exit(address,uint256)', 'rely(address)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'exit(address,uint256)', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'exit(address,uint256)', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'exit(address,uint256)', 'rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'exit(address,uint256)', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:69
['rely(address)', 'exit(address,uint256)', 'deny(address)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'exit(address,uint256)', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'exit(address,uint256)', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'exit(address,uint256)', 'deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'exit(address,uint256)', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:70
['rely(address)', 'exit(address,uint256)', 'cage()', 'cage()']:writes at the last depth:['5']
['rely(address)', 'exit(address,uint256)', 'cage()', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'exit(address,uint256)', 'cage()', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'exit(address,uint256)', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:71
['rely(address)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:72
['rely(address)', 'join(address,uint256)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'join(address,uint256)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'join(address,uint256)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'join(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'join(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:73
['rely(address)', 'join(address,uint256)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'join(address,uint256)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'join(address,uint256)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'join(address,uint256)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'join(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:74
['rely(address)', 'join(address,uint256)', 'rely(address)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'join(address,uint256)', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'join(address,uint256)', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'join(address,uint256)', 'rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'join(address,uint256)', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:75
['rely(address)', 'join(address,uint256)', 'deny(address)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'join(address,uint256)', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'join(address,uint256)', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'join(address,uint256)', 'deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'join(address,uint256)', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:76
['rely(address)', 'join(address,uint256)', 'cage()', 'cage()']:writes at the last depth:['5']
['rely(address)', 'join(address,uint256)', 'cage()', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'join(address,uint256)', 'cage()', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'join(address,uint256)', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:77
['rely(address)', 'rely(address)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:78
['rely(address)', 'rely(address)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'rely(address)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'rely(address)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'rely(address)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'rely(address)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:79
['rely(address)', 'rely(address)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'rely(address)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'rely(address)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'rely(address)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'rely(address)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:80
['rely(address)', 'rely(address)', 'rely(address)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'rely(address)', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'rely(address)', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'rely(address)', 'rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'rely(address)', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:81
['rely(address)', 'rely(address)', 'deny(address)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'rely(address)', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'rely(address)', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'rely(address)', 'deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'rely(address)', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:82
['rely(address)', 'rely(address)', 'cage()', 'cage()']:writes at the last depth:['5']
['rely(address)', 'rely(address)', 'cage()', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'rely(address)', 'cage()', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'rely(address)', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:83
['rely(address)', 'deny(address)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:84
['rely(address)', 'deny(address)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'deny(address)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'deny(address)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'deny(address)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'deny(address)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:85
['rely(address)', 'deny(address)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'deny(address)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'deny(address)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'deny(address)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'deny(address)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:86
['rely(address)', 'deny(address)', 'rely(address)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'deny(address)', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'deny(address)', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'deny(address)', 'rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'deny(address)', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:87
['rely(address)', 'deny(address)', 'deny(address)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'deny(address)', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'deny(address)', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'deny(address)', 'deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['rely(address)', 'deny(address)', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:88
['rely(address)', 'deny(address)', 'cage()', 'cage()']:writes at the last depth:['5']
['rely(address)', 'deny(address)', 'cage()', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'deny(address)', 'cage()', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'deny(address)', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:89
['rely(address)', 'cage()', 'cage()']:writes at the last depth:['5']
['rely(address)', 'cage()', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'cage()', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:90
['rely(address)', 'cage()', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'cage()', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'cage()', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'cage()', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:91
['rely(address)', 'cage()', 'rely(address)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'cage()', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'cage()', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'cage()', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:92
['rely(address)', 'cage()', 'deny(address)', 'cage()']:writes at the last depth:['5']
['rely(address)', 'cage()', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'cage()', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'cage()', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:93
['rely(address)', 'cage()', 'cage()', 'cage()']:writes at the last depth:['5']
['rely(address)', 'cage()', 'cage()', 'deny(address)']:writes at the last depth:['0']
['rely(address)', 'cage()', 'cage()', 'rely(address)']:writes at the last depth:['0']
['rely(address)', 'cage()', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:94
['deny(address)', 'cage()']:writes at the last depth:['5']
['deny(address)', 'deny(address)']:writes at the last depth:['0']
['deny(address)', 'rely(address)']:writes at the last depth:['0']
['deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:95
['deny(address)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['deny(address)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['deny(address)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['deny(address)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['deny(address)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:96
['deny(address)', 'exit(address,uint256)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['deny(address)', 'exit(address,uint256)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['deny(address)', 'exit(address,uint256)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['deny(address)', 'exit(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['deny(address)', 'exit(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:97
['deny(address)', 'exit(address,uint256)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['deny(address)', 'exit(address,uint256)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['deny(address)', 'exit(address,uint256)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['deny(address)', 'exit(address,uint256)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['deny(address)', 'exit(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:98
['deny(address)', 'exit(address,uint256)', 'rely(address)', 'cage()']:writes at the last depth:['5']
['deny(address)', 'exit(address,uint256)', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['deny(address)', 'exit(address,uint256)', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['deny(address)', 'exit(address,uint256)', 'rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['deny(address)', 'exit(address,uint256)', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:99
['deny(address)', 'exit(address,uint256)', 'deny(address)', 'cage()']:writes at the last depth:['5']
['deny(address)', 'exit(address,uint256)', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['deny(address)', 'exit(address,uint256)', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['deny(address)', 'exit(address,uint256)', 'deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['deny(address)', 'exit(address,uint256)', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:100
['deny(address)', 'exit(address,uint256)', 'cage()', 'cage()']:writes at the last depth:['5']
['deny(address)', 'exit(address,uint256)', 'cage()', 'deny(address)']:writes at the last depth:['0']
['deny(address)', 'exit(address,uint256)', 'cage()', 'rely(address)']:writes at the last depth:['0']
['deny(address)', 'exit(address,uint256)', 'cage()', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:101
['deny(address)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['deny(address)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['deny(address)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['deny(address)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['deny(address)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:102
['deny(address)', 'join(address,uint256)', 'exit(address,uint256)', 'cage()']:writes at the last depth:['5']
['deny(address)', 'join(address,uint256)', 'exit(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['deny(address)', 'join(address,uint256)', 'exit(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['deny(address)', 'join(address,uint256)', 'exit(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['deny(address)', 'join(address,uint256)', 'exit(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:103
['deny(address)', 'join(address,uint256)', 'join(address,uint256)', 'cage()']:writes at the last depth:['5']
['deny(address)', 'join(address,uint256)', 'join(address,uint256)', 'deny(address)']:writes at the last depth:['0']
['deny(address)', 'join(address,uint256)', 'join(address,uint256)', 'rely(address)']:writes at the last depth:['0']
['deny(address)', 'join(address,uint256)', 'join(address,uint256)', 'join(address,uint256)']:writes at the last depth:[]
['deny(address)', 'join(address,uint256)', 'join(address,uint256)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:104
['deny(address)', 'join(address,uint256)', 'rely(address)', 'cage()']:writes at the last depth:['5']
['deny(address)', 'join(address,uint256)', 'rely(address)', 'deny(address)']:writes at the last depth:['0']
['deny(address)', 'join(address,uint256)', 'rely(address)', 'rely(address)']:writes at the last depth:['0']
['deny(address)', 'join(address,uint256)', 'rely(address)', 'join(address,uint256)']:writes at the last depth:[]
['deny(address)', 'join(address,uint256)', 'rely(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:105
['deny(address)', 'join(address,uint256)', 'deny(address)', 'cage()']:writes at the last depth:['5']
['deny(address)', 'join(address,uint256)', 'deny(address)', 'deny(address)']:writes at the last depth:['0']
['deny(address)', 'join(address,uint256)', 'deny(address)', 'rely(address)']:writes at the last depth:['0']
['deny(address)', 'join(address,uint256)', 'deny(address)', 'join(address,uint256)']:writes at the last depth:[]
['deny(address)', 'join(address,uint256)', 'deny(address)', 'exit(address,uint256)']:writes at the last depth:[]
contract coverage: 99.25%
============================
iteration:106
['deny(address)', 'join(address,uint256)', 'cage()', 'cage()']:writes at the last depth:['5']
['deny(address)', 'join(address,uint256)', 'cage()', 'deny(address)']:writes at the last depth:['0']
['deny(address)', 'join(address,uint256)', 'cage()', 'rely(address)']:writes at the last depth:['0']
contract coverage: 99.25%
============================
iteration:107
contract coverage: 99.25%
============================
iteration:108
contract coverage: 99.25%
============================
iteration:109
contract coverage: 99.25%
============================
iteration:110
contract coverage: 99.25%
#@statespace
9655 nodes, 9654 edges, 152302 total states
#@coverage
Achieved 13.68% coverage for code: 608060405234801561001057600080fd5b50604051610f6e380380610f6e8339818101604052606081101561003357600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505060016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160058190555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160028190555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561019557600080fd5b505afa1580156101a9573d6000803e3d6000fd5b505050506040513d60208110156101bf57600080fd5b8101908080519060200190929190505050600481905550505050610d86806101e86000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063957aa58c11610071578063957aa58c146101de5780639c52a7f1146101fc578063b3bcfa8214610240578063bf353dbb1461025e578063c5ce281e146102b6578063ef693bed146102d4576100a9565b806336569e77146100ae5780633b4da69f146100f857806365fae35e14610146578063692450091461018a5780637bd2bea714610194575b600080fd5b6100b6610322565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101446004803603604081101561010e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610348565b005b6101886004803603602081101561015c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106c3565b005b6101926107f1565b005b61019c6108e2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101e6610908565b6040518082815260200191505060405180910390f35b61023e6004803603602081101561021257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061090e565b005b610248610a3c565b6040518082815260200191505060405180910390f35b6102a06004803603602081101561027457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a42565b6040518082815260200191505060405180910390f35b6102be610a5a565b6040518082815260200191505060405180910390f35b610320600480360360408110156102ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a60565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001600554146103c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f47656d4a6f696e2f6e6f742d6c6976650000000000000000000000000000000081525060200191505060405180910390fd5b6000811215610437576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f47656d4a6f696e2f6f766572666c6f770000000000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cdd3fde60025484846040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156104ea57600080fd5b505af11580156104fe573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156105df57600080fd5b505af11580156105f3573d6000803e3d6000fd5b505050506040513d602081101561060957600080fd5b810190808051906020019092919050505061068c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f47656d4a6f696e2f6661696c65642d7472616e7366657200000000000000000081525060200191505060405180910390fd5b5961012081016040526020815260e0602082015260e0600060408301376024356004353360003560e01c60e01b61012085a4505050565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610777576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f47656d4a6f696e2f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505961012081016040526020815260e0602082015260e0600060408301376024356004353360003560e01c60e01b61012085a45050565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146108a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f47656d4a6f696e2f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b60006005819055505961012081016040526020815260e0602082015260e0600060408301376024356004353360003560e01c60e01b61012085a450565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146109c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f47656d4a6f696e2f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505961012081016040526020815260e0602082015260e0600060408301376024356004353360003560e01c60e01b61012085a45050565b60045481565b60006020528060005260406000206000915090505481565b60025481565b7f8000000000000000000000000000000000000000000000000000000000000000811115610af6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f47656d4a6f696e2f6f766572666c6f770000000000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cdd3fde60025433846000036040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015610bac57600080fd5b505af1158015610bc0573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610c6d57600080fd5b505af1158015610c81573d6000803e3d6000fd5b505050506040513d6020811015610c9757600080fd5b8101908080519060200190929190505050610d1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f47656d4a6f696e2f6661696c65642d7472616e7366657200000000000000000081525060200191505060405180910390fd5b5961012081016040526020815260e0602082015260e0600060408301376024356004353360003560e01c60e01b61012085a450505056fea265627a7a7231582069e81c797e9b89539d9d7c78ab62db76b1908491e871793ebead0e038d60360a64736f6c634300050c0032
#@coverage
Achieved 99.25% coverage for code: 608060405234801561001057600080fd5b50600436106100a95760003560e01c8063957aa58c11610071578063957aa58c146101de5780639c52a7f1146101fc578063b3bcfa8214610240578063bf353dbb1461025e578063c5ce281e146102b6578063ef693bed146102d4576100a9565b806336569e77146100ae5780633b4da69f146100f857806365fae35e14610146578063692450091461018a5780637bd2bea714610194575b600080fd5b6100b6610322565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101446004803603604081101561010e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610348565b005b6101886004803603602081101561015c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106c3565b005b6101926107f1565b005b61019c6108e2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101e6610908565b6040518082815260200191505060405180910390f35b61023e6004803603602081101561021257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061090e565b005b610248610a3c565b6040518082815260200191505060405180910390f35b6102a06004803603602081101561027457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a42565b6040518082815260200191505060405180910390f35b6102be610a5a565b6040518082815260200191505060405180910390f35b610320600480360360408110156102ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a60565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001600554146103c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f47656d4a6f696e2f6e6f742d6c6976650000000000000000000000000000000081525060200191505060405180910390fd5b6000811215610437576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f47656d4a6f696e2f6f766572666c6f770000000000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cdd3fde60025484846040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156104ea57600080fd5b505af11580156104fe573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156105df57600080fd5b505af11580156105f3573d6000803e3d6000fd5b505050506040513d602081101561060957600080fd5b810190808051906020019092919050505061068c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f47656d4a6f696e2f6661696c65642d7472616e7366657200000000000000000081525060200191505060405180910390fd5b5961012081016040526020815260e0602082015260e0600060408301376024356004353360003560e01c60e01b61012085a4505050565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610777576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f47656d4a6f696e2f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505961012081016040526020815260e0602082015260e0600060408301376024356004353360003560e01c60e01b61012085a45050565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146108a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f47656d4a6f696e2f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b60006005819055505961012081016040526020815260e0602082015260e0600060408301376024356004353360003560e01c60e01b61012085a450565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146109c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f47656d4a6f696e2f6e6f742d617574686f72697a65640000000000000000000081525060200191505060405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505961012081016040526020815260e0602082015260e0600060408301376024356004353360003560e01c60e01b61012085a45050565b60045481565b60006020528060005260406000206000915090505481565b60025481565b7f8000000000000000000000000000000000000000000000000000000000000000811115610af6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f47656d4a6f696e2f6f766572666c6f770000000000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cdd3fde60025433846000036040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015610bac57600080fd5b505af1158015610bc0573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610c6d57600080fd5b505af1158015610c81573d6000803e3d6000fd5b505050506040513d6020811015610c9757600080fd5b8101908080519060200190929190505050610d1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f47656d4a6f696e2f6661696c65642d7472616e7366657200000000000000000081525060200191505060405180910390fd5b5961012081016040526020815260e0602082015260e0600060408301376024356004353360003560e01c60e01b61012085a450505056fea265627a7a7231582069e81c797e9b89539d9d7c78ab62db76b1908491e871793ebead0e038d60360a64736f6c634300050c0032
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: GemJoin
Function name: join(address,uint256)
PC address: 1261
Estimated Gas Usage: 8951 - 81869
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2CB60a4291CD613aCc1F141bb87B96c2B816dCC7.sol:75

vat.slip(ilk, usr, int(wad))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: join(address,uint256), txdata: 0x3b4da69f000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe', 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GemJoin
Function name: join(address,uint256)
PC address: 1288
Estimated Gas Usage: 8951 - 81869
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2CB60a4291CD613aCc1F141bb87B96c2B816dCC7.sol:76

gem

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: join(address,uint256), txdata: 0x3b4da69f000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe', 0), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: GemJoin
Function name: join(address,uint256)
PC address: 1506
Estimated Gas Usage: 8951 - 81869
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2CB60a4291CD613aCc1F141bb87B96c2B816dCC7.sol:76

gem.transferFrom(msg.sender, address(this), wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: join(address,uint256), txdata: 0x3b4da69f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: GemJoin
Function name: join(address,uint256)
PC address: 1506
Estimated Gas Usage: 8951 - 81869
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2CB60a4291CD613aCc1F141bb87B96c2B816dCC7.sol:76

gem.transferFrom(msg.sender, address(this), wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldatadecoded_data: , value: 0x0
Caller: [CREATOR], function: join(address,uint256), txdata: 0x3b4da69f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GemJoin
Function name: join(address,uint256)
PC address: 1506
Estimated Gas Usage: 8951 - 81869
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2CB60a4291CD613aCc1F141bb87B96c2B816dCC7.sol:76

gem.transferFrom(msg.sender, address(this), wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: join(address,uint256), txdata: 0x3b4da69f000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe', 0), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: GemJoin
Function name: exit(address,uint256)
PC address: 2991
Estimated Gas Usage: 8190 - 81013
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2CB60a4291CD613aCc1F141bb87B96c2B816dCC7.sol:80

vat.slip(ilk, msg.sender, -int(wad))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: exit(address,uint256), txdata: 0xef693bed00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0x0000000000000000000000000000000000000000', 1), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GemJoin
Function name: exit(address,uint256)
PC address: 3018
Estimated Gas Usage: 8190 - 81013
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2CB60a4291CD613aCc1F141bb87B96c2B816dCC7.sol:81

gem

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: exit(address,uint256), txdata: 0xef693bed000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe', 1), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: GemJoin
Function name: exit(address,uint256)
PC address: 3184
Estimated Gas Usage: 8190 - 81013
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2CB60a4291CD613aCc1F141bb87B96c2B816dCC7.sol:81

gem.transfer(usr, wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: exit(address,uint256), txdata: 0xef693bed000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe', 1), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: GemJoin
Function name: exit(address,uint256)
PC address: 3184
Estimated Gas Usage: 8190 - 81013
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2CB60a4291CD613aCc1F141bb87B96c2B816dCC7.sol:81

gem.transfer(usr, wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldatadecoded_data: , value: 0x0
Caller: [CREATOR], function: exit(address,uint256), txdata: 0xef693bed000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe', 1), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GemJoin
Function name: exit(address,uint256)
PC address: 3184
Estimated Gas Usage: 8190 - 81013
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2CB60a4291CD613aCc1F141bb87B96c2B816dCC7.sol:81

gem.transfer(usr, wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: exit(address,uint256), txdata: 0xef693bed000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe', 1), value: 0x0


time_used: 36054.95333838463 seconds
#@contract_info_time
0x2CB60a4291CD613aCc1F141bb87B96c2B816dCC7.sol:0.5.12:GemJoin:36054.95333838463:36100:60:36000
