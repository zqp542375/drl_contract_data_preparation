++++ 0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol  :  0.5.0  :  ServiceProvider_UniSwap_Zap ++++
2466254742821198181448497779282231217833675501566 is added into actors.
Starting preprocessing.
number of genesis states: 1
total instructions: 4959
['constructor']:writes at the last depth:['5', '7', '8', '0', '1', '2', '3', '4']
preprocessing: Achieved 99.98% coverage.
dynamic svars:[]
static svars:['0', '5', '6', '8', '7', '3', '4', '1', '2']
Ending preprocessing.
preprocessing time(s): 52.82642388343811
contract coverage: 83.02%
LetsInvest() is not reachable
fallback is not reachable
withdrawServiceChargeTokens(uint256) is not reachable
Function Reads: State variables read in conditions
	withdrawDAI():[]
	set_serviceChargeRate(uint256):[]
	LetsInvest():[]
	toggleContractActive():[]
	get_serviceChargeRate():[]
	set_UniSwapDAIExchangeContractAddress(address):[]
	withdraw():[]
	withdrawDAILiquityTokens():[]
	withdrawAnyOtherERC20Token(address):[]
	renounceOwnership():[]
	owner():[]
	isOwner():[]
	set_ServiceProviderAddress(address):[]
	get_TotalServiceChargeTokens():[]
	set_UniSwap_Zap_ContractAddress(address):[]
	set_DAI_TokenContractAddress(address):[]
	_owner():[]
	balance():[]
	withdrawServiceChargeTokens(uint256):[]
	UniSwap_Zap_ContractAddress():[]
	DAI_TokenContractAddress():[]
	get_ServiceProviderAddress():[]
	UniSwapDAIExchangeContractAddress():[]
	transferOwnership(address):[]
	depositETH():[]
Function Writes: State variables written
	fallback:['0', '5', '6']
	LetsInvest():['0', '6']
	toggleContractActive():['8']
	set_serviceChargeRate(uint256):['7']
	set_UniSwapDAIExchangeContractAddress(address):['3']
	renounceOwnership():['0']
	set_ServiceProviderAddress(address):['4']
	set_UniSwap_Zap_ContractAddress(address):['1']
	set_DAI_TokenContractAddress(address):['2']
	depositETH():['5']
	withdrawServiceChargeTokens(uint256):['6']
	transferOwnership(address):['0']
============================
iteration:3
targets:['LetsInvest()', 'fallback', 'withdrawServiceChargeTokens(uint256)']
['fallback']:writes at the last depth:['5']
['toggleContractActive()']:writes at the last depth:['8']
['set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['withdraw()']:writes at the last depth:[]
['renounceOwnership()']:writes at the last depth:['0']
['set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['depositETH()']:writes at the last depth:['5']
['fallback']:writes at the last depth:['5']
['withdrawDAI()']:writes at the last depth:[]
['transferOwnership(address)']:writes at the last depth:['0']
['withdrawDAILiquityTokens()']:writes at the last depth:[]
['withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback']:writes at the last depth:['0']
['LetsInvest()']:writes at the last depth:['0']
['fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:4
['fallback', 'fallback']:writes at the last depth:['5']
['fallback', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'withdraw()']:writes at the last depth:[]
['fallback', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback']:writes at the last depth:['5']
['fallback', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback']:writes at the last depth:['0']
['fallback', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:5
['fallback', 'fallback', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:6
['fallback', 'fallback', 'fallback', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'fallback', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'fallback', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'fallback', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'fallback', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'fallback', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'fallback', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'fallback', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'fallback', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'fallback', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'fallback', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'fallback', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'fallback', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'fallback', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'fallback', 'fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:7
['fallback', 'fallback', 'LetsInvest()', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'LetsInvest()', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'LetsInvest()', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'LetsInvest()', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'LetsInvest()', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'LetsInvest()', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'LetsInvest()', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'LetsInvest()', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'LetsInvest()', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'LetsInvest()', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'LetsInvest()', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'LetsInvest()', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'LetsInvest()', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'LetsInvest()', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'LetsInvest()', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'LetsInvest()', 'fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:8
['fallback', 'fallback', 'fallback', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'fallback', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'fallback', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'fallback', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'fallback', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'fallback', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'fallback', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'fallback', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'fallback', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'fallback', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'fallback', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'fallback', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'fallback', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'fallback', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'fallback', 'fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:9
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)', 'fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:10
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)', 'fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:11
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'withdrawDAILiquityTokens()', 'fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:12
['fallback', 'fallback', 'transferOwnership(address)', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'transferOwnership(address)', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'transferOwnership(address)', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'transferOwnership(address)', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'transferOwnership(address)', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'transferOwnership(address)', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'transferOwnership(address)', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'transferOwnership(address)', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'transferOwnership(address)', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'transferOwnership(address)', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'transferOwnership(address)', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'transferOwnership(address)', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'transferOwnership(address)', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'transferOwnership(address)', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'transferOwnership(address)', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'transferOwnership(address)', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'transferOwnership(address)', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'transferOwnership(address)', 'fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:13
['fallback', 'fallback', 'withdrawDAI()', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'withdrawDAI()', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'withdrawDAI()', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'withdrawDAI()', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'withdrawDAI()', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawDAI()', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'withdrawDAI()', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'withdrawDAI()', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'withdrawDAI()', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'withdrawDAI()', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'withdrawDAI()', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'withdrawDAI()', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawDAI()', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'withdrawDAI()', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawDAI()', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'withdrawDAI()', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'withdrawDAI()', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'withdrawDAI()', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'withdrawDAI()', 'fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:14
['fallback', 'fallback', 'fallback', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'fallback', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'fallback', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'fallback', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'fallback', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'fallback', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'fallback', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'fallback', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'fallback', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'fallback', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'fallback', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'fallback', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'fallback', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'fallback', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'fallback', 'fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:15
['fallback', 'fallback', 'depositETH()', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'depositETH()', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'depositETH()', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'depositETH()', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'depositETH()', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'depositETH()', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'depositETH()', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'depositETH()', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'depositETH()', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'depositETH()', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'depositETH()', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'depositETH()', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'depositETH()', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'depositETH()', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'depositETH()', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'depositETH()', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'depositETH()', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'depositETH()', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'depositETH()', 'fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:16
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'set_DAI_TokenContractAddress(address)', 'fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:17
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)', 'fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:18
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'set_ServiceProviderAddress(address)', 'fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:19
['fallback', 'fallback', 'renounceOwnership()', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'renounceOwnership()', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'renounceOwnership()', 'fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:20
['fallback', 'fallback', 'withdraw()', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'withdraw()', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'withdraw()', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'withdraw()', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'withdraw()', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'withdraw()', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'withdraw()', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'withdraw()', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'withdraw()', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'withdraw()', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'withdraw()', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'withdraw()', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'withdraw()', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'withdraw()', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'withdraw()', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'withdraw()', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'withdraw()', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'withdraw()', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'withdraw()', 'fallback']:writes at the last depth:['0']
contract coverage: 83.02%
============================
iteration:21
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)', 'fallback']:writes at the last depth:['0']
contract coverage: 93.81%
============================
iteration:22
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'fallback']:writes at the last depth:['0', '6']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'LetsInvest()']:writes at the last depth:['0', '6']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'fallback']:writes at the last depth:['0', '6']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'fallback']:writes at the last depth:['0', '6']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'LetsInvest()']:writes at the last depth:['0', '6']
['fallback', 'fallback', 'set_serviceChargeRate(uint256)', 'fallback']:writes at the last depth:['0', '6']
contract coverage: 93.81%
============================
iteration:23
['fallback', 'fallback', 'toggleContractActive()', 'fallback']:writes at the last depth:[]
['fallback', 'fallback', 'toggleContractActive()', 'LetsInvest()']:writes at the last depth:[]
['fallback', 'fallback', 'toggleContractActive()', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'toggleContractActive()', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'toggleContractActive()', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'toggleContractActive()', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'toggleContractActive()', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'toggleContractActive()', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'toggleContractActive()', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'toggleContractActive()', 'fallback']:writes at the last depth:[]
['fallback', 'fallback', 'toggleContractActive()', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'toggleContractActive()', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'toggleContractActive()', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'toggleContractActive()', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'toggleContractActive()', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'toggleContractActive()', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'toggleContractActive()', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'toggleContractActive()', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'toggleContractActive()', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
contract coverage: 93.81%
============================
iteration:24
['fallback', 'fallback', 'fallback', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'fallback', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'fallback', 'fallback', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'fallback', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'fallback', 'fallback', 'withdraw()']:writes at the last depth:[]
['fallback', 'fallback', 'fallback', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'fallback', 'fallback', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'fallback', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'fallback', 'fallback', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'fallback', 'fallback', 'depositETH()']:writes at the last depth:['5']
['fallback', 'fallback', 'fallback', 'fallback']:writes at the last depth:['5']
['fallback', 'fallback', 'fallback', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'fallback', 'fallback', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'fallback', 'fallback', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'fallback', 'fallback', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'fallback', 'fallback', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'fallback', 'fallback', 'fallback']:writes at the last depth:['0']
['fallback', 'fallback', 'fallback', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'fallback', 'fallback', 'fallback']:writes at the last depth:['0']
contract coverage: 93.81%
============================
iteration:25
['fallback', 'LetsInvest()', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'LetsInvest()', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'LetsInvest()', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'LetsInvest()', 'withdraw()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'LetsInvest()', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'LetsInvest()', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'LetsInvest()', 'depositETH()']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'LetsInvest()', 'fallback']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'fallback']:writes at the last depth:['0']
contract coverage: 93.81%
============================
iteration:26
['fallback', 'LetsInvest()', 'fallback', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'fallback', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'LetsInvest()', 'fallback', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'LetsInvest()', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'LetsInvest()', 'fallback', 'withdraw()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'fallback', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'fallback', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'LetsInvest()', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'LetsInvest()', 'fallback', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'LetsInvest()', 'fallback', 'depositETH()']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'fallback', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'fallback', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'fallback', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'fallback', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'fallback', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'fallback', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'LetsInvest()', 'fallback', 'fallback']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'fallback', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'fallback', 'fallback']:writes at the last depth:['0']
contract coverage: 93.81%
============================
iteration:27
['fallback', 'LetsInvest()', 'LetsInvest()', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'LetsInvest()', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'LetsInvest()', 'LetsInvest()', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'LetsInvest()', 'LetsInvest()', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'LetsInvest()', 'LetsInvest()', 'withdraw()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'LetsInvest()', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'LetsInvest()', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'LetsInvest()', 'LetsInvest()', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'LetsInvest()', 'LetsInvest()', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'LetsInvest()', 'LetsInvest()', 'depositETH()']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'LetsInvest()', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'LetsInvest()', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'LetsInvest()', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'LetsInvest()', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'LetsInvest()', 'LetsInvest()', 'fallback']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'LetsInvest()', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'LetsInvest()', 'fallback']:writes at the last depth:['0']
contract coverage: 93.81%
============================
iteration:28
['fallback', 'LetsInvest()', 'fallback', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'fallback', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'LetsInvest()', 'fallback', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'LetsInvest()', 'fallback', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'LetsInvest()', 'fallback', 'withdraw()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'fallback', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'fallback', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'LetsInvest()', 'fallback', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'LetsInvest()', 'fallback', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'LetsInvest()', 'fallback', 'depositETH()']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'fallback', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'fallback', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'fallback', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'fallback', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'fallback', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'fallback', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'LetsInvest()', 'fallback', 'fallback']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'fallback', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'fallback', 'fallback']:writes at the last depth:['0']
contract coverage: 93.81%
============================
iteration:29
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'withdraw()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'depositETH()']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'fallback']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'withdrawServiceChargeTokens(uint256)', 'fallback']:writes at the last depth:['0']
contract coverage: 93.81%
============================
iteration:30
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'withdraw()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'depositETH()']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'fallback']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'withdrawAnyOtherERC20Token(address)', 'fallback']:writes at the last depth:['0']
contract coverage: 93.81%
============================
iteration:31
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'withdraw()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'depositETH()']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'fallback']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'withdrawDAILiquityTokens()', 'fallback']:writes at the last depth:['0']
contract coverage: 93.81%
============================
iteration:32
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'withdraw()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'depositETH()']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'fallback']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'LetsInvest()']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'transferOwnership(address)', 'fallback']:writes at the last depth:['0']
contract coverage: 93.81%
============================
iteration:33
['fallback', 'LetsInvest()', 'withdrawDAI()', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'withdrawDAI()', 'toggleContractActive()']:writes at the last depth:['8']
['fallback', 'LetsInvest()', 'withdrawDAI()', 'set_serviceChargeRate(uint256)']:writes at the last depth:['7']
['fallback', 'LetsInvest()', 'withdrawDAI()', 'set_UniSwapDAIExchangeContractAddress(address)']:writes at the last depth:['3']
['fallback', 'LetsInvest()', 'withdrawDAI()', 'withdraw()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawDAI()', 'renounceOwnership()']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'withdrawDAI()', 'set_ServiceProviderAddress(address)']:writes at the last depth:['4']
['fallback', 'LetsInvest()', 'withdrawDAI()', 'set_UniSwap_Zap_ContractAddress(address)']:writes at the last depth:['1']
['fallback', 'LetsInvest()', 'withdrawDAI()', 'set_DAI_TokenContractAddress(address)']:writes at the last depth:['2']
['fallback', 'LetsInvest()', 'withdrawDAI()', 'depositETH()']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'withdrawDAI()', 'fallback']:writes at the last depth:['5']
['fallback', 'LetsInvest()', 'withdrawDAI()', 'withdrawDAI()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawDAI()', 'transferOwnership(address)']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'withdrawDAI()', 'withdrawDAILiquityTokens()']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawDAI()', 'withdrawAnyOtherERC20Token(address)']:writes at the last depth:[]
['fallback', 'LetsInvest()', 'withdrawDAI()', 'withdrawServiceChargeTokens(uint256)']:writes at the last depth:['6']
['fallback', 'LetsInvest()', 'withdrawDAI()', 'fallback']:writes at the last depth:['0']
['fallback', 'LetsInvest()', 'withdrawDAI()', 'LetsInvest()']:writes at the last depth:['0']
contract coverage: 93.81%
============================
iteration:34
contract coverage: 93.81%
============================
iteration:35
contract coverage: 93.81%
============================
iteration:36
contract coverage: 93.81%
============================
iteration:37
contract coverage: 93.81%
============================
iteration:38
contract coverage: 93.81%
============================
iteration:39
contract coverage: 93.81%
============================
iteration:40
contract coverage: 93.81%
============================
iteration:41
contract coverage: 93.81%
============================
iteration:42
contract coverage: 93.81%
============================
iteration:43
contract coverage: 93.81%
============================
iteration:44
contract coverage: 93.81%
============================
iteration:45
contract coverage: 93.81%
============================
iteration:46
contract coverage: 93.81%
============================
iteration:47
contract coverage: 93.81%
============================
iteration:48
contract coverage: 93.81%
============================
iteration:49
contract coverage: 93.81%
============================
iteration:50
contract coverage: 93.81%
============================
iteration:51
contract coverage: 93.81%
============================
iteration:52
contract coverage: 93.81%
============================
iteration:53
contract coverage: 93.81%
============================
iteration:54
contract coverage: 93.81%
============================
iteration:55
contract coverage: 93.81%
============================
iteration:56
contract coverage: 93.81%
============================
iteration:57
contract coverage: 93.81%
============================
iteration:58
contract coverage: 93.81%
============================
iteration:59
contract coverage: 93.81%
============================
iteration:60
contract coverage: 93.81%
============================
iteration:61
contract coverage: 93.81%
============================
iteration:62
contract coverage: 93.81%
============================
iteration:63
contract coverage: 93.81%
============================
iteration:64
contract coverage: 93.81%
============================
iteration:65
contract coverage: 93.81%
============================
iteration:66
contract coverage: 93.81%
============================
iteration:67
contract coverage: 93.81%
============================
iteration:68
contract coverage: 93.81%
============================
iteration:69
contract coverage: 93.81%
============================
iteration:70
contract coverage: 93.81%
============================
iteration:71
contract coverage: 93.81%
============================
iteration:72
contract coverage: 93.81%
============================
iteration:73
contract coverage: 93.81%
============================
iteration:74
contract coverage: 93.81%
============================
iteration:75
contract coverage: 93.81%
============================
iteration:76
contract coverage: 93.81%
============================
iteration:77
contract coverage: 93.81%
============================
iteration:78
contract coverage: 93.81%
============================
iteration:79
contract coverage: 93.81%
#@statespace
13469 nodes, 13468 edges, 192819 total states
#@coverage
Achieved 5.36% coverage for code: 60806040523073ffffffffffffffffffffffffffffffffffffffff163160055560006007556000600860006101000a81548160ff0219169083151502179055503480156200004c57600080fd5b5060405160808062002ef2833981018060405260808110156200006e57600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291905050506000620000b86200027f640100000000026401000000009004565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506001600060146101000a81548160ff02191690831515021790555083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000287565b600033905090565b612c5b80620002976000396000f3fe608060405260043610610149576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063020bcc9e146101b757806302c48c3b146101ce578063082fef45146102095780631385d24c1461022b5780632a340dcf14610242578063386855f61461026d5780633ccfd60b146102be5780634c127866146102d557806366d97c29146102ec578063715018a61461033d5780638da5cb5b146103545780638f32d59b146103ab57806398d76d3c146103da578063a34cf3191461042b578063a66e92f314610456578063a76d0a57146104a7578063b2bdfa7b146104f8578063b69ef8a81461054f578063bb1f88fb1461057a578063bb2783fc146105b5578063bcd7fec01461060c578063c7892a3614610663578063d4ba9d39146106ba578063f2fde38b14610711578063f6326fb314610762575b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156101ab576101a661076c565b6101b5565b6101b36107fa565b505b005b3480156101c357600080fd5b506101cc61129b565b005b3480156101da57600080fd5b50610207600480360360208110156101f157600080fd5b8101908080359060200190929190505050611536565b005b6102116107fa565b604051808215151515815260200191505060405180910390f35b34801561023757600080fd5b5061024061165c565b005b34801561024e57600080fd5b50610257611704565b6040518082815260200191505060405180910390f35b34801561027957600080fd5b506102bc6004803603602081101561029057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061178a565b005b3480156102ca57600080fd5b506102d361184a565b005b3480156102e157600080fd5b506102ea611947565b005b3480156102f857600080fd5b5061033b6004803603602081101561030f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611be2565b005b34801561034957600080fd5b50610352611e3a565b005b34801561036057600080fd5b50610369611f75565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103b757600080fd5b506103c0611f9e565b604051808215151515815260200191505060405180910390f35b3480156103e657600080fd5b50610429600480360360208110156103fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ffc565b005b34801561043757600080fd5b506104406120bc565b6040518082815260200191505060405180910390f35b34801561046257600080fd5b506104a56004803603602081101561047957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612142565b005b3480156104b357600080fd5b506104f6600480360360208110156104ca57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612202565b005b34801561050457600080fd5b5061050d6122c2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561055b57600080fd5b506105646122e7565b6040518082815260200191505060405180910390f35b34801561058657600080fd5b506105b36004803603602081101561059d57600080fd5b81019080803590602001909291905050506122ed565b005b3480156105c157600080fd5b506105ca612611565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561061857600080fd5b50610621612637565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561066f57600080fd5b5061067861265d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106c657600080fd5b506106cf612703565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561071d57600080fd5b506107606004803603602081101561073457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612729565b005b61076a61076c565b005b610774611f9e565b15156107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b34600560008282540192505081905550565b6000600860009054906101000a900460ff16151561129857600060149054906101000a900460ff161515610896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60008060146101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663082fef45346040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561093657600080fd5b505af115801561094a573d6000803e3d6000fd5b50505050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610a0c57600080fd5b505afa158015610a20573d6000803e3d6000fd5b505050506040513d6020811015610a3657600080fd5b810190808051906020019092919050505090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610b0657600080fd5b505afa158015610b1a573d6000803e3d6000fd5b505050506040513d6020811015610b3057600080fd5b8101908080519060200190929190505050905060006007541115610f02576000610b67610b5f846007546127b1565b61271061287e565b905080600654016006819055506000610b8084836128c8565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610c4757600080fd5b505af1158015610c5b573d6000803e3d6000fd5b505050506040513d6020811015610c7157600080fd5b81019080805190602001909291905050501515610d1c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f4661696c75726520746f2073656e64204c697175696469747920546f6b656e7381526020017f20746f205573657200000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610de157600080fd5b505af1158015610df5573d6000803e3d6000fd5b505050506040513d6020811015610e0b57600080fd5b81019080805190602001909291905050501515610eb6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f4661696c75726520746f2073656e6420726573696475616c2044414920686f6c81526020017f64696e677300000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b7f9f12e5b133ebd8c797113837f68f668afc095c53779b5ca24c6fe08c0b81e3138184604051808381526020018281526020019250505060405180910390a1600194505050505061127c565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610fc757600080fd5b505af1158015610fdb573d6000803e3d6000fd5b505050506040513d6020811015610ff157600080fd5b8101908080519060200190929190505050151561109c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f4661696c75726520746f2073656e64204c697175696469747920546f6b656e7381526020017f20746f205573657200000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561116157600080fd5b505af1158015611175573d6000803e3d6000fd5b505050506040513d602081101561118b57600080fd5b81019080805190602001909291905050501515611236576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f4661696c75726520746f2073656e6420726573696475616c2044414920686f6c81526020017f64696e677300000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b7f9f12e5b133ebd8c797113837f68f668afc095c53779b5ca24c6fe08c0b81e3138282604051808381526020018281526020019250505060405180910390a16001925050505b6001600060146101000a81548160ff0219169083151502179055505b90565b6112a3611f9e565b1515611317576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156113d457600080fd5b505afa1580156113e8573d6000803e3d6000fd5b505050506040513d60208110156113fe57600080fd5b81019080805190602001909291905050509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156114f757600080fd5b505af115801561150b573d6000803e3d6000fd5b505050506040513d602081101561152157600080fd5b81019080805190602001909291905050505050565b61153e611f9e565b15156115b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6127108111151515611652576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f53657474696e67205365727669636520436861726765206d6f7265207468616e81526020017f203130302500000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8060078190555050565b611664611f9e565b15156116d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600860009054906101000a900460ff1615600860006101000a81548160ff021916908315150217905550565b600061170e611f9e565b1515611782576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600754905090565b611792611f9e565b1515611806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611852611f9e565b15156118c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015611944573d6000803e3d6000fd5b50565b61194f611f9e565b15156119c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611a8057600080fd5b505afa158015611a94573d6000803e3d6000fd5b505050506040513d6020811015611aaa57600080fd5b81019080805190602001909291905050509050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611ba357600080fd5b505af1158015611bb7573d6000803e3d6000fd5b505050506040513d6020811015611bcd57600080fd5b81019080805190602001909291905050505050565b611bea611f9e565b1515611c5e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611cf957600080fd5b505afa158015611d0d573d6000803e3d6000fd5b505050506040513d6020811015611d2357600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611dfa57600080fd5b505af1158015611e0e573d6000803e3d6000fd5b505050506040513d6020811015611e2457600080fd5b8101908080519060200190929190505050505050565b611e42611f9e565b1515611eb6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611fe0612912565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b612004611f9e565b1515612078576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006120c6611f9e565b151561213a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600654905090565b61214a611f9e565b15156121be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61220a611f9e565b151561227e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b6122f5611f9e565b1515612369576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6006548111151515612409576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001807f596f75206172652061736b696e6720666f72206d6f7265207468616e2077686181526020017f7420796f752068617665206561726e656400000000000000000000000000000081525060400191505060405180910390fd5b612415600654826128c8565b600681905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561250257600080fd5b505af1158015612516573d6000803e3d6000fd5b505050506040513d602081101561252c57600080fd5b810190808051906020019092919050505015156125d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f4661696c75726520746f2073656e642053657276696365436861726765546f6b81526020017f656e73000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b7fe1c9613b8ea03bf9b97e267900ab3ef5796b015b8473edf7e8f6f063ff56b030816040518082815260200191505060405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000612667611f9e565b15156126db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612731611f9e565b15156127a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6127ae8161291a565b50565b6000808314156127c45760009050612878565b600082840290508284828115156127d757fe5b04141515612873576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f81526020017f770000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b809150505b92915050565b60006128c083836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612aa3565b905092915050565b600061290a83836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612b6d565b905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156129e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080831182901515612b51576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612b16578082015181840152602081019050612afb565b50505050905090810190601f168015612b435780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385811515612b5f57fe5b049050809150509392505050565b60008383111582901515612c1c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612be1578082015181840152602081019050612bc6565b50505050905090810190601f168015612c0e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838503905080915050939250505056fea165627a7a723058203ca2b06ce10d40e05d4087c528a92a1eb4bfd510cd233b08a2b2d46417f1adaf0029
#@coverage
Achieved 93.81% coverage for code: 608060405260043610610149576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063020bcc9e146101b757806302c48c3b146101ce578063082fef45146102095780631385d24c1461022b5780632a340dcf14610242578063386855f61461026d5780633ccfd60b146102be5780634c127866146102d557806366d97c29146102ec578063715018a61461033d5780638da5cb5b146103545780638f32d59b146103ab57806398d76d3c146103da578063a34cf3191461042b578063a66e92f314610456578063a76d0a57146104a7578063b2bdfa7b146104f8578063b69ef8a81461054f578063bb1f88fb1461057a578063bb2783fc146105b5578063bcd7fec01461060c578063c7892a3614610663578063d4ba9d39146106ba578063f2fde38b14610711578063f6326fb314610762575b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156101ab576101a661076c565b6101b5565b6101b36107fa565b505b005b3480156101c357600080fd5b506101cc61129b565b005b3480156101da57600080fd5b50610207600480360360208110156101f157600080fd5b8101908080359060200190929190505050611536565b005b6102116107fa565b604051808215151515815260200191505060405180910390f35b34801561023757600080fd5b5061024061165c565b005b34801561024e57600080fd5b50610257611704565b6040518082815260200191505060405180910390f35b34801561027957600080fd5b506102bc6004803603602081101561029057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061178a565b005b3480156102ca57600080fd5b506102d361184a565b005b3480156102e157600080fd5b506102ea611947565b005b3480156102f857600080fd5b5061033b6004803603602081101561030f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611be2565b005b34801561034957600080fd5b50610352611e3a565b005b34801561036057600080fd5b50610369611f75565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103b757600080fd5b506103c0611f9e565b604051808215151515815260200191505060405180910390f35b3480156103e657600080fd5b50610429600480360360208110156103fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ffc565b005b34801561043757600080fd5b506104406120bc565b6040518082815260200191505060405180910390f35b34801561046257600080fd5b506104a56004803603602081101561047957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612142565b005b3480156104b357600080fd5b506104f6600480360360208110156104ca57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612202565b005b34801561050457600080fd5b5061050d6122c2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561055b57600080fd5b506105646122e7565b6040518082815260200191505060405180910390f35b34801561058657600080fd5b506105b36004803603602081101561059d57600080fd5b81019080803590602001909291905050506122ed565b005b3480156105c157600080fd5b506105ca612611565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561061857600080fd5b50610621612637565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561066f57600080fd5b5061067861265d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106c657600080fd5b506106cf612703565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561071d57600080fd5b506107606004803603602081101561073457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612729565b005b61076a61076c565b005b610774611f9e565b15156107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b34600560008282540192505081905550565b6000600860009054906101000a900460ff16151561129857600060149054906101000a900460ff161515610896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60008060146101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663082fef45346040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561093657600080fd5b505af115801561094a573d6000803e3d6000fd5b50505050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610a0c57600080fd5b505afa158015610a20573d6000803e3d6000fd5b505050506040513d6020811015610a3657600080fd5b810190808051906020019092919050505090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610b0657600080fd5b505afa158015610b1a573d6000803e3d6000fd5b505050506040513d6020811015610b3057600080fd5b8101908080519060200190929190505050905060006007541115610f02576000610b67610b5f846007546127b1565b61271061287e565b905080600654016006819055506000610b8084836128c8565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610c4757600080fd5b505af1158015610c5b573d6000803e3d6000fd5b505050506040513d6020811015610c7157600080fd5b81019080805190602001909291905050501515610d1c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f4661696c75726520746f2073656e64204c697175696469747920546f6b656e7381526020017f20746f205573657200000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610de157600080fd5b505af1158015610df5573d6000803e3d6000fd5b505050506040513d6020811015610e0b57600080fd5b81019080805190602001909291905050501515610eb6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f4661696c75726520746f2073656e6420726573696475616c2044414920686f6c81526020017f64696e677300000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b7f9f12e5b133ebd8c797113837f68f668afc095c53779b5ca24c6fe08c0b81e3138184604051808381526020018281526020019250505060405180910390a1600194505050505061127c565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610fc757600080fd5b505af1158015610fdb573d6000803e3d6000fd5b505050506040513d6020811015610ff157600080fd5b8101908080519060200190929190505050151561109c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f4661696c75726520746f2073656e64204c697175696469747920546f6b656e7381526020017f20746f205573657200000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561116157600080fd5b505af1158015611175573d6000803e3d6000fd5b505050506040513d602081101561118b57600080fd5b81019080805190602001909291905050501515611236576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f4661696c75726520746f2073656e6420726573696475616c2044414920686f6c81526020017f64696e677300000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b7f9f12e5b133ebd8c797113837f68f668afc095c53779b5ca24c6fe08c0b81e3138282604051808381526020018281526020019250505060405180910390a16001925050505b6001600060146101000a81548160ff0219169083151502179055505b90565b6112a3611f9e565b1515611317576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156113d457600080fd5b505afa1580156113e8573d6000803e3d6000fd5b505050506040513d60208110156113fe57600080fd5b81019080805190602001909291905050509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156114f757600080fd5b505af115801561150b573d6000803e3d6000fd5b505050506040513d602081101561152157600080fd5b81019080805190602001909291905050505050565b61153e611f9e565b15156115b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6127108111151515611652576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f53657474696e67205365727669636520436861726765206d6f7265207468616e81526020017f203130302500000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8060078190555050565b611664611f9e565b15156116d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600860009054906101000a900460ff1615600860006101000a81548160ff021916908315150217905550565b600061170e611f9e565b1515611782576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600754905090565b611792611f9e565b1515611806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611852611f9e565b15156118c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015611944573d6000803e3d6000fd5b50565b61194f611f9e565b15156119c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611a8057600080fd5b505afa158015611a94573d6000803e3d6000fd5b505050506040513d6020811015611aaa57600080fd5b81019080805190602001909291905050509050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611ba357600080fd5b505af1158015611bb7573d6000803e3d6000fd5b505050506040513d6020811015611bcd57600080fd5b81019080805190602001909291905050505050565b611bea611f9e565b1515611c5e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611cf957600080fd5b505afa158015611d0d573d6000803e3d6000fd5b505050506040513d6020811015611d2357600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611dfa57600080fd5b505af1158015611e0e573d6000803e3d6000fd5b505050506040513d6020811015611e2457600080fd5b8101908080519060200190929190505050505050565b611e42611f9e565b1515611eb6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611fe0612912565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b612004611f9e565b1515612078576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006120c6611f9e565b151561213a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600654905090565b61214a611f9e565b15156121be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61220a611f9e565b151561227e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b6122f5611f9e565b1515612369576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6006548111151515612409576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001807f596f75206172652061736b696e6720666f72206d6f7265207468616e2077686181526020017f7420796f752068617665206561726e656400000000000000000000000000000081525060400191505060405180910390fd5b612415600654826128c8565b600681905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561250257600080fd5b505af1158015612516573d6000803e3d6000fd5b505050506040513d602081101561252c57600080fd5b810190808051906020019092919050505015156125d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f4661696c75726520746f2073656e642053657276696365436861726765546f6b81526020017f656e73000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b7fe1c9613b8ea03bf9b97e267900ab3ef5796b015b8473edf7e8f6f063ff56b030816040518082815260200191505060405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000612667611f9e565b15156126db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612731611f9e565b15156127a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6127ae8161291a565b50565b6000808314156127c45760009050612878565b600082840290508284828115156127d757fe5b04141515612873576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f81526020017f770000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b809150505b92915050565b60006128c083836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612aa3565b905092915050565b600061290a83836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612b6d565b905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156129e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080831182901515612b51576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612b16578082015181840152602081019050612afb565b50505050905090810190601f168015612b435780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385811515612b5f57fe5b049050809150509392505050565b60008383111582901515612c1c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612be1578082015181840152602081019050612bc6565b50505050905090810190601f168015612c0e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838503905080915050939250505056fea165627a7a723058203ca2b06ce10d40e05d4087c528a92a1eb4bfd510cd233b08a2b2d46417f1adaf0029
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 2033
Estimated Gas Usage: 7726 - 28481
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:368

balance += msg.value

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x1

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 2361
Estimated Gas Usage: 29068 - 245814
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:302

UniSwap_Zap_ContractAddress.LetsInvest.value(msg.value)()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 2361
Estimated Gas Usage: 27769 - 244466
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:302

UniSwap_Zap_ContractAddress.LetsInvest.value(msg.value)()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 818181818181818181818181deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 2361
Estimated Gas Usage: 28495 - 245241
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:302

UniSwap_Zap_ContractAddress.LetsInvest.value(msg.value)()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2100000000000002c, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 2361
Estimated Gas Usage: 27769 - 244466
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:302

UniSwap_Zap_ContractAddress.LetsInvest.value(msg.value)()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x205000000000000ff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1
Caller: [ATTACKER], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 2391
Estimated Gas Usage: 29068 - 245814
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:306

UniSwapDAIExchangeContractAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 2391
Estimated Gas Usage: 27769 - 244466
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:306

UniSwapDAIExchangeContractAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 2575
Estimated Gas Usage: 29068 - 245814
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:306

UniSwapDAIExchangeContractAddress.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 2575
Estimated Gas Usage: 27769 - 244466
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:306

UniSwapDAIExchangeContractAddress.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 2575
Estimated Gas Usage: 29068 - 245814
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:306

UniSwapDAIExchangeContractAddress.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0xffffffffffffffff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 2575
Estimated Gas Usage: 27769 - 244466
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:306

UniSwapDAIExchangeContractAddress.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000100013e813, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1
Caller: [ATTACKER], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 2641
Estimated Gas Usage: 29068 - 245814
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:307

DAI_TokenContractAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 2641
Estimated Gas Usage: 27769 - 244466
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:307

DAI_TokenContractAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 2825
Estimated Gas Usage: 29068 - 245814
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:307

DAI_TokenContractAddress.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x11ff80, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 2825
Estimated Gas Usage: 27769 - 244466
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:307

DAI_TokenContractAddress.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x888240000004ba, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 2825
Estimated Gas Usage: 29068 - 245814
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:307

DAI_TokenContractAddress.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0xffffffffffffffff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 2825
Estimated Gas Usage: 27769 - 244466
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:307

DAI_TokenContractAddress.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20080000fffffffff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1
Caller: [ATTACKER], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 2888
Estimated Gas Usage: 29068 - 245814
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:310

serviceChargeInBasisPoints

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 2888
Estimated Gas Usage: 27769 - 244466
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:310

serviceChargeInBasisPoints

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 2906
Estimated Gas Usage: 36263 - 273765
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:311

serviceChargeInBasisPoints

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8200010404cd0000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000b11, decoded_data: (2833,), value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 2906
Estimated Gas Usage: 34964 - 272417
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:311

serviceChargeInBasisPoints

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1800100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000711, decoded_data: (1809,), value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 2925
Estimated Gas Usage: 36263 - 273765
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:312

TotalServiceChargeTokens

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8200010404cd0000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000b11, decoded_data: (2833,), value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 2925
Estimated Gas Usage: 34964 - 272417
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:312

TotalServiceChargeTokens

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1800100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000711, decoded_data: (1809,), value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 2931
Estimated Gas Usage: 36263 - 273765
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:312

TotalServiceChargeTokens = TotalServiceChargeTokens + ServiceChargeTokens

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8200010404cd0000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000b11, decoded_data: (2833,), value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 2931
Estimated Gas Usage: 34964 - 272417
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:312

TotalServiceChargeTokens = TotalServiceChargeTokens + ServiceChargeTokens

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1800100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000711, decoded_data: (1809,), value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 2952
Estimated Gas Usage: 35690 - 273192
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:314

UniSwapDAIExchangeContractAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40108008004003, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000801, decoded_data: (2049,), value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 2952
Estimated Gas Usage: 34964 - 272417
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:314

UniSwapDAIExchangeContractAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1800100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000711, decoded_data: (1809,), value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 3146
Estimated Gas Usage: 35690 - 273192
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:314

UniSwapDAIExchangeContractAddress.transfer(msg.sender, UserLiquidityTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000711, decoded_data: (1809,), value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 3146
Estimated Gas Usage: 34964 - 272417
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:314

UniSwapDAIExchangeContractAddress.transfer(msg.sender, UserLiquidityTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: cccccccccccccccccccccccc2020408000800820801002800140080010801020ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000711, decoded_data: (1809,), value: 0x0
Caller: [CREATOR], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 3146
Estimated Gas Usage: 36263 - 273765
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:314

UniSwapDAIExchangeContractAddress.transfer(msg.sender, UserLiquidityTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000400000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000711, decoded_data: (1809,), value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 3146
Estimated Gas Usage: 34964 - 272417
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:314

UniSwapDAIExchangeContractAddress.transfer(msg.sender, UserLiquidityTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000003, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000711, decoded_data: (1809,), value: 0x0
Caller: [ATTACKER], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 3146
Estimated Gas Usage: 35690 - 273192
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:314

UniSwapDAIExchangeContractAddress.transfer(msg.sender, UserLiquidityTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40108008004003, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000801, decoded_data: (2049,), value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 3146
Estimated Gas Usage: 34964 - 272417
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:314

UniSwapDAIExchangeContractAddress.transfer(msg.sender, UserLiquidityTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1800100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000711, decoded_data: (1809,), value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 3362
Estimated Gas Usage: 34964 - 272417
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:315

DAI_TokenContractAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1800100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000711, decoded_data: (1809,), value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 3362
Estimated Gas Usage: 35690 - 273192
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:315

DAI_TokenContractAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x11119, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000711, decoded_data: (1809,), value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 3556
Estimated Gas Usage: 35690 - 273192
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:315

DAI_TokenContractAddress.transfer(msg.sender, residualDAIHoldings)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x26671f08c00063120, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000721, decoded_data: (1825,), value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 3556
Estimated Gas Usage: 34964 - 272417
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:315

DAI_TokenContractAddress.transfer(msg.sender, residualDAIHoldings)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x48005000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000741, decoded_data: (1857,), value: 0x0
Caller: [CREATOR], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 3556
Estimated Gas Usage: 35690 - 273192
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:315

DAI_TokenContractAddress.transfer(msg.sender, residualDAIHoldings)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x11119, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000711, decoded_data: (1809,), value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 3556
Estimated Gas Usage: 34964 - 272417
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:315

DAI_TokenContractAddress.transfer(msg.sender, residualDAIHoldings)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8601000130424200, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: cccccccccccccccccccccccc0410010420400001202000808080000100400010ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: set_serviceChargeRate(uint256), txdata: 0x02c48c3b0000000000000000000000000000000000000000000000000000000000000721, decoded_data: (1825,), value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 3848
Estimated Gas Usage: 29068 - 245814
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:319

UniSwapDAIExchangeContractAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 3848
Estimated Gas Usage: 27769 - 244466
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:319

UniSwapDAIExchangeContractAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 4042
Estimated Gas Usage: 29068 - 245814
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:319

UniSwapDAIExchangeContractAddress.transfer(msg.sender, DAILiquidityTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 4042
Estimated Gas Usage: 27769 - 244466
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:319

UniSwapDAIExchangeContractAddress.transfer(msg.sender, DAILiquidityTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 4042
Estimated Gas Usage: 29068 - 245814
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:319

UniSwapDAIExchangeContractAddress.transfer(msg.sender, DAILiquidityTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 4042
Estimated Gas Usage: 27769 - 244466
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:319

UniSwapDAIExchangeContractAddress.transfer(msg.sender, DAILiquidityTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8b000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 4042
Estimated Gas Usage: 29068 - 245814
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:319

UniSwapDAIExchangeContractAddress.transfer(msg.sender, DAILiquidityTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 4042
Estimated Gas Usage: 27769 - 244466
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:319

UniSwapDAIExchangeContractAddress.transfer(msg.sender, DAILiquidityTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 4042
Estimated Gas Usage: 29068 - 245814
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:319

UniSwapDAIExchangeContractAddress.transfer(msg.sender, DAILiquidityTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400239fffffffffff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 4042
Estimated Gas Usage: 27769 - 244466
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:319

UniSwapDAIExchangeContractAddress.transfer(msg.sender, DAILiquidityTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x30000000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1
Caller: [ATTACKER], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 4258
Estimated Gas Usage: 29068 - 245814
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:320

DAI_TokenContractAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20100000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 4258
Estimated Gas Usage: 27769 - 244466
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:320

DAI_TokenContractAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x8192c76591, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 4452
Estimated Gas Usage: 28495 - 245241
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:320

DAI_TokenContractAddress.transfer(msg.sender, residualDAIHoldings)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000800000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 4452
Estimated Gas Usage: 27769 - 244466
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:320

DAI_TokenContractAddress.transfer(msg.sender, residualDAIHoldings)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: afafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 4452
Estimated Gas Usage: 28495 - 245241
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:320

DAI_TokenContractAddress.transfer(msg.sender, residualDAIHoldings)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x180000000a5c0005b, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 4452
Estimated Gas Usage: 27769 - 244466
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:320

DAI_TokenContractAddress.transfer(msg.sender, residualDAIHoldings)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100010000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 4452
Estimated Gas Usage: 28495 - 245241
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:320

DAI_TokenContractAddress.transfer(msg.sender, residualDAIHoldings)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080040400080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 4452
Estimated Gas Usage: 27769 - 244466
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:320

DAI_TokenContractAddress.transfer(msg.sender, residualDAIHoldings)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8192c76591, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 4452
Estimated Gas Usage: 29068 - 245814
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:320

DAI_TokenContractAddress.transfer(msg.sender, residualDAIHoldings)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000184003, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 4452
Estimated Gas Usage: 27769 - 244466
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:320

DAI_TokenContractAddress.transfer(msg.sender, residualDAIHoldings)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1
Caller: [ATTACKER], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 4744
Estimated Gas Usage: 28495 - 245241
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:197

_notEntered = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 4744
Estimated Gas Usage: 27769 - 244466
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:197

_notEntered = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: afafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: fallback
PC address: 4758
Estimated Gas Usage: 28495 - 245241
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:197

_notEntered = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ServiceProvider_UniSwap_Zap
Function name: LetsInvest()
PC address: 4758
Estimated Gas Usage: 27769 - 244466
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:197

_notEntered = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: afafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ServiceProvider_UniSwap_Zap
Function name: withdrawDAI()
PC address: 5079
Estimated Gas Usage: 6935 - 77569
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:354

DAI_TokenContractAddress.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x107fffffffffffff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x1
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38bccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawDAI(), txdata: 0x020bcc9e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: withdrawDAI()
PC address: 5370
Estimated Gas Usage: 6935 - 77569
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:355

DAI_TokenContractAddress.transfer(_owner, StuckDAIHoldings)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawDAI(), txdata: 0x020bcc9e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: withdrawDAI()
PC address: 5370
Estimated Gas Usage: 6935 - 77569
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:355

DAI_TokenContractAddress.transfer(_owner, StuckDAIHoldings)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawDAI(), txdata: 0x020bcc9e, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ServiceProvider_UniSwap_Zap
Function name: withdrawDAI()
PC address: 5370
Estimated Gas Usage: 6935 - 77569
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:355

DAI_TokenContractAddress.transfer(_owner, StuckDAIHoldings)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0xa10014005, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x1
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38bccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawDAI(), txdata: 0x020bcc9e, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ServiceProvider_UniSwap_Zap
Function name: withdraw()
PC address: 6446
Estimated Gas Usage: 3559 - 38500
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:382

_owner.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1004000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x500294003000c, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: LetsInvest(), txdata: 0x082fef45, value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38bccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ServiceProvider_UniSwap_Zap
Function name: withdrawDAILiquityTokens()
PC address: 6787
Estimated Gas Usage: 7089 - 77723
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:359

UniSwapDAIExchangeContractAddress.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x410000883ffffffff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x1
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38bccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawDAILiquityTokens(), txdata: 0x4c127866, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: withdrawDAILiquityTokens()
PC address: 7078
Estimated Gas Usage: 7089 - 77723
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:360

UniSwapDAIExchangeContractAddress.transfer(_owner, StuckDAILiquityTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: bebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawDAILiquityTokens(), txdata: 0x4c127866, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: withdrawDAILiquityTokens()
PC address: 7078
Estimated Gas Usage: 7089 - 77723
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:360

UniSwapDAIExchangeContractAddress.transfer(_owner, StuckDAILiquityTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawDAILiquityTokens(), txdata: 0x4c127866, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ServiceProvider_UniSwap_Zap
Function name: withdrawDAILiquityTokens()
PC address: 7078
Estimated Gas Usage: 7089 - 77723
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:360

UniSwapDAIExchangeContractAddress.transfer(_owner, StuckDAILiquityTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0xc000000004000001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: LetsInvest(), txdata: 0x082fef45, value: 0x1
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38bccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawDAILiquityTokens(), txdata: 0x4c127866, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ServiceProvider_UniSwap_Zap
Function name: withdrawAnyOtherERC20Token(address)
PC address: 7420
Estimated Gas Usage: 5529 - 75503
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:347

_targetContractAddress.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38bccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawAnyOtherERC20Token(address), txdata: 0x66d97c29cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: withdrawAnyOtherERC20Token(address)
PC address: 7677
Estimated Gas Usage: 5529 - 75503
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:348

_targetContractAddress.transfer(_owner, OtherTokenBalance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawAnyOtherERC20Token(address), txdata: 0x66d97c29efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: withdrawAnyOtherERC20Token(address)
PC address: 7677
Estimated Gas Usage: 5529 - 75503
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:348

_targetContractAddress.transfer(_owner, OtherTokenBalance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawAnyOtherERC20Token(address), txdata: 0x66d97c292929292929292929292929292929292929292929292929292929292929292929, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ServiceProvider_UniSwap_Zap
Function name: withdrawServiceChargeTokens(uint256)
PC address: 9477
Estimated Gas Usage: 12604 - 69261
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:340

UniSwapDAIExchangeContractAddress.transfer(ServiceProviderAddress, _amountInUnits)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawServiceChargeTokens(uint256), txdata: 0xbb1f88fb0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0


time_used: 36074.12995886803 seconds
#@contract_info_time
0x3da6738c2b388ebdf2fea79554f27daa7f2d3178.sol:0.5.0:ServiceProvider_UniSwap_Zap:36074.12995886803:36100:60:36000
