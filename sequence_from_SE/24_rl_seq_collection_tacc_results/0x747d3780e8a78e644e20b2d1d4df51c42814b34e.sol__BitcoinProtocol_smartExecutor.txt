++++ 0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol  :  0.4.25  :  BitcoinProtocol ++++
210000000000000000000000000000000000000000000 is added into actors.
1189640240563751434734657924678769436416714303922 is added into actors.
Starting preprocessing.
number of genesis states: 1
total instructions: 4720
['constructor']:writes at the last depth:['1', '5', '6', '7', '8', '10', '11', '12', '13', '9', '2']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 64.94% coverage.
dynamic svars:['2', '3', '4']
static svars:['8', '10', '13', '5', '7', '6', '9', '1', '12', '11']
Ending preprocessing.
preprocessing time(s): 100.00575971603394
contract coverage: 98.64%
fallback is not reachable
Function Reads: State variables read in conditions
	name():[]
	approve(address,uint256):['3']
	add(uint256):['1', '8']
	totalSupply():[]
	transferFrom(address,address,uint256):['2']
	deadline():[]
	withdraw(uint256):['1']
	decimals():[]
	burn(uint256):['1', '2']
	round2():[]
	balanceOf(address):[]
	requestMinimum():[]
	DistributeAirdrop(address,uint256):['1', '9', '8']
	round1():[]
	progress0drop():[]
	withdrawAll():['1']
	symbol():[]
	finishDistribution():['1', '13']
	updateTokensPerEth(uint256):['1']
	transfer(address,uint256):[]
	getTokens():['13']
	Claimed(address):[]
	distributionFinished():[]
	getTokenBalance(address,address):[]
	tokensPerEth():[]
	allowance(address,address):[]
	withdrawForeignTokens(address):[]
	target0drop():[]
	totalDistributed():[]
	transferOwnership(address):[]
	DistributeAirdropMultiple(address[],uint256):[]
Function Writes: State variables written
	approve(address,uint256):['3']
	add(uint256):['8']
	updateTokensPerEth(uint256):['10']
	finishDistribution():['13']
============================
iteration:3
targets:['getTokens()', 'fallback', 'finishDistribution()', 'approve(address,uint256)', 'DistributeAirdrop(address,uint256)']
['add(uint256)']:writes at the last depth:['8']
['withdraw(uint256)']:writes at the last depth:[]
['approve(address,uint256)']:writes at the last depth:['3']
['withdrawAll()']:writes at the last depth:[]
['updateTokensPerEth(uint256)']:writes at the last depth:['10']
['finishDistribution()']:writes at the last depth:['13']
['approve(address,uint256)']:writes at the last depth:['3']
['transferOwnership(address)']:writes at the last depth:['1']
['getTokenBalance(address,address)']:writes at the last depth:[]
['burn(uint256)']:writes at the last depth:['9', '2', '8']
['DistributeAirdrop(address,uint256)']:writes at the last depth:['9', '13', '2']
['transfer(address,uint256)']:writes at the last depth:['2']
['DistributeAirdrop(address,uint256)']:writes at the last depth:['9', '13', '2']
['withdrawForeignTokens(address)']:writes at the last depth:[]
['transferFrom(address,address,uint256)']:writes at the last depth:['2', '3']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['DistributeAirdropMultiple(address[],uint256)']:writes at the last depth:['', '9', '13']
['fallback']:writes at the last depth:['4', '9', '2', '12']
['DistributeAirdropMultiple(address[],uint256)']:writes at the last depth:['', '9', '13']
['getTokens()']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['9', '13', '2']
['getTokens()']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['9', '13', '2']
['getTokens()']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['9', '2']
['getTokens()']:writes at the last depth:['4', '9', '2', '12']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '13', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '13', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['9', '2']
['fallback']:writes at the last depth:['4', '9', '2', '12']
['DistributeAirdropMultiple(address[],uint256)']:writes at the last depth:['', '9', '13']
['DistributeAirdropMultiple(address[],uint256)']:writes at the last depth:['', '9', '13']
['DistributeAirdropMultiple(address[],uint256)']:writes at the last depth:['', '9', '13']
contract coverage: 98.79%
============================
iteration:4
['DistributeAirdropMultiple(address[],uint256)', 'add(uint256)']:writes at the last depth:['8']
['DistributeAirdropMultiple(address[],uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['DistributeAirdropMultiple(address[],uint256)', 'getTokenBalance(address,address)']:writes at the last depth:[]
['DistributeAirdropMultiple(address[],uint256)', 'burn(uint256)']:writes at the last depth:['2', '9', '8']
contract coverage: 98.79%
============================
iteration:5
['DistributeAirdropMultiple(address[],uint256)', 'burn(uint256)', 'add(uint256)']:writes at the last depth:['8']
['DistributeAirdropMultiple(address[],uint256)', 'burn(uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['DistributeAirdropMultiple(address[],uint256)', 'burn(uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
contract coverage: 98.79%
============================
iteration:6
contract coverage: 98.79%
============================
iteration:7
contract coverage: 98.79%
============================
iteration:8
contract coverage: 98.79%
============================
iteration:9
['DistributeAirdropMultiple(address[],uint256)', 'getTokenBalance(address,address)', 'add(uint256)']:writes at the last depth:['8']
contract coverage: 98.79%
============================
iteration:10
contract coverage: 98.79%
============================
iteration:11
contract coverage: 98.79%
============================
iteration:12
contract coverage: 98.86%
============================
iteration:13
['DistributeAirdropMultiple(address[],uint256)', 'add(uint256)']:writes at the last depth:['8']
['DistributeAirdropMultiple(address[],uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['DistributeAirdropMultiple(address[],uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawAll()']:writes at the last depth:[]
['DistributeAirdropMultiple(address[],uint256)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['DistributeAirdropMultiple(address[],uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['DistributeAirdropMultiple(address[],uint256)', 'transferOwnership(address)']:writes at the last depth:['1']
['DistributeAirdropMultiple(address[],uint256)', 'getTokenBalance(address,address)']:writes at the last depth:[]
['DistributeAirdropMultiple(address[],uint256)', 'burn(uint256)']:writes at the last depth:['2', '9', '8']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)']:writes at the last depth:[]
contract coverage: 98.86%
============================
iteration:14
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'add(uint256)']:writes at the last depth:['8']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'withdraw(uint256)']:writes at the last depth:[]
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'approve(address,uint256)']:writes at the last depth:['3']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'approve(address,uint256)']:writes at the last depth:['3']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'transfer(address,uint256)']:writes at the last depth:['2']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)']:writes at the last depth:[]
contract coverage: 98.86%
============================
iteration:15
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'add(uint256)']:writes at the last depth:['8']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'withdraw(uint256)']:writes at the last depth:[]
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'approve(address,uint256)']:writes at the last depth:['3']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'withdrawAll()']:writes at the last depth:[]
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'approve(address,uint256)']:writes at the last depth:['3']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)']:writes at the last depth:[]
contract coverage: 98.86%
============================
iteration:16
contract coverage: 98.86%
============================
iteration:17
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'transferOwnership(address)', 'add(uint256)']:writes at the last depth:['8']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'transferOwnership(address)', 'approve(address,uint256)']:writes at the last depth:['3']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'transferOwnership(address)', 'withdrawAll()']:writes at the last depth:[]
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'transferOwnership(address)', 'approve(address,uint256)']:writes at the last depth:['3']
contract coverage: 98.86%
============================
iteration:18
contract coverage: 98.86%
============================
iteration:19
contract coverage: 98.86%
============================
iteration:20
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'approve(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['DistributeAirdropMultiple(address[],uint256)', 'withdrawForeignTokens(address)', 'approve(address,uint256)', 'burn(uint256)']:writes at the last depth:['2', '9', '8']
contract coverage: 98.86%
============================
iteration:21
contract coverage: 98.86%
============================
iteration:22
contract coverage: 98.86%
============================
iteration:23
contract coverage: 98.86%
============================
iteration:24
['DistributeAirdropMultiple(address[],uint256)', 'getTokenBalance(address,address)', 'add(uint256)']:writes at the last depth:['8']
['DistributeAirdropMultiple(address[],uint256)', 'getTokenBalance(address,address)', 'withdrawAll()']:writes at the last depth:[]
['DistributeAirdropMultiple(address[],uint256)', 'getTokenBalance(address,address)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['DistributeAirdropMultiple(address[],uint256)', 'getTokenBalance(address,address)', 'approve(address,uint256)']:writes at the last depth:['3']
contract coverage: 98.86%
============================
iteration:25
['DistributeAirdropMultiple(address[],uint256)', 'getTokenBalance(address,address)', 'approve(address,uint256)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
contract coverage: 98.86%
============================
iteration:26
contract coverage: 98.86%
============================
iteration:27
contract coverage: 98.86%
============================
iteration:28
contract coverage: 98.86%
============================
iteration:29
contract coverage: 98.86%
============================
iteration:30
contract coverage: 98.86%
============================
iteration:31
contract coverage: 98.86%
============================
iteration:32
contract coverage: 98.86%
============================
iteration:33
contract coverage: 98.86%
============================
iteration:34
contract coverage: 98.86%
============================
iteration:35
contract coverage: 98.86%
============================
iteration:36
['DistributeAirdropMultiple(address[],uint256)', 'DistributeAirdrop(address,uint256)']:writes at the last depth:['2', '13', '9']
contract coverage: 98.86%
============================
iteration:37
contract coverage: 99.11%
============================
iteration:38
['fallback', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'withdraw(uint256)']:writes at the last depth:[]
['fallback', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['fallback', 'finishDistribution()']:writes at the last depth:['13']
['fallback', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferOwnership(address)']:writes at the last depth:['1']
['fallback', 'getTokenBalance(address,address)']:writes at the last depth:[]
['fallback', 'burn(uint256)']:writes at the last depth:['2', '9', '8']
['fallback', 'DistributeAirdrop(address,uint256)']:writes at the last depth:['2', '13', '9']
['fallback', 'transfer(address,uint256)']:writes at the last depth:['2']
['fallback', 'DistributeAirdrop(address,uint256)']:writes at the last depth:['2', '13', '9']
['fallback', 'withdrawForeignTokens(address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)']:writes at the last depth:['2', '3']
contract coverage: 99.11%
============================
iteration:39
contract coverage: 99.11%
============================
iteration:40
['fallback', 'withdrawForeignTokens(address)', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'withdrawForeignTokens(address)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'withdrawForeignTokens(address)', 'approve(address,uint256)']:writes at the last depth:['3']
contract coverage: 99.11%
============================
iteration:41
contract coverage: 99.11%
============================
iteration:42
contract coverage: 99.11%
============================
iteration:43
contract coverage: 99.11%
============================
iteration:44
contract coverage: 99.11%
============================
iteration:45
contract coverage: 99.11%
============================
iteration:46
contract coverage: 99.11%
============================
iteration:47
contract coverage: 99.11%
============================
iteration:48
contract coverage: 99.11%
============================
iteration:49
contract coverage: 99.11%
============================
iteration:50
contract coverage: 99.11%
============================
iteration:51
contract coverage: 99.11%
============================
iteration:52
contract coverage: 99.11%
============================
iteration:53
contract coverage: 99.11%
============================
iteration:54
contract coverage: 99.11%
============================
iteration:55
contract coverage: 99.11%
============================
iteration:56
contract coverage: 99.11%
============================
iteration:57
contract coverage: 99.11%
============================
iteration:58
contract coverage: 99.11%
============================
iteration:59
contract coverage: 99.11%
============================
iteration:60
contract coverage: 99.11%
============================
iteration:61
contract coverage: 99.11%
============================
iteration:62
contract coverage: 99.11%
============================
iteration:63
contract coverage: 99.11%
============================
iteration:64
contract coverage: 99.11%
============================
iteration:65
contract coverage: 99.11%
============================
iteration:66
contract coverage: 99.11%
============================
iteration:67
contract coverage: 99.11%
============================
iteration:68
contract coverage: 99.11%
============================
iteration:69
contract coverage: 99.11%
============================
iteration:70
contract coverage: 99.11%
============================
iteration:71
contract coverage: 99.11%
============================
iteration:72
contract coverage: 99.11%
============================
iteration:73
contract coverage: 99.11%
============================
iteration:74
contract coverage: 99.11%
============================
iteration:75
contract coverage: 99.11%
============================
iteration:76
contract coverage: 99.11%
============================
iteration:77
contract coverage: 99.11%
============================
iteration:78
contract coverage: 99.11%
============================
iteration:79
contract coverage: 99.11%
============================
iteration:80
contract coverage: 99.11%
============================
iteration:81
contract coverage: 99.11%
============================
iteration:82
contract coverage: 99.11%
============================
iteration:83
contract coverage: 99.11%
============================
iteration:84
contract coverage: 99.11%
============================
iteration:85
contract coverage: 99.11%
============================
iteration:86
contract coverage: 99.11%
============================
iteration:87
contract coverage: 99.11%
============================
iteration:88
contract coverage: 99.11%
============================
iteration:89
contract coverage: 99.11%
============================
iteration:90
contract coverage: 99.11%
============================
iteration:91
contract coverage: 99.11%
============================
iteration:92
contract coverage: 99.11%
============================
iteration:93
contract coverage: 99.11%
============================
iteration:94
contract coverage: 99.11%
============================
iteration:95
contract coverage: 99.11%
============================
iteration:96
contract coverage: 99.11%
============================
iteration:97
contract coverage: 99.11%
============================
iteration:98
contract coverage: 99.11%
============================
iteration:99
contract coverage: 99.11%
============================
iteration:100
contract coverage: 99.11%
============================
iteration:101
contract coverage: 99.11%
============================
iteration:102
contract coverage: 99.11%
============================
iteration:103
contract coverage: 99.11%
============================
iteration:104
contract coverage: 99.11%
============================
iteration:105
contract coverage: 99.11%
#@statespace
4143 nodes, 4142 edges, 54302 total states
#@coverage
Achieved 6.69% coverage for code: 608060405233600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506301cd6d0042016005556301cd6d00420160065563018b8200420160075572096aae88c021c7aa8afeee68bd08000000000060085567016345785d8a0000600a5564012a05f200600b556000600c5573d0615037bbe05e45b75f26858d9cba76e4d969b2600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600d60146101000a81548160ff0219169083151502179055503480156200011157600080fd5b50600080905033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000195600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826200019d640100000000026401000000009004565b505062000367565b6000600d60149054906101000a900460ff16151515620001bc57600080fd5b620001e1826009546200034a6401000000000262002395179091906401000000009004565b6009819055506200024982600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200034a6401000000000262002395179091906401000000009004565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600081830190508281101515156200035e57fe5b80905092915050565b61264b80620003776000396000f30060806040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610195578063095ea7b3146102255780631003e2d21461028a57806318160ddd146102b757806323b872dd146102e257806329dcb0cf146103675780632e1a7d4d14610392578063313ce567146103bf57806342966c68146103ea578063532b581c1461041757806370a082311461044257806374ff2324146104995780637809231c146104c4578063836e81801461051157806383afd6da1461053c578063853828b61461056757806395d89b411461057e5780639b1cbccc1461060e5780639ea407be1461063d578063a9059cbb1461066a578063aa6ca808146106cf578063b449c24d146106d9578063c108d54214610734578063c489744b14610763578063cbdd69b5146107da578063dd62ed3e14610805578063e58fc54c1461087c578063e6a092f5146108d7578063efca2eed14610902578063f2fde38b1461092d578063f3ccb40114610970575b6101936109b5565b005b3480156101a157600080fd5b506101aa610db8565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ea5780820151818401526020810190506101cf565b50505050905090810190601f1680156102175780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023157600080fd5b50610270600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610df1565b604051808215151515815260200191505060405180910390f35b34801561029657600080fd5b506102b560048036038101908080359060200190929190505050610f7f565b005b3480156102c357600080fd5b506102cc611036565b6040518082815260200191505060405180910390f35b3480156102ee57600080fd5b5061034d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061103c565b604051808215151515815260200191505060405180910390f35b34801561037357600080fd5b5061037c611412565b6040518082815260200191505060405180910390f35b34801561039e57600080fd5b506103bd60048036038101908080359060200190929190505050611418565b005b3480156103cb57600080fd5b506103d46114e6565b6040518082815260200191505060405180910390f35b3480156103f657600080fd5b50610415600480360381019080803590602001909291905050506114eb565b005b34801561042357600080fd5b5061042c6116b7565b6040518082815260200191505060405180910390f35b34801561044e57600080fd5b50610483600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116bd565b6040518082815260200191505060405180910390f35b3480156104a557600080fd5b506104ae611706565b6040518082815260200191505060405180910390f35b3480156104d057600080fd5b5061050f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611711565b005b34801561051d57600080fd5b5061052661177b565b6040518082815260200191505060405180910390f35b34801561054857600080fd5b50610551611781565b6040518082815260200191505060405180910390f35b34801561057357600080fd5b5061057c611787565b005b34801561058a57600080fd5b50610593611870565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105d35780820151818401526020810190506105b8565b50505050905090810190601f1680156106005780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561061a57600080fd5b506106236118a9565b604051808215151515815260200191505060405180910390f35b34801561064957600080fd5b5061066860048036038101908080359060200190929190505050611971565b005b34801561067657600080fd5b506106b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a0e565b604051808215151515815260200191505060405180910390f35b6106d76109b5565b005b3480156106e557600080fd5b5061071a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c49565b604051808215151515815260200191505060405180910390f35b34801561074057600080fd5b50610749611c69565b604051808215151515815260200191505060405180910390f35b34801561076f57600080fd5b506107c4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c7c565b6040518082815260200191505060405180910390f35b3480156107e657600080fd5b506107ef611d67565b6040518082815260200191505060405180910390f35b34801561081157600080fd5b50610866600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d6d565b6040518082815260200191505060405180910390f35b34801561088857600080fd5b506108bd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611df4565b604051808215151515815260200191505060405180910390f35b3480156108e357600080fd5b506108ec612039565b6040518082815260200191505060405180910390f35b34801561090e57600080fd5b5061091761203f565b6040518082815260200191505060405180910390f35b34801561093957600080fd5b5061096e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612045565b005b34801561097c57600080fd5b506109b36004803603810190808035906020019082018035906020019190919293919293908035906020019092919050505061211c565b005b600080600080600080600080600d60149054906101000a900460ff161515156109dd57600080fd5b6000975060009650600095506706f05b59d3b200009450670de0b6b3a764000093506729a2241af62c00009250670de0b6b3a7640000610a2834600a546121d190919063ffffffff16565b811515610a3157fe5b04975033915066038d7ea4c680003410158015610a4f575060055442105b8015610a5c575060075442105b8015610a69575060065442105b15610ae757843410158015610a7d57508334105b15610a99576064600a8902811515610a9157fe5b049550610ae2565b833410158015610aa857508234105b15610ac457606460328902811515610abc57fe5b049550610ae1565b8234101515610ae0576064604b8902811515610adc57fe5b0495505b5b5b610b71565b66038d7ea4c680003410158015610aff575060055442105b8015610b0c575060075442115b8015610b19575060065442105b15610b6b57833410158015610b2d57508234105b15610b4957606460198902811515610b4157fe5b049550610b66565b8234101515610b6557606460328902811515610b6157fe5b0495505b5b610b70565b600095505b5b85880196506000881415610c8757655af3107a4000905060001515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515148015610bec5750600b54600c5411155b15610c6b57610bfb8282612209565b506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600c60008154809291906001019190505550610c82565b66038d7ea4c680003410151515610c8157600080fd5b5b610d1c565b600088118015610c9e575066038d7ea4c680003410155b15610d04576005544210158015610cb757506007544210155b8015610cc4575060065442105b15610cd957610cd38289612209565b50610cff565b8434101515610cf257610cec8288612209565b50610cfe565b610cfc8289612209565b505b5b610d1b565b66038d7ea4c680003410151515610d1a57600080fd5b5b5b600854600954101515610d45576001600d60146101000a81548160ff0219169083151502179055505b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610dad573d6000803e3d6000fd5b505050505050505050565b6040805190810160405280601081526020017f426974636f696e2050726f746f636f6c0000000000000000000000000000000081525081565b6000808214158015610e8057506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610e8e5760009050610f79565b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fdd57600080fd5b610ff28260085461239590919063ffffffff16565b9050806008819055507f90f1f758f0e2b40929b1fd48df7ebe10afc272a362e1f0d63a90b8b4715d799f826040518082815260200191505060405180910390a15050565b60085481565b600060606004810160003690501015151561105357fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561108f57600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111515156110dd57600080fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561116857600080fd5b6111ba83600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123b190919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061128c83600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123b190919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061135e83600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461239590919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60055481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561147657600080fd5b819050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156114e1573d6000803e3d6000fd5b505050565b600881565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561154957600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561159757600080fd5b3390506115ec82600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123b190919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611644826008546123b190919063ffffffff16565b60088190555061165f826009546123b190919063ffffffff16565b6009819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b60065481565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b66038d7ea4c6800081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561176d57600080fd5b61177782826123ca565b5050565b60075481565b600c5481565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117e657600080fd5b3091508173ffffffffffffffffffffffffffffffffffffffff16319050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561186b573d6000803e3d6000fd5b505050565b6040805190810160405280600381526020017f425450000000000000000000000000000000000000000000000000000000000081525081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561190757600080fd5b600d60149054906101000a900460ff1615151561192357600080fd5b6001600d60146101000a81548160ff0219169083151502179055507f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc60405160405180910390a16001905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119cd57600080fd5b80600a819055507ff7729fa834bbef70b6d3257c2317a562aa88b56c81b544814f93dc5963a2c003816040518082815260200191505060405180910390a150565b6000604060048101600036905010151515611a2557fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515611a6157600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515611aaf57600080fd5b611b0183600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123b190919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b9683600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461239590919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b60046020528060005260406000206000915054906101000a900460ff1681565b600d60149054906101000a900460ff1681565b60008060008491508173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611d1f57600080fd5b505af1158015611d33573d6000803e3d6000fd5b505050506040513d6020811015611d4957600080fd5b81019080805190602001909291905050509050809250505092915050565b600a5481565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e5557600080fd5b8391508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611ef357600080fd5b505af1158015611f07573d6000803e3d6000fd5b505050506040513d6020811015611f1d57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611ff557600080fd5b505af1158015612009573d6000803e3d6000fd5b505050506040513d602081101561201f57600080fd5b810190808051906020019092919050505092505050919050565b600b5481565b60095481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120a157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156121195780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561217a57600080fd5b600090505b838390508110156121cb576121be848483818110151561219b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16836123ca565b808060010191505061217f565b50505050565b6000808314156121e45760009050612203565b81830290508183828115156121f557fe5b041415156121ff57fe5b8090505b92915050565b6000600d60149054906101000a900460ff1615151561222757600080fd5b61223c8260095461239590919063ffffffff16565b60098190555061229482600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461239590919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600081830190508281101515156123a857fe5b80905092915050565b60008282111515156123bf57fe5b818303905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561242657600080fd5b60008111151561243557600080fd5b60085460095410151561244757600080fd5b61249981600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461239590919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506124f18160095461239590919063ffffffff16565b600981905550600854600954101515612520576001600d60146101000a81548160ff0219169083151502179055505b8173ffffffffffffffffffffffffffffffffffffffff167fada993ad066837289fe186cd37227aa338d27519a8a1547472ecb9831486d27282600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808381526020018281526020019250505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505600a165627a7a72305820cf5e472b088f8601b64060c7e2bef7bba67207d2b728677d8383e67e90af049a0029
#@coverage
Achieved 99.11% coverage for code: 60806040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610195578063095ea7b3146102255780631003e2d21461028a57806318160ddd146102b757806323b872dd146102e257806329dcb0cf146103675780632e1a7d4d14610392578063313ce567146103bf57806342966c68146103ea578063532b581c1461041757806370a082311461044257806374ff2324146104995780637809231c146104c4578063836e81801461051157806383afd6da1461053c578063853828b61461056757806395d89b411461057e5780639b1cbccc1461060e5780639ea407be1461063d578063a9059cbb1461066a578063aa6ca808146106cf578063b449c24d146106d9578063c108d54214610734578063c489744b14610763578063cbdd69b5146107da578063dd62ed3e14610805578063e58fc54c1461087c578063e6a092f5146108d7578063efca2eed14610902578063f2fde38b1461092d578063f3ccb40114610970575b6101936109b5565b005b3480156101a157600080fd5b506101aa610db8565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ea5780820151818401526020810190506101cf565b50505050905090810190601f1680156102175780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023157600080fd5b50610270600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610df1565b604051808215151515815260200191505060405180910390f35b34801561029657600080fd5b506102b560048036038101908080359060200190929190505050610f7f565b005b3480156102c357600080fd5b506102cc611036565b6040518082815260200191505060405180910390f35b3480156102ee57600080fd5b5061034d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061103c565b604051808215151515815260200191505060405180910390f35b34801561037357600080fd5b5061037c611412565b6040518082815260200191505060405180910390f35b34801561039e57600080fd5b506103bd60048036038101908080359060200190929190505050611418565b005b3480156103cb57600080fd5b506103d46114e6565b6040518082815260200191505060405180910390f35b3480156103f657600080fd5b50610415600480360381019080803590602001909291905050506114eb565b005b34801561042357600080fd5b5061042c6116b7565b6040518082815260200191505060405180910390f35b34801561044e57600080fd5b50610483600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116bd565b6040518082815260200191505060405180910390f35b3480156104a557600080fd5b506104ae611706565b6040518082815260200191505060405180910390f35b3480156104d057600080fd5b5061050f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611711565b005b34801561051d57600080fd5b5061052661177b565b6040518082815260200191505060405180910390f35b34801561054857600080fd5b50610551611781565b6040518082815260200191505060405180910390f35b34801561057357600080fd5b5061057c611787565b005b34801561058a57600080fd5b50610593611870565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105d35780820151818401526020810190506105b8565b50505050905090810190601f1680156106005780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561061a57600080fd5b506106236118a9565b604051808215151515815260200191505060405180910390f35b34801561064957600080fd5b5061066860048036038101908080359060200190929190505050611971565b005b34801561067657600080fd5b506106b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a0e565b604051808215151515815260200191505060405180910390f35b6106d76109b5565b005b3480156106e557600080fd5b5061071a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c49565b604051808215151515815260200191505060405180910390f35b34801561074057600080fd5b50610749611c69565b604051808215151515815260200191505060405180910390f35b34801561076f57600080fd5b506107c4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c7c565b6040518082815260200191505060405180910390f35b3480156107e657600080fd5b506107ef611d67565b6040518082815260200191505060405180910390f35b34801561081157600080fd5b50610866600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d6d565b6040518082815260200191505060405180910390f35b34801561088857600080fd5b506108bd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611df4565b604051808215151515815260200191505060405180910390f35b3480156108e357600080fd5b506108ec612039565b6040518082815260200191505060405180910390f35b34801561090e57600080fd5b5061091761203f565b6040518082815260200191505060405180910390f35b34801561093957600080fd5b5061096e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612045565b005b34801561097c57600080fd5b506109b36004803603810190808035906020019082018035906020019190919293919293908035906020019092919050505061211c565b005b600080600080600080600080600d60149054906101000a900460ff161515156109dd57600080fd5b6000975060009650600095506706f05b59d3b200009450670de0b6b3a764000093506729a2241af62c00009250670de0b6b3a7640000610a2834600a546121d190919063ffffffff16565b811515610a3157fe5b04975033915066038d7ea4c680003410158015610a4f575060055442105b8015610a5c575060075442105b8015610a69575060065442105b15610ae757843410158015610a7d57508334105b15610a99576064600a8902811515610a9157fe5b049550610ae2565b833410158015610aa857508234105b15610ac457606460328902811515610abc57fe5b049550610ae1565b8234101515610ae0576064604b8902811515610adc57fe5b0495505b5b5b610b71565b66038d7ea4c680003410158015610aff575060055442105b8015610b0c575060075442115b8015610b19575060065442105b15610b6b57833410158015610b2d57508234105b15610b4957606460198902811515610b4157fe5b049550610b66565b8234101515610b6557606460328902811515610b6157fe5b0495505b5b610b70565b600095505b5b85880196506000881415610c8757655af3107a4000905060001515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515148015610bec5750600b54600c5411155b15610c6b57610bfb8282612209565b506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600c60008154809291906001019190505550610c82565b66038d7ea4c680003410151515610c8157600080fd5b5b610d1c565b600088118015610c9e575066038d7ea4c680003410155b15610d04576005544210158015610cb757506007544210155b8015610cc4575060065442105b15610cd957610cd38289612209565b50610cff565b8434101515610cf257610cec8288612209565b50610cfe565b610cfc8289612209565b505b5b610d1b565b66038d7ea4c680003410151515610d1a57600080fd5b5b5b600854600954101515610d45576001600d60146101000a81548160ff0219169083151502179055505b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610dad573d6000803e3d6000fd5b505050505050505050565b6040805190810160405280601081526020017f426974636f696e2050726f746f636f6c0000000000000000000000000000000081525081565b6000808214158015610e8057506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610e8e5760009050610f79565b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fdd57600080fd5b610ff28260085461239590919063ffffffff16565b9050806008819055507f90f1f758f0e2b40929b1fd48df7ebe10afc272a362e1f0d63a90b8b4715d799f826040518082815260200191505060405180910390a15050565b60085481565b600060606004810160003690501015151561105357fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561108f57600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111515156110dd57600080fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561116857600080fd5b6111ba83600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123b190919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061128c83600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123b190919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061135e83600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461239590919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60055481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561147657600080fd5b819050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156114e1573d6000803e3d6000fd5b505050565b600881565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561154957600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561159757600080fd5b3390506115ec82600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123b190919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611644826008546123b190919063ffffffff16565b60088190555061165f826009546123b190919063ffffffff16565b6009819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b60065481565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b66038d7ea4c6800081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561176d57600080fd5b61177782826123ca565b5050565b60075481565b600c5481565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117e657600080fd5b3091508173ffffffffffffffffffffffffffffffffffffffff16319050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561186b573d6000803e3d6000fd5b505050565b6040805190810160405280600381526020017f425450000000000000000000000000000000000000000000000000000000000081525081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561190757600080fd5b600d60149054906101000a900460ff1615151561192357600080fd5b6001600d60146101000a81548160ff0219169083151502179055507f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc60405160405180910390a16001905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119cd57600080fd5b80600a819055507ff7729fa834bbef70b6d3257c2317a562aa88b56c81b544814f93dc5963a2c003816040518082815260200191505060405180910390a150565b6000604060048101600036905010151515611a2557fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515611a6157600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515611aaf57600080fd5b611b0183600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123b190919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b9683600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461239590919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b60046020528060005260406000206000915054906101000a900460ff1681565b600d60149054906101000a900460ff1681565b60008060008491508173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611d1f57600080fd5b505af1158015611d33573d6000803e3d6000fd5b505050506040513d6020811015611d4957600080fd5b81019080805190602001909291905050509050809250505092915050565b600a5481565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e5557600080fd5b8391508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611ef357600080fd5b505af1158015611f07573d6000803e3d6000fd5b505050506040513d6020811015611f1d57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611ff557600080fd5b505af1158015612009573d6000803e3d6000fd5b505050506040513d602081101561201f57600080fd5b810190808051906020019092919050505092505050919050565b600b5481565b60095481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120a157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156121195780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561217a57600080fd5b600090505b838390508110156121cb576121be848483818110151561219b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16836123ca565b808060010191505061217f565b50505050565b6000808314156121e45760009050612203565b81830290508183828115156121f557fe5b041415156121ff57fe5b8090505b92915050565b6000600d60149054906101000a900460ff1615151561222757600080fd5b61223c8260095461239590919063ffffffff16565b60098190555061229482600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461239590919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600081830190508281101515156123a857fe5b80905092915050565b60008282111515156123bf57fe5b818303905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561242657600080fd5b60008111151561243557600080fd5b60085460095410151561244757600080fd5b61249981600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461239590919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506124f18160095461239590919063ffffffff16565b600981905550600854600954101515612520576001600d60146101000a81548160ff0219169083151502179055505b8173ffffffffffffffffffffffffffffffffffffffff167fada993ad066837289fe186cd37227aa338d27519a8a1547472ecb9831486d27282600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808381526020018281526020019250505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505600a165627a7a72305820cf5e472b088f8601b64060c7e2bef7bba67207d2b728677d8383e67e90af049a0029
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BitcoinProtocol
Function name: constructor
PC address: 76
Estimated Gas Usage: 76299 - 342132
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:74

now + 350 * 1 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BitcoinProtocol
Function name: constructor
PC address: 86
Estimated Gas Usage: 76299 - 342132
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:75

now + 350 * 1 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BitcoinProtocol
Function name: constructor
PC address: 96
Estimated Gas Usage: 76299 - 342132
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:76

now + 300 * 1 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BitcoinProtocol
Function name: fallback
PC address: 2645
Estimated Gas Usage: 2850 - 3275
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:185

msg.value >= requestMinimum && now < deadline && now < round1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x38d7ea4c68000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BitcoinProtocol
Function name: fallback
PC address: 2658
Estimated Gas Usage: 2870 - 3295
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:185

msg.value >= requestMinimum && now < deadline && now < round1 && now < round2

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x38d7ea4c68000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BitcoinProtocol
Function name: fallback
PC address: 2670
Estimated Gas Usage: 2887 - 3312
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:185

if (msg.value >= requestMinimum && now < deadline && now < round1 && now < round2) {
            if(msg.value >= bonusCond1 && msg.value < bonusCond2){
                countbonus = tokens * 10 / 100;
            }else if(msg.value >= bonusCond2 && msg.value < bonusCond3){
                countbonus = tokens * 50 / 100;
            }else if(msg.value >= bonusCond3){
                countbonus = tokens * 75 / 100;
            }
        }else if(msg.value >= requestMinimum && now < deadline && now > round1 && now < round2){
            if(msg.value >= bonusCond2 && msg.value < bonusCond3){
                countbonus = tokens * 25 / 100;
            }else if(msg.value >= bonusCond3){
                countbonus = tokens * 50 / 100;
            }
        }else{
            countbonus = 0;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x38d7ea4c68000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BitcoinProtocol
Function name: fallback
PC address: 2821
Estimated Gas Usage: 3748 - 4173
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:193

msg.value >= requestMinimum && now < deadline && now > round1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x38d7ea4c68000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BitcoinProtocol
Function name: fallback
PC address: 2834
Estimated Gas Usage: 3768 - 4193
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:193

msg.value >= requestMinimum && now < deadline && now > round1 && now < round2

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x38d7ea4c68000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BitcoinProtocol
Function name: fallback
PC address: 2846
Estimated Gas Usage: 3785 - 4210
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:193

if(msg.value >= requestMinimum && now < deadline && now > round1 && now < round2){
            if(msg.value >= bonusCond2 && msg.value < bonusCond3){
                countbonus = tokens * 25 / 100;
            }else if(msg.value >= bonusCond3){
                countbonus = tokens * 50 / 100;
            }
        }else{
            countbonus = 0;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000480c80000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x38d7ea4c68000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BitcoinProtocol
Function name: fallback
PC address: 3247
Estimated Gas Usage: 4724 - 5149
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:215

now >= deadline && now >= round1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x38d7ea4c68000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BitcoinProtocol
Function name: fallback
PC address: 3261
Estimated Gas Usage: 5557 - 5982
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:215

now >= deadline && now >= round1 && now < round2

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x38d7ea4c68000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BitcoinProtocol
Function name: fallback
PC address: 3273
Estimated Gas Usage: 5574 - 5999
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:215

if( now >= deadline && now >= round1 && now < round2){
                distr(investor, tokens);
            }else{
                if(msg.value >= bonusCond1){
                    distr(investor, bonus);
                }else{
                    distr(investor, tokens);
                }   
            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x38d7ea4c68000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BitcoinProtocol
Function name: transferFrom(address,address,uint256)
PC address: 4178
Estimated Gas Usage: 384 - 479
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:255

function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {

        require(_to != address(0));
        require(_amount <= balances[_from]);
        require(_amount <= allowed[_from][msg.sender]);
        
        balances[_from] = balances[_from].sub(_amount);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(_from, _to, _amount);
        return true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BitcoinProtocol
Function name: transfer(address,uint256)
PC address: 6692
Estimated Gas Usage: 681 - 776
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:244

function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

        require(_to != address(0));
        require(_amount <= balances[msg.sender]);
        
        balances[msg.sender] = balances[msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(msg.sender, _to, _amount);
        return true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BitcoinProtocol
Function name: getTokenBalance(address,address)
PC address: 7458
Estimated Gas Usage: 2490 - 37428
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:281

t.balanceOf(who)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getTokenBalance(address,address), txdata: 0xc489744b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BitcoinProtocol
Function name: withdrawForeignTokens(address)
PC address: 7926
Estimated Gas Usage: 5918 - 76173
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:314

token.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c800000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BitcoinProtocol
Function name: withdrawForeignTokens(address)
PC address: 8018
Estimated Gas Usage: 5918 - 76173
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:315

owner

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c800000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BitcoinProtocol
Function name: withdrawForeignTokens(address)
PC address: 8184
Estimated Gas Usage: 5918 - 76173
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:315

token.transfer(owner, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c800000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BitcoinProtocol
Function name: withdrawForeignTokens(address)
PC address: 8184
Estimated Gas Usage: 5918 - 76173
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:315

token.transfer(owner, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BitcoinProtocol
Function name: withdrawForeignTokens(address)
PC address: 8184
Estimated Gas Usage: 5918 - 76173
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:315

token.transfer(owner, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c800000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BitcoinProtocol
Function name: add(uint256)
PC address: 9127
Estimated Gas Usage: 1987 - 2412
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:306

totalSupply.add(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: add(uint256), txdata: 0x1003e2d2fffffffffffffffffffffffffff7, decoded_data: (115792089237316195423570985008687707146563197890032290217993130172659575816192,), value: 0x0


time_used: 36046.123932123184 seconds
#@contract_info_time
0x747d3780e8a78e644e20b2d1d4df51c42814b34e.sol:0.4.25:BitcoinProtocol:36046.123932123184:36100:60:36000
