++++ 0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol  :  0.4.26  :  LiquidTokenConverter ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 9489
['constructor']:writes at the last depth:['3', '8', '0', '2', '4']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 71.34% coverage.
dynamic svars:['7', '6', '41']
static svars:['3', '5', '2', '0', '1', '8', '4']
Ending preprocessing.
preprocessing time(s): 101.02956914901733
contract coverage: 59.31%
acceptAnchorOwnership() is not reachable
acceptTokenOwnership() is not reachable
acceptOwnership() is not reachable
connectorTokens(uint256) is not reachable
getReturn(address,address,uint256) is not reachable
reserveTokens(uint256) is not reachable
rateAndFee(address,address,uint256) is not reachable
reserveWeight(address) is not reachable
getConnectorBalance(address) is not reachable
reserveBalance(address) is not reachable
withdrawETH(address) is not reachable
convert(address,address,uint256,address,address) is not reachable
addReserve(address,uint32) is not reachable
withdrawTokens(address,address,uint256) is not reachable
updateRegistry() is not reachable
upgrade() is not reachable
Function Reads: State variables read in conditions
	restrictRegistryUpdate(bool):[]
	reserveRatio():[]
	connectors(address):[]
	hasETHReserve():[]
	connectorTokens(uint256):[]
	reserveWeight(address):[]
	getReturn(address,address,uint256):[]
	transferTokenOwnership(address):[]
	isActive():[]
	onlyOwnerCanUpdateRegistry():[]
	acceptTokenOwnership():[]
	withdrawFromAnchor(address,address,uint256):[]
	converterType():[]
	rateAndFee(address,address,uint256):[]
	updateRegistry():[]
	setConversionWhitelist(address):[]
	version():[]
	conversionFee():[]
	withdrawTokens(address,address,uint256):[]
	prevRegistry():[]
	transferAnchorOwnership(address):[]
	withdrawETH(address):[]
	addReserve(address,uint32):[]
	connectorTokenCount():[]
	acceptOwnership():[]
	registry():[]
	owner():[]
	maxConversionFee():[]
	reserveTokenCount():[]
	restoreRegistry():[]
	conversionsEnabled():[]
	conversionWhitelist():[]
	acceptAnchorOwnership():[]
	reserveTokens(uint256):[]
	isV28OrHigher():[]
	anchor():[]
	newOwner():[]
	upgrade():[]
	reserves(address):[]
	getConnectorBalance(address):[]
	reserveBalance(address):[]
	convert(address,address,uint256,address,address):[]
	setConversionFee(uint32):[]
	transferOwnership(address):[]
	token():[]
Function Writes: State variables written
	restrictRegistryUpdate(bool):['3']
	setConversionWhitelist(address):['5']
	withdrawETH(address):['3']
	withdrawTokens(address,address,uint256):['3']
	restoreRegistry():['2']
	acceptOwnership():['0', '1']
	convert(address,address,uint256,address,address):['3']
	transferOwnership(address):['1']
	setConversionFee(uint32):['8']
	acceptTokenOwnership():['7']
	updateRegistry():['3', '2']
	upgrade():['1']
	acceptAnchorOwnership():['7']
	addReserve(address,uint32):['7']
============================
iteration:3
targets:['acceptAnchorOwnership()', 'acceptTokenOwnership()', 'acceptOwnership()', 'connectorTokens(uint256)', 'getReturn(address,address,uint256)', 'reserveTokens(uint256)', 'rateAndFee(address,address,uint256)', 'reserveWeight(address)', 'getConnectorBalance(address)', 'reserveBalance(address)', 'withdrawETH(address)', 'convert(address,address,uint256,address,address)', 'addReserve(address,uint32)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'upgrade()']
['restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['isActive()']:writes at the last depth:[]
['setConversionWhitelist(address)']:writes at the last depth:['5']
['restoreRegistry()']:writes at the last depth:['2']
['withdrawFromAnchor(address,address,uint256)']:writes at the last depth:[]
['transferOwnership(address)']:writes at the last depth:['1']
['transferTokenOwnership(address)']:writes at the last depth:[]
['setConversionFee(uint32)']:writes at the last depth:['8']
['transferAnchorOwnership(address)']:writes at the last depth:[]
['updateRegistry()']:writes at the last depth:['2', '3']
['updateRegistry()']:writes at the last depth:['2', '3']
['addReserve(address,uint32)']:writes at the last depth:['', '8', '7', '6']
['withdrawTokens(address,address,uint256)']:writes at the last depth:['3']
contract coverage: 59.31%
============================
iteration:4
['withdrawTokens(address,address,uint256)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['withdrawTokens(address,address,uint256)', 'isActive()']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'setConversionWhitelist(address)']:writes at the last depth:['5']
['withdrawTokens(address,address,uint256)', 'restoreRegistry()']:writes at the last depth:['2']
['withdrawTokens(address,address,uint256)', 'withdrawFromAnchor(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['1']
['withdrawTokens(address,address,uint256)', 'transferTokenOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'setConversionFee(uint32)']:writes at the last depth:['8']
['withdrawTokens(address,address,uint256)', 'transferAnchorOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)']:writes at the last depth:['7', '', '8', '6']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)']:writes at the last depth:['3']
contract coverage: 59.31%
============================
iteration:5
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'isActive()']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionWhitelist(address)']:writes at the last depth:['5']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'restoreRegistry()']:writes at the last depth:['2']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawFromAnchor(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['1']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferTokenOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionFee(uint32)']:writes at the last depth:['8']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferAnchorOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)']:writes at the last depth:['', '8', '7', '6']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)']:writes at the last depth:['3']
contract coverage: 59.31%
============================
iteration:6
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'isActive()']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionWhitelist(address)']:writes at the last depth:['5']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'restoreRegistry()']:writes at the last depth:['2']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawFromAnchor(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['1']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferTokenOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionFee(uint32)']:writes at the last depth:['8']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferAnchorOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)']:writes at the last depth:['7', '', '8', '6']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)']:writes at the last depth:['3']
contract coverage: 90.68%
============================
iteration:7
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'fallback']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'isActive()']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'setConversionWhitelist(address)']:writes at the last depth:['5']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'restoreRegistry()']:writes at the last depth:['2']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'withdrawFromAnchor(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'fallback']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'transferOwnership(address)']:writes at the last depth:['1']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'transferTokenOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'setConversionFee(uint32)']:writes at the last depth:['8']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'transferAnchorOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'getReturn(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'rateAndFee(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'acceptTokenOwnership()']:writes at the last depth:['']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'acceptAnchorOwnership()']:writes at the last depth:['']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'acceptTokenOwnership()']:writes at the last depth:['']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'getReturn(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'rateAndFee(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'acceptAnchorOwnership()']:writes at the last depth:['']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'withdrawETH(address)']:writes at the last depth:['7', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'withdrawETH(address)']:writes at the last depth:['7', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'withdrawTokens(address,address,uint256)']:writes at the last depth:['7', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'getReturn(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'rateAndFee(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'getReturn(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'getReturn(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'rateAndFee(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'withdrawTokens(address,address,uint256)']:writes at the last depth:['7', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'rateAndFee(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'getReturn(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'withdrawTokens(address,address,uint256)']:writes at the last depth:['7', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'rateAndFee(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'withdrawTokens(address,address,uint256)']:writes at the last depth:['7', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'withdrawTokens(address,address,uint256)']:writes at the last depth:['7', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'convert(address,address,uint256,address,address)']:writes at the last depth:['', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'convert(address,address,uint256,address,address)']:writes at the last depth:['', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'convert(address,address,uint256,address,address)']:writes at the last depth:['', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'convert(address,address,uint256,address,address)']:writes at the last depth:['', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'convert(address,address,uint256,address,address)']:writes at the last depth:['', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'convert(address,address,uint256,address,address)']:writes at the last depth:['', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'convert(address,address,uint256,address,address)']:writes at the last depth:['', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'addReserve(address,uint32)', 'convert(address,address,uint256,address,address)']:writes at the last depth:['', '3']
contract coverage: 90.68%
============================
iteration:8
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'isActive()']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'setConversionWhitelist(address)']:writes at the last depth:['5']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'restoreRegistry()']:writes at the last depth:['2']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'withdrawFromAnchor(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'transferOwnership(address)']:writes at the last depth:['1']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'transferTokenOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'setConversionFee(uint32)']:writes at the last depth:['8']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'transferAnchorOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'addReserve(address,uint32)']:writes at the last depth:['7', '', '8', '6']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'withdrawTokens(address,address,uint256)']:writes at the last depth:['3']
contract coverage: 90.68%
============================
iteration:9
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'isActive()']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'setConversionWhitelist(address)']:writes at the last depth:['5']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'restoreRegistry()']:writes at the last depth:['2']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'withdrawFromAnchor(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'transferOwnership(address)']:writes at the last depth:['1']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'transferTokenOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'setConversionFee(uint32)']:writes at the last depth:['8']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'transferAnchorOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'addReserve(address,uint32)']:writes at the last depth:['7', '', '8', '6']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'withdrawTokens(address,address,uint256)']:writes at the last depth:['3']
contract coverage: 90.68%
============================
iteration:10
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferAnchorOwnership(address)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferAnchorOwnership(address)', 'isActive()']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferAnchorOwnership(address)', 'setConversionWhitelist(address)']:writes at the last depth:['5']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferAnchorOwnership(address)', 'restoreRegistry()']:writes at the last depth:['2']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferAnchorOwnership(address)', 'withdrawFromAnchor(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferAnchorOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferAnchorOwnership(address)', 'transferTokenOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferAnchorOwnership(address)', 'setConversionFee(uint32)']:writes at the last depth:['8']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferAnchorOwnership(address)', 'transferAnchorOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferAnchorOwnership(address)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferAnchorOwnership(address)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferAnchorOwnership(address)', 'addReserve(address,uint32)']:writes at the last depth:['', '8', '7', '6']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferAnchorOwnership(address)', 'withdrawTokens(address,address,uint256)']:writes at the last depth:['3']
contract coverage: 90.68%
============================
iteration:11
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionFee(uint32)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionFee(uint32)', 'isActive()']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionFee(uint32)', 'setConversionWhitelist(address)']:writes at the last depth:['5']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionFee(uint32)', 'restoreRegistry()']:writes at the last depth:['2']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionFee(uint32)', 'withdrawFromAnchor(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionFee(uint32)', 'transferOwnership(address)']:writes at the last depth:['1']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionFee(uint32)', 'transferTokenOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionFee(uint32)', 'setConversionFee(uint32)']:writes at the last depth:['8']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionFee(uint32)', 'transferAnchorOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionFee(uint32)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionFee(uint32)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionFee(uint32)', 'addReserve(address,uint32)']:writes at the last depth:['', '8', '7', '6']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionFee(uint32)', 'withdrawTokens(address,address,uint256)']:writes at the last depth:['3']
contract coverage: 90.68%
============================
iteration:12
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferTokenOwnership(address)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferTokenOwnership(address)', 'isActive()']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferTokenOwnership(address)', 'setConversionWhitelist(address)']:writes at the last depth:['5']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferTokenOwnership(address)', 'restoreRegistry()']:writes at the last depth:['2']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferTokenOwnership(address)', 'withdrawFromAnchor(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferTokenOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferTokenOwnership(address)', 'transferTokenOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferTokenOwnership(address)', 'setConversionFee(uint32)']:writes at the last depth:['8']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferTokenOwnership(address)', 'transferAnchorOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferTokenOwnership(address)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferTokenOwnership(address)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferTokenOwnership(address)', 'addReserve(address,uint32)']:writes at the last depth:['7', '', '8', '6']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferTokenOwnership(address)', 'withdrawTokens(address,address,uint256)']:writes at the last depth:['3']
contract coverage: 91.65%
============================
iteration:13
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferOwnership(address)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferOwnership(address)', 'isActive()']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferOwnership(address)', 'setConversionWhitelist(address)']:writes at the last depth:['5']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferOwnership(address)', 'restoreRegistry()']:writes at the last depth:['2']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferOwnership(address)', 'withdrawFromAnchor(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferOwnership(address)', 'acceptOwnership()']:writes at the last depth:['0', '1']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferOwnership(address)', 'transferTokenOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferOwnership(address)', 'setConversionFee(uint32)']:writes at the last depth:['8']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferOwnership(address)', 'transferAnchorOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferOwnership(address)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferOwnership(address)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferOwnership(address)', 'addReserve(address,uint32)']:writes at the last depth:['', '8', '7', '6']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'transferOwnership(address)', 'withdrawTokens(address,address,uint256)']:writes at the last depth:['3']
contract coverage: 91.65%
============================
iteration:14
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawFromAnchor(address,address,uint256)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawFromAnchor(address,address,uint256)', 'isActive()']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawFromAnchor(address,address,uint256)', 'setConversionWhitelist(address)']:writes at the last depth:['5']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawFromAnchor(address,address,uint256)', 'restoreRegistry()']:writes at the last depth:['2']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawFromAnchor(address,address,uint256)', 'withdrawFromAnchor(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawFromAnchor(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['1']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawFromAnchor(address,address,uint256)', 'transferTokenOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawFromAnchor(address,address,uint256)', 'setConversionFee(uint32)']:writes at the last depth:['8']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawFromAnchor(address,address,uint256)', 'transferAnchorOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawFromAnchor(address,address,uint256)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawFromAnchor(address,address,uint256)', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawFromAnchor(address,address,uint256)', 'addReserve(address,uint32)']:writes at the last depth:['7', '', '8', '6']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'withdrawFromAnchor(address,address,uint256)', 'withdrawTokens(address,address,uint256)']:writes at the last depth:['3']
contract coverage: 91.65%
============================
iteration:15
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'restoreRegistry()', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'restoreRegistry()', 'isActive()']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'restoreRegistry()', 'setConversionWhitelist(address)']:writes at the last depth:['5']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'restoreRegistry()', 'restoreRegistry()']:writes at the last depth:['2']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'restoreRegistry()', 'withdrawFromAnchor(address,address,uint256)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'restoreRegistry()', 'transferOwnership(address)']:writes at the last depth:['1']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'restoreRegistry()', 'transferTokenOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'restoreRegistry()', 'setConversionFee(uint32)']:writes at the last depth:['8']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'restoreRegistry()', 'transferAnchorOwnership(address)']:writes at the last depth:[]
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'restoreRegistry()', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'restoreRegistry()', 'updateRegistry()']:writes at the last depth:['2', '3']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'restoreRegistry()', 'addReserve(address,uint32)']:writes at the last depth:['7', '', '8', '6']
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'restoreRegistry()', 'withdrawTokens(address,address,uint256)']:writes at the last depth:['3']
contract coverage: 91.65%
============================
iteration:16
['withdrawTokens(address,address,uint256)', 'withdrawTokens(address,address,uint256)', 'setConversionWhitelist(address)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
contract coverage: 91.65%
============================
iteration:17
contract coverage: 91.65%
============================
iteration:18
contract coverage: 91.65%
============================
iteration:19
contract coverage: 91.65%
============================
iteration:20
contract coverage: 91.65%
============================
iteration:21
contract coverage: 91.65%
============================
iteration:22
contract coverage: 91.65%
============================
iteration:23
contract coverage: 91.65%
============================
iteration:24
contract coverage: 91.65%
============================
iteration:25
contract coverage: 91.65%
============================
iteration:26
contract coverage: 91.65%
============================
iteration:27
contract coverage: 91.65%
============================
iteration:28
contract coverage: 91.65%
============================
iteration:29
contract coverage: 91.65%
============================
iteration:30
contract coverage: 91.65%
============================
iteration:31
contract coverage: 91.65%
============================
iteration:32
contract coverage: 91.65%
============================
iteration:33
contract coverage: 91.65%
============================
iteration:34
contract coverage: 91.65%
============================
iteration:35
contract coverage: 91.65%
============================
iteration:36
contract coverage: 91.65%
============================
iteration:37
contract coverage: 91.65%
============================
iteration:38
contract coverage: 91.65%
============================
iteration:39
contract coverage: 91.65%
============================
iteration:40
contract coverage: 91.65%
============================
iteration:41
contract coverage: 91.65%
============================
iteration:42
contract coverage: 91.65%
#@statespace
8967 nodes, 8966 edges, 139295 total states
#@coverage
Achieved 4.17% coverage for code: 60806040526000600360156101000a81548160ff0219169083151502179055506000600860006101000a81548163ffffffff021916908363ffffffff1602179055506000600860046101000a81548163ffffffff021916908363ffffffff16021790555060006008806101000a81548163ffffffff021916908363ffffffff1602179055503480156200009157600080fd5b50604051606080620056a383398101806040528101908080519060200190929190805190602001909291908051906020019092919050505082828281336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080620001288162000252640100000000026401000000009004565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505082620001c78162000252640100000000026401000000009004565b81620001e281620002fb640100000000026401000000009004565b84600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600860046101000a81548163ffffffff021916908363ffffffff16021790555050505050505050506200038a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620002f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4552525f494e56414c49445f414444524553530000000000000000000000000081525060200191505060405180910390fd5b50565b620f424067ffffffffffffffff168163ffffffff161115151562000387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4552525f494e56414c49445f434f4e56455253494f4e5f46454500000000000081525060200191505060405180910390fd5b50565b615309806200039a6000396000f300608060405260043610610225576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063024c7ec7146102ff5780630c7d5cd81461032e5780630e53aae91461036557806312c2aca4146103f057806319b640151461041f5780631cfab2901461048c5780631e1401f8146104ef57806321e6b53d1461057757806322f3e2d4146105ba5780632fe8a6ad146105e957806338a5e01614610618578063395900d41461062f5780633e8ff43f1461069c57806348dc399b146106cf57806349d10b64146107575780634af80f0e1461076e57806354fd4d50146107b1578063579cd3ca146107e45780635e35359e1461081b57806361cd756e1461088857806367b6d57c146108df578063690d8320146109225780636a49d2c41461096557806371f52bf3146109b857806379ba5097146109eb5780637b10399914610a025780638da5cb5b14610a5957806394c275ad14610ab05780639b99a8e214610ae7578063b4a176d314610b1a578063bf75455814610b31578063c45d3d9214610b60578063cdc91c6914610bb7578063d031370b14610bce578063d260529c14610c3b578063d3fb73b414610c6a578063d4ee1d9014610cc1578063d55ec69714610d18578063d66bd52414610d2f578063d895951214610dba578063dc8de37914610e11578063e8dc12ff14610e68578063ecbca55d14610f1c578063f2fde38b14610f4f578063fc0c546a14610f92575b6007600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff1615156102fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4552525f494e56414c49445f524553455256450000000000000000000000000081525060200191505060405180910390fd5b005b34801561030b57600080fd5b5061032c600480360381019080803515159060200190929190505050610fe9565b005b34801561033a57600080fd5b5061034361100e565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34801561037157600080fd5b506103a6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611024565b604051808681526020018563ffffffff1663ffffffff1681526020018415151515815260200183151515158152602001821515151581526020019550505050505060405180910390f35b3480156103fc57600080fd5b50610405611128565b604051808215151515815260200191505060405180910390f35b34801561042b57600080fd5b5061044a60048036038101908080359060200190929190505050611193565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049857600080fd5b506104cd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111d6565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b3480156104fb57600080fd5b5061055a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061123d565b604051808381526020018281526020019250505060405180910390f35b34801561058357600080fd5b506105b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611257565b005b3480156105c657600080fd5b506105cf61126b565b604051808215151515815260200191505060405180910390f35b3480156105f557600080fd5b506105fe611361565b604051808215151515815260200191505060405180910390f35b34801561062457600080fd5b5061062d611374565b005b34801561063b57600080fd5b5061069a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611386565b005b3480156106a857600080fd5b506106b16114a4565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156106db57600080fd5b5061073a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114ac565b604051808381526020018281526020019250505060405180910390f35b34801561076357600080fd5b5061076c6116a5565b005b34801561077a57600080fd5b506107af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611aca565b005b3480156107bd57600080fd5b506107c6611b21565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156107f057600080fd5b506107f9611b26565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34801561082757600080fd5b50610886600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b3b565b005b34801561089457600080fd5b5061089d611d4a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108eb57600080fd5b50610920600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d70565b005b34801561092e57600080fd5b50610963600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e7b565b005b34801561097157600080fd5b506109b6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803563ffffffff169060200190929190505050612060565b005b3480156109c457600080fd5b506109cd6120f1565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156109f757600080fd5b50610a00612100565b005b348015610a0e57600080fd5b50610a17612308565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a6557600080fd5b50610a6e61232e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610abc57600080fd5b50610ac5612353565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b348015610af357600080fd5b50610afc612369565b604051808261ffff1661ffff16815260200191505060405180910390f35b348015610b2657600080fd5b50610b2f612376565b005b348015610b3d57600080fd5b50610b466123e3565b604051808215151515815260200191505060405180910390f35b348015610b6c57600080fd5b50610b756123e8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bc357600080fd5b50610bcc61240e565b005b348015610bda57600080fd5b50610bf9600480360381019080803590602001909291905050506124b2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610c4757600080fd5b50610c506124f0565b604051808215151515815260200191505060405180910390f35b348015610c7657600080fd5b50610c7f6124f9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610ccd57600080fd5b50610cd661251f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d2457600080fd5b50610d2d612545565b005b348015610d3b57600080fd5b50610d70600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061261e565b604051808681526020018563ffffffff1663ffffffff1681526020018415151515815260200183151515158152602001821515151581526020019550505050505060405180910390f35b348015610dc657600080fd5b50610dfb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061268b565b6040518082815260200191505060405180910390f35b348015610e1d57600080fd5b50610e52600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061269d565b6040518082815260200191505060405180910390f35b610f06600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126f4565b6040518082815260200191505060405180910390f35b348015610f2857600080fd5b50610f4d600480360381019080803563ffffffff169060200190929190505050612ae0565b005b348015610f5b57600080fd5b50610f90600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c09565b005b348015610f9e57600080fd5b50610fa7612d1a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610ff1612d44565b80600360146101000a81548160ff02191690831515021790555050565b600860009054906101000a900463ffffffff1681565b600080600080600061103461527e565b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a06040519081016040529081600082015481526020016001820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160049054906101000a900460ff161515151581526020016001820160059054906101000a900460ff161515151581526020016001820160069054906101000a900460ff1615151515815250509050806000015181602001516000808460800151955095509550955095505091939590929450565b60006007600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff16905090565b60006006828154811015156111a457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000816111e281612e0a565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900463ffffffff16915050919050565b60008061124b8585856114ac565b91509150935093915050565b61125f612d44565b61126881611d70565b50565b60003073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561130a57600080fd5b505af115801561131e573d6000803e3d6000fd5b505050506040513d602081101561133457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614905090565b600360149054906101000a900460ff1681565b61137c612d44565b61138461240e565b565b61138e612d44565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e35359e8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561148757600080fd5b505af115801561149b573d6000803e3d6000fd5b50505050505050565b600080905090565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480156115585750600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff165b1561156f5761156683612ed1565b9150915061169d565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156116185750600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff165b1561162f5761162683613169565b9150915061169d565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f494e56414c49445f544f4b454e00000000000000000000000000000081525060200191505060405180910390fd5b935093915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061170f5750600360149054906101000a900460ff16155b1515611783576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f4143434553535f44454e49454400000000000000000000000000000081525060200191505060405180910390fd5b6117ac7f436f6e7472616374526567697374727900000000000000000000000000000000613408565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156118395750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b15156118ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4552525f494e56414c49445f524547495354525900000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663bb34534c7f436f6e74726163745265676973747279000000000000000000000000000000006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561195c57600080fd5b505af1158015611970573d6000803e3d6000fd5b505050506040513d602081101561198657600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614151515611a23576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4552525f494e56414c49445f524547495354525900000000000000000000000081525060200191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611ad2612d44565b80611adc816134e5565b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b601d81565b6008809054906101000a900463ffffffff1681565b6000611b4561358c565b6001600360156101000a81548160ff021916908315150217905550611b68612d44565b611b917f42616e636f72436f6e7665727465725570677261646572000000000000000000613408565b9050600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff161580611bf45750611bf261126b565b155b80611c4b57508073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515611cbf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f4143434553535f44454e49454400000000000000000000000000000081525060200191505060405180910390fd5b611cca848484613613565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff1615611d2957611d288461364c565b5b6000600360156101000a81548160ff02191690831515021790555050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611d78612d44565b7f42616e636f72436f6e7665727465725570677261646572000000000000000000611da281613822565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611e5f57600080fd5b505af1158015611e73573d6000803e3d6000fd5b505050505050565b6000611e8561358c565b6001600360156101000a81548160ff021916908315150217905550611ea8612d44565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee611ec681612e0a565b611eef7f42616e636f72436f6e7665727465725570677261646572000000000000000000613408565b9150611ef961126b565b1580611f5157508173ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515611fc5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f4143434553535f44454e49454400000000000000000000000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015612022573d6000803e3d6000fd5b5061204073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61364c565b506000600360156101000a81548160ff0219169083151502179055505050565b600061206a612369565b61ffff161415156120e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552525f494e56414c49445f524553455256455f434f554e540000000000000081525060200191505060405180910390fd5b6120ed82826138d0565b5050565b60006120fb612369565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f4143434553535f44454e49454400000000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a60405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860049054906101000a900463ffffffff1681565b6000600680549050905090565b61237e612d44565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600181565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612416612d44565b61241e613c8f565b7fa170412ae067fdeca19fd2204ce7eb66f723d827f4af15433b6f33f7fdc642bb600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a1565b6006818154811015156124c157fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061254f612d44565b6125787f42616e636f72436f6e7665727465725570677261646572000000000000000000613408565b905061258381612c09565b8073ffffffffffffffffffffffffffffffffffffffff166390f58c96601d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808261ffff1661ffff168152602001915050600060405180830381600087803b1580156125fb57600080fd5b505af115801561260f573d6000803e3d6000fd5b5050505061261b612100565b50565b60076020528060005260406000206000915090508060000154908060010160009054906101000a900463ffffffff16908060010160049054906101000a900460ff16908060010160059054906101000a900460ff16908060010160069054906101000a900460ff16905085565b60006126968261269d565b9050919050565b6000816126a981612e0a565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154915050919050565b60006126fe61358c565b6001600360156101000a81548160ff0219169083151502179055507f42616e636f724e6574776f726b0000000000000000000000000000000000000061274381613822565b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16141515156127e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4552525f53414d455f534f555243455f5441524745540000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480612a385750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633af32abf856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156128fc57600080fd5b505af1158015612910573d6000803e3d6000fd5b505050506040513d602081101561292657600080fd5b81019080805190602001909291905050508015612a375750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633af32abf846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156129fb57600080fd5b505af1158015612a0f573d6000803e3d6000fd5b505050506040513d6020811015612a2557600080fd5b81019080805190602001909291905050505b5b1515612aac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4552525f4e4f545f57484954454c49535445440000000000000000000000000081525060200191505060405180910390fd5b612ab98787878787613dc2565b9150506000600360156101000a81548160ff02191690831515021790555095945050505050565b612ae8612d44565b600860049054906101000a900463ffffffff1663ffffffff168163ffffffff1611151515612b7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4552525f494e56414c49445f434f4e56455253494f4e5f46454500000000000081525060200191505060405180910390fd5b7f81cd2ffb37dd237c0e4e2a3de5265fcf9deb43d3e7801e80db9f1ccfba7ee6006008809054906101000a900463ffffffff1682604051808363ffffffff1663ffffffff1681526020018263ffffffff1663ffffffff1681526020019250505060405180910390a1806008806101000a81548163ffffffff021916908363ffffffff16021790555050565b612c11612d44565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612cd6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4552525f53414d455f4f574e455200000000000000000000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f4143434553535f44454e49454400000000000000000000000000000081525060200191505060405180910390fd5b565b600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff161515612ece576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4552525f494e56414c49445f524553455256450000000000000000000000000081525060200191505060405180910390fd5b50565b600080600080600080612ee26141b1565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612f6857600080fd5b505af1158015612f7c573d6000803e3d6000fd5b505050506040513d6020811015612f9257600080fd5b810190808051906020019092919050505093506000841415612fbd5786600080905095509550613160565b60066000815481101515612fcd57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692506130237f42616e636f72466f726d756c6100000000000000000000000000000000000000613408565b73ffffffffffffffffffffffffffffffffffffffff166348d73fed856130488661269d565b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900463ffffffff168b6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018481526020018363ffffffff1663ffffffff168152602001828152602001945050505050602060405180830381600087803b15801561310f57600080fd5b505af1158015613123573d6000803e3d6000fd5b505050506040513d602081101561313957600080fd5b810190808051906020019092919050505091506131558261422f565b905080820381955095505b50505050915091565b60008060008060008061317a6141b1565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561320057600080fd5b505af1158015613214573d6000803e3d6000fd5b505050506040513d602081101561322a57600080fd5b810190808051906020019092919050505093506006600081548110151561324d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250868414156132995761328b8361269d565b6000809050955095506133ff565b6132c27f42616e636f72466f726d756c6100000000000000000000000000000000000000613408565b73ffffffffffffffffffffffffffffffffffffffff1663f732f1c9856132e78661269d565b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900463ffffffff168b6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018481526020018363ffffffff1663ffffffff168152602001828152602001945050505050602060405180830381600087803b1580156133ae57600080fd5b505af11580156133c2573d6000803e3d6000fd5b505050506040513d60208110156133d857600080fd5b810190808051906020019092919050505091506133f48261422f565b905080820381955095505b50505050915091565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb34534c836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156134a357600080fd5b505af11580156134b7573d6000803e3d6000fd5b505050506040513d60208110156134cd57600080fd5b81019080805190602001909291905050509050919050565b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613589576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4552525f414444524553535f49535f53454c460000000000000000000000000081525060200191505060405180910390fd5b50565b600360159054906101000a900460ff16151515613611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4552525f5245454e5452414e435900000000000000000000000000000000000081525060200191505060405180910390fd5b565b61361b612d44565b8261362581614281565b8261362f81614281565b83613639816134e5565b613644868686614329565b505050505050565b8061365681612e0a565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613701573073ffffffffffffffffffffffffffffffffffffffff1631600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061381e565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561379c57600080fd5b505af11580156137b0573d6000803e3d6000fd5b505050506040513d60208110156137c657600080fd5b8101908080519060200190929190505050600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055505b5050565b61382b81613408565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156138cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f4143434553535f44454e49454400000000000000000000000000000081525060200191505060405180910390fd5b50565b60006138da612d44565b6138e261440f565b826138ec81614281565b836138f6816134e5565b836139008161448e565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141580156139ab5750600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff16155b1515613a1f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4552525f494e56414c49445f524553455256450000000000000000000000000081525060200191505060405180910390fd5b600860009054906101000a900463ffffffff16620f42400363ffffffff168563ffffffff1611151515613aba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4552525f494e56414c49445f524553455256455f57454947485400000000000081525060200191505060405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff16613ae7612369565b61ffff16101515613b60576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552525f494e56414c49445f524553455256455f434f554e540000000000000081525060200191505060405180910390fd5b600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020935060008460000181905550848460010160006101000a81548163ffffffff021916908363ffffffff16021790555060018460010160066101000a81548160ff02191690831515021790555060068690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505084600860008282829054906101000a900463ffffffff160192506101000a81548163ffffffff021916908363ffffffff160217905550505050505050565b613c97612d44565b6000613ca1612369565b61ffff16111515613d1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552525f494e56414c49445f524553455256455f434f554e540000000000000081525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379ba50976040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015613da057600080fd5b505af1158015613db4573d6000803e3d6000fd5b50505050613dc061452a565b565b6000806000806000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16148015613e735750600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff165b15613e8d57899250613e86888888614595565b9350613fbf565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16148015613f365750600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff165b15613f5057889250613f498888886149b9565b9350613fbe565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f494e56414c49445f544f4b454e00000000000000000000000000000081525060200191505060405180910390fd5b5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561404557600080fd5b505af1158015614059573d6000803e3d6000fd5b505050506040513d602081101561406f57600080fd5b81019080805190602001909291905050509150600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900463ffffffff1690508273ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f77f29993cf2c084e726f7e802da0719d6a0ade3e204badc7a3ffd57ecb768c2461416c620f424063ffffffff1661415e8861269d565b614f3990919063ffffffff16565b6141858563ffffffff1687614f3990919063ffffffff16565b604051808381526020018281526020019250505060405180910390a38394505050505095945050505050565b6141b961126b565b151561422d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4552525f494e414354495645000000000000000000000000000000000000000081525060200191505060405180910390fd5b565b600061427a620f424067ffffffffffffffff1661426c6008809054906101000a900463ffffffff1663ffffffff1685614f3990919063ffffffff16565b614fe090919063ffffffff16565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515614326576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4552525f494e56414c49445f414444524553530000000000000000000000000081525060200191505060405180910390fd5b50565b61440a8360405180807f7472616e7366657228616464726573732c75696e743235362900000000000000815250601901905060405180910390208484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050615073565b505050565b61441761126b565b15151561448c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4552525f4143544956450000000000000000000000000000000000000000000081525060200191505060405180910390fd5b565b60008163ffffffff161180156144b35750620f424063ffffffff168163ffffffff1611155b1515614527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4552525f494e56414c49445f524553455256455f57454947485400000000000081525060200191505060405180910390fd5b50565b6000806006805490509150600090505b818110156145915761458460068281548110151561455457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661364c565b808060010191505061453a565b5050565b6000806000806145a487612ed1565b9250925060008314151515614621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4552525f5a45524f5f524154450000000000000000000000000000000000000081525060200191505060405180910390fd5b6006600081548110151561463157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561472257863414151561471d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4552525f4554485f414d4f554e545f4d49534d4154434800000000000000000081525060200191505060405180910390fd5b614896565b60003414801561482157508661481e61473a8361269d565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156147d557600080fd5b505af11580156147e9573d6000803e3d6000fd5b505050506040513d60208110156147ff57600080fd5b810190808051906020019092919050505061513a90919063ffffffff16565b10155b1515614895576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4552525f494e56414c49445f414d4f554e54000000000000000000000000000081525060200191505060405180910390fd5b5b61489f8161364c565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663867904b486856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561496457600080fd5b505af1158015614978573d6000803e3d6000fd5b505050506149ac81600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16888a87876151bf565b8293505050509392505050565b600080600080600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015614a7f57600080fd5b505af1158015614a93573d6000803e3d6000fd5b505050506040513d6020811015614aa957600080fd5b81019080805190602001909291905050508911151515614b31576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4552525f494e56414c49445f414d4f554e54000000000000000000000000000081525060200191505060405180910390fd5b614b3a89613169565b9450945060008514151515614bb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4552525f5a45524f5f524154450000000000000000000000000000000000000081525060200191505060405180910390fd5b60066000815481101515614bc757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015614c7a57600080fd5b505af1158015614c8e573d6000803e3d6000fd5b505050506040513d6020811015614ca457600080fd5b81019080805190602001909291905050509150614cc08361269d565b905080851080614cda57508085148015614cd957508189145b5b1515614ce257fe5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a24835d1308b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015614da757600080fd5b505af1158015614dbb573d6000803e3d6000fd5b50505050614e1485600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461513a90919063ffffffff16565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415614eee578673ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015614ee8573d6000803e3d6000fd5b50614efa565b614ef9838887614329565b5b614f2a600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848a8c89896151bf565b84955050505050509392505050565b6000806000841415614f4e5760009150614fd9565b8284029050828482811515614f5f57fe5b04141515614fd5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4552525f4f564552464c4f57000000000000000000000000000000000000000081525060200191505060405180910390fd5b8091505b5092915050565b60008060008311151561505b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4552525f4449564944455f42595f5a45524f000000000000000000000000000081525060200191505060405180910390fd5b828481151561506657fe5b0490508091505092915050565b61507b6152ba565b602060405190810160405280600181525090506020818351602085016000875af18015156150a857600080fd5b5060008160006001811015156150ba57fe5b602002015114151515615135576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4552525f5452414e534645525f4641494c45440000000000000000000000000081525060200191505060405180910390fd5b505050565b60008183101515156151b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4552525f554e444552464c4f570000000000000000000000000000000000000081525060200191505060405180910390fd5b818303905092915050565b7f8000000000000000000000000000000000000000000000000000000000000000811015156151ea57fe5b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f276856b36cbc45526a0ba64f44611557a2a8b68662c5388e9fe6d72e86e1c8cb86868660405180848152602001838152602001828152602001935050505060405180910390a4505050505050565b60a06040519081016040528060008152602001600063ffffffff1681526020016000151581526020016000151581526020016000151581525090565b6020604051908101604052806001906020820280388339808201915050905050905600a165627a7a723058208ecd6c9a2912626c60d2fd86e53f4ca93bf493565c7c1dae540c63a866e627000029
#@coverage
Achieved 91.65% coverage for code: 608060405260043610610225576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063024c7ec7146102ff5780630c7d5cd81461032e5780630e53aae91461036557806312c2aca4146103f057806319b640151461041f5780631cfab2901461048c5780631e1401f8146104ef57806321e6b53d1461057757806322f3e2d4146105ba5780632fe8a6ad146105e957806338a5e01614610618578063395900d41461062f5780633e8ff43f1461069c57806348dc399b146106cf57806349d10b64146107575780634af80f0e1461076e57806354fd4d50146107b1578063579cd3ca146107e45780635e35359e1461081b57806361cd756e1461088857806367b6d57c146108df578063690d8320146109225780636a49d2c41461096557806371f52bf3146109b857806379ba5097146109eb5780637b10399914610a025780638da5cb5b14610a5957806394c275ad14610ab05780639b99a8e214610ae7578063b4a176d314610b1a578063bf75455814610b31578063c45d3d9214610b60578063cdc91c6914610bb7578063d031370b14610bce578063d260529c14610c3b578063d3fb73b414610c6a578063d4ee1d9014610cc1578063d55ec69714610d18578063d66bd52414610d2f578063d895951214610dba578063dc8de37914610e11578063e8dc12ff14610e68578063ecbca55d14610f1c578063f2fde38b14610f4f578063fc0c546a14610f92575b6007600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff1615156102fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4552525f494e56414c49445f524553455256450000000000000000000000000081525060200191505060405180910390fd5b005b34801561030b57600080fd5b5061032c600480360381019080803515159060200190929190505050610fe9565b005b34801561033a57600080fd5b5061034361100e565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34801561037157600080fd5b506103a6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611024565b604051808681526020018563ffffffff1663ffffffff1681526020018415151515815260200183151515158152602001821515151581526020019550505050505060405180910390f35b3480156103fc57600080fd5b50610405611128565b604051808215151515815260200191505060405180910390f35b34801561042b57600080fd5b5061044a60048036038101908080359060200190929190505050611193565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049857600080fd5b506104cd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111d6565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b3480156104fb57600080fd5b5061055a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061123d565b604051808381526020018281526020019250505060405180910390f35b34801561058357600080fd5b506105b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611257565b005b3480156105c657600080fd5b506105cf61126b565b604051808215151515815260200191505060405180910390f35b3480156105f557600080fd5b506105fe611361565b604051808215151515815260200191505060405180910390f35b34801561062457600080fd5b5061062d611374565b005b34801561063b57600080fd5b5061069a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611386565b005b3480156106a857600080fd5b506106b16114a4565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156106db57600080fd5b5061073a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114ac565b604051808381526020018281526020019250505060405180910390f35b34801561076357600080fd5b5061076c6116a5565b005b34801561077a57600080fd5b506107af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611aca565b005b3480156107bd57600080fd5b506107c6611b21565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156107f057600080fd5b506107f9611b26565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34801561082757600080fd5b50610886600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b3b565b005b34801561089457600080fd5b5061089d611d4a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108eb57600080fd5b50610920600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d70565b005b34801561092e57600080fd5b50610963600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e7b565b005b34801561097157600080fd5b506109b6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803563ffffffff169060200190929190505050612060565b005b3480156109c457600080fd5b506109cd6120f1565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156109f757600080fd5b50610a00612100565b005b348015610a0e57600080fd5b50610a17612308565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a6557600080fd5b50610a6e61232e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610abc57600080fd5b50610ac5612353565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b348015610af357600080fd5b50610afc612369565b604051808261ffff1661ffff16815260200191505060405180910390f35b348015610b2657600080fd5b50610b2f612376565b005b348015610b3d57600080fd5b50610b466123e3565b604051808215151515815260200191505060405180910390f35b348015610b6c57600080fd5b50610b756123e8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bc357600080fd5b50610bcc61240e565b005b348015610bda57600080fd5b50610bf9600480360381019080803590602001909291905050506124b2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610c4757600080fd5b50610c506124f0565b604051808215151515815260200191505060405180910390f35b348015610c7657600080fd5b50610c7f6124f9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610ccd57600080fd5b50610cd661251f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d2457600080fd5b50610d2d612545565b005b348015610d3b57600080fd5b50610d70600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061261e565b604051808681526020018563ffffffff1663ffffffff1681526020018415151515815260200183151515158152602001821515151581526020019550505050505060405180910390f35b348015610dc657600080fd5b50610dfb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061268b565b6040518082815260200191505060405180910390f35b348015610e1d57600080fd5b50610e52600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061269d565b6040518082815260200191505060405180910390f35b610f06600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126f4565b6040518082815260200191505060405180910390f35b348015610f2857600080fd5b50610f4d600480360381019080803563ffffffff169060200190929190505050612ae0565b005b348015610f5b57600080fd5b50610f90600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c09565b005b348015610f9e57600080fd5b50610fa7612d1a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610ff1612d44565b80600360146101000a81548160ff02191690831515021790555050565b600860009054906101000a900463ffffffff1681565b600080600080600061103461527e565b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a06040519081016040529081600082015481526020016001820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160049054906101000a900460ff161515151581526020016001820160059054906101000a900460ff161515151581526020016001820160069054906101000a900460ff1615151515815250509050806000015181602001516000808460800151955095509550955095505091939590929450565b60006007600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff16905090565b60006006828154811015156111a457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000816111e281612e0a565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900463ffffffff16915050919050565b60008061124b8585856114ac565b91509150935093915050565b61125f612d44565b61126881611d70565b50565b60003073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561130a57600080fd5b505af115801561131e573d6000803e3d6000fd5b505050506040513d602081101561133457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614905090565b600360149054906101000a900460ff1681565b61137c612d44565b61138461240e565b565b61138e612d44565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e35359e8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561148757600080fd5b505af115801561149b573d6000803e3d6000fd5b50505050505050565b600080905090565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480156115585750600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff165b1561156f5761156683612ed1565b9150915061169d565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480156116185750600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff165b1561162f5761162683613169565b9150915061169d565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f494e56414c49445f544f4b454e00000000000000000000000000000081525060200191505060405180910390fd5b935093915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061170f5750600360149054906101000a900460ff16155b1515611783576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f4143434553535f44454e49454400000000000000000000000000000081525060200191505060405180910390fd5b6117ac7f436f6e7472616374526567697374727900000000000000000000000000000000613408565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156118395750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b15156118ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4552525f494e56414c49445f524547495354525900000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663bb34534c7f436f6e74726163745265676973747279000000000000000000000000000000006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561195c57600080fd5b505af1158015611970573d6000803e3d6000fd5b505050506040513d602081101561198657600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614151515611a23576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4552525f494e56414c49445f524547495354525900000000000000000000000081525060200191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611ad2612d44565b80611adc816134e5565b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b601d81565b6008809054906101000a900463ffffffff1681565b6000611b4561358c565b6001600360156101000a81548160ff021916908315150217905550611b68612d44565b611b917f42616e636f72436f6e7665727465725570677261646572000000000000000000613408565b9050600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff161580611bf45750611bf261126b565b155b80611c4b57508073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515611cbf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f4143434553535f44454e49454400000000000000000000000000000081525060200191505060405180910390fd5b611cca848484613613565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff1615611d2957611d288461364c565b5b6000600360156101000a81548160ff02191690831515021790555050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611d78612d44565b7f42616e636f72436f6e7665727465725570677261646572000000000000000000611da281613822565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611e5f57600080fd5b505af1158015611e73573d6000803e3d6000fd5b505050505050565b6000611e8561358c565b6001600360156101000a81548160ff021916908315150217905550611ea8612d44565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee611ec681612e0a565b611eef7f42616e636f72436f6e7665727465725570677261646572000000000000000000613408565b9150611ef961126b565b1580611f5157508173ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515611fc5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f4143434553535f44454e49454400000000000000000000000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015612022573d6000803e3d6000fd5b5061204073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61364c565b506000600360156101000a81548160ff0219169083151502179055505050565b600061206a612369565b61ffff161415156120e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552525f494e56414c49445f524553455256455f434f554e540000000000000081525060200191505060405180910390fd5b6120ed82826138d0565b5050565b60006120fb612369565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f4143434553535f44454e49454400000000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a60405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860049054906101000a900463ffffffff1681565b6000600680549050905090565b61237e612d44565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600181565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612416612d44565b61241e613c8f565b7fa170412ae067fdeca19fd2204ce7eb66f723d827f4af15433b6f33f7fdc642bb600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a1565b6006818154811015156124c157fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061254f612d44565b6125787f42616e636f72436f6e7665727465725570677261646572000000000000000000613408565b905061258381612c09565b8073ffffffffffffffffffffffffffffffffffffffff166390f58c96601d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808261ffff1661ffff168152602001915050600060405180830381600087803b1580156125fb57600080fd5b505af115801561260f573d6000803e3d6000fd5b5050505061261b612100565b50565b60076020528060005260406000206000915090508060000154908060010160009054906101000a900463ffffffff16908060010160049054906101000a900460ff16908060010160059054906101000a900460ff16908060010160069054906101000a900460ff16905085565b60006126968261269d565b9050919050565b6000816126a981612e0a565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154915050919050565b60006126fe61358c565b6001600360156101000a81548160ff0219169083151502179055507f42616e636f724e6574776f726b0000000000000000000000000000000000000061274381613822565b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16141515156127e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4552525f53414d455f534f555243455f5441524745540000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480612a385750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633af32abf856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156128fc57600080fd5b505af1158015612910573d6000803e3d6000fd5b505050506040513d602081101561292657600080fd5b81019080805190602001909291905050508015612a375750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633af32abf846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156129fb57600080fd5b505af1158015612a0f573d6000803e3d6000fd5b505050506040513d6020811015612a2557600080fd5b81019080805190602001909291905050505b5b1515612aac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4552525f4e4f545f57484954454c49535445440000000000000000000000000081525060200191505060405180910390fd5b612ab98787878787613dc2565b9150506000600360156101000a81548160ff02191690831515021790555095945050505050565b612ae8612d44565b600860049054906101000a900463ffffffff1663ffffffff168163ffffffff1611151515612b7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4552525f494e56414c49445f434f4e56455253494f4e5f46454500000000000081525060200191505060405180910390fd5b7f81cd2ffb37dd237c0e4e2a3de5265fcf9deb43d3e7801e80db9f1ccfba7ee6006008809054906101000a900463ffffffff1682604051808363ffffffff1663ffffffff1681526020018263ffffffff1663ffffffff1681526020019250505060405180910390a1806008806101000a81548163ffffffff021916908363ffffffff16021790555050565b612c11612d44565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612cd6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4552525f53414d455f4f574e455200000000000000000000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f4143434553535f44454e49454400000000000000000000000000000081525060200191505060405180910390fd5b565b600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff161515612ece576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4552525f494e56414c49445f524553455256450000000000000000000000000081525060200191505060405180910390fd5b50565b600080600080600080612ee26141b1565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612f6857600080fd5b505af1158015612f7c573d6000803e3d6000fd5b505050506040513d6020811015612f9257600080fd5b810190808051906020019092919050505093506000841415612fbd5786600080905095509550613160565b60066000815481101515612fcd57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692506130237f42616e636f72466f726d756c6100000000000000000000000000000000000000613408565b73ffffffffffffffffffffffffffffffffffffffff166348d73fed856130488661269d565b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900463ffffffff168b6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018481526020018363ffffffff1663ffffffff168152602001828152602001945050505050602060405180830381600087803b15801561310f57600080fd5b505af1158015613123573d6000803e3d6000fd5b505050506040513d602081101561313957600080fd5b810190808051906020019092919050505091506131558261422f565b905080820381955095505b50505050915091565b60008060008060008061317a6141b1565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561320057600080fd5b505af1158015613214573d6000803e3d6000fd5b505050506040513d602081101561322a57600080fd5b810190808051906020019092919050505093506006600081548110151561324d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250868414156132995761328b8361269d565b6000809050955095506133ff565b6132c27f42616e636f72466f726d756c6100000000000000000000000000000000000000613408565b73ffffffffffffffffffffffffffffffffffffffff1663f732f1c9856132e78661269d565b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900463ffffffff168b6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018481526020018363ffffffff1663ffffffff168152602001828152602001945050505050602060405180830381600087803b1580156133ae57600080fd5b505af11580156133c2573d6000803e3d6000fd5b505050506040513d60208110156133d857600080fd5b810190808051906020019092919050505091506133f48261422f565b905080820381955095505b50505050915091565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb34534c836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156134a357600080fd5b505af11580156134b7573d6000803e3d6000fd5b505050506040513d60208110156134cd57600080fd5b81019080805190602001909291905050509050919050565b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613589576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4552525f414444524553535f49535f53454c460000000000000000000000000081525060200191505060405180910390fd5b50565b600360159054906101000a900460ff16151515613611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4552525f5245454e5452414e435900000000000000000000000000000000000081525060200191505060405180910390fd5b565b61361b612d44565b8261362581614281565b8261362f81614281565b83613639816134e5565b613644868686614329565b505050505050565b8061365681612e0a565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613701573073ffffffffffffffffffffffffffffffffffffffff1631600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061381e565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561379c57600080fd5b505af11580156137b0573d6000803e3d6000fd5b505050506040513d60208110156137c657600080fd5b8101908080519060200190929190505050600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055505b5050565b61382b81613408565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156138cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f4143434553535f44454e49454400000000000000000000000000000081525060200191505060405180910390fd5b50565b60006138da612d44565b6138e261440f565b826138ec81614281565b836138f6816134e5565b836139008161448e565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141580156139ab5750600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff16155b1515613a1f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4552525f494e56414c49445f524553455256450000000000000000000000000081525060200191505060405180910390fd5b600860009054906101000a900463ffffffff16620f42400363ffffffff168563ffffffff1611151515613aba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4552525f494e56414c49445f524553455256455f57454947485400000000000081525060200191505060405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff16613ae7612369565b61ffff16101515613b60576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552525f494e56414c49445f524553455256455f434f554e540000000000000081525060200191505060405180910390fd5b600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020935060008460000181905550848460010160006101000a81548163ffffffff021916908363ffffffff16021790555060018460010160066101000a81548160ff02191690831515021790555060068690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505084600860008282829054906101000a900463ffffffff160192506101000a81548163ffffffff021916908363ffffffff160217905550505050505050565b613c97612d44565b6000613ca1612369565b61ffff16111515613d1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552525f494e56414c49445f524553455256455f434f554e540000000000000081525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379ba50976040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015613da057600080fd5b505af1158015613db4573d6000803e3d6000fd5b50505050613dc061452a565b565b6000806000806000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16148015613e735750600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff165b15613e8d57899250613e86888888614595565b9350613fbf565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16148015613f365750600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160069054906101000a900460ff165b15613f5057889250613f498888886149b9565b9350613fbe565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f494e56414c49445f544f4b454e00000000000000000000000000000081525060200191505060405180910390fd5b5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561404557600080fd5b505af1158015614059573d6000803e3d6000fd5b505050506040513d602081101561406f57600080fd5b81019080805190602001909291905050509150600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900463ffffffff1690508273ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f77f29993cf2c084e726f7e802da0719d6a0ade3e204badc7a3ffd57ecb768c2461416c620f424063ffffffff1661415e8861269d565b614f3990919063ffffffff16565b6141858563ffffffff1687614f3990919063ffffffff16565b604051808381526020018281526020019250505060405180910390a38394505050505095945050505050565b6141b961126b565b151561422d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4552525f494e414354495645000000000000000000000000000000000000000081525060200191505060405180910390fd5b565b600061427a620f424067ffffffffffffffff1661426c6008809054906101000a900463ffffffff1663ffffffff1685614f3990919063ffffffff16565b614fe090919063ffffffff16565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515614326576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4552525f494e56414c49445f414444524553530000000000000000000000000081525060200191505060405180910390fd5b50565b61440a8360405180807f7472616e7366657228616464726573732c75696e743235362900000000000000815250601901905060405180910390208484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050615073565b505050565b61441761126b565b15151561448c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4552525f4143544956450000000000000000000000000000000000000000000081525060200191505060405180910390fd5b565b60008163ffffffff161180156144b35750620f424063ffffffff168163ffffffff1611155b1515614527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4552525f494e56414c49445f524553455256455f57454947485400000000000081525060200191505060405180910390fd5b50565b6000806006805490509150600090505b818110156145915761458460068281548110151561455457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661364c565b808060010191505061453a565b5050565b6000806000806145a487612ed1565b9250925060008314151515614621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4552525f5a45524f5f524154450000000000000000000000000000000000000081525060200191505060405180910390fd5b6006600081548110151561463157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561472257863414151561471d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4552525f4554485f414d4f554e545f4d49534d4154434800000000000000000081525060200191505060405180910390fd5b614896565b60003414801561482157508661481e61473a8361269d565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156147d557600080fd5b505af11580156147e9573d6000803e3d6000fd5b505050506040513d60208110156147ff57600080fd5b810190808051906020019092919050505061513a90919063ffffffff16565b10155b1515614895576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4552525f494e56414c49445f414d4f554e54000000000000000000000000000081525060200191505060405180910390fd5b5b61489f8161364c565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663867904b486856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561496457600080fd5b505af1158015614978573d6000803e3d6000fd5b505050506149ac81600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16888a87876151bf565b8293505050509392505050565b600080600080600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015614a7f57600080fd5b505af1158015614a93573d6000803e3d6000fd5b505050506040513d6020811015614aa957600080fd5b81019080805190602001909291905050508911151515614b31576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4552525f494e56414c49445f414d4f554e54000000000000000000000000000081525060200191505060405180910390fd5b614b3a89613169565b9450945060008514151515614bb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4552525f5a45524f5f524154450000000000000000000000000000000000000081525060200191505060405180910390fd5b60066000815481101515614bc757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015614c7a57600080fd5b505af1158015614c8e573d6000803e3d6000fd5b505050506040513d6020811015614ca457600080fd5b81019080805190602001909291905050509150614cc08361269d565b905080851080614cda57508085148015614cd957508189145b5b1515614ce257fe5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a24835d1308b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015614da757600080fd5b505af1158015614dbb573d6000803e3d6000fd5b50505050614e1485600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461513a90919063ffffffff16565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415614eee578673ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015614ee8573d6000803e3d6000fd5b50614efa565b614ef9838887614329565b5b614f2a600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848a8c89896151bf565b84955050505050509392505050565b6000806000841415614f4e5760009150614fd9565b8284029050828482811515614f5f57fe5b04141515614fd5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4552525f4f564552464c4f57000000000000000000000000000000000000000081525060200191505060405180910390fd5b8091505b5092915050565b60008060008311151561505b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4552525f4449564944455f42595f5a45524f000000000000000000000000000081525060200191505060405180910390fd5b828481151561506657fe5b0490508091505092915050565b61507b6152ba565b602060405190810160405280600181525090506020818351602085016000875af18015156150a857600080fd5b5060008160006001811015156150ba57fe5b602002015114151515615135576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4552525f5452414e534645525f4641494c45440000000000000000000000000081525060200191505060405180910390fd5b505050565b60008183101515156151b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4552525f554e444552464c4f570000000000000000000000000000000000000081525060200191505060405180910390fd5b818303905092915050565b7f8000000000000000000000000000000000000000000000000000000000000000811015156151ea57fe5b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f276856b36cbc45526a0ba64f44611557a2a8b68662c5388e9fe6d72e86e1c8cb86868660405180848152602001838152602001828152602001935050505060405180910390a4505050505050565b60a06040519081016040528060008152602001600063ffffffff1681526020016000151581526020016000151581526020016000151581525090565b6020604051908101604052806001906020820280388339808201915050905050905600a165627a7a723058208ecd6c9a2912626c60d2fd86e53f4ca93bf493565c7c1dae540c63a866e627000029
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LiquidTokenConverter
Function name: connectorTokens(uint256)
PC address: 4515
Estimated Gas Usage: 1105 - 1200
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:930

function connectorTokens(uint256 _index) public view returns (IERC20Token) {
        return ConverterBase.reserveTokens[_index];
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: connectorTokens(uint256), txdata: 0x19b64015, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: withdrawETH(address)
PC address: 4746
Estimated Gas Usage: 29518 - 196368
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:741

anchor

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000140800480020010800200010004002000081001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e0000000000000000000000008080042002800410808004100280801080800101000000000000000000000000ee, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e8e8e8e8e8e8e8e8e8e8e8e8e80800420020204108080041002008010808001018e8e8e8e8e8e8e8e8e8e8e8e01, value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c48e8e8e8e8e8e8e8e8e8e8e8eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8e8e8e8e8e8e8e8e8e8e8e8e000000000000000000000000000000000002, value: 0x0
Caller: [CREATOR], function: withdrawETH(address), txdata: 0x690d8320, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidTokenConverter
Function name: isActive()
PC address: 4877
Estimated Gas Usage: 2854 - 38027
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:741

anchor.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: isActive(), txdata: 0x22f3e2d4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: withdrawETH(address)
PC address: 4877
Estimated Gas Usage: 29518 - 196368
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:741

anchor.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000140800480020010800200010004002000081001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e0000000000000000000000008080042002800410808004100280801080800101000000000000000000000000ee, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e8e8e8e8e8e8e8e8e8e8e8e8e80800420020204108080041002008010808001018e8e8e8e8e8e8e8e8e8e8e8e01, value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c48e8e8e8e8e8e8e8e8e8e8e8eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8e8e8e8e8e8e8e8e8e8e8e8e000000000000000000000000000000000002, value: 0x0
Caller: [CREATOR], function: withdrawETH(address), txdata: 0x690d8320, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidTokenConverter
Function name: withdrawFromAnchor(address,address,uint256)
PC address: 5258
Estimated Gas Usage: 3881 - 39202
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:763

anchor.withdrawTokens(_token, _to, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawFromAnchor(address,address,uint256), txdata: 0x395900d4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: updateRegistry()
PC address: 6068
Estimated Gas Usage: 19933 - 131462
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:373

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010110010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidTokenConverter
Function name: updateRegistry()
PC address: 6495
Estimated Gas Usage: 19933 - 131462
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:376

newRegistry.addressOf(CONTRACT_REGISTRY)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidTokenConverter
Function name: updateRegistry()
PC address: 6495
Estimated Gas Usage: 19933 - 131462
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:376

newRegistry.addressOf(CONTRACT_REGISTRY)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101010101010101010101010101010101010101010102, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: updateRegistry()
PC address: 6495
Estimated Gas Usage: 19933 - 131462
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:376

newRegistry.addressOf(CONTRACT_REGISTRY)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010110010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: updateRegistry()
PC address: 6697
Estimated Gas Usage: 19933 - 131462
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:379

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: updateRegistry()
PC address: 6736
Estimated Gas Usage: 19933 - 131462
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:379

prevRegistry = registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: updateRegistry()
PC address: 6789
Estimated Gas Usage: 19933 - 131462
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:379

prevRegistry = registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: updateRegistry()
PC address: 6801
Estimated Gas Usage: 19933 - 131462
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:382

registry = newRegistry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: updateRegistry()
PC address: 6854
Estimated Gas Usage: 19933 - 131462
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:382

registry = newRegistry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: withdrawTokens(address,address,uint256)
PC address: 7129
Estimated Gas Usage: 21169 - 136842
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:779

reserves[_token].isSet

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e0000000000000000000000000000008008000080010040000404100408208000000000000000000000000000ee, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: withdrawTokens(address,address,uint256)
PC address: 7440
Estimated Gas Usage: 21169 - 136842
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:783

reserves[_token].isSet

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000084002018001020201010108020101080204018000000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef02020202020202020202020201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: withdrawTokens(address,address,uint256)
PC address: 7477
Estimated Gas Usage: 21169 - 136842
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:420

locked = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000084002018001020201010108020101080204018000000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef02020202020202020202020201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: withdrawTokens(address,address,uint256)
PC address: 7491
Estimated Gas Usage: 21169 - 136842
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:420

locked = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000084002018001020201010108020101080204018000000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef02020202020202020202020201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: transferTokenOwnership(address)
PC address: 7592
Estimated Gas Usage: 7210 - 77563
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:750

anchor

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010201010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: transferAnchorOwnership(address)
PC address: 7592
Estimated Gas Usage: 6567 - 76590
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:750

anchor

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101020101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferAnchorOwnership(address), txdata: 0x67b6d57c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidTokenConverter
Function name: transferTokenOwnership(address)
PC address: 7778
Estimated Gas Usage: 7210 - 77563
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:750

anchor.transferOwnership(_newOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidTokenConverter
Function name: transferTokenOwnership(address)
PC address: 7778
Estimated Gas Usage: 7210 - 77563
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:750

anchor.transferOwnership(_newOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010104010101011001010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: transferTokenOwnership(address)
PC address: 7778
Estimated Gas Usage: 7210 - 77563
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:750

anchor.transferOwnership(_newOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010201010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: withdrawETH(address)
PC address: 7964
Estimated Gas Usage: 29518 - 196368
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:718

owner

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000140800480020010800200010004002000081001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e0000000000000000000000008080042002800410808004100280801080800101000000000000000000000000ee, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e8e8e8e8e8e8e8e8e8e8e8e8e80800420020204108080041002008010808001018e8e8e8e8e8e8e8e8e8e8e8e01, value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c48e8e8e8e8e8e8e8e8e8e8e8eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8e8e8e8e8e8e8e8e8e8e8e8e000000000000000000000000000000000002, value: 0x0
Caller: [CREATOR], function: withdrawETH(address), txdata: 0x690d8320, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: withdrawETH(address)
PC address: 8204
Estimated Gas Usage: 29518 - 196368
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:719

_to.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000140800480020010800200010004002000081001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e0000000000000000000000008080042002800410808004100280801080800101000000000000000000000000ee, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e8e8e8e8e8e8e8e8e8e8e8e8e80800420020204108080041002008010808001018e8e8e8e8e8e8e8e8e8e8e8e01, value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c48e8e8e8e8e8e8e8e8e8e8e8eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8e8e8e8e8e8e8e8e8e8e8e8e000000000000000000000000000000000002, value: 0x0
Caller: [CREATOR], function: withdrawETH(address), txdata: 0x690d8320, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: withdrawETH(address)
PC address: 8269
Estimated Gas Usage: 29518 - 196368
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:420

locked = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000140800480020010800200010004002000081001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e0000000000000000000000008080042002800410808004100280801080800101000000000000000000000000ee, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e8e8e8e8e8e8e8e8e8e8e8e8e80800420020204108080041002008010808001018e8e8e8e8e8e8e8e8e8e8e8e01, value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c48e8e8e8e8e8e8e8e8e8e8e8eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8e8e8e8e8e8e8e8e8e8e8e8e000000000000000000000000000000000002, value: 0x0
Caller: [CREATOR], function: withdrawETH(address), txdata: 0x690d8320, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: withdrawETH(address)
PC address: 8283
Estimated Gas Usage: 29518 - 196368
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:420

locked = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000140800480020010800200010004002000081001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e0000000000000000000000008080042002800410808004100280801080800101000000000000000000000000ee, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e8e8e8e8e8e8e8e8e8e8e8e8e80800420020204108080041002008010808001018e8e8e8e8e8e8e8e8e8e8e8e01, value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c48e8e8e8e8e8e8e8e8e8e8e8eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8e8e8e8e8e8e8e8e8e8e8e8e000000000000000000000000000000000002, value: 0x0
Caller: [CREATOR], function: withdrawETH(address), txdata: 0x690d8320, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: addReserve(address,uint32)
PC address: 9071
Estimated Gas Usage: 44336 - 202673
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:798

reserveTokens.length

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000008, decoded_data: ('0x0000000000000000000000000000000000000001', 524288), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LiquidTokenConverter
Function name: reserveTokens(uint256)
PC address: 9408
Estimated Gas Usage: 1740 - 1835
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:599

IERC20Token[] public reserveTokens

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: reserveTokens(uint256), txdata: 0xd031370b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: withdrawTokens(address,address,uint256)
PC address: 11593
Estimated Gas Usage: 21169 - 136842
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:252

owner

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e0000000000000000000000000000008008000080010040000404100408208000000000000000000000000000ee, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: withdrawETH(address)
PC address: 11856
Estimated Gas Usage: 29518 - 196368
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:676

reserves[_address].isSet

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000140800480020010800200010004002000081001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e0000000000000000000000008080042002800410808004100280801080800101000000000000000000000000ee, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e8e8e8e8e8e8e8e8e8e8e8e8e80800420020204108080041002008010808001018e8e8e8e8e8e8e8e8e8e8e8e01, value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c48e8e8e8e8e8e8e8e8e8e8e8eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8e8e8e8e8e8e8e8e8e8e8e8e000000000000000000000000000000000002, value: 0x0
Caller: [CREATOR], function: withdrawETH(address), txdata: 0x690d8320, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidTokenConverter
Function name: transferTokenOwnership(address)
PC address: 13478
Estimated Gas Usage: 7210 - 77563
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:399

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidTokenConverter
Function name: transferAnchorOwnership(address)
PC address: 13478
Estimated Gas Usage: 6567 - 76590
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:399

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferAnchorOwnership(address), txdata: 0x67b6d57c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidTokenConverter
Function name: updateRegistry()
PC address: 13478
Estimated Gas Usage: 19933 - 131462
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:399

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidTokenConverter
Function name: withdrawTokens(address,address,uint256)
PC address: 13478
Estimated Gas Usage: 21169 - 136842
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:399

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e0000000000000000000000002000008010000420400001004000000020040110000000000000000000000000ee, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: withdrawETH(address)
PC address: 14075
Estimated Gas Usage: 29518 - 196368
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:878

reserves[_reserveToken].balance = address(this).balance

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000140800480020010800200010004002000081001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e0000000000000000000000008080042002800410808004100280801080800101000000000000000000000000ee, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e8e8e8e8e8e8e8e8e8e8e8e8e80800420020204108080041002008010808001018e8e8e8e8e8e8e8e8e8e8e8e01, value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c48e8e8e8e8e8e8e8e8e8e8e8eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8e8e8e8e8e8e8e8e8e8e8e8e000000000000000000000000000000000002, value: 0x0
Caller: [CREATOR], function: withdrawETH(address), txdata: 0x690d8320, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: addReserve(address,uint32)
PC address: 14598
Estimated Gas Usage: 44336 - 202673
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:811

anchor

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000008, decoded_data: ('0x0000000000000000000000000000000000000001', 524288), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: addReserve(address,uint32)
PC address: 14751
Estimated Gas Usage: 44336 - 202673
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:811

reserves[_token].isSet

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000008, decoded_data: ('0x0000000000000000000000000000000000000001', 524288), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: addReserve(address,uint32)
PC address: 14885
Estimated Gas Usage: 44336 - 202673
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:812

reserveRatio

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000008, decoded_data: ('0x0000000000000000000000000000000000000001', 524288), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: addReserve(address,uint32)
PC address: 15274
Estimated Gas Usage: 44336 - 202673
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:816

newReserve.balance = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000008, decoded_data: ('0x0000000000000000000000000000000000000001', 524288), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: addReserve(address,uint32)
PC address: 15288
Estimated Gas Usage: 44336 - 202673
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:817

newReserve.weight = _weight

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000008, decoded_data: ('0x0000000000000000000000000000000000000001', 524288), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: addReserve(address,uint32)
PC address: 15309
Estimated Gas Usage: 44336 - 202673
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:817

newReserve.weight = _weight

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000008, decoded_data: ('0x0000000000000000000000000000000000000001', 524288), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: addReserve(address,uint32)
PC address: 15324
Estimated Gas Usage: 44336 - 202673
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:818

newReserve.isSet = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000008, decoded_data: ('0x0000000000000000000000000000000000000001', 524288), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: addReserve(address,uint32)
PC address: 15338
Estimated Gas Usage: 44336 - 202673
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:818

newReserve.isSet = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000008, decoded_data: ('0x0000000000000000000000000000000000000001', 524288), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: addReserve(address,uint32)
PC address: 15348
Estimated Gas Usage: 44336 - 202673
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000008, decoded_data: ('0x0000000000000000000000000000000000000001', 524288), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: addReserve(address,uint32)
PC address: 15352
Estimated Gas Usage: 44336 - 202673
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000008, decoded_data: ('0x0000000000000000000000000000000000000001', 524288), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: addReserve(address,uint32)
PC address: 15386
Estimated Gas Usage: 44336 - 202673
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:819

reserveTokens.push(_token)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000008, decoded_data: ('0x0000000000000000000000000000000000000001', 524288), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: addReserve(address,uint32)
PC address: 15439
Estimated Gas Usage: 44336 - 202673
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:819

reserveTokens.push(_token)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000008, decoded_data: ('0x0000000000000000000000000000000000000001', 524288), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: addReserve(address,uint32)
PC address: 15451
Estimated Gas Usage: 44336 - 202673
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:820

reserveRatio += _weight

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000008, decoded_data: ('0x0000000000000000000000000000000000000001', 524288), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: addReserve(address,uint32)
PC address: 15473
Estimated Gas Usage: 44336 - 202673
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:820

reserveRatio += _weight

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000008, decoded_data: ('0x0000000000000000000000000000000000000001', 524288), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: addReserve(address,uint32)
PC address: 15494
Estimated Gas Usage: 44336 - 202673
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:820

reserveRatio += _weight

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000008, decoded_data: ('0x0000000000000000000000000000000000000001', 524288), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidTokenConverter
Function name: withdrawTokens(address,address,uint256)
PC address: 20636
Estimated Gas Usage: 21169 - 136842
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:497

call(
                gas,            
                _token,         
                0,              
                add(_data, 32), 
                mload(_data),   
                ret,            
                32              
            )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010002010000020201000100020401000102010400000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidTokenConverter
Function name: withdrawTokens(address,address,uint256)
PC address: 20636
Estimated Gas Usage: 21169 - 136842
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:497

call(
                gas,            
                _token,         
                0,              
                add(_data, 32), 
                mload(_data),   
                ret,            
                32              
            )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000100000100000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidTokenConverter
Function name: withdrawTokens(address,address,uint256)
PC address: 20636
Estimated Gas Usage: 21169 - 136842
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:497

call(
                gas,            
                _token,         
                0,              
                add(_data, 32), 
                mload(_data),   
                ret,            
                32              
            )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e0000000000000000000000000000008008000080010040000404100408208000000000000000000000000000ee, value: 0x0


time_used: 36066.184816122055 seconds
#@contract_info_time
0x8f535c21dbb5e7cc175938a1b9f82aebe6ee822f.sol:0.4.26:LiquidTokenConverter:36066.184816122055:36100:60:36000
