++++ 0x8B8ADD5d4c112fB6313749C22dE40Bfa9DAc1d47.sol  :  0.5.0  :  CardERC20Wrapper ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 5522
['constructor']:writes at the last depth:['3']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 93.61% coverage.
dynamic svars:['3', '7', '0', '1']
static svars:['2', '8', '6', '5', '4']
Ending preprocessing.
preprocessing time(s): 103.25412011146545
contract coverage: 83.68%
depositedCards(uint256) is not reachable
depositCardsAndMintTokens(uint256[],address) is not reachable
increaseAllowance(address,uint256) is not reachable
depositAndSellCards(uint256[],uint256,address) is not reachable
approve(address,uint256) is not reachable
Function Reads: State variables read in conditions
	name():[]
	approve(address,uint256):[]
	depositCardsAndMintTokens(uint256[],address):[]
	depositedCards(uint256):['7']
	totalSupply():[]
	transferFrom(address,address,uint256):['0']
	decimals():[]
	increaseAllowance(address,uint256):[]
	mint(address,uint256):['3', '2']
	burn(uint256):['0', '2']
	burnTokensAndWithdrawCards(uint256,address):['0', '2']
	proto():[]
	buyAndWithdrawCards(uint256,address):['0']
	cards():[]
	uniswapExchange():[]
	balanceOf(address):[]
	burnFrom(address,uint256):['0']
	quality():[]
	symbol():[]
	addMinter(address):['3']
	renounceMinter():['3']
	decreaseAllowance(address,uint256):['1']
	transfer(address,uint256):['0']
	isMinter(address):[]
	init(address,uint16,uint8,address):['6']
	allowance(address,address):['5']
	withdrawnCardCount():[]
	cardWrapperFactory():[]
	depositAndSellCards(uint256[],uint256,address):[]
Function Writes: State variables written
	approve(address,uint256):['1']
	burn(uint256):['0', '2']
	transferFrom(address,address,uint256):['0']
	burnTokensAndWithdrawCards(uint256,address):['0', '2', '8']
	init(address,uint16,uint8,address):['6', '5', '4']
	renounceMinter():['3']
	mint(address,uint256):['2', '0']
	increaseAllowance(address,uint256):['1']
	burnFrom(address,uint256):['0', '2']
	transfer(address,uint256):['0']
	addMinter(address):['3']
	decreaseAllowance(address,uint256):['1']
	depositCardsAndMintTokens(uint256[],address):['2', '0']
	buyAndWithdrawCards(uint256,address):['0', '2']
============================
iteration:3
targets:['depositedCards(uint256)', 'depositCardsAndMintTokens(uint256[],address)', 'increaseAllowance(address,uint256)', 'buyAndWithdrawCards(uint256,address)', 'depositAndSellCards(uint256[],uint256,address)', 'burnTokensAndWithdrawCards(uint256,address)', 'init(address,uint16,uint8,address)', 'approve(address,uint256)', 'decreaseAllowance(address,uint256)', 'mint(address,uint256)', 'transfer(address,uint256)', 'transferFrom(address,address,uint256)']
['approve(address,uint256)']:writes at the last depth:['1']
['renounceMinter()']:writes at the last depth:['3']
['increaseAllowance(address,uint256)']:writes at the last depth:['1']
['init(address,uint16,uint8,address)']:writes at the last depth:['5', '6', '4']
['burn(uint256)']:writes at the last depth:['2', '0']
['addMinter(address)']:writes at the last depth:['3']
['mint(address,uint256)']:writes at the last depth:['2', '0']
['burnTokensAndWithdrawCards(uint256,address)']:writes at the last depth:['2', '8', '0']
['decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transfer(address,uint256)']:writes at the last depth:['0']
['burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
['transferFrom(address,address,uint256)']:writes at the last depth:['0', '1']
contract coverage: 91.16%
============================
iteration:4
['transferFrom(address,address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '6', '4']
['transferFrom(address,address,uint256)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'mint(address,uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'burnTokensAndWithdrawCards(uint256,address)']:writes at the last depth:['2', '8', '0']
['transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'depositCardsAndMintTokens(uint256[],address)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'buyAndWithdrawCards(uint256,address)']:writes at the last depth:['2', '8', '0']
['transferFrom(address,address,uint256)', 'burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['0', '1']
contract coverage: 91.16%
============================
iteration:5
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '6', '4']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'mint(address,uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnTokensAndWithdrawCards(uint256,address)']:writes at the last depth:['2', '8', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'depositCardsAndMintTokens(uint256[],address)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['0', '1']
contract coverage: 91.16%
============================
iteration:6
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '6', '4']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'mint(address,uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'depositCardsAndMintTokens(uint256[],address)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['0', '1']
contract coverage: 91.16%
============================
iteration:7
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '6', '4']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'mint(address,uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'burnTokensAndWithdrawCards(uint256,address)']:writes at the last depth:['2', '8', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'depositCardsAndMintTokens(uint256[],address)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
contract coverage: 91.16%
============================
iteration:8
contract coverage: 91.16%
============================
iteration:9
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '6', '4']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'mint(address,uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'depositCardsAndMintTokens(uint256[],address)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
contract coverage: 91.16%
============================
iteration:10
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '6', '4']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'mint(address,uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'burnTokensAndWithdrawCards(uint256,address)']:writes at the last depth:['2', '8', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'depositCardsAndMintTokens(uint256[],address)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
contract coverage: 91.16%
============================
iteration:11
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnTokensAndWithdrawCards(uint256,address)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnTokensAndWithdrawCards(uint256,address)', 'burn(uint256)']:writes at the last depth:['2', '0']
contract coverage: 91.85%
============================
iteration:12
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'mint(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'mint(address,uint256)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'mint(address,uint256)', 'addMinter(address)']:writes at the last depth:['3']
contract coverage: 91.85%
============================
iteration:13
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '6', '4']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'depositCardsAndMintTokens(uint256[],address)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['0', '1']
contract coverage: 91.85%
============================
iteration:14
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '6', '4']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
contract coverage: 91.85%
============================
iteration:15
contract coverage: 91.85%
============================
iteration:16
contract coverage: 91.85%
============================
iteration:17
contract coverage: 91.85%
============================
iteration:18
contract coverage: 91.85%
============================
iteration:19
contract coverage: 91.85%
============================
iteration:20
contract coverage: 91.85%
============================
iteration:21
contract coverage: 91.85%
============================
iteration:22
contract coverage: 91.85%
============================
iteration:23
contract coverage: 91.85%
============================
iteration:24
contract coverage: 91.85%
============================
iteration:25
contract coverage: 91.85%
============================
iteration:26
contract coverage: 91.85%
============================
iteration:27
contract coverage: 91.85%
============================
iteration:28
contract coverage: 91.85%
============================
iteration:29
contract coverage: 91.85%
============================
iteration:30
contract coverage: 91.85%
============================
iteration:31
contract coverage: 91.85%
============================
iteration:32
contract coverage: 91.85%
============================
iteration:33
contract coverage: 91.85%
============================
iteration:34
contract coverage: 91.85%
============================
iteration:35
contract coverage: 91.85%
============================
iteration:36
contract coverage: 91.85%
============================
iteration:37
contract coverage: 91.85%
============================
iteration:38
contract coverage: 91.85%
============================
iteration:39
contract coverage: 91.85%
============================
iteration:40
contract coverage: 91.85%
============================
iteration:41
contract coverage: 91.85%
============================
iteration:42
contract coverage: 91.85%
#@statespace
5281 nodes, 5280 edges, 81552 total states
#@coverage
Achieved 3.16% coverage for code: 608060405262000036620000216200003c640100000000026401000000009004565b62000044640100000000026401000000009004565b620002c1565b600033905090565b62000068816003620000ae6401000000000262002c24179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b620000c982826200019d640100000000026401000000009004565b1515156200013f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200026a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b612e2f80620002d16000396000f3fe608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461017a578063095ea7b31461020a5780630e4fae5f1461027d578063176b5d021461032357806318160ddd1461037257806323b872dd1461039d578063313ce56714610430578063395093511461045b57806340c10f19146104ce57806342966c6814610541578063465776f71461057c57806351c6ff67146105d757806357a0bf0c1461060a57806358a4903f1461066c57806362b856b5146106c357806370a082311461071a57806379cc67901461077f57806388dd3886146107da57806395d89b411461080b578063983b2d561461089b57806398650275146108ec578063a457c2d714610903578063a9059cbb14610976578063aa271e1a146109e9578063d4eb30f814610a52578063dd62ed3e14610ade578063f6824b4414610b63578063f8875a0114610b8e578063f9b46cd814610be5575b600080fd5b34801561018657600080fd5b5061018f610c95565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101cf5780820151818401526020810190506101b4565b50505050905090810190601f1680156101fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021657600080fd5b506102636004803603604081101561022d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cce565b604051808215151515815260200191505060405180910390f35b34801561028957600080fd5b50610321600480360360408110156102a057600080fd5b81019080803590602001906401000000008111156102bd57600080fd5b8201836020820111156102cf57600080fd5b803590602001918460208302840111640100000000831117156102f157600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cec565b005b34801561032f57600080fd5b5061035c6004803603602081101561034657600080fd5b8101908080359060200190929190505050610d3d565b6040518082815260200191505060405180910390f35b34801561037e57600080fd5b50610387610d60565b6040518082815260200191505060405180910390f35b3480156103a957600080fd5b50610416600480360360608110156103c057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d6a565b604051808215151515815260200191505060405180910390f35b34801561043c57600080fd5b50610445610e14565b6040518082815260200191505060405180910390f35b34801561046757600080fd5b506104b46004803603604081101561047e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e19565b604051808215151515815260200191505060405180910390f35b3480156104da57600080fd5b50610527600480360360408110156104f157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ecc565b604051808215151515815260200191505060405180910390f35b34801561054d57600080fd5b5061057a6004803603602081101561056457600080fd5b8101908080359060200190929190505050610f8c565b005b34801561058857600080fd5b506105d56004803603604081101561059f57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fa0565b005b3480156105e357600080fd5b506105ec610faf565b604051808261ffff1661ffff16815260200191505060405180910390f35b6106566004803603604081101561062057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fc3565b6040518082815260200191505060405180910390f35b34801561067857600080fd5b506106816110fc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106cf57600080fd5b506106d8611122565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561072657600080fd5b506107696004803603602081101561073d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611148565b6040518082815260200191505060405180910390f35b34801561078b57600080fd5b506107d8600480360360408110156107a257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611190565b005b3480156107e657600080fd5b506107ef61119e565b604051808260ff1660ff16815260200191505060405180910390f35b34801561081757600080fd5b506108206111b1565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610860578082015181840152602081019050610845565b50505050905090810190601f16801561088d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108a757600080fd5b506108ea600480360360208110156108be57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111ea565b005b3480156108f857600080fd5b506109016112a0565b005b34801561090f57600080fd5b5061095c6004803603604081101561092657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112b2565b604051808215151515815260200191505060405180910390f35b34801561098257600080fd5b506109cf6004803603604081101561099957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113c3565b604051808215151515815260200191505060405180910390f35b3480156109f557600080fd5b50610a3860048036036020811015610a0c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113e1565b604051808215151515815260200191505060405180910390f35b348015610a5e57600080fd5b50610adc60048036036080811015610a7557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff169060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113fe565b005b348015610aea57600080fd5b50610b4d60048036036040811015610b0157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115c5565b6040518082815260200191505060405180910390f35b348015610b6f57600080fd5b50610b78611658565b6040518082815260200191505060405180910390f35b348015610b9a57600080fd5b50610ba361165e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bf157600080fd5b50610c9360048036036060811015610c0857600080fd5b8101908080359060200190640100000000811115610c2557600080fd5b820183602082011115610c3757600080fd5b80359060200191846020830284011164010000000083111715610c5957600080fd5b909192939192939080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611684565b005b6040805190810160405280601c81526020017f5772617070656420476f647320556e636861696e65642043617264730000000081525081565b6000610ce2610cdb6117f0565b84846117f8565b6001905092915050565b610d3833848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505083611a79565b505050565b600781815481101515610d4c57fe5b906000526020600020016000915090505481565b6000600254905090565b6000610d77848484611e0d565b610e0984610d836117f0565b610e0485606060405190810160405280602881526020017f45524332303a207472616e7366657220616d6f756e742065786365656473206181526020017f6c6c6f77616e6365000000000000000000000000000000000000000000000000815250610df58a610df06117f0565b6115c5565b6121919092919063ffffffff16565b6117f8565b600190509392505050565b601281565b6000610ec2610e266117f0565b84610ebd8560016000610e376117f0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461225390919063ffffffff16565b6117f8565b6001905092915050565b6000610ede610ed96117f0565b6113e1565b1515610f78576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f4d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f20746865204d696e74657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b610f8283836122dd565b6001905092915050565b610f9d610f976117f0565b8261249a565b50565b610fab3383836126db565b5050565b600660149054906101000a900461ffff1681565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636b1d4db7346012600a0a8602426040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180838152602001828152602001925050506020604051808303818588803b15801561106457600080fd5b505af1158015611078573d6000803e3d6000fd5b50505050506040513d602081101561108f57600080fd5b8101908080519060200190929190505050340390503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156110ea573d6000803e3d6000fd5b506110f63084846126db565b92915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61119a8282612869565b5050565b600660169054906101000a900460ff1681565b6040805190810160405280600381526020017f574755000000000000000000000000000000000000000000000000000000000081525081565b6111fa6111f56117f0565b6113e1565b1515611294576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f4d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f20746865204d696e74657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b61129d8161297c565b50565b6112b06112ab6117f0565b6129d6565b565b60006113b96112bf6117f0565b846113b485606060405190810160405280602581526020017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781526020017f207a65726f0000000000000000000000000000000000000000000000000000008152506001600061132d6117f0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121919092919063ffffffff16565b6117f8565b6001905092915050565b60006113d76113d06117f0565b8484611e0d565b6001905092915050565b60006113f7826003612a3090919063ffffffff16565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156114c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f43617264577261707065723a416c726561647920696e697469616c697a65640081525060200191505060405180910390fd5b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600660146101000a81548161ffff021916908361ffff16021790555081600660166101000a81548160ff021916908360ff16021790555050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611645577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050611652565b61164f8383612b53565b90505b92915050565b60085481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6116d033858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505030611a79565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637237e0316012600a0a86869050028442856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001945050505050602060405180830381600087803b1580156117ae57600080fd5b505af11580156117c2573d6000803e3d6000fd5b505050506040513d60208110156117d857600080fd5b81019080805190602001909291905050505050505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156118c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481526020017f726573730000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561198e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f45524332303a20617070726f766520746f20746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630bbe0ee38430856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015611b8c578082015181840152602081019050611b71565b50505050905001945050505050600060405180830381600087803b158015611bb357600080fd5b505af1158015611bc7573d6000803e3d6000fd5b5050505060008060008090505b8451811015611df457600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b93a89f78683815181101515611c2957fe5b906020019060200201516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604080518083038186803b158015611c8257600080fd5b505afa158015611c96573d6000803e3d6000fd5b505050506040513d6040811015611cac57600080fd5b8101908080519060200190929190805190602001909291905050508093508194505050600660149054906101000a900461ffff1661ffff168361ffff16148015611d0a5750600660169054906101000a900460ff1660ff168260ff16145b1515611da4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f43617264577261707065723a436172642068617320696e76616c69642070726f81526020017f746f206f72207175616c6974790000000000000000000000000000000000000081525060400191505060405180910390fd5b60078582815181101515611db457fe5b9060200190602002015190806001815401808255809150509060018203906000526020600020016000909192909190915055508080600101915050611bd4565b50611e06836012600a0a8651026122dd565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611ed8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f45524332303a207472616e736665722066726f6d20746865207a65726f20616481526020017f647265737300000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611fa3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f45524332303a207472616e7366657220746f20746865207a65726f206164647281526020017f657373000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61205281606060405190810160405280602681526020017f45524332303a207472616e7366657220616d6f756e742065786365656473206281526020017f616c616e636500000000000000000000000000000000000000000000000000008152506000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121919092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120e5816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461225390919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008383111582901515612240576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156122055780820151818401526020810190506121ea565b50505050905090810190601f1680156122325780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b60008082840190508381101515156122d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612382576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b6123978160025461225390919063ffffffff16565b6002819055506123ee816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461225390919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612565576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f45524332303a206275726e2066726f6d20746865207a65726f2061646472657381526020017f730000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61261481606060405190810160405280602281526020017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e81526020017f63650000000000000000000000000000000000000000000000000000000000008152506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121919092919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061266b81600254612bda90919063ffffffff16565b600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6126eb836012600a0a840261249a565b600060085490505b826008540181101561285357600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd308460078581548110151561274e57fe5b90600052602060002001546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561281157600080fd5b505af1158015612825573d6000803e3d6000fd5b5050505060078181548110151561283857fe5b906000526020600020016000905580806001019150506126f3565b5081600860008282540192505081905550505050565b612873828261249a565b6129788261287f6117f0565b61297384606060405190810160405280602481526020017f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f7781526020017f616e636500000000000000000000000000000000000000000000000000000000815250600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006129296117f0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121919092919063ffffffff16565b6117f8565b5050565b612990816003612c2490919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b6129ea816003612d0190919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612afc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000612c1c83836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612191565b905092915050565b612c2e8282612a30565b151515612ca3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b612d0b8282612a30565b1515612da5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c81526020017f650000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505056fea165627a7a72305820a4057123113984e9b1c3086cc41f392c4a69018ca46ecbf648c7c575cf7c9c2b0029
#@coverage
Achieved 91.85% coverage for code: 608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461017a578063095ea7b31461020a5780630e4fae5f1461027d578063176b5d021461032357806318160ddd1461037257806323b872dd1461039d578063313ce56714610430578063395093511461045b57806340c10f19146104ce57806342966c6814610541578063465776f71461057c57806351c6ff67146105d757806357a0bf0c1461060a57806358a4903f1461066c57806362b856b5146106c357806370a082311461071a57806379cc67901461077f57806388dd3886146107da57806395d89b411461080b578063983b2d561461089b57806398650275146108ec578063a457c2d714610903578063a9059cbb14610976578063aa271e1a146109e9578063d4eb30f814610a52578063dd62ed3e14610ade578063f6824b4414610b63578063f8875a0114610b8e578063f9b46cd814610be5575b600080fd5b34801561018657600080fd5b5061018f610c95565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101cf5780820151818401526020810190506101b4565b50505050905090810190601f1680156101fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021657600080fd5b506102636004803603604081101561022d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cce565b604051808215151515815260200191505060405180910390f35b34801561028957600080fd5b50610321600480360360408110156102a057600080fd5b81019080803590602001906401000000008111156102bd57600080fd5b8201836020820111156102cf57600080fd5b803590602001918460208302840111640100000000831117156102f157600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cec565b005b34801561032f57600080fd5b5061035c6004803603602081101561034657600080fd5b8101908080359060200190929190505050610d3d565b6040518082815260200191505060405180910390f35b34801561037e57600080fd5b50610387610d60565b6040518082815260200191505060405180910390f35b3480156103a957600080fd5b50610416600480360360608110156103c057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d6a565b604051808215151515815260200191505060405180910390f35b34801561043c57600080fd5b50610445610e14565b6040518082815260200191505060405180910390f35b34801561046757600080fd5b506104b46004803603604081101561047e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e19565b604051808215151515815260200191505060405180910390f35b3480156104da57600080fd5b50610527600480360360408110156104f157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ecc565b604051808215151515815260200191505060405180910390f35b34801561054d57600080fd5b5061057a6004803603602081101561056457600080fd5b8101908080359060200190929190505050610f8c565b005b34801561058857600080fd5b506105d56004803603604081101561059f57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fa0565b005b3480156105e357600080fd5b506105ec610faf565b604051808261ffff1661ffff16815260200191505060405180910390f35b6106566004803603604081101561062057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fc3565b6040518082815260200191505060405180910390f35b34801561067857600080fd5b506106816110fc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106cf57600080fd5b506106d8611122565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561072657600080fd5b506107696004803603602081101561073d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611148565b6040518082815260200191505060405180910390f35b34801561078b57600080fd5b506107d8600480360360408110156107a257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611190565b005b3480156107e657600080fd5b506107ef61119e565b604051808260ff1660ff16815260200191505060405180910390f35b34801561081757600080fd5b506108206111b1565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610860578082015181840152602081019050610845565b50505050905090810190601f16801561088d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108a757600080fd5b506108ea600480360360208110156108be57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111ea565b005b3480156108f857600080fd5b506109016112a0565b005b34801561090f57600080fd5b5061095c6004803603604081101561092657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112b2565b604051808215151515815260200191505060405180910390f35b34801561098257600080fd5b506109cf6004803603604081101561099957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113c3565b604051808215151515815260200191505060405180910390f35b3480156109f557600080fd5b50610a3860048036036020811015610a0c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113e1565b604051808215151515815260200191505060405180910390f35b348015610a5e57600080fd5b50610adc60048036036080811015610a7557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff169060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113fe565b005b348015610aea57600080fd5b50610b4d60048036036040811015610b0157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115c5565b6040518082815260200191505060405180910390f35b348015610b6f57600080fd5b50610b78611658565b6040518082815260200191505060405180910390f35b348015610b9a57600080fd5b50610ba361165e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bf157600080fd5b50610c9360048036036060811015610c0857600080fd5b8101908080359060200190640100000000811115610c2557600080fd5b820183602082011115610c3757600080fd5b80359060200191846020830284011164010000000083111715610c5957600080fd5b909192939192939080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611684565b005b6040805190810160405280601c81526020017f5772617070656420476f647320556e636861696e65642043617264730000000081525081565b6000610ce2610cdb6117f0565b84846117f8565b6001905092915050565b610d3833848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505083611a79565b505050565b600781815481101515610d4c57fe5b906000526020600020016000915090505481565b6000600254905090565b6000610d77848484611e0d565b610e0984610d836117f0565b610e0485606060405190810160405280602881526020017f45524332303a207472616e7366657220616d6f756e742065786365656473206181526020017f6c6c6f77616e6365000000000000000000000000000000000000000000000000815250610df58a610df06117f0565b6115c5565b6121919092919063ffffffff16565b6117f8565b600190509392505050565b601281565b6000610ec2610e266117f0565b84610ebd8560016000610e376117f0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461225390919063ffffffff16565b6117f8565b6001905092915050565b6000610ede610ed96117f0565b6113e1565b1515610f78576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f4d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f20746865204d696e74657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b610f8283836122dd565b6001905092915050565b610f9d610f976117f0565b8261249a565b50565b610fab3383836126db565b5050565b600660149054906101000a900461ffff1681565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636b1d4db7346012600a0a8602426040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180838152602001828152602001925050506020604051808303818588803b15801561106457600080fd5b505af1158015611078573d6000803e3d6000fd5b50505050506040513d602081101561108f57600080fd5b8101908080519060200190929190505050340390503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156110ea573d6000803e3d6000fd5b506110f63084846126db565b92915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61119a8282612869565b5050565b600660169054906101000a900460ff1681565b6040805190810160405280600381526020017f574755000000000000000000000000000000000000000000000000000000000081525081565b6111fa6111f56117f0565b6113e1565b1515611294576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f4d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f20746865204d696e74657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b61129d8161297c565b50565b6112b06112ab6117f0565b6129d6565b565b60006113b96112bf6117f0565b846113b485606060405190810160405280602581526020017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781526020017f207a65726f0000000000000000000000000000000000000000000000000000008152506001600061132d6117f0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121919092919063ffffffff16565b6117f8565b6001905092915050565b60006113d76113d06117f0565b8484611e0d565b6001905092915050565b60006113f7826003612a3090919063ffffffff16565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156114c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f43617264577261707065723a416c726561647920696e697469616c697a65640081525060200191505060405180910390fd5b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600660146101000a81548161ffff021916908361ffff16021790555081600660166101000a81548160ff021916908360ff16021790555050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611645577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050611652565b61164f8383612b53565b90505b92915050565b60085481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6116d033858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505030611a79565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637237e0316012600a0a86869050028442856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001945050505050602060405180830381600087803b1580156117ae57600080fd5b505af11580156117c2573d6000803e3d6000fd5b505050506040513d60208110156117d857600080fd5b81019080805190602001909291905050505050505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156118c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481526020017f726573730000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561198e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f45524332303a20617070726f766520746f20746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630bbe0ee38430856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015611b8c578082015181840152602081019050611b71565b50505050905001945050505050600060405180830381600087803b158015611bb357600080fd5b505af1158015611bc7573d6000803e3d6000fd5b5050505060008060008090505b8451811015611df457600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b93a89f78683815181101515611c2957fe5b906020019060200201516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604080518083038186803b158015611c8257600080fd5b505afa158015611c96573d6000803e3d6000fd5b505050506040513d6040811015611cac57600080fd5b8101908080519060200190929190805190602001909291905050508093508194505050600660149054906101000a900461ffff1661ffff168361ffff16148015611d0a5750600660169054906101000a900460ff1660ff168260ff16145b1515611da4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f43617264577261707065723a436172642068617320696e76616c69642070726f81526020017f746f206f72207175616c6974790000000000000000000000000000000000000081525060400191505060405180910390fd5b60078582815181101515611db457fe5b9060200190602002015190806001815401808255809150509060018203906000526020600020016000909192909190915055508080600101915050611bd4565b50611e06836012600a0a8651026122dd565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611ed8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f45524332303a207472616e736665722066726f6d20746865207a65726f20616481526020017f647265737300000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611fa3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f45524332303a207472616e7366657220746f20746865207a65726f206164647281526020017f657373000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61205281606060405190810160405280602681526020017f45524332303a207472616e7366657220616d6f756e742065786365656473206281526020017f616c616e636500000000000000000000000000000000000000000000000000008152506000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121919092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120e5816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461225390919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008383111582901515612240576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156122055780820151818401526020810190506121ea565b50505050905090810190601f1680156122325780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b60008082840190508381101515156122d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612382576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b6123978160025461225390919063ffffffff16565b6002819055506123ee816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461225390919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612565576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f45524332303a206275726e2066726f6d20746865207a65726f2061646472657381526020017f730000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61261481606060405190810160405280602281526020017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e81526020017f63650000000000000000000000000000000000000000000000000000000000008152506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121919092919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061266b81600254612bda90919063ffffffff16565b600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6126eb836012600a0a840261249a565b600060085490505b826008540181101561285357600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd308460078581548110151561274e57fe5b90600052602060002001546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561281157600080fd5b505af1158015612825573d6000803e3d6000fd5b5050505060078181548110151561283857fe5b906000526020600020016000905580806001019150506126f3565b5081600860008282540192505081905550505050565b612873828261249a565b6129788261287f6117f0565b61297384606060405190810160405280602481526020017f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f7781526020017f616e636500000000000000000000000000000000000000000000000000000000815250600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006129296117f0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121919092919063ffffffff16565b6117f8565b5050565b612990816003612c2490919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b6129ea816003612d0190919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612afc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000612c1c83836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612191565b905092915050565b612c2e8282612a30565b151515612ca3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b612d0b8282612a30565b1515612da5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c81526020017f650000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505056fea165627a7a72305820a4057123113984e9b1c3086cc41f392c4a69018ca46ecbf648c7c575cf7c9c2b0029
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardERC20Wrapper
Function name: depositedCards(uint256)
PC address: 3403
Estimated Gas Usage: 1106 - 1201
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x8B8ADD5d4c112fB6313749C22dE40Bfa9DAc1d47.sol:547

uint256[]               public          depositedCards

--------------------
Initial State:

Account: [CREATOR], balance: 0x4008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: depositedCards(uint256), txdata: 0x176b5d020202020202020202020202020202020202020202020202020202020202020202, decoded_data: (908173248920127022929968509872062022378588115024631874819275168689514742274,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CardERC20Wrapper
Function name: buyAndWithdrawCards(uint256,address)
PC address: 4258
Estimated Gas Usage: 25323 - 157300
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x8B8ADD5d4c112fB6313749C22dE40Bfa9DAc1d47.sol:594

msg.value - uniswapExchange.ethToTokenSwapOutput.value(msg.value)(
            amount * (10**uint256(decimals)),
            block.timestamp
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x50110024010a40100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000800000000000008001004004004008008080000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000008000000000000000000000000000', '0x0080000000000000800100400400400800808000', 0), value: 0x0
Caller: [CREATOR], function: buyAndWithdrawCards(uint256,address), txdata: 0x57a0bf0c00000000000000000000000000000000000000000000000000000000000000008080808080808080808080804000000280080080100000080400000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: buyAndWithdrawCards(uint256,address)
PC address: 4308
Estimated Gas Usage: 25323 - 157300
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8B8ADD5d4c112fB6313749C22dE40Bfa9DAc1d47.sol:598

msg.sender.transfer(change)

--------------------
Initial State:

Account: [CREATOR], balance: 0x442044c4000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000002000000200000000000000000bd0001000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', '0x02000000200000000000000000bd000100000000', 0), value: 0x0
Caller: [SOMEGUY], function: buyAndWithdrawCards(uint256,address), txdata: 0x57a0bf0c00000000000000000000000000000000000000000000000000000000000000002020202020202020202020200200802080800008028001200104102080004020, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: CardERC20Wrapper
Function name: buyAndWithdrawCards(uint256,address)
PC address: 4308
Estimated Gas Usage: 25323 - 157300
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x8B8ADD5d4c112fB6313749C22dE40Bfa9DAc1d47.sol:598

msg.sender.transfer(change)

--------------------
Initial State:

Account: [CREATOR], balance: 0x31000220000000401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8404000d22110, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000000d12ebe1b195e5aa8748e62bd7734ae19b51f0000000000000000000000000901d12ebe1b195e5aa8748062bd7734ae19b51f0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000d12ebe1b195e5aa8748e62bd7734ae19b51f', '0x0901d12ebe1b195e5aa8748062bd7734ae19b51f', 0), value: 0x0
Caller: [ATTACKER], function: buyAndWithdrawCards(uint256,address), txdata: 0x57a0bf0c00000000000000000000000000000000000000000000000000000000000000008080808080808080808080800b00000000000000000000000002000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: buyAndWithdrawCards(uint256,address)
PC address: 9733
Estimated Gas Usage: 25323 - 157300
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8B8ADD5d4c112fB6313749C22dE40Bfa9DAc1d47.sol:191

_balances[account]

--------------------
Initial State:

Account: [CREATOR], balance: 0x442044c4000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000002000000200000000000000000bd0001000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', '0x02000000200000000000000000bd000100000000', 0), value: 0x0
Caller: [SOMEGUY], function: buyAndWithdrawCards(uint256,address), txdata: 0x57a0bf0c00000000000000000000000000000000000000000000000000000000000000002020202020202020202020200200802080800008028001200104102080004020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: buyAndWithdrawCards(uint256,address)
PC address: 9813
Estimated Gas Usage: 25323 - 157300
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8B8ADD5d4c112fB6313749C22dE40Bfa9DAc1d47.sol:191

_balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance")

--------------------
Initial State:

Account: [CREATOR], balance: 0x442044c4000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000002000000200000000000000000bd0001000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', '0x02000000200000000000000000bd000100000000', 0), value: 0x0
Caller: [SOMEGUY], function: buyAndWithdrawCards(uint256,address), txdata: 0x57a0bf0c00000000000000000000000000000000000000000000000000000000000000002020202020202020202020200200802080800008028001200104102080004020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: buyAndWithdrawCards(uint256,address)
PC address: 9821
Estimated Gas Usage: 25323 - 157300
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8B8ADD5d4c112fB6313749C22dE40Bfa9DAc1d47.sol:192

_totalSupply

--------------------
Initial State:

Account: [CREATOR], balance: 0x442044c4000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000002000000200000000000000000bd0001000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', '0x02000000200000000000000000bd000100000000', 0), value: 0x0
Caller: [SOMEGUY], function: buyAndWithdrawCards(uint256,address), txdata: 0x57a0bf0c00000000000000000000000000000000000000000000000000000000000000002020202020202020202020200200802080800008028001200104102080004020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: buyAndWithdrawCards(uint256,address)
PC address: 9840
Estimated Gas Usage: 25323 - 157300
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8B8ADD5d4c112fB6313749C22dE40Bfa9DAc1d47.sol:192

_totalSupply = _totalSupply.sub(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x442044c4000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000002000000200000000000000000bd0001000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', '0x02000000200000000000000000bd000100000000', 0), value: 0x0
Caller: [SOMEGUY], function: buyAndWithdrawCards(uint256,address), txdata: 0x57a0bf0c00000000000000000000000000000000000000000000000000000000000000002020202020202020202020200200802080800008028001200104102080004020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: buyAndWithdrawCards(uint256,address)
PC address: 9968
Estimated Gas Usage: 25323 - 157300
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8B8ADD5d4c112fB6313749C22dE40Bfa9DAc1d47.sol:578

withdrawnCardCount

--------------------
Initial State:

Account: [CREATOR], balance: 0x442044c4000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000002000000200000000000000000bd0001000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', '0x02000000200000000000000000bd000100000000', 0), value: 0x0
Caller: [SOMEGUY], function: buyAndWithdrawCards(uint256,address), txdata: 0x57a0bf0c00000000000000000000000000000000000000000000000000000000000000002020202020202020202020200200802080800008028001200104102080004020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: buyAndWithdrawCards(uint256,address)
PC address: 9975
Estimated Gas Usage: 25323 - 157300
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8B8ADD5d4c112fB6313749C22dE40Bfa9DAc1d47.sol:578

withdrawnCardCount

--------------------
Initial State:

Account: [CREATOR], balance: 0x442044c4000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000002000000200000000000000000bd0001000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', '0x02000000200000000000000000bd000100000000', 0), value: 0x0
Caller: [SOMEGUY], function: buyAndWithdrawCards(uint256,address), txdata: 0x57a0bf0c00000000000000000000000000000000000000000000000000000000000000002020202020202020202020200200802080800008028001200104102080004020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: buyAndWithdrawCards(uint256,address)
PC address: 9989
Estimated Gas Usage: 25323 - 157300
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8B8ADD5d4c112fB6313749C22dE40Bfa9DAc1d47.sol:579

cards

--------------------
Initial State:

Account: [CREATOR], balance: 0x442044c4000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000002000000200000000000000000bd0001000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', '0x02000000200000000000000000bd000100000000', 0), value: 0x0
Caller: [SOMEGUY], function: buyAndWithdrawCards(uint256,address), txdata: 0x57a0bf0c00000000000000000000000000000000000000000000000000000000000000002020202020202020202020200200802080800008028001200104102080004020, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardERC20Wrapper
Function name: burnTokensAndWithdrawCards(uint256,address)
PC address: 10061
Estimated Gas Usage: 17733 - 60256
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x8B8ADD5d4c112fB6313749C22dE40Bfa9DAc1d47.sol:188

function _burn(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: burnTokensAndWithdrawCards(uint256,address), txdata: 0x465776f780004000000000000000000000000000000000000000000000000000000000000000000000000000000000000401004010084080020402081004100080108004, decoded_data: (57896486330424292307867888328719139656263949203794500924468322405506887974912, '0x0401004010084080020402081004100080108004'), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: buyAndWithdrawCards(uint256,address)
PC address: 10332
Estimated Gas Usage: 25323 - 157300
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8B8ADD5d4c112fB6313749C22dE40Bfa9DAc1d47.sol:582

withdrawnCardCount += amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x442044c4000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000002000000200000000000000000bd0001000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', '0x02000000200000000000000000bd000100000000', 0), value: 0x0
Caller: [SOMEGUY], function: buyAndWithdrawCards(uint256,address), txdata: 0x57a0bf0c00000000000000000000000000000000000000000000000000000000000000002020202020202020202020200200802080800008028001200104102080004020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: buyAndWithdrawCards(uint256,address)
PC address: 10339
Estimated Gas Usage: 25323 - 157300
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x8B8ADD5d4c112fB6313749C22dE40Bfa9DAc1d47.sol:582

withdrawnCardCount += amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x442044c4000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000002000000200000000000000000bd0001000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', '0x02000000200000000000000000bd000100000000', 0), value: 0x0
Caller: [SOMEGUY], function: buyAndWithdrawCards(uint256,address), txdata: 0x57a0bf0c00000000000000000000000000000000000000000000000000000000000000002020202020202020202020200200802080800008028001200104102080004020, value: 0x0


time_used: 36050.79581236839 seconds
#@contract_info_time
0x8B8ADD5d4c112fB6313749C22dE40Bfa9DAc1d47.sol:0.5.0:CardERC20Wrapper:36050.79581236839:36100:60:36000
