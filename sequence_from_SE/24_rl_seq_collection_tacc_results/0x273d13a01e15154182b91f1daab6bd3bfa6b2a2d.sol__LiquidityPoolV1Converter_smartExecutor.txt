++++ 0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol  :  0.4.26  :  LiquidityPoolV1Converter ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 13774
['constructor']:writes at the last depth:['3', '8', '0', '2', '4']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 47.26% coverage.
dynamic svars:['7', '6']
static svars:['3', '5', '0', '1', '2', '8', '4']
Ending preprocessing.
preprocessing time(s): 100.737557888031
contract coverage: 51.34%
acceptOwnership() is not reachable
connectorTokens(uint256) is not reachable
reserveTokens(uint256) is not reachable
acceptTokenOwnership() is not reachable
reserveWeight(address) is not reachable
getConnectorBalance(address) is not reachable
reserveBalance(address) is not reachable
acceptAnchorOwnership() is not reachable
fund(uint256) is not reachable
convert(address,address,uint256,address,address) is not reachable
liquidate(uint256) is not reachable
getReturn(address,address,uint256) is not reachable
removeLiquidity(uint256,address[],uint256[]) is not reachable
addLiquidity(address[],uint256[],uint256) is not reachable
withdrawETH(address) is not reachable
withdrawTokens(address,address,uint256) is not reachable
updateRegistry() is not reachable
targetAmountAndFee(address,address,uint256) is not reachable
Function Reads: State variables read in conditions
	restrictRegistryUpdate(bool):[]
	reserveRatio():[]
	connectors(address):[]
	hasETHReserve():[]
	connectorTokens(uint256):[]
	reserveWeight(address):[]
	getReturn(address,address,uint256):[]
	transferTokenOwnership(address):[]
	isActive():[]
	onlyOwnerCanUpdateRegistry():[]
	acceptTokenOwnership():[]
	withdrawFromAnchor(address,address,uint256):[]
	converterType():[]
	liquidate(uint256):[]
	updateRegistry():[]
	setConversionWhitelist(address):[]
	version():[]
	conversionFee():[]
	withdrawTokens(address,address,uint256):[]
	prevRegistry():[]
	transferAnchorOwnership(address):[]
	withdrawETH(address):[]
	addReserve(address,uint32):[]
	decimalLength(uint256):[]
	connectorTokenCount():[]
	acceptOwnership():[]
	registry():[]
	addLiquidity(address[],uint256[],uint256):[]
	owner():[]
	maxConversionFee():[]
	reserveTokenCount():[]
	geometricMean(uint256[]):[]
	targetAmountAndFee(address,address,uint256):[]
	removeLiquidity(uint256,address[],uint256[]):[]
	restoreRegistry():[]
	roundDiv(uint256,uint256):[]
	conversionsEnabled():[]
	conversionWhitelist():[]
	fund(uint256):[]
	acceptAnchorOwnership():[]
	reserveTokens(uint256):[]
	isV28OrHigher():[]
	anchor():[]
	newOwner():[]
	upgrade():[]
	reserves(address):[]
	getConnectorBalance(address):[]
	reserveBalance(address):[]
	convert(address,address,uint256,address,address):[]
	setConversionFee(uint32):[]
	transferOwnership(address):[]
	token():[]
Function Writes: State variables written
	restrictRegistryUpdate(bool):['3']
	liquidate(uint256):['3']
	setConversionWhitelist(address):['5']
	withdrawETH(address):['3']
	withdrawTokens(address,address,uint256):['3']
	acceptOwnership():['0', '1']
	restoreRegistry():['2']
	fund(uint256):['3', '7']
	addLiquidity(address[],uint256[],uint256):['3']
	convert(address,address,uint256,address,address):['3']
	transferOwnership(address):['1']
	removeLiquidity(uint256,address[],uint256[]):['3']
============================
iteration:3
targets:['acceptOwnership()', 'connectorTokens(uint256)', 'reserveTokens(uint256)', 'acceptTokenOwnership()', 'reserveWeight(address)', 'getConnectorBalance(address)', 'reserveBalance(address)', 'acceptAnchorOwnership()', 'fund(uint256)', 'convert(address,address,uint256,address,address)', 'liquidate(uint256)', 'getReturn(address,address,uint256)', 'removeLiquidity(uint256,address[],uint256[])', 'addLiquidity(address[],uint256[],uint256)', 'withdrawETH(address)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()', 'targetAmountAndFee(address,address,uint256)']
['restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['isActive()']:writes at the last depth:[]
['setConversionWhitelist(address)']:writes at the last depth:['5']
['withdrawFromAnchor(address,address,uint256)']:writes at the last depth:[]
['restoreRegistry()']:writes at the last depth:['2']
['transferTokenOwnership(address)']:writes at the last depth:[]
['transferOwnership(address)']:writes at the last depth:['1']
['transferAnchorOwnership(address)']:writes at the last depth:[]
['setConversionFee(uint32)']:writes at the last depth:['8']
['updateRegistry()']:writes at the last depth:['3', '2']
['updateRegistry()']:writes at the last depth:['3', '2']
['liquidate(uint256)']:writes at the last depth:['3']
['addReserve(address,uint32)']:writes at the last depth:['6', '', '7', '8']
['fund(uint256)']:writes at the last depth:['7', '3']
['withdrawTokens(address,address,uint256)']:writes at the last depth:['3']
contract coverage: 51.34%
============================
iteration:4
contract coverage: 51.34%
============================
iteration:5
contract coverage: 51.34%
============================
iteration:6
contract coverage: 51.34%
============================
iteration:7
contract coverage: 51.34%
============================
iteration:8
contract coverage: 51.34%
============================
iteration:9
contract coverage: 51.34%
============================
iteration:10
contract coverage: 51.34%
============================
iteration:11
contract coverage: 51.34%
============================
iteration:12
contract coverage: 51.34%
============================
iteration:13
contract coverage: 51.34%
============================
iteration:14
contract coverage: 51.34%
============================
iteration:15
contract coverage: 51.34%
============================
iteration:16
contract coverage: 51.34%
============================
iteration:17
contract coverage: 51.34%
============================
iteration:18
contract coverage: 51.34%
#@statespace
12124 nodes, 12123 edges, 129867 total states
#@coverage
Achieved 3.10% coverage for code: 
#@coverage
Achieved 51.34% coverage for code: 
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: connectorTokens(uint256)
PC address: 5276
Estimated Gas Usage: 1105 - 1200
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:936

function connectorTokens(uint256 _index) public view returns (IERC20Token) {
        return ConverterBase.reserveTokens[_index];
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: connectorTokens(uint256), txdata: 0x19b64015, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: isActive()
PC address: 5638
Estimated Gas Usage: 2854 - 38027
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:747

anchor.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: isActive(), txdata: 0x22f3e2d4, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: withdrawFromAnchor(address,address,uint256)
PC address: 6142
Estimated Gas Usage: 3881 - 39202
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:769

anchor.withdrawTokens(_token, _to, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawFromAnchor(address,address,uint256), txdata: 0x395900d4, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 6475
Estimated Gas Usage: 24328 - 170655
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:1253

ISmartToken(anchor).totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: liquidate(uint256), txdata: 0x415f1240f1, decoded_data: (109007396508567199597971122605835100752492446501638187240270616194949469700096,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 6539
Estimated Gas Usage: 24328 - 170655
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:1254

anchor

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: liquidate(uint256), txdata: 0x415f124041, decoded_data: (29400335157912315244266070412362164103369332044010299463143527189509193072640,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 6733
Estimated Gas Usage: 24328 - 170655
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:1254

ISmartToken(anchor).destroy(msg.sender, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: liquidate(uint256), txdata: 0x415f1240f1, decoded_data: (109007396508567199597971122605835100752492446501638187240270616194949469700096,), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 6733
Estimated Gas Usage: 24328 - 170655
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:1254

ISmartToken(anchor).destroy(msg.sender, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000400101010180400101010101020101010101040100000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: liquidate(uint256), txdata: 0x415f124001, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 6733
Estimated Gas Usage: 24328 - 170655
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:1254

ISmartToken(anchor).destroy(msg.sender, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: liquidate(uint256), txdata: 0x415f124041, decoded_data: (29400335157912315244266070412362164103369332044010299463143527189509193072640,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 6758
Estimated Gas Usage: 24328 - 170655
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:1256

reserveTokens.length

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: liquidate(uint256), txdata: 0x415f124041, decoded_data: (29400335157912315244266070412362164103369332044010299463143527189509193072640,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 6873
Estimated Gas Usage: 24328 - 170655
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:1260

removeLiquidityFromPool(reserveTokens, reserveMinReturnAmounts, totalSupply, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: liquidate(uint256), txdata: 0x415f124041, decoded_data: (29400335157912315244266070412362164103369332044010299463143527189509193072640,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 6902
Estimated Gas Usage: 24328 - 170655
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:1260

removeLiquidityFromPool(reserveTokens, reserveMinReturnAmounts, totalSupply, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: liquidate(uint256), txdata: 0x415f124041, decoded_data: (29400335157912315244266070412362164103369332044010299463143527189509193072640,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 7024
Estimated Gas Usage: 24328 - 170655
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:426

locked = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010201010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: liquidate(uint256), txdata: 0x415f124002, decoded_data: (904625697166532776746648320380374280103671755200316906558262375061821325312,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 7038
Estimated Gas Usage: 24328 - 170655
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:426

locked = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010201010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: liquidate(uint256), txdata: 0x415f124002, decoded_data: (904625697166532776746648320380374280103671755200316906558262375061821325312,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 7316
Estimated Gas Usage: 19933 - 131462
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:379

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010201010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 7743
Estimated Gas Usage: 19933 - 131462
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:382

newRegistry.addressOf(CONTRACT_REGISTRY)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010401200101020101010201010108010102010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 7743
Estimated Gas Usage: 19933 - 131462
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:382

newRegistry.addressOf(CONTRACT_REGISTRY)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101080101010101010101010101020101800120200101010101010101010101010180, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 7743
Estimated Gas Usage: 19933 - 131462
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:382

newRegistry.addressOf(CONTRACT_REGISTRY)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010201010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 7945
Estimated Gas Usage: 19933 - 131462
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:385

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010102010101010102010101010110800101040100000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 7984
Estimated Gas Usage: 19933 - 131462
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:385

prevRegistry = registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010102010101010102010101010110800101040100000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 8037
Estimated Gas Usage: 19933 - 131462
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:385

prevRegistry = registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010102010101010102010101010110800101040100000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 8049
Estimated Gas Usage: 19933 - 131462
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:388

registry = newRegistry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010102010101010102010101010110800101040100000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 8102
Estimated Gas Usage: 19933 - 131462
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:388

registry = newRegistry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010102010101010102010101010110800101040100000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: withdrawTokens(address,address,uint256)
PC address: 8377
Estimated Gas Usage: 21169 - 136842
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:785

reserves[_token].isSet

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: withdrawTokens(address,address,uint256)
PC address: 8688
Estimated Gas Usage: 21169 - 136842
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:789

reserves[_token].isSet

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000040101011080044008800880408080804010200100000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: withdrawTokens(address,address,uint256)
PC address: 8725
Estimated Gas Usage: 21169 - 136842
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:426

locked = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000040101011080044008800880408080804010200100000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: withdrawTokens(address,address,uint256)
PC address: 8739
Estimated Gas Usage: 21169 - 136842
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:426

locked = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000040101011080044008800880408080804010200100000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: transferTokenOwnership(address)
PC address: 8840
Estimated Gas Usage: 7210 - 77563
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:756

anchor

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: transferAnchorOwnership(address)
PC address: 8840
Estimated Gas Usage: 6567 - 76590
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:756

anchor

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferAnchorOwnership(address), txdata: 0x67b6d57c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: transferTokenOwnership(address)
PC address: 9026
Estimated Gas Usage: 7210 - 77563
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:756

anchor.transferOwnership(_newOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: transferTokenOwnership(address)
PC address: 9026
Estimated Gas Usage: 7210 - 77563
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:756

anchor.transferOwnership(_newOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: transferTokenOwnership(address)
PC address: 9026
Estimated Gas Usage: 7210 - 77563
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:756

anchor.transferOwnership(_newOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 9590
Estimated Gas Usage: 43424 - 201761
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:817

anchor

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40202020202020202020202020000000000000000000000000000000000000001020202020202020202020202020202020202020202020202020202020007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 9743
Estimated Gas Usage: 43424 - 201761
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:817

reserves[_token].isSet

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40202020202020202020202020000000000000000000000000000000000000001020202020202020202020202020202020202020202020202020202020007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 9877
Estimated Gas Usage: 43424 - 201761
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:818

reserveRatio

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40202020202020202020202020000000000000000000000000000000000000001020202020202020202020202020202020202020202020202020202020007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 10266
Estimated Gas Usage: 43424 - 201761
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:822

newReserve.balance = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40202020202020202020202020000000000000000000000000000000000000001020202020202020202020202020202020202020202020202020202020007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 10280
Estimated Gas Usage: 43424 - 201761
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:823

newReserve.weight = _weight

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40202020202020202020202020000000000000000000000000000000000000001020202020202020202020202020202020202020202020202020202020007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 10301
Estimated Gas Usage: 43424 - 201761
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:823

newReserve.weight = _weight

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40202020202020202020202020000000000000000000000000000000000000001020202020202020202020202020202020202020202020202020202020007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 10316
Estimated Gas Usage: 43424 - 201761
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:824

newReserve.isSet = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40202020202020202020202020000000000000000000000000000000000000001020202020202020202020202020202020202020202020202020202020007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 10330
Estimated Gas Usage: 43424 - 201761
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:824

newReserve.isSet = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40202020202020202020202020000000000000000000000000000000000000001020202020202020202020202020202020202020202020202020202020007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 10340
Estimated Gas Usage: 43424 - 201761
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40202020202020202020202020000000000000000000000000000000000000001020202020202020202020202020202020202020202020202020202020007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 10344
Estimated Gas Usage: 43424 - 201761
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40202020202020202020202020000000000000000000000000000000000000001020202020202020202020202020202020202020202020202020202020007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 10378
Estimated Gas Usage: 43424 - 201761
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:825

reserveTokens.push(_token)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40202020202020202020202020000000000000000000000000000000000000001020202020202020202020202020202020202020202020202020202020007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 10431
Estimated Gas Usage: 43424 - 201761
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:825

reserveTokens.push(_token)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40202020202020202020202020000000000000000000000000000000000000001020202020202020202020202020202020202020202020202020202020007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 10443
Estimated Gas Usage: 43424 - 201761
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:826

reserveRatio += _weight

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40202020202020202020202020000000000000000000000000000000000000001020202020202020202020202020202020202020202020202020202020007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 10465
Estimated Gas Usage: 43424 - 201761
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:826

reserveRatio += _weight

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40202020202020202020202020000000000000000000000000000000000000001020202020202020202020202020202020202020202020202020202020007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 10486
Estimated Gas Usage: 43424 - 201761
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:826

reserveRatio += _weight

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40202020202020202020202020000000000000000000000000000000000000001020202020202020202020202020202020202020202020202020202020007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 12326
Estimated Gas Usage: 43424 - 201761
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:804

reserveTokens.length

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40202020202020202020202020000000000000000000000000000000000000001020202020202020202020202020202020202020202020202020202020007, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LiquidityPoolV1Converter
Function name: roundDiv(uint256,uint256)
PC address: 13756
Estimated Gas Usage: 1130 - 1506
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:1413

_n + _d / 2

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: roundDiv(uint256,uint256), txdata: 0xbbb7e5d88818850000800000000000000000000000000000000000000000000000000001fe, decoded_data: (61557869669195689333500092341761922949656550180799310710068871224383793790977, 114887463540149662646824336688307533573166312910440247132899321632851308314624), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: roundDiv(uint256,uint256)
PC address: 13764
Estimated Gas Usage: 1045 - 1140
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:1412

function roundDiv(uint256 _n, uint256 _d) public pure returns (uint256) {
        return (_n + _d / 2) / _d;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: roundDiv(uint256,uint256), txdata: 0xbbb7e5d8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: geometricMean(uint256[])
PC address: 13764
Estimated Gas Usage: 1203 - 3978
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:1422

roundDiv(numOfDigits, length)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: geometricMean(uint256[]), txdata: 0xa60e7724, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 14207
Estimated Gas Usage: 28956 - 194911
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:1205

ISmartToken(anchor).totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 14312
Estimated Gas Usage: 28956 - 194911
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:1210

reserveTokens.length

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 15551
Estimated Gas Usage: 28956 - 194911
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:1246

anchor

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 15745
Estimated Gas Usage: 28956 - 194911
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:1246

ISmartToken(anchor).issue(msg.sender, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 15745
Estimated Gas Usage: 28956 - 194911
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:1246

ISmartToken(anchor).issue(msg.sender, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 15778
Estimated Gas Usage: 28956 - 194911
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:426

locked = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 15792
Estimated Gas Usage: 28956 - 194911
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:426

locked = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: reserveTokens(uint256)
PC address: 15984
Estimated Gas Usage: 1894 - 1989
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:605

IERC20Token[] public reserveTokens

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: reserveTokens(uint256), txdata: 0xd031370b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: withdrawTokens(address,address,uint256)
PC address: 18169
Estimated Gas Usage: 21169 - 136842
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:258

owner

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 19777
Estimated Gas Usage: 24328 - 170655
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:405

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: liquidate(uint256), txdata: 0x415f124041, decoded_data: (29400335157912315244266070412362164103369332044010299463143527189509193072640,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 19777
Estimated Gas Usage: 28956 - 194911
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:405

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: transferTokenOwnership(address)
PC address: 19927
Estimated Gas Usage: 7210 - 77563
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:405

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: transferAnchorOwnership(address)
PC address: 19927
Estimated Gas Usage: 6567 - 76590
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:405

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferAnchorOwnership(address), txdata: 0x67b6d57c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 19927
Estimated Gas Usage: 19933 - 131462
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:405

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: withdrawTokens(address,address,uint256)
PC address: 19927
Estimated Gas Usage: 21169 - 136842
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:405

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 19927
Estimated Gas Usage: 28956 - 194911
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:405

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 19927
Estimated Gas Usage: 24328 - 170655
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:405

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: liquidate(uint256), txdata: 0x415f124041, decoded_data: (29400335157912315244266070412362164103369332044010299463143527189509193072640,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 19927
Estimated Gas Usage: 28956 - 194911
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:405

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 22623
Estimated Gas Usage: 24328 - 170655
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:891

reserveTokens.length

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: liquidate(uint256), txdata: 0x415f124041, decoded_data: (29400335157912315244266070412362164103369332044010299463143527189509193072640,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: withdrawTokens(address,address,uint256)
PC address: 27571
Estimated Gas Usage: 21169 - 136842
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:503

call(
                gas,            
                _token,         
                0,              
                add(_data, 32), 
                mload(_data),   
                ret,            
                32              
            )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000040000000000000000000000000000000100000000000000000000000020, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: withdrawTokens(address,address,uint256)
PC address: 27571
Estimated Gas Usage: 21169 - 136842
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:503

call(
                gas,            
                _token,         
                0,              
                add(_data, 32), 
                mload(_data),   
                ret,            
                32              
            )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000202040040180018001080810041020400801010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: withdrawTokens(address,address,uint256)
PC address: 27571
Estimated Gas Usage: 21169 - 136842
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:503

call(
                gas,            
                _token,         
                0,              
                add(_data, 32), 
                mload(_data),   
                ret,            
                32              
            )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000001, value: 0x0


time_used: 36101.72927689552 seconds
#@contract_info_time
0x273d13a01e15154182b91f1daab6bd3bfa6b2a2d.sol:0.4.26:LiquidityPoolV1Converter:36101.72927689552:36100:60:36000
