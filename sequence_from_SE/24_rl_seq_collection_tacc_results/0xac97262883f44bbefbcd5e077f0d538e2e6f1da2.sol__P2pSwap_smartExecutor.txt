++++ 0xac97262883f44bbefbcd5e077f0d538e2e6f1da2.sol  :  0.6.0  :  P2pSwap ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 1549
['constructor']:writes at the last depth:[]
preprocessing: Achieved 98.97% coverage.
dynamic svars:['0']
static svars:[]
Ending preprocessing.
preprocessing time(s): 9.885000467300415
contract coverage: 61.65%
executeSwap(uint256,address) is not reachable
cancelSwap(uint256) is not reachable
registerSwap(uint256,address,address,uint256,address,uint256) is not reachable
Function Reads: State variables read in conditions
	executeSwap(uint256,address):[]
	getSwap(uint256):[]
	cancelSwap(uint256):[]
	registerSwap(uint256,address,address,uint256,address,uint256):[]
Function Writes: State variables written
	cancelSwap(uint256):['0']
	registerSwap(uint256,address,address,uint256,address,uint256):['0']
	executeSwap(uint256,address):['0']
============================
iteration:3
targets:['executeSwap(uint256,address)', 'cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)']
['cancelSwap(uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
contract coverage: 93.87%
============================
iteration:4
['registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:5
['registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:6
['registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:7
['registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)', 'cancelSwap(uint256)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)', 'cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:8
['registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:9
['registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)', 'executeSwap(uint256,address)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:10
['registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:11
['registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)', 'executeSwap(uint256,address)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:12
['registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)', 'executeSwap(uint256,address)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:13
['registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)', 'executeSwap(uint256,address)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)', 'executeSwap(uint256,address)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:14
['registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:15
['registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)', 'cancelSwap(uint256)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)', 'cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
['registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)', 'cancelSwap(uint256)', 'executeSwap(uint256,address)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:16
['cancelSwap(uint256)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:17
['cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
['cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:18
['cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:19
['cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
['cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:20
['cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
['cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)', 'executeSwap(uint256,address)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:21
['cancelSwap(uint256)', 'cancelSwap(uint256)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['cancelSwap(uint256)', 'cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:22
['cancelSwap(uint256)', 'cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['cancelSwap(uint256)', 'cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
['cancelSwap(uint256)', 'cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)', 'executeSwap(uint256,address)']:writes at the last depth:['0']
contract coverage: 98.77%
============================
iteration:23
['cancelSwap(uint256)', 'cancelSwap(uint256)', 'cancelSwap(uint256)', 'cancelSwap(uint256)']:writes at the last depth:['0']
['cancelSwap(uint256)', 'cancelSwap(uint256)', 'cancelSwap(uint256)', 'registerSwap(uint256,address,address,uint256,address,uint256)']:writes at the last depth:['0']
contract coverage: 98.77%
#@statespace
1276 nodes, 1275 edges, 28034 total states
#@coverage
Achieved 1.27% coverage for code: 608060405234801561001057600080fd5b50610d9d806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632fe69784146100515780634a0d89ba146100b757806354d6a2b7146101a657806357cf7600146101ec575b600080fd5b61009d6004803603604081101561006757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102a6565b604051808215151515815260200191505060405180910390f35b6100e3600480360360208110156100cd57600080fd5b81019080803590602001909291905050506107f1565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018260ff1660ff168152602001965050505050505060405180910390f35b6101d2600480360360208110156101bc57600080fd5b8101908080359060200190929190505050610988565b604051808215151515815260200191505060405180910390f35b61028c600480360360c081101561020257600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a4d565b604051808215151515815260200191505060405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156102e157600080fd5b60008060008581526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156103be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5377617020646f6573206e6f742065786973747300000000000000000000000081525060200191505060405180910390fd5b60008160050160009054906101000a900460ff1660ff1614610448576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f53776170206e6f7420617661696c61626c65000000000000000000000000000081525060200191505060405180910390fd5b60008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008273ffffffffffffffffffffffffffffffffffffffff166323b872dd8560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168887600201546040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561057f57600080fd5b505af1158015610593573d6000803e3d6000fd5b505050506040513d60208110156105a957600080fd5b810190808051906020019092919050505090508061062f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4661696c656420746f207472616e73666572207369646531000000000000000081525060200191505060405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166323b872dd888760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688600401546040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561071457600080fd5b505af1158015610728573d6000803e3d6000fd5b505050506040513d602081101561073e57600080fd5b81019080805190602001909291905050509050806107c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4661696c656420746f207472616e73666572207369646532000000000000000081525060200191505060405180910390fd5b60018560050160006101000a81548160ff021916908360ff16021790555060019550505050505092915050565b600080600080600080610802610cec565b6000808981526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900460ff1660ff1660ff16815250509050806000015181602001518260400151836060015184608001518560a001519650965096509650965096505091939550919395565b600080600080848152602001908152602001600020905060008160050160009054906101000a900460ff1660ff1614610a29576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f53776170206e6f7420617661696c61626c65000000000000000000000000000081525060200191505060405180910390fd5b60028160050160006101000a81548160ff021916908360ff16021790555050919050565b600080871415610a5c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415610a9657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610ad057600080fd5b6000841415610ade57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b1857600080fd5b6000821415610b2657600080fd5b60008060008981526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f5377617020616c7265616479206578697374730000000000000000000000000081525060200191505060405180910390fd5b868160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550858160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848160020181905550838160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082816004018190555060019150509695505050505050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600060ff168152509056fea2646970667358221220a7c24e7ba6bc4ce1bc11a5ef7d147f498b5d36137eca55ae2da983b0547bc96864736f6c63430006000033
#@coverage
Achieved 98.77% coverage for code: 608060405234801561001057600080fd5b506004361061004c5760003560e01c80632fe69784146100515780634a0d89ba146100b757806354d6a2b7146101a657806357cf7600146101ec575b600080fd5b61009d6004803603604081101561006757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102a6565b604051808215151515815260200191505060405180910390f35b6100e3600480360360208110156100cd57600080fd5b81019080803590602001909291905050506107f1565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018260ff1660ff168152602001965050505050505060405180910390f35b6101d2600480360360208110156101bc57600080fd5b8101908080359060200190929190505050610988565b604051808215151515815260200191505060405180910390f35b61028c600480360360c081101561020257600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a4d565b604051808215151515815260200191505060405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156102e157600080fd5b60008060008581526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156103be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5377617020646f6573206e6f742065786973747300000000000000000000000081525060200191505060405180910390fd5b60008160050160009054906101000a900460ff1660ff1614610448576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f53776170206e6f7420617661696c61626c65000000000000000000000000000081525060200191505060405180910390fd5b60008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008273ffffffffffffffffffffffffffffffffffffffff166323b872dd8560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168887600201546040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561057f57600080fd5b505af1158015610593573d6000803e3d6000fd5b505050506040513d60208110156105a957600080fd5b810190808051906020019092919050505090508061062f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4661696c656420746f207472616e73666572207369646531000000000000000081525060200191505060405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166323b872dd888760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688600401546040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561071457600080fd5b505af1158015610728573d6000803e3d6000fd5b505050506040513d602081101561073e57600080fd5b81019080805190602001909291905050509050806107c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4661696c656420746f207472616e73666572207369646532000000000000000081525060200191505060405180910390fd5b60018560050160006101000a81548160ff021916908360ff16021790555060019550505050505092915050565b600080600080600080610802610cec565b6000808981526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900460ff1660ff1660ff16815250509050806000015181602001518260400151836060015184608001518560a001519650965096509650965096505091939550919395565b600080600080848152602001908152602001600020905060008160050160009054906101000a900460ff1660ff1614610a29576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f53776170206e6f7420617661696c61626c65000000000000000000000000000081525060200191505060405180910390fd5b60028160050160006101000a81548160ff021916908360ff16021790555050919050565b600080871415610a5c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415610a9657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610ad057600080fd5b6000841415610ade57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b1857600080fd5b6000821415610b2657600080fd5b60008060008981526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f5377617020616c7265616479206578697374730000000000000000000000000081525060200191505060405180910390fd5b868160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550858160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848160020181905550838160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082816004018190555060019150509695505050505050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600060ff168152509056fea2646970667358221220a7c24e7ba6bc4ce1bc11a5ef7d147f498b5d36137eca55ae2da983b0547bc96864736f6c63430006000033
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: P2pSwap
Function name: executeSwap(uint256,address)
PC address: 1410
Estimated Gas Usage: 16555 - 108935
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xac97262883f44bbefbcd5e077f0d538e2e6f1da2.sol:101

Token1.transferFrom(swap.aliceAddress, _bob, swap.value1)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: registerSwap(uint256,address,address,uint256,address,uint256), txdata: 0x57cf760000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000281024102a00240024002100280024040000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010401000000018000000000080040000080002002000100000000000000000000000080208080808080010080100800100080018080010101010101010101010101012080804080808008200204080101208020200404, decoded_data: (2, '0x0281024102a00240024002100280024040000001', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 454086624460063511464985377363557102863233678840533126070868904954472562689, '0x8020808080808001008010080010008001808001', 454086624460063511464984255115853004592622875068896052125947490677490189316), value: 0x0
Caller: [CREATOR], function: executeSwap(uint256,address), txdata: 0x2fe6978400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000202020202020202020202020202020201010101, decoded_data: (2, '0x0202020202020202020202020202020201010101'), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: P2pSwap
Function name: executeSwap(uint256,address)
PC address: 1622
Estimated Gas Usage: 16555 - 108935
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xac97262883f44bbefbcd5e077f0d538e2e6f1da2.sol:103

swap.aliceAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: registerSwap(uint256,address,address,uint256,address,uint256), txdata: 0x57cf760000000000000000000000000000000000000000000000010002000000000000000000000000000000000000000202020202020202020202020202020200000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010110010101008000040080000000000000008080800040000100000000000000000000000040000820048080004080204080044000040100010101010101010101010101018002042020408080802080208080804001801010, decoded_data: (4722510598057721069568, '0x0202020202020202020202020202020200000001', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 454086624460063511832783184740967454972578235989001319980682102500103290881, '0x4000082004808000408020408004400004010001', 454086624460063511464984255661095411756267146081658115388193725425754574864), value: 0x0
Caller: [CREATOR], function: executeSwap(uint256,address), txdata: 0x2fe6978400000000000000000000000000000000000000000000010002000000000000000000000000000000000000000202020202020202020202020202020201010101, decoded_data: (4722510598057721069568, '0x0202020202020202020202020202020201010101'), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: P2pSwap
Function name: executeSwap(uint256,address)
PC address: 1656
Estimated Gas Usage: 16555 - 108935
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xac97262883f44bbefbcd5e077f0d538e2e6f1da2.sol:103

swap.value2

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: registerSwap(uint256,address,address,uint256,address,uint256), txdata: 0x57cf760000000000000000000000000000000000000000000000010002000000000000000000000000000000000000000202020202020202020202020202020200000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010110010101008000040080000000000000008080800040000100000000000000000000000040000820048080004080204080044000040100010101010101010101010101018002042020408080802080208080804001801010, decoded_data: (4722510598057721069568, '0x0202020202020202020202020202020200000001', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 454086624460063511832783184740967454972578235989001319980682102500103290881, '0x4000082004808000408020408004400004010001', 454086624460063511464984255661095411756267146081658115388193725425754574864), value: 0x0
Caller: [CREATOR], function: executeSwap(uint256,address), txdata: 0x2fe6978400000000000000000000000000000000000000000000010002000000000000000000000000000000000000000202020202020202020202020202020201010101, decoded_data: (4722510598057721069568, '0x0202020202020202020202020202020201010101'), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: P2pSwap
Function name: executeSwap(uint256,address)
PC address: 1815
Estimated Gas Usage: 16555 - 108935
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xac97262883f44bbefbcd5e077f0d538e2e6f1da2.sol:103

Token2.transferFrom(_bob, swap.aliceAddress, swap.value2)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: registerSwap(uint256,address,address,uint256,address,uint256), txdata: 0x57cf76000000000080000000008000000080000080100100000000000000000000000001000000000000000000000000020202020202020202020202020202024000800100000000000000000000000040008000404040400400008001010800800000010101010101010101010104010004010000000000400008800000000080808001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010180404010400801202010808008014001048001, decoded_data: (13479973333587579861663289149932318313290506649303549359406442348545, '0x0202020202020202020202020202020240008001', '0x4000800040404040040000800101080080000001', 454086624460063511464985377363646392445890182731735628554329600089198198785, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 454086624460063511464984254938868715361575940191313152116637124897745960961), value: 0x0
Caller: [CREATOR], function: executeSwap(uint256,address), txdata: 0x2fe6978400000000800000000080000000800000801001000000000000000000000000010000000000000000000000000101010101e10101010101010101010101010101, decoded_data: (13479973333587579861663289149932318313290506649303549359406442348545, '0x0101010101e10101010101010101010101010101'), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: P2pSwap
Function name: executeSwap(uint256,address)
PC address: 1815
Estimated Gas Usage: 16555 - 108935
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xac97262883f44bbefbcd5e077f0d538e2e6f1da2.sol:103

Token2.transferFrom(_bob, swap.aliceAddress, swap.value2)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: registerSwap(uint256,address,address,uint256,address,uint256), txdata: 0x57cf760000000000000000000001000000000000000000000000041008000008000000000000000000000000000000000290024002c0024002c0024002400202020040010000000000000000000000008080000140000480400001082000804010028001010101010101010101010101084020008000100880800001808010008080080100000000000000000000000000800401208000802000800800808010008002010101010101010101010401010108000100400080804020808008000010082010, decoded_data: (95780971304118053647396689196913509166468639733317632, '0x0290024002c0024002c002400240020202004001', '0x8080000140000480400001082000804010028001', 454086624460063511464984254977401593841956949084597375202194431560927676417, '0x0080040120800080200080080080801000800201', 454086624460063511465271597850099383453337906706901445032366493919605170192), value: 0x0
Caller: [CREATOR], function: executeSwap(uint256,address), txdata: 0x2fe6978400000000000000000001000000000000000000000000041008000008000000000000000000000000000000000202020202020202020202020202020201010101, decoded_data: (95780971304118053647396689196913509166468639733317632, '0x0202020202020202020202020202020201010101'), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: P2pSwap
Function name: executeSwap(uint256,address)
PC address: 1815
Estimated Gas Usage: 16555 - 108935
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xac97262883f44bbefbcd5e077f0d538e2e6f1da2.sol:103

Token2.transferFrom(_bob, swap.aliceAddress, swap.value2)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: registerSwap(uint256,address,address,uint256,address,uint256), txdata: 0x57cf760000000000000000000000000000000000000000000000010002000000000000000000000000000000000000000202020202020202020202020202020200000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010110010101008000040080000000000000008080800040000100000000000000000000000040000820048080004080204080044000040100010101010101010101010101018002042020408080802080208080804001801010, decoded_data: (4722510598057721069568, '0x0202020202020202020202020202020200000001', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 454086624460063511832783184740967454972578235989001319980682102500103290881, '0x4000082004808000408020408004400004010001', 454086624460063511464984255661095411756267146081658115388193725425754574864), value: 0x0
Caller: [CREATOR], function: executeSwap(uint256,address), txdata: 0x2fe6978400000000000000000000000000000000000000000000010002000000000000000000000000000000000000000202020202020202020202020202020201010101, decoded_data: (4722510598057721069568, '0x0202020202020202020202020202020201010101'), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: P2pSwap
Function name: executeSwap(uint256,address)
PC address: 2002
Estimated Gas Usage: 16555 - 108935
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xac97262883f44bbefbcd5e077f0d538e2e6f1da2.sol:105

swap.executed = 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: registerSwap(uint256,address,address,uint256,address,uint256), txdata: 0x57cf76000000000000000000000000000000000000000000000100000000000100000001000000000000000000000000020202020202020202020202020202020100800100000000000000000000000000800404800110000808800480000080800200010101010101010101010401012020202040408020040180040480102000800401000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101018080020880808010800120802080408080800110, decoded_data: (1208925819614633469673473, '0x0202020202020202020202020202020201008001', '0x0080040480011000080880048000008080020001', 454086624460063511465271598027616113460618038024819251228728104315042923521, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 454086624460063511464984255663905123387871520695181222407522877589191393552), value: 0x0
Caller: [CREATOR], function: executeSwap(uint256,address), txdata: 0x2fe6978400000000000000000000000000000000000000000001000000000001000000010000000000000000000000000202020202020202020202020202020201010101, decoded_data: (1208925819614633469673473, '0x0202020202020202020202020202020201010101'), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: P2pSwap
Function name: executeSwap(uint256,address)
PC address: 2017
Estimated Gas Usage: 16555 - 108935
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xac97262883f44bbefbcd5e077f0d538e2e6f1da2.sol:105

swap.executed = 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: registerSwap(uint256,address,address,uint256,address,uint256), txdata: 0x57cf76000000000000000000000000000000000000000000000100000000000100000001000000000000000000000000020202020202020202020202020202020100800100000000000000000000000000800404800110000808800480000080800200010101010101010101010401012020202040408020040180040480102000800401000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101018080020880808010800120802080408080800110, decoded_data: (1208925819614633469673473, '0x0202020202020202020202020202020201008001', '0x0080040480011000080880048000008080020001', 454086624460063511465271598027616113460618038024819251228728104315042923521, '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 454086624460063511464984255663905123387871520695181222407522877589191393552), value: 0x0
Caller: [CREATOR], function: executeSwap(uint256,address), txdata: 0x2fe6978400000000000000000000000000000000000000000001000000000001000000010000000000000000000000000202020202020202020202020202020201010101, decoded_data: (1208925819614633469673473, '0x0202020202020202020202020202020201010101'), value: 0x0


time_used: 1951.0063662528992 seconds
#@contract_info_time
0xac97262883f44bbefbcd5e077f0d538e2e6f1da2.sol:0.6.0:P2pSwap:1951.0063662528992:36100:60:36000
