++++ 0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol  :  0.5.0  :  AllocatorStorage ++++
655251735853922694967911662580490717076041977877 is added into actors.
Starting preprocessing.
number of genesis states: 1
total instructions: 8950
['constructor']:writes at the last depth:['0', '1', '2', '3', '4']
preprocessing: Achieved 67.27% coverage.
dynamic svars:['1', '114', '101']
static svars:['2', '0', '4', '3']
Ending preprocessing.
preprocessing time(s): 54.31512761116028
contract coverage: 43.78%
Function Reads: State variables read in conditions
	getBaseBlockNumber():['2']
	getLastAssetValueEachMarketPerBlock(address):['2']
	getLastAssetValueEachMetrics(address):['2']
	setWaitUntilAllocatable(uint256):['2']
	getStorageAddress():['2']
	unpause():[]
	isPauser(address):[]
	setBaseBlockNumber(uint256):['2']
	setLastAssetValueEachMetrics(address,uint256):['2']
	getLastBlockNumber(address):['2']
	paused():[]
	setLastBlockNumber(address,uint256):['2']
	renouncePauser():['1']
	renounceOwnership():['0']
	addPauser(address):['1']
	pause():[]
	owner():[]
	isOwner():[]
	setStorage(address):['0']
	getWaitUntilAllocatable():['2']
	changeOwner(address):['0']
	setLastAssetValueEachMarketPerBlock(address,uint256):['2']
	setPendingLastBlockNumber(address,uint256):['2']
	getPendingLastBlockNumber(address):['2']
	setPendingIncrement(address,bool):['2']
	getPendingIncrement(address):['2']
	configAddress():[]
	transferOwnership(address):['0']
	createStorage():['0', '2']
	deleteAddress(bytes32):[]
	getAddress(bytes32):[]
	deleteBool(bytes32):[]
	setInt(bytes32,int256):[]
	deleteBytes(bytes32):[]
	setString(bytes32,string):[]
	getBool(bytes32):['1', '2']
	deleteInt(bytes32):[]
	getString(bytes32):[]
	setBool(bytes32,bool):[]
	getUint(bytes32):[]
	getBytes(bytes32):[]
	setAddress(bytes32,address):['1', '2']
	setBytes(bytes32,bytes32):[]
	getInt(bytes32):[]
	setUint(bytes32,uint256):[]
	deleteUint(bytes32):[]
	deleteString(bytes32):[]
	validateAddress(address,address):[]
	validateAddresses(address,address,address):[]
	validateGroups(address,address,address):[]
	validateIllegalAddress(address):[]
	validateGroup(address,address):[]
Function Writes: State variables written
	getBool(bytes32):['2']
	renounceOwnership():['0']
	setStorage(address):['2']
	renouncePauser():['1']
	setAddress(bytes32,address):['2']
	constructor:['0']
	transferOwnership(address):['0']
	createStorage():['2']
	addPauser(address):['1']
============================
iteration:3
targets:['getBaseBlockNumber()', 'getWaitUntilAllocatable()', 'getLastAssetValueEachMarketPerBlock(address)', 'getPendingIncrement(address)', 'getLastAssetValueEachMetrics(address)', 'getLastBlockNumber(address)', 'getPendingLastBlockNumber(address)', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'setPendingIncrement(address,bool)', 'setLastAssetValueEachMetrics(address,uint256)', 'setLastBlockNumber(address,uint256)', 'setPendingLastBlockNumber(address,uint256)', 'setWaitUntilAllocatable(uint256)', 'setBaseBlockNumber(uint256)', 'getStorageAddress()', 'createStorage()', 'getBool(bytes32)', 'setAddress(bytes32,address)', 'changeOwner(address)']
['renounceOwnership()']:writes at the last depth:['0']
['setStorage(address)']:writes at the last depth:['2']
['renouncePauser()']:writes at the last depth:['1']
['setAddress(bytes32,address)']:writes at the last depth:['2']
['transferOwnership(address)']:writes at the last depth:['0']
['createStorage()']:writes at the last depth:['2']
['addPauser(address)']:writes at the last depth:['1']
contract coverage: 44.84%
============================
iteration:4
['addPauser(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 44.84%
============================
iteration:5
['addPauser(address)', 'addPauser(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 44.84%
============================
iteration:6
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 64.51%
============================
iteration:7
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 64.51%
============================
iteration:8
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 64.51%
============================
iteration:9
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 65.52%
============================
iteration:10
['addPauser(address)', 'addPauser(address)', 'setAddress(bytes32,address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'setAddress(bytes32,address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'setAddress(bytes32,address)', 'getBool(bytes32)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'setAddress(bytes32,address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'setAddress(bytes32,address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setAddress(bytes32,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'setAddress(bytes32,address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'setAddress(bytes32,address)', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 65.52%
============================
iteration:11
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 66.77%
============================
iteration:12
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:13
['addPauser(address)', 'addPauser(address)', 'renounceOwnership()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'renounceOwnership()', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'renounceOwnership()', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 66.77%
============================
iteration:14
['addPauser(address)', 'createStorage()', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:15
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingIncrement(address,bool)', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:16
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMarketPerBlock(address,uint256)', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:17
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingLastBlockNumber(address,uint256)', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:18
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastBlockNumber(address,uint256)', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:19
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastAssetValueEachMetrics(address,uint256)', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:20
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setBaseBlockNumber(uint256)', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:21
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWaitUntilAllocatable(uint256)', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:22
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingIncrement(address)', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:23
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingLastBlockNumber(address)', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:24
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWaitUntilAllocatable()', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:25
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastBlockNumber(address)', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:26
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMarketPerBlock(address)', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:27
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastAssetValueEachMetrics(address)', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:28
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:29
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getBaseBlockNumber()', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:30
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 66.77%
============================
iteration:31
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'setAddress(bytes32,address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'getBaseBlockNumber()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'getLastAssetValueEachMetrics(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'getLastAssetValueEachMarketPerBlock(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'getLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'getWaitUntilAllocatable()']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'getPendingLastBlockNumber(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'getPendingIncrement(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'setWaitUntilAllocatable(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'setBaseBlockNumber(uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'setLastAssetValueEachMetrics(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'setLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'setPendingLastBlockNumber(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'setLastAssetValueEachMarketPerBlock(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'setPendingIncrement(address,bool)']:writes at the last depth:[]
contract coverage: 67.20%
============================
iteration:32
['addPauser(address)', 'createStorage()', 'setAddress(bytes32,address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setAddress(bytes32,address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setAddress(bytes32,address)', 'getBool(bytes32)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setAddress(bytes32,address)', 'renouncePauser()']:writes at the last depth:['1']
contract coverage: 67.20%
============================
iteration:33
contract coverage: 67.20%
============================
iteration:34
contract coverage: 67.20%
============================
iteration:35
contract coverage: 67.20%
============================
iteration:36
contract coverage: 67.20%
============================
iteration:37
contract coverage: 67.20%
============================
iteration:38
contract coverage: 67.20%
============================
iteration:39
contract coverage: 67.20%
============================
iteration:40
contract coverage: 67.20%
============================
iteration:41
contract coverage: 67.20%
============================
iteration:42
contract coverage: 67.20%
============================
iteration:43
contract coverage: 67.20%
============================
iteration:44
contract coverage: 67.20%
============================
iteration:45
contract coverage: 67.20%
============================
iteration:46
contract coverage: 67.20%
============================
iteration:47
contract coverage: 67.20%
#@statespace
20670 nodes, 20669 edges, 256191 total states
#@coverage
Achieved 3.46% coverage for code: 60806040523480156200001157600080fd5b5060405160208062005a30833981018060405260208110156200003357600080fd5b810190808051906020019092919050505080600062000060620001fc640100000000026401000000009004565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620001306200011b620001fc640100000000026401000000009004565b62000204640100000000026401000000009004565b6000600260006101000a81548160ff02191690831515021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200019762000481565b604051809103906000f080158015620001b4573d6000803e3d6000fd5b50600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000492565b600033905090565b620002288160016200026e6401000000000262003380179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6200028982826200035d640100000000026401000000009004565b151515620002ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200042a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b604051610ad38062004f5d83390190565b614abb80620004a26000396000f3fe608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063102b9de51461017a578063145a2061146101a55780633643dd4d1461020a578063378bfa471461026f578063393a4d34146102aa5780633f4ba83a1461030157806346fbf68e1461031857806348d8f848146103815780634fec2ab5146103bc57806358c8a999146104175780635c975abb1461047c57806368ee23cc146104ab5780636ef8d66d14610506578063715018a61461051d57806382dc1ec4146105345780638456cb59146105855780638da5cb5b1461059c5780638f32d59b146105f35780639137c1a7146106225780639ee634b914610673578063a6f9dae11461069e578063a8f518b2146106ef578063abee18831461074a578063b9430445146107a5578063cc6d7af81461080a578063d21e7f5214610867578063d6c31871146108d0578063f2fde38b14610927578063fb971d0114610978575b600080fd5b34801561018657600080fd5b5061018f61098f565b6040518082815260200191505060405180910390f35b3480156101b157600080fd5b506101f4600480360360208110156101c857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a4c565b6040518082815260200191505060405180910390f35b34801561021657600080fd5b506102596004803603602081101561022d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b0c565b6040518082815260200191505060405180910390f35b34801561027b57600080fd5b506102a86004803603602081101561029257600080fd5b8101908080359060200190929190505050610bcc565b005b3480156102b657600080fd5b506102bf610dfb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030d57600080fd5b50610316610eeb565b005b34801561032457600080fd5b506103676004803603602081101561033b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110a0565b604051808215151515815260200191505060405180910390f35b34801561038d57600080fd5b506103ba600480360360208110156103a457600080fd5b81019080803590602001909291905050506110bd565b005b3480156103c857600080fd5b50610415600480360360408110156103df57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112ec565b005b34801561042357600080fd5b506104666004803603602081101561043a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061151d565b6040518082815260200191505060405180910390f35b34801561048857600080fd5b506104916115dd565b604051808215151515815260200191505060405180910390f35b3480156104b757600080fd5b50610504600480360360408110156104ce57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115f4565b005b34801561051257600080fd5b5061051b611825565b005b34801561052957600080fd5b50610532611837565b005b34801561054057600080fd5b506105836004803603602081101561055757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611972565b005b34801561059157600080fd5b5061059a611a28565b005b3480156105a857600080fd5b506105b1611bde565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105ff57600080fd5b50610608611c07565b604051808215151515815260200191505060405180910390f35b34801561062e57600080fd5b506106716004803603602081101561064557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c65565b005b34801561067f57600080fd5b50610688611d25565b6040518082815260200191505060405180910390f35b3480156106aa57600080fd5b506106ed600480360360208110156106c157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611de2565b005b3480156106fb57600080fd5b506107486004803603604081101561071257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f36565b005b34801561075657600080fd5b506107a36004803603604081101561076d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612167565b005b3480156107b157600080fd5b506107f4600480360360208110156107c857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612398565b6040518082815260200191505060405180910390f35b34801561081657600080fd5b506108656004803603604081101561082d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050612458565b005b34801561087357600080fd5b506108b66004803603602081101561088a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061268d565b604051808215151515815260200191505060405180910390f35b3480156108dc57600080fd5b506108e561274d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561093357600080fd5b506109766004803603602081101561094a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612777565b005b34801561098457600080fd5b5061098d6127ff565b005b60006109996129ae565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56109bc612b21565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610a0c57600080fd5b505afa158015610a20573d6000803e3d6000fd5b505050506040513d6020811015610a3657600080fd5b8101908080519060200190929190505050905090565b6000610a566129ae565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610a7a84612b6f565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610aca57600080fd5b505afa158015610ade573d6000803e3d6000fd5b505050506040513d6020811015610af457600080fd5b81019080805190602001909291905050509050919050565b6000610b166129ae565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610b3a84612c28565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610b8a57600080fd5b505afa158015610b9e573d6000803e3d6000fd5b505050506040513d6020811015610bb457600080fd5b81019080805190602001909291905050509050919050565b610bd4612cbb565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933610bf8612ce5565b73ffffffffffffffffffffffffffffffffffffffff1663aa5dcecc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610c5957600080fd5b505afa158015610c6d573d6000803e3d6000fd5b505050506040513d6020811015610c8357600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015610d4357600080fd5b505afa158015610d57573d6000803e3d6000fd5b50505050610d636129ae565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a610d86612d0f565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610de057600080fd5b505af1158015610df4573d6000803e3d6000fd5b5050505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610ec3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610efb610ef6612d5d565b6110a0565b1515610f95576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900460ff161515611019576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61105d612d5d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60006110b6826001612d6590919063ffffffff16565b9050919050565b6110c5612cbb565b73ffffffffffffffffffffffffffffffffffffffff166349616d79336110e9612ce5565b73ffffffffffffffffffffffffffffffffffffffff1663aa5dcecc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561114a57600080fd5b505afa15801561115e573d6000803e3d6000fd5b505050506040513d602081101561117457600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561123457600080fd5b505afa158015611248573d6000803e3d6000fd5b505050506112546129ae565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611277612b21565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156112d157600080fd5b505af11580156112e5573d6000803e3d6000fd5b5050505050565b6112f4612cbb565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611318612ce5565b73ffffffffffffffffffffffffffffffffffffffff1663aa5dcecc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561137957600080fd5b505afa15801561138d573d6000803e3d6000fd5b505050506040513d60208110156113a357600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561146357600080fd5b505afa158015611477573d6000803e3d6000fd5b505050506114836129ae565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6114a784612c28565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561150157600080fd5b505af1158015611515573d6000803e3d6000fd5b505050505050565b60006115276129ae565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f561154b84612e88565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561159b57600080fd5b505afa1580156115af573d6000803e3d6000fd5b505050506040513d60208110156115c557600080fd5b81019080805190602001909291905050509050919050565b6000600260009054906101000a900460ff16905090565b6115fc612cbb565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611620612ce5565b73ffffffffffffffffffffffffffffffffffffffff1663aa5dcecc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561168157600080fd5b505afa158015611695573d6000803e3d6000fd5b505050506040513d60208110156116ab57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561176b57600080fd5b505afa15801561177f573d6000803e3d6000fd5b5050505061178b6129ae565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6117af84612e88565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561180957600080fd5b505af115801561181d573d6000803e3d6000fd5b505050505050565b611835611830612d5d565b612f1b565b565b61183f611c07565b15156118b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b61198261197d612d5d565b6110a0565b1515611a1c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b611a2581612f75565b50565b611a38611a33612d5d565b6110a0565b1515611ad2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900460ff16151515611b57576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b9b612d5d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611c49612d5d565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b611c6d611c07565b1515611ce1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000611d2f6129ae565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5611d52612d0f565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611da257600080fd5b505afa158015611db6573d6000803e3d6000fd5b505050506040513d6020811015611dcc57600080fd5b8101908080519060200190929190505050905090565b611dea611c07565b1515611e5e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a6f9dae1826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611f1b57600080fd5b505af1158015611f2f573d6000803e3d6000fd5b5050505050565b611f3e612cbb565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611f62612ce5565b73ffffffffffffffffffffffffffffffffffffffff1663aa5dcecc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611fc357600080fd5b505afa158015611fd7573d6000803e3d6000fd5b505050506040513d6020811015611fed57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156120ad57600080fd5b505afa1580156120c1573d6000803e3d6000fd5b505050506120cd6129ae565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6120f184612b6f565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561214b57600080fd5b505af115801561215f573d6000803e3d6000fd5b505050505050565b61216f612cbb565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933612193612ce5565b73ffffffffffffffffffffffffffffffffffffffff1663aa5dcecc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156121f457600080fd5b505afa158015612208573d6000803e3d6000fd5b505050506040513d602081101561221e57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156122de57600080fd5b505afa1580156122f2573d6000803e3d6000fd5b505050506122fe6129ae565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a61232284612fcf565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561237c57600080fd5b505af1158015612390573d6000803e3d6000fd5b505050505050565b60006123a26129ae565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56123c684612fcf565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561241657600080fd5b505afa15801561242a573d6000803e3d6000fd5b505050506040513d602081101561244057600080fd5b81019080805190602001909291905050509050919050565b612460612cbb565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933612484612ce5565b73ffffffffffffffffffffffffffffffffffffffff1663aa5dcecc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156124e557600080fd5b505afa1580156124f9573d6000803e3d6000fd5b505050506040513d602081101561250f57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156125cf57600080fd5b505afa1580156125e3573d6000803e3d6000fd5b505050506125ef6129ae565b73ffffffffffffffffffffffffffffffffffffffff1663abfdcced61261384613062565b836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018215151515815260200192505050600060405180830381600087803b15801561267157600080fd5b505af1158015612685573d6000803e3d6000fd5b505050505050565b60006126976129ae565b73ffffffffffffffffffffffffffffffffffffffff16637ae1cfca6126bb84613062565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561270b57600080fd5b505afa15801561271f573d6000803e3d6000fd5b505050506040513d602081101561273557600080fd5b81019080805190602001909291905050509050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61277f611c07565b15156127f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6127fc816130f5565b50565b612807611c07565b151561287b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612941576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f73746f726167652069732073657474656400000000000000000000000000000081525060200191505060405180910390fd5b600061294b61345d565b604051809103906000f080158015612967573d6000803e3d6000fd5b50905080600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612a76576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b60001515612a826115dd565b1515141515612af9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f596f752063616e6e6f742075736520746861740000000000000000000000000081525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060405160200180807f5f62617365426c6f636b4e756d62657200000000000000000000000000000000815250601001905060405160208183030381529060405280519060200120905090565b60008160405160200180807f5f6c617374417373657456616c7565456163684d61726b6574506572426c6f6381526020017f6b000000000000000000000000000000000000000000000000000000000000008152506021018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b60008160405160200180807f5f6c617374417373657456616c7565456163684d657472696373000000000000815250601a018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060405160200180807f5f77616974556e74696c416c6c6f63617461626c650000000000000000000000815250601501905060405160208183030381529060405280519060200120905090565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612e31576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008160405160200180807f5f6c617374426c6f636b4e756d626572000000000000000000000000000000008152506010018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b612f2f81600161327e90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b612f8981600161338090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b60008160405160200180807f5f70656e64696e674c617374426c6f636b4e756d6265720000000000000000008152506017018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b60008160405160200180807f5f70656e64696e67496e6372656d656e740000000000000000000000000000008152506011018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156131c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6132888282612d65565b1515613322576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c81526020017f650000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b61338a8282612d65565b1515156133ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6040516116228061346e8339019056fe6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b506115c2806100606000396000f3fe608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a7230582065ccf5d8e13a2f66aaa4be8a4fb54e2ac4ce4ef0e7cb387ed3cc748304defb3b0029a165627a7a72305820a668699a60e2754d5ad0bf437d20f3e7b13f15c680e0d74561f879f47748d5330029608060405234801561001057600080fd5b50610ab3806100206000396000f3fe60806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806349616d79146100725780636dd893b9146100e3578063a219296314610174578063b292b54914610205578063d16ff47014610256575b600080fd5b34801561007e57600080fd5b506100e16004803603604081101561009557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102c7565b005b3480156100ef57600080fd5b506101726004803603606081101561010657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103d9565b005b34801561018057600080fd5b506102036004803603606081101561019757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610526565b005b34801561021157600080fd5b506102546004803603602081101561022857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107bd565b005b34801561026257600080fd5b506102c56004803603604081101561027957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108d0565b005b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156103d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561039957808201518184015260208101905061037e565b50505050905090810190601f1680156103c65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561041257610521565b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c206164647265737300000000000000000081525090151561051f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104e45780820151818401526020810190506104c9565b50505050905090810190601f1680156105115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b8173ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156105bf57600080fd5b505afa1580156105d3573d6000803e3d6000fd5b505050506040513d60208110156105e957600080fd5b810190808051906020019092919050505015610604576107b8565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561069d57600080fd5b505afa1580156106b1573d6000803e3d6000fd5b505050506040513d60208110156106c757600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561077b578082015181840152602081019050610760565b50505050905090810190601f1680156107a85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156108cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610891578082015181840152602081019050610876565b50505050905090810190601f1680156108be5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561096957600080fd5b505afa15801561097d573d6000803e3d6000fd5b505050506040513d602081101561099357600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610a82576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a47578082015181840152602081019050610a2c565b50505050905090810190601f168015610a745780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505056fea165627a7a72305820d0ec832801d4ed23912275d71a7f9206b4763d97cf2ee81a7bebcff58bc1e6ca0029
#@coverage
Achieved 1.08% coverage for code: 608060405234801561001057600080fd5b50610ab3806100206000396000f3fe60806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806349616d79146100725780636dd893b9146100e3578063a219296314610174578063b292b54914610205578063d16ff47014610256575b600080fd5b34801561007e57600080fd5b506100e16004803603604081101561009557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102c7565b005b3480156100ef57600080fd5b506101726004803603606081101561010657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103d9565b005b34801561018057600080fd5b506102036004803603606081101561019757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610526565b005b34801561021157600080fd5b506102546004803603602081101561022857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107bd565b005b34801561026257600080fd5b506102c56004803603604081101561027957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108d0565b005b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156103d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561039957808201518184015260208101905061037e565b50505050905090810190601f1680156103c65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561041257610521565b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c206164647265737300000000000000000081525090151561051f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104e45780820151818401526020810190506104c9565b50505050905090810190601f1680156105115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b8173ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156105bf57600080fd5b505afa1580156105d3573d6000803e3d6000fd5b505050506040513d60208110156105e957600080fd5b810190808051906020019092919050505015610604576107b8565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561069d57600080fd5b505afa1580156106b1573d6000803e3d6000fd5b505050506040513d60208110156106c757600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561077b578082015181840152602081019050610760565b50505050905090810190601f1680156107a85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156108cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610891578082015181840152602081019050610876565b50505050905090810190601f1680156108be5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561096957600080fd5b505afa15801561097d573d6000803e3d6000fd5b505050506040513d602081101561099357600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610a82576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a47578082015181840152602081019050610a2c565b50505050905090810190601f168015610a745780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505056fea165627a7a72305820d0ec832801d4ed23912275d71a7f9206b4763d97cf2ee81a7bebcff58bc1e6ca002900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
#@coverage
Achieved 67.20% coverage for code: 608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063102b9de51461017a578063145a2061146101a55780633643dd4d1461020a578063378bfa471461026f578063393a4d34146102aa5780633f4ba83a1461030157806346fbf68e1461031857806348d8f848146103815780634fec2ab5146103bc57806358c8a999146104175780635c975abb1461047c57806368ee23cc146104ab5780636ef8d66d14610506578063715018a61461051d57806382dc1ec4146105345780638456cb59146105855780638da5cb5b1461059c5780638f32d59b146105f35780639137c1a7146106225780639ee634b914610673578063a6f9dae11461069e578063a8f518b2146106ef578063abee18831461074a578063b9430445146107a5578063cc6d7af81461080a578063d21e7f5214610867578063d6c31871146108d0578063f2fde38b14610927578063fb971d0114610978575b600080fd5b34801561018657600080fd5b5061018f61098f565b6040518082815260200191505060405180910390f35b3480156101b157600080fd5b506101f4600480360360208110156101c857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a4c565b6040518082815260200191505060405180910390f35b34801561021657600080fd5b506102596004803603602081101561022d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b0c565b6040518082815260200191505060405180910390f35b34801561027b57600080fd5b506102a86004803603602081101561029257600080fd5b8101908080359060200190929190505050610bcc565b005b3480156102b657600080fd5b506102bf610dfb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030d57600080fd5b50610316610eeb565b005b34801561032457600080fd5b506103676004803603602081101561033b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110a0565b604051808215151515815260200191505060405180910390f35b34801561038d57600080fd5b506103ba600480360360208110156103a457600080fd5b81019080803590602001909291905050506110bd565b005b3480156103c857600080fd5b50610415600480360360408110156103df57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112ec565b005b34801561042357600080fd5b506104666004803603602081101561043a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061151d565b6040518082815260200191505060405180910390f35b34801561048857600080fd5b506104916115dd565b604051808215151515815260200191505060405180910390f35b3480156104b757600080fd5b50610504600480360360408110156104ce57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115f4565b005b34801561051257600080fd5b5061051b611825565b005b34801561052957600080fd5b50610532611837565b005b34801561054057600080fd5b506105836004803603602081101561055757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611972565b005b34801561059157600080fd5b5061059a611a28565b005b3480156105a857600080fd5b506105b1611bde565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105ff57600080fd5b50610608611c07565b604051808215151515815260200191505060405180910390f35b34801561062e57600080fd5b506106716004803603602081101561064557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c65565b005b34801561067f57600080fd5b50610688611d25565b6040518082815260200191505060405180910390f35b3480156106aa57600080fd5b506106ed600480360360208110156106c157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611de2565b005b3480156106fb57600080fd5b506107486004803603604081101561071257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f36565b005b34801561075657600080fd5b506107a36004803603604081101561076d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612167565b005b3480156107b157600080fd5b506107f4600480360360208110156107c857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612398565b6040518082815260200191505060405180910390f35b34801561081657600080fd5b506108656004803603604081101561082d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050612458565b005b34801561087357600080fd5b506108b66004803603602081101561088a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061268d565b604051808215151515815260200191505060405180910390f35b3480156108dc57600080fd5b506108e561274d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561093357600080fd5b506109766004803603602081101561094a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612777565b005b34801561098457600080fd5b5061098d6127ff565b005b60006109996129ae565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56109bc612b21565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610a0c57600080fd5b505afa158015610a20573d6000803e3d6000fd5b505050506040513d6020811015610a3657600080fd5b8101908080519060200190929190505050905090565b6000610a566129ae565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610a7a84612b6f565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610aca57600080fd5b505afa158015610ade573d6000803e3d6000fd5b505050506040513d6020811015610af457600080fd5b81019080805190602001909291905050509050919050565b6000610b166129ae565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610b3a84612c28565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610b8a57600080fd5b505afa158015610b9e573d6000803e3d6000fd5b505050506040513d6020811015610bb457600080fd5b81019080805190602001909291905050509050919050565b610bd4612cbb565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933610bf8612ce5565b73ffffffffffffffffffffffffffffffffffffffff1663aa5dcecc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610c5957600080fd5b505afa158015610c6d573d6000803e3d6000fd5b505050506040513d6020811015610c8357600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015610d4357600080fd5b505afa158015610d57573d6000803e3d6000fd5b50505050610d636129ae565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a610d86612d0f565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610de057600080fd5b505af1158015610df4573d6000803e3d6000fd5b5050505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610ec3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610efb610ef6612d5d565b6110a0565b1515610f95576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900460ff161515611019576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61105d612d5d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60006110b6826001612d6590919063ffffffff16565b9050919050565b6110c5612cbb565b73ffffffffffffffffffffffffffffffffffffffff166349616d79336110e9612ce5565b73ffffffffffffffffffffffffffffffffffffffff1663aa5dcecc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561114a57600080fd5b505afa15801561115e573d6000803e3d6000fd5b505050506040513d602081101561117457600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561123457600080fd5b505afa158015611248573d6000803e3d6000fd5b505050506112546129ae565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611277612b21565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156112d157600080fd5b505af11580156112e5573d6000803e3d6000fd5b5050505050565b6112f4612cbb565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611318612ce5565b73ffffffffffffffffffffffffffffffffffffffff1663aa5dcecc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561137957600080fd5b505afa15801561138d573d6000803e3d6000fd5b505050506040513d60208110156113a357600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561146357600080fd5b505afa158015611477573d6000803e3d6000fd5b505050506114836129ae565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6114a784612c28565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561150157600080fd5b505af1158015611515573d6000803e3d6000fd5b505050505050565b60006115276129ae565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f561154b84612e88565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561159b57600080fd5b505afa1580156115af573d6000803e3d6000fd5b505050506040513d60208110156115c557600080fd5b81019080805190602001909291905050509050919050565b6000600260009054906101000a900460ff16905090565b6115fc612cbb565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611620612ce5565b73ffffffffffffffffffffffffffffffffffffffff1663aa5dcecc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561168157600080fd5b505afa158015611695573d6000803e3d6000fd5b505050506040513d60208110156116ab57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561176b57600080fd5b505afa15801561177f573d6000803e3d6000fd5b5050505061178b6129ae565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6117af84612e88565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561180957600080fd5b505af115801561181d573d6000803e3d6000fd5b505050505050565b611835611830612d5d565b612f1b565b565b61183f611c07565b15156118b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b61198261197d612d5d565b6110a0565b1515611a1c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b611a2581612f75565b50565b611a38611a33612d5d565b6110a0565b1515611ad2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900460ff16151515611b57576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b9b612d5d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611c49612d5d565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b611c6d611c07565b1515611ce1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000611d2f6129ae565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5611d52612d0f565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611da257600080fd5b505afa158015611db6573d6000803e3d6000fd5b505050506040513d6020811015611dcc57600080fd5b8101908080519060200190929190505050905090565b611dea611c07565b1515611e5e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a6f9dae1826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611f1b57600080fd5b505af1158015611f2f573d6000803e3d6000fd5b5050505050565b611f3e612cbb565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611f62612ce5565b73ffffffffffffffffffffffffffffffffffffffff1663aa5dcecc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611fc357600080fd5b505afa158015611fd7573d6000803e3d6000fd5b505050506040513d6020811015611fed57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156120ad57600080fd5b505afa1580156120c1573d6000803e3d6000fd5b505050506120cd6129ae565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6120f184612b6f565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561214b57600080fd5b505af115801561215f573d6000803e3d6000fd5b505050505050565b61216f612cbb565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933612193612ce5565b73ffffffffffffffffffffffffffffffffffffffff1663aa5dcecc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156121f457600080fd5b505afa158015612208573d6000803e3d6000fd5b505050506040513d602081101561221e57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156122de57600080fd5b505afa1580156122f2573d6000803e3d6000fd5b505050506122fe6129ae565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a61232284612fcf565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561237c57600080fd5b505af1158015612390573d6000803e3d6000fd5b505050505050565b60006123a26129ae565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56123c684612fcf565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561241657600080fd5b505afa15801561242a573d6000803e3d6000fd5b505050506040513d602081101561244057600080fd5b81019080805190602001909291905050509050919050565b612460612cbb565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933612484612ce5565b73ffffffffffffffffffffffffffffffffffffffff1663aa5dcecc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156124e557600080fd5b505afa1580156124f9573d6000803e3d6000fd5b505050506040513d602081101561250f57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156125cf57600080fd5b505afa1580156125e3573d6000803e3d6000fd5b505050506125ef6129ae565b73ffffffffffffffffffffffffffffffffffffffff1663abfdcced61261384613062565b836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018215151515815260200192505050600060405180830381600087803b15801561267157600080fd5b505af1158015612685573d6000803e3d6000fd5b505050505050565b60006126976129ae565b73ffffffffffffffffffffffffffffffffffffffff16637ae1cfca6126bb84613062565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561270b57600080fd5b505afa15801561271f573d6000803e3d6000fd5b505050506040513d602081101561273557600080fd5b81019080805190602001909291905050509050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61277f611c07565b15156127f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6127fc816130f5565b50565b612807611c07565b151561287b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612941576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f73746f726167652069732073657474656400000000000000000000000000000081525060200191505060405180910390fd5b600061294b61345d565b604051809103906000f080158015612967573d6000803e3d6000fd5b50905080600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612a76576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b60001515612a826115dd565b1515141515612af9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f596f752063616e6e6f742075736520746861740000000000000000000000000081525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060405160200180807f5f62617365426c6f636b4e756d62657200000000000000000000000000000000815250601001905060405160208183030381529060405280519060200120905090565b60008160405160200180807f5f6c617374417373657456616c7565456163684d61726b6574506572426c6f6381526020017f6b000000000000000000000000000000000000000000000000000000000000008152506021018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b60008160405160200180807f5f6c617374417373657456616c7565456163684d657472696373000000000000815250601a018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060405160200180807f5f77616974556e74696c416c6c6f63617461626c650000000000000000000000815250601501905060405160208183030381529060405280519060200120905090565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612e31576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008160405160200180807f5f6c617374426c6f636b4e756d626572000000000000000000000000000000008152506010018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b612f2f81600161327e90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b612f8981600161338090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b60008160405160200180807f5f70656e64696e674c617374426c6f636b4e756d6265720000000000000000008152506017018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b60008160405160200180807f5f70656e64696e67496e6372656d656e740000000000000000000000000000008152506011018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156131c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6132888282612d65565b1515613322576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c81526020017f650000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b61338a8282612d65565b1515156133ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6040516116228061346e8339019056fe6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b506115c2806100606000396000f3fe608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a7230582065ccf5d8e13a2f66aaa4be8a4fb54e2ac4ce4ef0e7cb387ed3cc748304defb3b0029a165627a7a72305820a668699a60e2754d5ad0bf437d20f3e7b13f15c680e0d74561f879f47748d5330029
#@coverage
Achieved 1.25% coverage for code: 6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b506115c2806100606000396000f3fe608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a7230582065ccf5d8e13a2f66aaa4be8a4fb54e2ac4ce4ef0e7cb387ed3cc748304defb3b00290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
#@coverage
Achieved 23.68% coverage for code: 608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a7230582065ccf5d8e13a2f66aaa4be8a4fb54e2ac4ce4ef0e7cb387ed3cc748304defb3b0029
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AllocatorStorage
Function name: setWaitUntilAllocatable(uint256)
PC address: 3398
Estimated Gas Usage: 9656 - 115374
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:685

addressValidator().validateAddress(msg.sender, config().allocator())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec400000000000000000000000072c68108a82e82617b93d1be0d7975d762035015, decoded_data: ('0x72c68108a82e82617b93d1be0d7975d762035015',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec41e1e1e1e1e1e1e1e1e1e1e1e1040400101100280021008010810011004024010, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setWaitUntilAllocatable(uint256), txdata: 0x378bfa470d0d0d0d0d0d0d0d0d0d0d0d0000000000000000000000000100000000000000, decoded_data: (5903126117980825649044795314093895218851796324379135018382961911897346015232,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AllocatorStorage
Function name: setWaitUntilAllocatable(uint256)
PC address: 3555
Estimated Gas Usage: 9656 - 115374
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:687

eternalStorage().setUint(getWaitUntilAllocatableKey(), _blockNumber)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0
Caller: [ATTACKER], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c48f02800800040180088000802040080040088040, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a71e1e1e1e1e1e1e1e1e1e1e1edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setWaitUntilAllocatable(uint256), txdata: 0x378bfa478080808080808080808080800000000000000000000000000000000000000000, decoded_data: (58123087930888129467517984631078352924079225347733021719462300103909495013376,), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AllocatorStorage
Function name: setWaitUntilAllocatable(uint256)
PC address: 3555
Estimated Gas Usage: 9656 - 115374
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:687

eternalStorage().setUint(getWaitUntilAllocatableKey(), _blockNumber)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec4aaaaaaaaaaaaaaaaaaaaaaaa0201010101010101040240010101010401040120, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a70101010101010101010101010104000800000000000000000000000000010001, value: 0x0
Caller: [CREATOR], function: setWaitUntilAllocatable(uint256), txdata: 0x378bfa47404040404040404040404040000000000000000e000080008000000000000000, decoded_data: (29061543965444064733758992315539176462039612674975705739402983957615804940288,), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AllocatorStorage
Function name: setBaseBlockNumber(uint256)
PC address: 4663
Estimated Gas Usage: 9744 - 115462
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:559

addressValidator().validateAddress(msg.sender, config().allocator())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec400000000000000000000000072c68180a82e82617a92d1be0d79754342011010, decoded_data: ('0x72c68180a82e82617a92d1be0d79754342011010',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40d0d0d0d0d0d0d0d0d0d0d0d2008021002010101010440408080010104200110, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setBaseBlockNumber(uint256), txdata: 0x48d8f848d1d1d1d1d1d1d1d1d1d1d1d10000040000000000000000000000000000000000, decoded_data: (94904104512153273896181709280432623482297253865136311112805134898545370857472,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AllocatorStorage
Function name: setBaseBlockNumber(uint256)
PC address: 4820
Estimated Gas Usage: 9744 - 115462
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:561

eternalStorage().setUint(getBaseBlockNumberKey(), _blockNumber)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec4808080808080808080808080efbeefbe08deefbeefde2fbe8fbe2f4001402304, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a71e1e1e1e1e1e1e1e1e1e1e1edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setBaseBlockNumber(uint256), txdata: 0x48d8f8481e1e1e1e1e1e1e1e1e1e1e1e0000000040000000000000000000000000000000, decoded_data: (13622598733801905343949527647908988966666139032605161581364820238711729946624,), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AllocatorStorage
Function name: setBaseBlockNumber(uint256)
PC address: 4820
Estimated Gas Usage: 9744 - 115462
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:561

eternalStorage().setUint(getBaseBlockNumberKey(), _blockNumber)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c40000000000010100000000000200000000000000, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a71e1e1e1e1e1e1e1e1e1e1e1e0480100880400280088080014040042040028002, value: 0x0
Caller: [SOMEGUY], function: setBaseBlockNumber(uint256), txdata: 0x48d8f8481e1e1e1e1e1e1e1e1e1e1e1e0000000000000000000000000000000000000000, decoded_data: (13622598733801905343949527647908988966581068440874926965498976586853787893760,), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AllocatorStorage
Function name: setLastAssetValueEachMetrics(address,uint256)
PC address: 5222
Estimated Gas Usage: 9858 - 115671
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:599

addressValidator().validateAddress(msg.sender, config().allocator())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c44000000000040200010480400001400140020108, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setLastAssetValueEachMetrics(address,uint256), txdata: 0x4fec2ab580808080808080808080808000000000000000000000000000000000000000018080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AllocatorStorage
Function name: setLastAssetValueEachMetrics(address,uint256)
PC address: 5380
Estimated Gas Usage: 9858 - 115671
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:601

eternalStorage().setUint(
			getLastAssetValueEachMetricsKey(_metrics),
			value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec400000000000000000000000072c68108a82e82617b93d1be0d7975d762035015, decoded_data: ('0x72c68108a82e82617b93d1be0d7975d762035015',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec4a8a8a8a8a8a8a8a8a8a8a8a82001010420018020408001400280040180040480, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a7d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setLastAssetValueEachMetrics(address,uint256), txdata: 0x4fec2ab5d1d1d1d1d1d1d1d1d1d1d1d10000000000000000000000000000000000000000d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AllocatorStorage
Function name: setLastAssetValueEachMetrics(address,uint256)
PC address: 5380
Estimated Gas Usage: 9858 - 115671
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:601

eternalStorage().setUint(
			getLastAssetValueEachMetricsKey(_metrics),
			value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec400000000000000000000000072c68108a82e82617b93d1be0d7975d762035015, decoded_data: ('0x72c68108a82e82617b93d1be0d7975d762035015',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec49393939393939393939393934020010000000000000000000000000001000000, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a7d1d1d1d1d1d1d1d1d1d1d1d10880000000000000000000000100000000000200, value: 0x0
Caller: [CREATOR], function: setLastAssetValueEachMetrics(address,uint256), txdata: 0x4fec2ab5d1d1d1d1d1d1d1d1d1d1d1d10000000000000000000000000000000000000000d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AllocatorStorage
Function name: setLastBlockNumber(address,uint256)
PC address: 5998
Estimated Gas Usage: 9924 - 115737
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:536

addressValidator().validateAddress(msg.sender, config().allocator())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c40000001000000120008004800108802002022080, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setLastBlockNumber(address,uint256), txdata: 0x68ee23cc80808080808080808080808000000000000000000000000000000000000000008080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AllocatorStorage
Function name: setLastBlockNumber(address,uint256)
PC address: 6156
Estimated Gas Usage: 9924 - 115737
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:538

eternalStorage().setUint(getLastBlockNumberKey(_metrics), _blocks)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec400000000000000000000000072c68108a82e82617b93d1be0d7975d762035015, decoded_data: ('0x72c68108a82e82617b93d1be0d7975d762035015',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec41e1e1e1e1e1e1e1e1e1e1e1e8020018080208080402004808080804080010280, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a7d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setLastBlockNumber(address,uint256), txdata: 0x68ee23ccd1d1d1d1d1d1d1d1d1d1d1d10000000000000000000000000000000000000000d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AllocatorStorage
Function name: setLastBlockNumber(address,uint256)
PC address: 6156
Estimated Gas Usage: 9924 - 115737
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:538

eternalStorage().setUint(getLastBlockNumberKey(_metrics), _blocks)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000000a01018040800404020020000020200002018080, decoded_data: ('0x0a01018040800404020020000020200002018080',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec48080808080808080808080800200000000000000000100000000000400000200, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a78080808080808080808080808001000000000000000000010200000000000000, value: 0x0
Caller: [SOMEGUY], function: setLastBlockNumber(address,uint256), txdata: 0x68ee23cc1e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AllocatorStorage
Function name: changeOwner(address)
PC address: 7966
Estimated Gas Usage: 4029 - 39160
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:327

EternalStorage(_storage).changeOwner(newOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000000404001001040001000008000100108020022001, decoded_data: ('0x0404001001040001000008000100108020022001',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec41e1e1e1e1e1e1e1e1e1e1e1e0102010101010201010101010810010101400204, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a71e1e1e1e1e1e1e1e1e1e1e1edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: changeOwner(address), txdata: 0xa6f9dae18080808080808080808080800000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AllocatorStorage
Function name: setLastAssetValueEachMarketPerBlock(address,uint256)
PC address: 8368
Estimated Gas Usage: 10159 - 116067
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:628

addressValidator().validateAddress(msg.sender, config().allocator())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c41000801080088040011008000440804000000810, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setLastAssetValueEachMarketPerBlock(address,uint256), txdata: 0xa8f518b21e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AllocatorStorage
Function name: setLastAssetValueEachMarketPerBlock(address,uint256)
PC address: 8526
Estimated Gas Usage: 10159 - 116067
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:630

eternalStorage().setUint(
			getLastAssetValueEachMarketPerBlockKey(_market),
			value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec400000000000000000000000010000404802000fe000120042080010001200408, decoded_data: ('0x10000404802000fe000120042080010001200408',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c48004010102042004804010080220080220104040, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a71e1e1e1e1e1e1e1e1e1e1e1edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setLastAssetValueEachMarketPerBlock(address,uint256), txdata: 0xa8f518b280808080808080808080808000000000000000000000000000000000000000008080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AllocatorStorage
Function name: setLastAssetValueEachMarketPerBlock(address,uint256)
PC address: 8526
Estimated Gas Usage: 10159 - 116067
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:630

eternalStorage().setUint(
			getLastAssetValueEachMarketPerBlockKey(_market),
			value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec41e1e1e1e1e1e1e1e1e1e1e1e0000000000000001000000000000000000000001, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a71e1e1e1e1e1e1e1e1e1e1e1e0008000000000000000000000000000000010000, value: 0x0
Caller: [SOMEGUY], function: setLastAssetValueEachMarketPerBlock(address,uint256), txdata: 0xa8f518b280808080808080808080808000000000000000000000000000000000000000008080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AllocatorStorage
Function name: setPendingLastBlockNumber(address,uint256)
PC address: 8929
Estimated Gas Usage: 10166 - 115979
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:662

addressValidator().validateAddress(msg.sender, config().allocator())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000004001201010012000010440040200024008040240, decoded_data: ('0x4001201010012000010440040200024008040240',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c40110080400000002010000040400000200204004, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setPendingLastBlockNumber(address,uint256), txdata: 0xabee18831e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AllocatorStorage
Function name: setPendingLastBlockNumber(address,uint256)
PC address: 9087
Estimated Gas Usage: 10166 - 115979
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:664

eternalStorage().setUint(getPendingLastBlockNumberKey(_metrics), value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec400000000000000000000000072c68108a82e82617b93d1be0d7975d762035015, decoded_data: ('0x72c68108a82e82617b93d1be0d7975d762035015',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec40d0d0d0d0d0d0d0d0d0d0d0d010000de02084010010080000000402000200000, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a7d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setPendingLastBlockNumber(address,uint256), txdata: 0xabee1883d1d1d1d1d1d1d1d1d1d1d1d10000004000000000000000000000000000000000d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AllocatorStorage
Function name: setPendingLastBlockNumber(address,uint256)
PC address: 9087
Estimated Gas Usage: 10166 - 115979
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:664

eternalStorage().setUint(getPendingLastBlockNumberKey(_metrics), value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000000004800000080801001004012001088004021010, decoded_data: ('0x0004800000080801001004012001088004021010',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec41e1e1e1e1e1e1e1e1e1e1e1e8000000000002000000000040000040100020000, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a71e1e1e1e1e1e1e1e1e1e1e1e0000000008000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: setPendingLastBlockNumber(address,uint256), txdata: 0xabee188380808080808080808080808000000000000000000000000000000000000000008080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AllocatorStorage
Function name: setPendingIncrement(address,bool)
PC address: 9682
Estimated Gas Usage: 10228 - 116041
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:574

addressValidator().validateAddress(msg.sender, config().allocator())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000008080021008800804408001020220100202200402, decoded_data: ('0x8080021008800804408001020220100202200402',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c44080800180801080808004028080804001208002, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [ATTACKER], function: setPendingIncrement(address,bool), txdata: 0xcc6d7af81e1e1e1e1e1e1e1e1e1e1e1e80000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AllocatorStorage
Function name: setPendingIncrement(address,bool)
PC address: 9844
Estimated Gas Usage: 10228 - 116041
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:576

eternalStorage().setBool(getPendingIncrementKey(_metrics), value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c44080008000000100000008020101008001010804, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a71e1e1e1e1e1e1e1e1e1e1e1edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setPendingIncrement(address,bool), txdata: 0xcc6d7af880808080808080808080808000000000000000000000001000000000000000008080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AllocatorStorage
Function name: setPendingIncrement(address,bool)
PC address: 9844
Estimated Gas Usage: 10228 - 116041
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:576

eternalStorage().setBool(getPendingIncrementKey(_metrics), value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000008002800880808080808001800180808080808004, decoded_data: ('0x8002800880808080808001800180808080808004',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec48080808080808080808080800000000100020000000001000000010000000000, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a78080808080808080808080800200800080000000000000000000000000010000, value: 0x0
Caller: [CREATOR], function: setPendingIncrement(address,bool), txdata: 0xcc6d7af81e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, value: 0x0


time_used: 36121.650332689285 seconds
#@contract_info_time
0xb03bee1a0e31266e59e1bc71d5faa84dfe9cfc2e.sol:0.5.0:AllocatorStorage:36121.650332689285:36100:60:36000
