++++ 0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol  :  0.5.16  :  ShareholderVomer ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 9338
['constructor']:writes at the last depth:[]
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 64.23% coverage.
dynamic svars:['60', '59', '58', '68', '64', '70', '65', '56', '57', '69']
static svars:['53', '0', '51', '52', '71', '72', '67', '61', '63', '66', '55']
Ending preprocessing.
preprocessing time(s): 101.91699361801147
contract coverage: 38.22%
transferTokens(address,address,uint256) is not reachable
setupRef(address,address) is not reachable
updatePaymentMode(address,uint256,uint256) is not reachable
fallback is not reachable
withdraw(uint256) is not reachable
takeEth(address,uint256) is not reachable
acceptOwner() is not reachable
setPartnerContract(address,int256) is not reachable
setUserLimitVMR(address[],uint256[]) is not reachable
lockFunds(uint256) is not reachable
setAdmin(address,bool) is not reachable
setPayoutTokenForUser(address,address) is not reachable
setUserMaxLimitVMR(address,uint64) is not reachable
setDepositTokens(address[],uint256[]) is not reachable
addDepositTokens(address[],uint256[]) is not reachable
changeIndividualVMRCup(address,uint256) is not reachable
setSupportAddress(address) is not reachable
changeOwnerCandidate(address) is not reachable
updateTokenRate(address,uint256) is not reachable
giveBackEth() is not reachable
changeMinBalance(uint256) is not reachable
Function Reads: State variables read in conditions
	changeIndividualVMRCup(address,uint256):[]
	dateUntilFundsLocked():[]
	setupRef(address,address):[]
	getInfo(address):[]
	newOwnerCandidate():[]
	updatePaymentMode(address,uint256,uint256):[]
	getUserProfitByToken(address,address):[]
	acceptOwner():[]
	owner():[]
	transferTokens(address,address,uint256):[]
	setSupportAddress(address):[]
	giveBackEth():[]
	initialize():[]
	addDepositTokens(address[],uint256[]):[]
	fundsLockedtoWithdraw():[]
	lockFunds(uint256):[]
	changeOwnerCandidate(address):[]
	setDepositTokens(address[],uint256[]):[]
	setPayoutTokenForUser(address,address):[]
	takeEth(address,uint256):[]
	setAdmin(address,bool):[]
	changeMinBalance(uint256):[]
	getTokenRate(address):[]
	getPartnerInfo(address):[]
	setUserLimitVMR(address[],uint256[]):[]
	withdraw(uint256):[]
	admins(address):[]
	setPartnerContract(address,int256):[]
	getPaymentInfo():[]
	supportAddress():[]
	updateTokenRate(address,uint256):[]
	setUserMaxLimitVMR(address,uint64):[]
Function Writes: State variables written
	giveBackEth():['60']
	changeMinBalance(uint256):['53']
	initialize():['0']
	acceptOwner():['51']
	changeOwnerCandidate(address):['52']
	lockFunds(uint256):['71', '72']
	setSupportAddress(address):['67']
	changeIndividualVMRCup(address,uint256):['59']
	setAdmin(address,bool):['58']
	updateTokenRate(address,uint256):['68']
	setPartnerContract(address,int256):['60']
	setPayoutTokenForUser(address,address):['64']
	setUserMaxLimitVMR(address,uint64):['70']
	takeEth(address,uint256):['60']
	updatePaymentMode(address,uint256,uint256):['61', '63', '66']
	setupRef(address,address):['65', '64']
	fallback:['56']
============================
iteration:3
targets:['transferTokens(address,address,uint256)', 'setupRef(address,address)', 'updatePaymentMode(address,uint256,uint256)', 'fallback', 'withdraw(uint256)', 'takeEth(address,uint256)', 'acceptOwner()', 'setPartnerContract(address,int256)', 'setUserLimitVMR(address[],uint256[])', 'lockFunds(uint256)', 'setAdmin(address,bool)', 'setPayoutTokenForUser(address,address)', 'setUserMaxLimitVMR(address,uint64)', 'setDepositTokens(address[],uint256[])', 'addDepositTokens(address[],uint256[])', 'changeIndividualVMRCup(address,uint256)', 'setSupportAddress(address)', 'changeOwnerCandidate(address)', 'updateTokenRate(address,uint256)', 'giveBackEth()', 'changeMinBalance(uint256)']
['giveBackEth()']:writes at the last depth:[]
['initialize()']:writes at the last depth:['0']
contract coverage: 38.25%
============================
iteration:4
['initialize()', 'giveBackEth()']:writes at the last depth:[]
contract coverage: 38.25%
============================
iteration:5
['initialize()', 'giveBackEth()', 'giveBackEth()']:writes at the last depth:[]
contract coverage: 38.25%
============================
iteration:6
['initialize()', 'giveBackEth()', 'giveBackEth()', 'giveBackEth()']:writes at the last depth:[]
contract coverage: 38.25%
============================
iteration:7
['giveBackEth()', 'giveBackEth()']:writes at the last depth:[]
['giveBackEth()', 'initialize()']:writes at the last depth:['0']
contract coverage: 38.25%
============================
iteration:8
['giveBackEth()', 'initialize()', 'giveBackEth()']:writes at the last depth:[]
contract coverage: 38.25%
============================
iteration:9
['giveBackEth()', 'initialize()', 'giveBackEth()', 'giveBackEth()']:writes at the last depth:[]
contract coverage: 38.25%
============================
iteration:10
['giveBackEth()', 'giveBackEth()', 'giveBackEth()']:writes at the last depth:[]
['giveBackEth()', 'giveBackEth()', 'initialize()']:writes at the last depth:['0']
contract coverage: 38.25%
============================
iteration:11
['giveBackEth()', 'giveBackEth()', 'initialize()', 'giveBackEth()']:writes at the last depth:[]
contract coverage: 38.25%
============================
iteration:12
['giveBackEth()', 'giveBackEth()', 'giveBackEth()', 'giveBackEth()']:writes at the last depth:[]
['giveBackEth()', 'giveBackEth()', 'giveBackEth()', 'initialize()']:writes at the last depth:['0']
contract coverage: 38.25%
#@statespace
3785 nodes, 3784 edges, 49299 total states
#@coverage
Achieved 0.21% coverage for code: 608060405234801561001057600080fd5b50614ca6806100206000396000f3fe6080604052600436106101e35760003560e01c80638129fc1c11610102578063d091b55011610095578063eef793d911610064578063eef793d9146113c8578063f8800fae14611423578063fe4be1be1461144e578063ffdd5cf1146114bf576101e3565b8063d091b55014611269578063d6c633e8146112c0578063e9889b8114611325578063ebbc4965146113b1576101e3565b80638da5cb5b116100d15780638da5cb5b1461113c578063a64b6e5f14611193578063a91c64e21461120e578063ab7c63f11461125f576101e3565b80638129fc1c14610fe45780638484326514610ffb57806389c3ef6c146110d65780638c8f95fb14611101576101e3565b80634b0bddd21161017a578063561a01b811610149578063561a01b814610dec5780635b14319c14610e3d5780635c31a7b714610f185780636d89ffb014610f89576101e3565b80634b0bddd214610c835780634ea18fab14610ce057806354dea00a14610d1b57806354f79cf314610d80576101e3565b806325cad82c116101b657806325cad82c14610aa95780632e1a7d4d14610b84578063429b62e514610bbf578063446d5b4e14610c28576101e3565b806304da3f191461092d5780630f6d37d614610992578063226ac321146109e9578063228b088d14610a44575b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461021b57600080fd5b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102765761092b565b600034146102ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f455448206465706f73697473206e6f7420616c6c6f776564000000000000000081525060200191505060405180910390fd5b6102f6333361154c565b6000603960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000603b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561038c5760355490505b808260030154101561039d57600080fd5b60008260010154116103ae57600080fd5b6103b66118c5565b60008260000154141580156103d2575081600001548260020154105b1561050557600061043162278d0061042385600101544203610415606461040760148a60000154611cef90919063ffffffff16565b611d2990919063ffffffff16565b611cef90919063ffffffff16565b611d2990919063ffffffff16565b9050826000015461044f846002015483611d4f90919063ffffffff16565b111561048d578260020154836000015411156104875761048083600201548460000154611d6e90919063ffffffff16565b905061048c565b600090505b5b6000811115610503576104ad818460020154611d4f90919063ffffffff16565b836002018190555060003390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610500573d6000803e3d6000fd5b50505b505b6000604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506105523382611d8e565b600061056d603f548360020154611d4f90919063ffffffff16565b905060008460030154905081811115610584578190505b6000670de0b6b3a7640000604660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16029050600081111561060d5780821115610608578091505b61062c565b6000604254118015610620575060425482115b1561062b5760425491505b5b600061068262278d0061067489600101544203610666606461065860148a611cef90919063ffffffff16565b611d2990919063ffffffff16565b611cef90919063ffffffff16565b611d2990919063ffffffff16565b905060008073ffffffffffffffffffffffffffffffffffffffff168660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610707578560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661072b565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90506000604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116107e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f546f6b656e2072617465206e6f7420736574000000000000000000000000000081525060200191505060405180910390fd5b6000670de0b6b3a7640000604460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484028161083657fe5b04905061086433828473ffffffffffffffffffffffffffffffffffffffff1661208e9092919063ffffffff16565b808760000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fad71f93891cecc86a28a627d5495c28fabbd31cdd2e93851b16ce3421fdab2e5836040518082815260200191505060405180910390a34289600101819055505050505050505050505b005b34801561093957600080fd5b506109426120a1565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b34801561099e57600080fd5b506109a76120da565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109f557600080fd5b50610a4260048036036040811015610a0c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612100565b005b348015610a5057600080fd5b50610aa760048036036040811015610a6757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803567ffffffffffffffff16906020019092919050505061219b565b005b348015610ab557600080fd5b50610b8260048036036040811015610acc57600080fd5b8101908080359060200190640100000000811115610ae957600080fd5b820183602082011115610afb57600080fd5b80359060200191846020830284011164010000000083111715610b1d57600080fd5b909192939192939080359060200190640100000000811115610b3e57600080fd5b820183602082011115610b5057600080fd5b80359060200191846020830284011164010000000083111715610b7257600080fd5b909192939192939050505061225b565b005b348015610b9057600080fd5b50610bbd60048036036020811015610ba757600080fd5b8101908080359060200190929190505050612375565b005b348015610bcb57600080fd5b50610c0e60048036036020811015610be257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612463565b604051808215151515815260200191505060405180910390f35b348015610c3457600080fd5b50610c8160048036036040811015610c4b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612483565b005b348015610c8f57600080fd5b50610cde60048036036040811015610ca657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050612539565b005b348015610cec57600080fd5b50610d1960048036036020811015610d0357600080fd5b81019080803590602001909291905050506125eb565b005b348015610d2757600080fd5b50610d6a60048036036020811015610d3e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612656565b6040518082815260200191505060405180910390f35b348015610d8c57600080fd5b50610dcf60048036036020811015610da357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061269f565b604051808381526020018281526020019250505060405180910390f35b348015610df857600080fd5b50610e3b60048036036020811015610e0f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612731565b005b348015610e4957600080fd5b50610f1660048036036040811015610e6057600080fd5b8101908080359060200190640100000000811115610e7d57600080fd5b820183602082011115610e8f57600080fd5b80359060200191846020830284011164010000000083111715610eb157600080fd5b909192939192939080359060200190640100000000811115610ed257600080fd5b820183602082011115610ee457600080fd5b80359060200191846020830284011164010000000083111715610f0657600080fd5b90919293919293905050506127cc565b005b348015610f2457600080fd5b50610f8760048036036040811015610f3b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128b3565b005b348015610f9557600080fd5b50610fe260048036036040811015610fac57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061298b565b005b348015610ff057600080fd5b50610ff9612abb565b005b34801561100757600080fd5b506110d46004803603604081101561101e57600080fd5b810190808035906020019064010000000081111561103b57600080fd5b82018360208201111561104d57600080fd5b8035906020019184602083028401116401000000008311171561106f57600080fd5b90919293919293908035906020019064010000000081111561109057600080fd5b8201836020820111156110a257600080fd5b803590602001918460208302840111640100000000831117156110c457600080fd5b9091929391929390505050612b6e565b005b3480156110e257600080fd5b506110eb612c55565b6040518082815260200191505060405180910390f35b34801561110d57600080fd5b5061113a6004803603602081101561112457600080fd5b8101908080359060200190929190505050612c5b565b005b34801561114857600080fd5b50611151612ce1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561119f57600080fd5b5061120c600480360360608110156111b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612d07565b005b34801561121a57600080fd5b5061125d6004803603602081101561123157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d8e565b005b611267612e29565b005b34801561127557600080fd5b5061127e612edd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156112cc57600080fd5b50611323600480360360608110156112e357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050612f03565b005b34801561133157600080fd5b506113946004803603604081101561134857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613043565b604051808381526020018281526020019250505060405180910390f35b3480156113bd57600080fd5b506113c6613151565b005b3480156113d457600080fd5b50611421600480360360408110156113eb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613210565b005b34801561142f57600080fd5b506114386132b9565b6040518082815260200191505060405180910390f35b34801561145a57600080fd5b506114bd6004803603604081101561147157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132bf565b005b3480156114cb57600080fd5b5061150e600480360360208110156114e257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613671565b6040518082601360200280838360005b8381101561153957808201518184015260208101905061151e565b5050505090500191505060405180910390f35b603860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166118c1576000806000603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffdd5cf1866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060806040518083038186803b15801561164157600080fd5b505afa158015611655573d6000803e3d6000fd5b505050506040513d608081101561166b57600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291905050505080935081945082955050505060008311156117d9576000611700846116f260146116e460646116d662278d008a611cef90919063ffffffff16565b611cef90919063ffffffff16565b611d2990919063ffffffff16565b611d2990919063ffffffff16565b420390506000603960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050604051806080016040528086815260200183815260200184815260200182815250603960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505050505b6001603860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146118bd576001603860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050505b5050565b600073ffffffffffffffffffffffffffffffffffffffff16604160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611ced5760146000369050146119d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f526566657272616c20616464726573732072657175697265640000000000000081525060200191505060405180910390fd5b6000611a236000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050613fd0565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ac7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f596f752063616e27742072656620796f757273656c660000000000000000000081525060200191505060405180910390fd5b80604160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301541415611c21576001603960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015401604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550611ceb565b611cea33611ce56046611cd76064611cc9604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301546001603960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015401611d6e90919063ffffffff16565b611cef90919063ffffffff16565b611d2990919063ffffffff16565b613fde565b5b505b565b600080831415611d025760009050611d23565b6000828402905082848281611d1357fe5b0414611d1e57600080fd5b809150505b92915050565b6000808211611d3757600080fd5b6000828481611d4257fe5b0490508091505092915050565b600080828401905083811015611d6457600080fd5b8091505092915050565b600082821115611d7d57600080fd5b600082840390508091505092915050565b6000604560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541415611de4575061208a565b60008073ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611e67578260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e8b565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90506000604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611f42576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f546f6b656e2072617465206e6f7420736574000000000000000000000000000081525060200191505060405180910390fd5b6000670de0b6b3a7640000604460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484600001540281611f9a57fe5b04905060008360000181905550611fd285828473ffffffffffffffffffffffffffffffffffffffff1661208e9092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8fa98f58ceeb885475a65b9f48d5c3aaf24879d99bda48d4627c91312d1184d6836040518082815260200191505060405180910390a3808360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050505b5050565b61209b8383836000614428565b50505050565b6000806000603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250603f5491506042549050909192565b604360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661215357fe5b80604460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166121ee57fe5b80604660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166122ae57fe5b60008484905090508282905081146122c557600080fd5b60008090505b818161ffff16101561236d5783838261ffff168181106122e757fe5b905060200201356040600088888561ffff1681811061230257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555080806001019150506122cb565b505050505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146123cc57fe5b4260485411156123f7576047546123ec8247611d6e90919063ffffffff16565b116123f657600080fd5b5b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561245f573d6000803e3d6000fd5b5050565b603a6020528060005260406000206000915054906101000a900460ff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146124da57fe5b60008112156124e857600080fd5b6000603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160000181905550505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461259057fe5b80603a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461264257fe5b670de0b6b3a7640000810260358190555050565b6000604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549150603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050915091565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461278857fe5b80603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661281f57fe5b6128ad848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506000614584565b50505050565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661290657fe5b80604060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156129c4573391505b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001015482600001540113612a1e57600080fd5b8181600101548260000154011015612a3557600080fd5b818160010160008282540392505081905550612a5183836147e9565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f14ab110831c9d210715b0adedbc67b2f0b80c10ad2853488332d1e4fbd85f81d846040518082815260200191505060405180910390a3505050565b600060019054906101000a900460ff1680612ada5750612ad9614867565b5b80612af157506000809054906101000a900460ff16155b612afa57600080fd5b60008060019054906101000a900460ff161590508015612b4a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015612b6b5760008060016101000a81548160ff0219169083151502179055505b50565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612bc157fe5b612c4f848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506001614584565b50505050565b60475481565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612cb257fe5b426048541115612ccb576047548111612cca57600080fd5b5b8060478190555062278d00420160488190555050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612d5e57fe5b612d8982828573ffffffffffffffffffffffffffffffffffffffff1661208e9092919063ffffffff16565b505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612de557fe5b80604360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541315612e8c573481600101600082825401925050819055505b3373ffffffffffffffffffffffffffffffffffffffff167fac51d2759ef9a0c22072ba515685b302d83fa6ff1d5ec2948396ac46e82d864c346040518082815260200191505060405180910390a250565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612f5a57fe5b6000604460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411612fa657600080fd5b6000612fd1308573ffffffffffffffffffffffffffffffffffffffff1661487e90919063ffffffff16565b11612fdb57600080fd5b82603d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a76400008202603f81905550670de0b6b3a76400008102604281905550505050565b600080604060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150604560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509250929050565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146131ab57600080fd5b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461326757fe5b670de0b6b3a76400008102603b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60485481565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661331257fe5b600073ffffffffffffffffffffffffffffffffffffffff16604160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561366d578173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613448576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f596f752063616e27742072656620796f757273656c660000000000000000000081525060200191505060405180910390fd5b80604160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000604060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015414156135a2576001603960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015401604060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555061366c565b61366b826136666046613658606461364a604060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301546001603960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015401611d6e90919063ffffffff16565b611cef90919063ffffffff16565b611d2990919063ffffffff16565b613fde565b5b5b5050565b613679614bef565b478160036013811061368757fe5b602002018181525050603b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054816005601381106136dd57fe5b6020020181815250506000816005601381106136f557fe5b6020020151141561371a576035548160056013811061371057fe5b6020020181815250505b613722614c12565b603960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050603860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16613965576000603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffdd5cf1856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060806040518083038186803b15801561388857600080fd5b505afa15801561389c573d6000803e3d6000fd5b505050506040513d60808110156138b257600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291905050505084600001856040018281525082945083815250505050600082600001511115613963576139578260000151613949601461393b606461392d62278d0088611cef90919063ffffffff16565b611cef90919063ffffffff16565b611d2990919063ffffffff16565b611d2990919063ffffffff16565b42038260200181815250505b505b80600001518260006013811061397757fe5b6020020181815250506000816000015111156139fc576139e562278d006139d7836020015142036139c960646139bb60148860000151611cef90919063ffffffff16565b611d2990919063ffffffff16565b611cef90919063ffffffff16565b611d2990919063ffffffff16565b826001601381106139f257fe5b6020020181815250505b806040015182600260138110613a0e57fe5b602002018181525050806060015182600460138110613a2957fe5b602002018181525050613a3a614c3a565b604060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815250509050806020015183600b60138110613b0257fe5b602002018181525050806040015183600c60138110613b1d57fe5b602002018181525050613b4c603f5484600b60138110613b3957fe5b6020020151611d4f90919063ffffffff16565b83600d60138110613b5957fe5b602002018181525050816060015183600e60138110613b7457fe5b60200201818152505082600d60138110613b8a57fe5b602002015183600e60138110613b9c57fe5b60200201511115613bd05782600d60138110613bb457fe5b602002015183600e60138110613bc657fe5b6020020181815250505b6000604254118015613bf4575060425483600e60138110613bed57fe5b6020020151115b15613c135760425483600e60138110613c0957fe5b6020020181815250505b600082602001511115613c9c57613c8562278d00613c7784602001514203613c696064613c5b60148a600e60138110613c4857fe5b6020020151611cef90919063ffffffff16565b611d2990919063ffffffff16565b611cef90919063ffffffff16565b611d2990919063ffffffff16565b83600660138110613c9257fe5b6020020181815250505b60008073ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1614613cdf578160000151613d03565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90508073ffffffffffffffffffffffffffffffffffffffff1684600a60138110613d2957fe5b602002018181525050670de0b6b3a7640000604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485600660138110613d8857fe5b60200201510281613d9557fe5b0484600760138110613da357fe5b6020020181815250506000604560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806000015485600f60138110613e0157fe5b6020020181815250508060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485601060138110613e5957fe5b602002018181525050670de0b6b3a7640000604460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600001540281613eb857fe5b0485601160138110613ec657fe5b602002018181525050604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485600960138110613f1c57fe5b602002018181525050613f2f8683613043565b5085600860138110613f3d57fe5b602002018181525050670de0b6b3a7640000604660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff160285601260138110613fbe57fe5b60200201818152505050505050919050565b600060148201519050919050565b6000604160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561407d5750614424565b6140f86140a76064614099601986611cef90919063ffffffff16565b611d2990919063ffffffff16565b604560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154611d4f90919063ffffffff16565b604560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060008073ffffffffffffffffffffffffffffffffffffffff16604360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146141bd57604360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166141e1565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b905061425e61420d60646141ff600587611cef90919063ffffffff16565b611d2990919063ffffffff16565b604560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154611d4f90919063ffffffff16565b604560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060008090505b60038160ff161015614420576143316142e060646142d2604688611cef90919063ffffffff16565b611d2990919063ffffffff16565b604060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154611d4f90919063ffffffff16565b604060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550604160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561441357614420565b80806001019150506142aa565b5050505b5050565b60008083141561443b576001905061457c565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806144b5575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b1561454c5781156144fc578373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050905061457c565b8373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015614542573d6000803e3d6000fd5b506001905061457c565b61457784848773ffffffffffffffffffffffffffffffffffffffff166149de9092919063ffffffff16565b600190505b949350505050565b6000835190508251811461459757600080fd5b60008090505b818161ffff1610156147e257600060396000878461ffff16815181106145bf57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600060406000888561ffff168151811061461957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160030154141561467b57600182600301540181600301819055505b600082600101541415614692574282600101819055505b60008260030154905060008660ff1614156146cc57868461ffff16815181106146b757fe5b60200260200101518360030181905550614761565b614704888561ffff16815181106146df57fe5b6020026020010151888661ffff16815181106146f757fe5b6020026020010151613fde565b614758614745606461473760468b8961ffff168151811061472157fe5b6020026020010151611cef90919063ffffffff16565b611d2990919063ffffffff16565b8460030154611d4f90919063ffffffff16565b83600301819055505b878461ffff168151811061477157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f27a52c428039d1effe188654b6d484ec539aefbdd8d66178f5df05b8fde8b22a828560030154604051808381526020018281526020019250505060405180910390a2505050808060010191505061459d565b5050505050565b600082905060008173ffffffffffffffffffffffffffffffffffffffff168360405180600001905060006040518083038185875af1925050503d806000811461484e576040519150601f19603f3d011682016040523d82523d6000602084013e614853565b606091505b505090508061486157600080fd5b50505050565b6000803090506000813b9050600081149250505090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806148f9575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b1561491d578173ffffffffffffffffffffffffffffffffffffffff163190506149d8565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561499a57600080fd5b505afa1580156149ae573d6000803e3d6000fd5b505050506040513d60208110156149c457600080fd5b810190808051906020019092919050505090505b92915050565b614aaa838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614aaf565b505050565b614ace8273ffffffffffffffffffffffffffffffffffffffff16614bdc565b614ad757600080fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b60208310614b265780518252602082019150602081019050602083039250614b03565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614b88576040519150601f19603f3d011682016040523d82523d6000602084013e614b8d565b606091505b509150915081614b9c57600080fd5b600081511115614bd657808060200190516020811015614bbb57600080fd5b8101908080519060200190929190505050614bd557600080fd5b5b50505050565b600080823b905060008111915050919050565b604051806102600160405280601390602082028038833980820191505090505090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152509056fea265627a7a72315820cefad25e577dab15b388a82c53f2521e4e32ec7b7c1cce15cb0d2bcd49a493c864736f6c63430005100032
#@coverage
Achieved 38.25% coverage for code: 6080604052600436106101e35760003560e01c80638129fc1c11610102578063d091b55011610095578063eef793d911610064578063eef793d9146113c8578063f8800fae14611423578063fe4be1be1461144e578063ffdd5cf1146114bf576101e3565b8063d091b55014611269578063d6c633e8146112c0578063e9889b8114611325578063ebbc4965146113b1576101e3565b80638da5cb5b116100d15780638da5cb5b1461113c578063a64b6e5f14611193578063a91c64e21461120e578063ab7c63f11461125f576101e3565b80638129fc1c14610fe45780638484326514610ffb57806389c3ef6c146110d65780638c8f95fb14611101576101e3565b80634b0bddd21161017a578063561a01b811610149578063561a01b814610dec5780635b14319c14610e3d5780635c31a7b714610f185780636d89ffb014610f89576101e3565b80634b0bddd214610c835780634ea18fab14610ce057806354dea00a14610d1b57806354f79cf314610d80576101e3565b806325cad82c116101b657806325cad82c14610aa95780632e1a7d4d14610b84578063429b62e514610bbf578063446d5b4e14610c28576101e3565b806304da3f191461092d5780630f6d37d614610992578063226ac321146109e9578063228b088d14610a44575b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461021b57600080fd5b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102765761092b565b600034146102ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f455448206465706f73697473206e6f7420616c6c6f776564000000000000000081525060200191505060405180910390fd5b6102f6333361154c565b6000603960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000603b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561038c5760355490505b808260030154101561039d57600080fd5b60008260010154116103ae57600080fd5b6103b66118c5565b60008260000154141580156103d2575081600001548260020154105b1561050557600061043162278d0061042385600101544203610415606461040760148a60000154611cef90919063ffffffff16565b611d2990919063ffffffff16565b611cef90919063ffffffff16565b611d2990919063ffffffff16565b9050826000015461044f846002015483611d4f90919063ffffffff16565b111561048d578260020154836000015411156104875761048083600201548460000154611d6e90919063ffffffff16565b905061048c565b600090505b5b6000811115610503576104ad818460020154611d4f90919063ffffffff16565b836002018190555060003390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610500573d6000803e3d6000fd5b50505b505b6000604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506105523382611d8e565b600061056d603f548360020154611d4f90919063ffffffff16565b905060008460030154905081811115610584578190505b6000670de0b6b3a7640000604660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16029050600081111561060d5780821115610608578091505b61062c565b6000604254118015610620575060425482115b1561062b5760425491505b5b600061068262278d0061067489600101544203610666606461065860148a611cef90919063ffffffff16565b611d2990919063ffffffff16565b611cef90919063ffffffff16565b611d2990919063ffffffff16565b905060008073ffffffffffffffffffffffffffffffffffffffff168660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610707578560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661072b565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90506000604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116107e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f546f6b656e2072617465206e6f7420736574000000000000000000000000000081525060200191505060405180910390fd5b6000670de0b6b3a7640000604460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484028161083657fe5b04905061086433828473ffffffffffffffffffffffffffffffffffffffff1661208e9092919063ffffffff16565b808760000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fad71f93891cecc86a28a627d5495c28fabbd31cdd2e93851b16ce3421fdab2e5836040518082815260200191505060405180910390a34289600101819055505050505050505050505b005b34801561093957600080fd5b506109426120a1565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b34801561099e57600080fd5b506109a76120da565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109f557600080fd5b50610a4260048036036040811015610a0c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612100565b005b348015610a5057600080fd5b50610aa760048036036040811015610a6757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803567ffffffffffffffff16906020019092919050505061219b565b005b348015610ab557600080fd5b50610b8260048036036040811015610acc57600080fd5b8101908080359060200190640100000000811115610ae957600080fd5b820183602082011115610afb57600080fd5b80359060200191846020830284011164010000000083111715610b1d57600080fd5b909192939192939080359060200190640100000000811115610b3e57600080fd5b820183602082011115610b5057600080fd5b80359060200191846020830284011164010000000083111715610b7257600080fd5b909192939192939050505061225b565b005b348015610b9057600080fd5b50610bbd60048036036020811015610ba757600080fd5b8101908080359060200190929190505050612375565b005b348015610bcb57600080fd5b50610c0e60048036036020811015610be257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612463565b604051808215151515815260200191505060405180910390f35b348015610c3457600080fd5b50610c8160048036036040811015610c4b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612483565b005b348015610c8f57600080fd5b50610cde60048036036040811015610ca657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050612539565b005b348015610cec57600080fd5b50610d1960048036036020811015610d0357600080fd5b81019080803590602001909291905050506125eb565b005b348015610d2757600080fd5b50610d6a60048036036020811015610d3e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612656565b6040518082815260200191505060405180910390f35b348015610d8c57600080fd5b50610dcf60048036036020811015610da357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061269f565b604051808381526020018281526020019250505060405180910390f35b348015610df857600080fd5b50610e3b60048036036020811015610e0f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612731565b005b348015610e4957600080fd5b50610f1660048036036040811015610e6057600080fd5b8101908080359060200190640100000000811115610e7d57600080fd5b820183602082011115610e8f57600080fd5b80359060200191846020830284011164010000000083111715610eb157600080fd5b909192939192939080359060200190640100000000811115610ed257600080fd5b820183602082011115610ee457600080fd5b80359060200191846020830284011164010000000083111715610f0657600080fd5b90919293919293905050506127cc565b005b348015610f2457600080fd5b50610f8760048036036040811015610f3b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128b3565b005b348015610f9557600080fd5b50610fe260048036036040811015610fac57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061298b565b005b348015610ff057600080fd5b50610ff9612abb565b005b34801561100757600080fd5b506110d46004803603604081101561101e57600080fd5b810190808035906020019064010000000081111561103b57600080fd5b82018360208201111561104d57600080fd5b8035906020019184602083028401116401000000008311171561106f57600080fd5b90919293919293908035906020019064010000000081111561109057600080fd5b8201836020820111156110a257600080fd5b803590602001918460208302840111640100000000831117156110c457600080fd5b9091929391929390505050612b6e565b005b3480156110e257600080fd5b506110eb612c55565b6040518082815260200191505060405180910390f35b34801561110d57600080fd5b5061113a6004803603602081101561112457600080fd5b8101908080359060200190929190505050612c5b565b005b34801561114857600080fd5b50611151612ce1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561119f57600080fd5b5061120c600480360360608110156111b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612d07565b005b34801561121a57600080fd5b5061125d6004803603602081101561123157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d8e565b005b611267612e29565b005b34801561127557600080fd5b5061127e612edd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156112cc57600080fd5b50611323600480360360608110156112e357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050612f03565b005b34801561133157600080fd5b506113946004803603604081101561134857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613043565b604051808381526020018281526020019250505060405180910390f35b3480156113bd57600080fd5b506113c6613151565b005b3480156113d457600080fd5b50611421600480360360408110156113eb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613210565b005b34801561142f57600080fd5b506114386132b9565b6040518082815260200191505060405180910390f35b34801561145a57600080fd5b506114bd6004803603604081101561147157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132bf565b005b3480156114cb57600080fd5b5061150e600480360360208110156114e257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613671565b6040518082601360200280838360005b8381101561153957808201518184015260208101905061151e565b5050505090500191505060405180910390f35b603860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166118c1576000806000603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffdd5cf1866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060806040518083038186803b15801561164157600080fd5b505afa158015611655573d6000803e3d6000fd5b505050506040513d608081101561166b57600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291905050505080935081945082955050505060008311156117d9576000611700846116f260146116e460646116d662278d008a611cef90919063ffffffff16565b611cef90919063ffffffff16565b611d2990919063ffffffff16565b611d2990919063ffffffff16565b420390506000603960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050604051806080016040528086815260200183815260200184815260200182815250603960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505050505b6001603860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146118bd576001603860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050505b5050565b600073ffffffffffffffffffffffffffffffffffffffff16604160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611ced5760146000369050146119d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f526566657272616c20616464726573732072657175697265640000000000000081525060200191505060405180910390fd5b6000611a236000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050613fd0565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ac7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f596f752063616e27742072656620796f757273656c660000000000000000000081525060200191505060405180910390fd5b80604160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301541415611c21576001603960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015401604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550611ceb565b611cea33611ce56046611cd76064611cc9604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301546001603960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015401611d6e90919063ffffffff16565b611cef90919063ffffffff16565b611d2990919063ffffffff16565b613fde565b5b505b565b600080831415611d025760009050611d23565b6000828402905082848281611d1357fe5b0414611d1e57600080fd5b809150505b92915050565b6000808211611d3757600080fd5b6000828481611d4257fe5b0490508091505092915050565b600080828401905083811015611d6457600080fd5b8091505092915050565b600082821115611d7d57600080fd5b600082840390508091505092915050565b6000604560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541415611de4575061208a565b60008073ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611e67578260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e8b565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90506000604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611f42576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f546f6b656e2072617465206e6f7420736574000000000000000000000000000081525060200191505060405180910390fd5b6000670de0b6b3a7640000604460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484600001540281611f9a57fe5b04905060008360000181905550611fd285828473ffffffffffffffffffffffffffffffffffffffff1661208e9092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8fa98f58ceeb885475a65b9f48d5c3aaf24879d99bda48d4627c91312d1184d6836040518082815260200191505060405180910390a3808360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050505b5050565b61209b8383836000614428565b50505050565b6000806000603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250603f5491506042549050909192565b604360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661215357fe5b80604460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166121ee57fe5b80604660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166122ae57fe5b60008484905090508282905081146122c557600080fd5b60008090505b818161ffff16101561236d5783838261ffff168181106122e757fe5b905060200201356040600088888561ffff1681811061230257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555080806001019150506122cb565b505050505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146123cc57fe5b4260485411156123f7576047546123ec8247611d6e90919063ffffffff16565b116123f657600080fd5b5b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561245f573d6000803e3d6000fd5b5050565b603a6020528060005260406000206000915054906101000a900460ff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146124da57fe5b60008112156124e857600080fd5b6000603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160000181905550505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461259057fe5b80603a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461264257fe5b670de0b6b3a7640000810260358190555050565b6000604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549150603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050915091565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461278857fe5b80603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661281f57fe5b6128ad848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506000614584565b50505050565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661290657fe5b80604060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156129c4573391505b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001015482600001540113612a1e57600080fd5b8181600101548260000154011015612a3557600080fd5b818160010160008282540392505081905550612a5183836147e9565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f14ab110831c9d210715b0adedbc67b2f0b80c10ad2853488332d1e4fbd85f81d846040518082815260200191505060405180910390a3505050565b600060019054906101000a900460ff1680612ada5750612ad9614867565b5b80612af157506000809054906101000a900460ff16155b612afa57600080fd5b60008060019054906101000a900460ff161590508015612b4a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015612b6b5760008060016101000a81548160ff0219169083151502179055505b50565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612bc157fe5b612c4f848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506001614584565b50505050565b60475481565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612cb257fe5b426048541115612ccb576047548111612cca57600080fd5b5b8060478190555062278d00420160488190555050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612d5e57fe5b612d8982828573ffffffffffffffffffffffffffffffffffffffff1661208e9092919063ffffffff16565b505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612de557fe5b80604360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541315612e8c573481600101600082825401925050819055505b3373ffffffffffffffffffffffffffffffffffffffff167fac51d2759ef9a0c22072ba515685b302d83fa6ff1d5ec2948396ac46e82d864c346040518082815260200191505060405180910390a250565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612f5a57fe5b6000604460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411612fa657600080fd5b6000612fd1308573ffffffffffffffffffffffffffffffffffffffff1661487e90919063ffffffff16565b11612fdb57600080fd5b82603d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a76400008202603f81905550670de0b6b3a76400008102604281905550505050565b600080604060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150604560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509250929050565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146131ab57600080fd5b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461326757fe5b670de0b6b3a76400008102603b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60485481565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661331257fe5b600073ffffffffffffffffffffffffffffffffffffffff16604160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561366d578173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613448576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f596f752063616e27742072656620796f757273656c660000000000000000000081525060200191505060405180910390fd5b80604160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000604060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015414156135a2576001603960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015401604060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555061366c565b61366b826136666046613658606461364a604060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301546001603960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015401611d6e90919063ffffffff16565b611cef90919063ffffffff16565b611d2990919063ffffffff16565b613fde565b5b5b5050565b613679614bef565b478160036013811061368757fe5b602002018181525050603b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054816005601381106136dd57fe5b6020020181815250506000816005601381106136f557fe5b6020020151141561371a576035548160056013811061371057fe5b6020020181815250505b613722614c12565b603960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050603860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16613965576000603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffdd5cf1856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060806040518083038186803b15801561388857600080fd5b505afa15801561389c573d6000803e3d6000fd5b505050506040513d60808110156138b257600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291905050505084600001856040018281525082945083815250505050600082600001511115613963576139578260000151613949601461393b606461392d62278d0088611cef90919063ffffffff16565b611cef90919063ffffffff16565b611d2990919063ffffffff16565b611d2990919063ffffffff16565b42038260200181815250505b505b80600001518260006013811061397757fe5b6020020181815250506000816000015111156139fc576139e562278d006139d7836020015142036139c960646139bb60148860000151611cef90919063ffffffff16565b611d2990919063ffffffff16565b611cef90919063ffffffff16565b611d2990919063ffffffff16565b826001601381106139f257fe5b6020020181815250505b806040015182600260138110613a0e57fe5b602002018181525050806060015182600460138110613a2957fe5b602002018181525050613a3a614c3a565b604060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815250509050806020015183600b60138110613b0257fe5b602002018181525050806040015183600c60138110613b1d57fe5b602002018181525050613b4c603f5484600b60138110613b3957fe5b6020020151611d4f90919063ffffffff16565b83600d60138110613b5957fe5b602002018181525050816060015183600e60138110613b7457fe5b60200201818152505082600d60138110613b8a57fe5b602002015183600e60138110613b9c57fe5b60200201511115613bd05782600d60138110613bb457fe5b602002015183600e60138110613bc657fe5b6020020181815250505b6000604254118015613bf4575060425483600e60138110613bed57fe5b6020020151115b15613c135760425483600e60138110613c0957fe5b6020020181815250505b600082602001511115613c9c57613c8562278d00613c7784602001514203613c696064613c5b60148a600e60138110613c4857fe5b6020020151611cef90919063ffffffff16565b611d2990919063ffffffff16565b611cef90919063ffffffff16565b611d2990919063ffffffff16565b83600660138110613c9257fe5b6020020181815250505b60008073ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1614613cdf578160000151613d03565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90508073ffffffffffffffffffffffffffffffffffffffff1684600a60138110613d2957fe5b602002018181525050670de0b6b3a7640000604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485600660138110613d8857fe5b60200201510281613d9557fe5b0484600760138110613da357fe5b6020020181815250506000604560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806000015485600f60138110613e0157fe5b6020020181815250508060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485601060138110613e5957fe5b602002018181525050670de0b6b3a7640000604460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600001540281613eb857fe5b0485601160138110613ec657fe5b602002018181525050604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485600960138110613f1c57fe5b602002018181525050613f2f8683613043565b5085600860138110613f3d57fe5b602002018181525050670de0b6b3a7640000604660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff160285601260138110613fbe57fe5b60200201818152505050505050919050565b600060148201519050919050565b6000604160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561407d5750614424565b6140f86140a76064614099601986611cef90919063ffffffff16565b611d2990919063ffffffff16565b604560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154611d4f90919063ffffffff16565b604560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060008073ffffffffffffffffffffffffffffffffffffffff16604360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146141bd57604360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166141e1565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b905061425e61420d60646141ff600587611cef90919063ffffffff16565b611d2990919063ffffffff16565b604560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154611d4f90919063ffffffff16565b604560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060008090505b60038160ff161015614420576143316142e060646142d2604688611cef90919063ffffffff16565b611d2990919063ffffffff16565b604060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154611d4f90919063ffffffff16565b604060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550604160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561441357614420565b80806001019150506142aa565b5050505b5050565b60008083141561443b576001905061457c565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806144b5575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b1561454c5781156144fc578373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050905061457c565b8373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015614542573d6000803e3d6000fd5b506001905061457c565b61457784848773ffffffffffffffffffffffffffffffffffffffff166149de9092919063ffffffff16565b600190505b949350505050565b6000835190508251811461459757600080fd5b60008090505b818161ffff1610156147e257600060396000878461ffff16815181106145bf57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600060406000888561ffff168151811061461957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160030154141561467b57600182600301540181600301819055505b600082600101541415614692574282600101819055505b60008260030154905060008660ff1614156146cc57868461ffff16815181106146b757fe5b60200260200101518360030181905550614761565b614704888561ffff16815181106146df57fe5b6020026020010151888661ffff16815181106146f757fe5b6020026020010151613fde565b614758614745606461473760468b8961ffff168151811061472157fe5b6020026020010151611cef90919063ffffffff16565b611d2990919063ffffffff16565b8460030154611d4f90919063ffffffff16565b83600301819055505b878461ffff168151811061477157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f27a52c428039d1effe188654b6d484ec539aefbdd8d66178f5df05b8fde8b22a828560030154604051808381526020018281526020019250505060405180910390a2505050808060010191505061459d565b5050505050565b600082905060008173ffffffffffffffffffffffffffffffffffffffff168360405180600001905060006040518083038185875af1925050503d806000811461484e576040519150601f19603f3d011682016040523d82523d6000602084013e614853565b606091505b505090508061486157600080fd5b50505050565b6000803090506000813b9050600081149250505090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806148f9575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b1561491d578173ffffffffffffffffffffffffffffffffffffffff163190506149d8565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561499a57600080fd5b505afa1580156149ae573d6000803e3d6000fd5b505050506040513d60208110156149c457600080fd5b810190808051906020019092919050505090505b92915050565b614aaa838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614aaf565b505050565b614ace8273ffffffffffffffffffffffffffffffffffffffff16614bdc565b614ad757600080fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b60208310614b265780518252602082019150602081019050602083039250614b03565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614b88576040519150601f19603f3d011682016040523d82523d6000602084013e614b8d565b606091505b509150915081614b9c57600080fd5b600081511115614bd657808060200190516020811015614bbb57600080fd5b8101908080519060200190929190505050614bd557600080fd5b5b50505050565b600080823b905060008111915050919050565b604051806102600160405280601390602082028038833980820191505090505090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152509056fea265627a7a72315820cefad25e577dab15b388a82c53f2521e4e32ec7b7c1cce15cb0d2bcd49a493c864736f6c63430005100032
==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: fallback
PC address: 534
Estimated Gas Usage: 62 - 157
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:707

require(msg.sender == tx.origin)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: fallback
PC address: 625
Estimated Gas Usage: 935 - 1360
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:709

if (msg.sender == owner) return;

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: updateTokenRate(address,uint256)
PC address: 8530
Estimated Gas Usage: 1282 - 1897
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:376

function updateTokenRate(address tokenAddress, uint256 rateInWei) public onlyAdmin {
        tokenRates[tokenAddress] = rateInWei;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateTokenRate(address,uint256), txdata: 0x226ac32100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: setUserMaxLimitVMR(address,uint64)
PC address: 8685
Estimated Gas Usage: 1310 - 1925
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:577

function setUserMaxLimitVMR(address userAddress, uint64 amountInInteger) onlyAdmin public {
        extraConditions[userAddress].maxPersonalLimitVMR = amountInInteger; // actual value will be multiplied by 10**18
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setUserMaxLimitVMR(address,uint64), txdata: 0x228b088d00000000000000000000000010100110202020000000010200048001000000200000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x1010011020202000000001020004800100000020', 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: setUserLimitVMR(address[],uint256[])
PC address: 8877
Estimated Gas Usage: 1529 - 2144
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:585

function setUserLimitVMR(address[] calldata userAddress, uint256[] calldata newLimitsInWei) onlyAdmin external {
        uint256 len = userAddress.length;
        require(len == newLimitsInWei.length);

        for(uint16 i = 0;i < len; i++) {
            investorsExt[userAddress[i]].limitVMR = newLimitsInWei[i];
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setUserLimitVMR(address[],uint256[]), txdata: 0x25cad82c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d, decoded_data: ([], []), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: withdraw(uint256)
PC address: 9162
Estimated Gas Usage: 1144 - 1569
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:356

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw(uint256), txdata: 0x2e1a7d4d8080808080808080808080804001808000000208004080101020000802804008, decoded_data: (58123087930888129467517984631443761828085891880297501037959860108774307020808,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: withdraw(uint256)
PC address: 9163
Estimated Gas Usage: 1154 - 1579
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:440

function withdraw(uint256 amount)  public onlyOwner {
        if (dateUntilFundsLocked > now) require(address(this).balance.sub(amount) > fundsLockedtoWithdraw);
        owner.transfer(amount);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d8080808080808080808080800480808080800801000440040040800001000102, decoded_data: (58123087930888129467517984631104054576647480816580636777487782521833892348162,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: setPartnerContract(address,int256)
PC address: 9432
Estimated Gas Usage: 1221 - 1646
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:356

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setPartnerContract(address,int256), txdata: 0x446d5b4e00000000000000000000000000000020002000200040201080101010008000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000002000200020004020108010101000800000', 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: setPartnerContract(address,int256)
PC address: 9433
Estimated Gas Usage: 1231 - 1656
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:422

function setPartnerContract(address addr, int256 maxCredit) onlyOwner public {
        require(maxCredit >= 0);
        Partner storage data = partners[addr];
        data.maxCredit = maxCredit;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setPartnerContract(address,int256), txdata: 0x446d5b4e00000000000000000000000001102000104080208001008000804010100000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0110200010408020800100800080401010000000', 0), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: setAdmin(address,bool)
PC address: 9614
Estimated Gas Usage: 1161 - 1586
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:356

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setAdmin(address,bool), txdata: 0x4b0bddd200000000000000000000000000000000000108080802010202010010088002000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000010808080201020201001008800200', False), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: setAdmin(address,bool)
PC address: 9615
Estimated Gas Usage: 1171 - 1596
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:428

function setAdmin(address newAdmin, bool activate) onlyOwner public {
        admins[newAdmin] = activate;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setAdmin(address,bool), txdata: 0x4b0bddd204040404040404040404040404102008200104040820000210040400042010800404040404040404040404040404040404040404040404040404040404040404, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: changeMinBalance(uint256)
PC address: 9792
Estimated Gas Usage: 1144 - 1569
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:356

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeMinBalance(uint256), txdata: 0x4ea18fab0000000000000000000000000002010000020002040840808001200880080040, decoded_data: (44688602693377759951028791934666568544813120,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: changeMinBalance(uint256)
PC address: 9793
Estimated Gas Usage: 1154 - 1579
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:463

function changeMinBalance(uint256 newMinBalanceInInteger) public onlyOwner {
        MinBalanceVMR = newMinBalanceInInteger * 10**18;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: changeMinBalance(uint256), txdata: 0x4ea18fab8080808080808080808080808080100420408020020801028020088080018002, decoded_data: (58123087930888129467517984631811959633330663303993103558561343886967523344386,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: changeOwnerCandidate(address)
PC address: 10118
Estimated Gas Usage: 1127 - 1552
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:356

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeOwnerCandidate(address), txdata: 0x561a01b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: changeOwnerCandidate(address)
PC address: 10119
Estimated Gas Usage: 1137 - 1562
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:454

function changeOwnerCandidate(address payable newOwner) public onlyOwner {
        newOwnerCandidate = newOwner;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: changeOwnerCandidate(address), txdata: 0x561a01b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: setDepositTokens(address[],uint256[])
PC address: 10270
Estimated Gas Usage: 1550 - 2165
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:598

function setDepositTokens(address[] calldata userAddress, uint256[] calldata amountTokens) onlyAdmin external {
        internalSetDepositTokens(userAddress, amountTokens, 0); // set mode
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setDepositTokens(address[],uint256[]), txdata: 0x5b14319c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a, decoded_data: ([], []), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: setPayoutTokenForUser(address,address)
PC address: 10501
Estimated Gas Usage: 1286 - 1901
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:581

function setPayoutTokenForUser(address userAddress, address _newActivePayoutToken) onlyAdmin public {
        investorsExt[userAddress].activePayoutToken = _newActivePayoutToken;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setPayoutTokenForUser(address,address), txdata: 0x5c31a7b700000000000000000000000000000001000040008080042080200004108001800000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000100004000808004208020000410800180', '0x0000000000000000000000000000000000000000'), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: addDepositTokens(address[],uint256[])
PC address: 11200
Estimated Gas Usage: 1551 - 2166
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:594

function addDepositTokens(address[] calldata userAddress, uint256[] calldata amountTokens) onlyAdmin external {
        internalSetDepositTokens(userAddress, amountTokens, 1); // add mode
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addDepositTokens(address[],uint256[]), txdata: 0x8484326500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, decoded_data: ([], []), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: lockFunds(uint256)
PC address: 11440
Estimated Gas Usage: 1188 - 1613
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:356

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: lockFunds(uint256), txdata: 0x8c8f95fb0000000000000000000000008000400000100400000002020080804000000200, decoded_data: (730756393851834249637002781618110479344710189568,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: lockFunds(uint256)
PC address: 11441
Estimated Gas Usage: 1198 - 1623
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:445

function lockFunds(uint256 amount) public onlyOwner {
        // funds lock is active
        if (dateUntilFundsLocked > now) {
            require(amount > fundsLockedtoWithdraw);
        }
        fundsLockedtoWithdraw = amount;
        dateUntilFundsLocked = now + 30 days;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: lockFunds(uint256), txdata: 0x8c8f95fb0101010101010101010101018000011004804002010804000401008001018020, decoded_data: (454086624460063511464984255661050543447607033840290966048969596394748870688,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: transferTokens(address,address,uint256)
PC address: 11612
Estimated Gas Usage: 1209 - 1634
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:356

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: transferTokens(address,address,uint256)
PC address: 11613
Estimated Gas Usage: 1219 - 1644
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:473

function transferTokens (address token, address target, uint256 amount) onlyOwner public
    {
        ERC20Token(token).universalTransfer(target, amount);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f000000000000000000000000080000000004000020040000042010011020200100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0800000000040000200400000420100110202001', '0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: setSupportAddress(address)
PC address: 11747
Estimated Gas Usage: 1171 - 1596
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:356

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setSupportAddress(address), txdata: 0xa91c64e20000000000000000000000008001024000040002101001108020200840000000, decoded_data: ('0x8001024000040002101001108020200840000000',), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: setSupportAddress(address)
PC address: 11748
Estimated Gas Usage: 1181 - 1606
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:645

function setSupportAddress(address newSupportAddress) public onlyOwner {
        supportAddress = newSupportAddress;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setSupportAddress(address), txdata: 0xa91c64e20404040404040404040404040408082040801008040400800404000040084000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: updatePaymentMode(address,uint256,uint256)
PC address: 12120
Estimated Gas Usage: 1203 - 1628
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:356

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: updatePaymentMode(address,uint256,uint256), txdata: 0xd6c633e8000000000000000000000000000000000000000840800120108010022080100800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000008408001201080100220801008', 0, 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: updatePaymentMode(address,uint256,uint256)
PC address: 12121
Estimated Gas Usage: 1213 - 1638
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:380

function updatePaymentMode(address _newPaymantMode, uint256 _newMinLimitVMRInInteger, uint256 _newMaxLimitVMRInInteger) onlyOwner public {
        require(tokenRates[_newPaymantMode] > 0);
        require(ERC20Token(_newPaymantMode).universalBalanceOf(address(this)) > 0);

        paymentToken = _newPaymantMode;
        globalLimitVMR = _newMinLimitVMRInInteger * 10**18;
        maxLimitVMR = _newMaxLimitVMRInInteger * 10**18;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updatePaymentMode(address,uint256,uint256), txdata: 0xd6c633e8000000000000000000000000000000000000004001040104008010000040041000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000040010401040080100000400410', 0, 0), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: acceptOwner()
PC address: 12710
Estimated Gas Usage: 1105 - 1530
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:459

require(msg.sender == newOwnerCandidate)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: acceptOwner(), txdata: 0xebbc4965, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: changeIndividualVMRCup(address,uint256)
PC address: 12901
Estimated Gas Usage: 1153 - 1578
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:356

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeIndividualVMRCup(address,uint256), txdata: 0xeef793d920202020202020202020202020080040208008000480800810400120202000202020202020202020202020202020202020202020202020202020202020202020, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: changeIndividualVMRCup(address,uint256)
PC address: 12902
Estimated Gas Usage: 1163 - 1588
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:433

function changeIndividualVMRCup(address userAddress, uint256 minAmountInInteger) onlyOwner public {
        individualVMRCup[userAddress] = minAmountInInteger * 10**18;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeIndividualVMRCup(address,uint256), txdata: 0xeef793d980808080808080808080808001802040804002000880408080802080012008408080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: setupRef(address,address)
PC address: 13073
Estimated Gas Usage: 1285 - 1900
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:669

function setupRef(address userAddress, address refAddress) onlyAdmin external {
        if (refList[userAddress] == address(0))
        {
            require(refAddress != userAddress, "You can't ref yourself");

            refList[userAddress] = refAddress;

            if (investorsExt[userAddress].oldDepositAmount == 0) {
                
                investorsExt[userAddress].oldDepositAmount = investors[userAddress].totalVMR + 1;
            } else {
                
                updateRefStructure(userAddress, (investors[userAddress].totalVMR + 1).sub(investorsExt[userAddress].oldDepositAmount).mul(100).div(70));
            }
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setupRef(address,address), txdata: 0xfe4be1be00000000000000000000000000000000080220804020040020000001208004000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000008022080402004002000000120800400', '0x0000000000000000000000000000000000000000'), value: 0x0


time_used: 8332.21020102501 seconds
#@contract_info_time
0x18c210013ea6cbe99b2dacdc9cfcb6e07458f0ca.sol:0.5.16:ShareholderVomer:8332.21020102501:36100:60:36000
