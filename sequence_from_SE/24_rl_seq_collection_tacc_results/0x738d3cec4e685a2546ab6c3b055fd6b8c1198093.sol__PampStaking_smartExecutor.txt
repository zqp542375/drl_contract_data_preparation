++++ 0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol  :  0.6.12  :  PampStaking ++++
1375750312186030089298444564720726222891842427857 is added into actors.
166299613279212256748346830962151019497232013024 is added into actors.
530509280502661759363843542948257571766147186247 is added into actors.
Starting preprocessing.
number of genesis states: 1
total instructions: 13471
['constructor']:writes at the last depth:['0', '1', '10', '12', '13', '11', '24', '7', '6', '9', '8', '30', '14', '27', '26', '33', '31', '29']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 63.11% coverage.
dynamic svars:['28', '4', '2', '25', '3', '5']
static svars:['27', '8', '12', '10', '24', '26', '14', '11', '9', '7', '33', '31', '1', '30', '29', '15', '13', '6', '23', '0', '22', '16', '17', '18', '19', '20', '21', '32']
Ending preprocessing.
preprocessing time(s): 103.14892244338989
contract coverage: 62.95%
whitelist(address) is not reachable
uniwhitelist(address) is not reachable
mulDiv(uint256,uint256,uint256) is not reachable
Function Reads: State variables read in conditions
	updateNextStakingContract(address):['0']
	transferOwnership(address):['0']
	blacklist(address):[]
	token():[]
	updateUniWhitelist(address,string,bool):['0']
	updateMinPercentIncrease(uint8):['0']
	liquidityRewards(address,uint256):['29']
	uniswapSellerBurnPercent():[]
	inflationAdjustmentFactor():[]
	useExternalCalcIterative():[]
	externalCalculator():[]
	maxStreak():[]
	priceTarget2Hit():[]
	updateHoldersDay(bool):['0', '24']
	minPercentIncrease():[]
	maxStakingDays():[]
	holdersDayRewarded(bytes32):[]
	lastUpdate():[]
	updateUniswapPair(address):['0']
	enableHoldersDay():[]
	claimHoldersDay():['25', '24']
	streak():[]
	updateUseExternalCalcIterative(bool):['0']
	updates(uint256):['28']
	updateMinStakes(uint256):['0']
	updateCalculator(address):['0']
	iterativelyCalculateOwedRewards(uint256,uint256,uint256,address,uint256):['24']
	mulDiv(uint256,uint256,uint256):[]
	updateMinStakeDurationDays(uint8):['0']
	checkPreviousStakingContractWhitelist():[]
	priceTarget1Hit():[]
	updateMyStakes(address,uint256,uint256):['1']
	resetStakeTimeMigrateState(address):['24']
	getStaker(address):[]
	updateInflationAdjustmentFactor(uint256):['0']
	updateMaxStakingDays(uint256):['0']
	enableBurns():[]
	whitelist(address):[]
	getDaysStaked(address):['2']
	burn(address,uint256):['0']
	updatePreviousStakingContract(address):['0']
	updateUniswapSellBurnPercent(uint8):['0']
	updateHoldersDayRewardDenominator(uint256):['0']
	owner():[]
	liquidityStakingContract():[]
	stakers(address):[]
	updateLiquidityStakingContract(address):['0']
	updateEnableBurns(bool):['0']
	calculateNumTokens(uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256):['24', '26']
	oracle():[]
	updateBlacklist(address,uint256,bool):['0']
	updateFreeze(bool):['0']
	enableUniswapDirectBurns():[]
	freeze():[]
	updateTokenAddress(address):['0']
	numStakers():[]
	transferHook(address,address,uint256,uint256,uint256):['1', '29', '33', '24']
	previousStakingContract():[]
	removeLatestUpdate():['0', '28']
	minStakeDurationDays():[]
	currentHoldersDayRewardedVersion():[]
	useExternalCalc():[]
	updateStreak(bool,uint256):['0']
	minStake():[]
	nextStakingContract():[]
	uniswapV2Pair():[]
	updateIncreaseTransferFees(bool):['0']
	updateWhitelist(address,string,bool):['0']
	increaseTransferFees():[]
	updateEnableUniswapSellBurns(bool):['0']
	transferBurnPercent():[]
	updateState(uint256,uint256,uint256,uint256):['30', '13', '14']
	holdersDayRewardDenominator():[]
	updateStateNegative(int256,uint256,uint256,uint256):['30', '33']
	updateTransferBurnFee(uint256):['0']
	uniwhitelist(address):[]
	updateOracle(address):['0']
	lastNegativeUpdate():[]
	migratePreviousState():['2']
	negativeStreak():[]
	resetStakeTimeDebug(address,uint256,uint256,bool):['0']
	updateMaxStreak(uint256):['0']
	updateCheckPreviousContractWhitelist(bool):['0']
Function Writes: State variables written
	updateHoldersDayRewardDenominator(uint256):['27']
	removeLatestUpdate():['28']
	updateTransferBurnFee(uint256):['8']
	updateInflationAdjustmentFactor(uint256):['12']
	updateMinStakes(uint256):['10']
	updateNextStakingContract(address):['24']
	updateMaxStakingDays(uint256):['26']
	updateMaxStreak(uint256):['14']
	updateUseExternalCalcIterative(bool):['24']
	updateMinStakeDurationDays(uint8):['11']
	updateEnableUniswapSellBurns(bool):['9']
	updateUniswapSellBurnPercent(uint8):['7']
	updateHoldersDay(bool):['24', '33']
	updateFreeze(bool):['24']
	updateIncreaseTransferFees(bool):['33']
	updatePreviousStakingContract(address):['31']
	updateTokenAddress(address):['1']
	updateOracle(address):['30']
	updateLiquidityStakingContract(address):['29']
	updateStreak(bool,uint256):['15', '13']
	updateUniswapPair(address):['6']
	updateCheckPreviousContractWhitelist(bool):['33']
	updateMinPercentIncrease(uint8):['11']
	updateEnableBurns(bool):['6']
	updateCalculator(address):['23', '24']
	updateBlacklist(address,uint256,bool):['4']
	transferOwnership(address):['0']
	updateStateNegative(int256,uint256,uint256,uint256):['15', '13', '7', '22', '8']
	resetStakeTimeDebug(address,uint256,uint256,bool):['2']
	resetStakeTimeMigrateState(address):['2']
	updateState(uint256,uint256,uint256,uint256):['13']
============================
iteration:3
targets:['updates(uint256)', 'resetStakeTimeMigrateState(address)', 'removeLatestUpdate()', 'migratePreviousState()', 'iterativelyCalculateOwedRewards(uint256,uint256,uint256,address,uint256)', 'whitelist(address)', 'uniwhitelist(address)', 'claimHoldersDay()', 'calculateNumTokens(uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256)', 'burn(address,uint256)', 'liquidityRewards(address,uint256)', 'transferHook(address,address,uint256,uint256,uint256)', 'updateStateNegative(int256,uint256,uint256,uint256)', 'mulDiv(uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']
['updateHoldersDayRewardDenominator(uint256)']:writes at the last depth:['27']
['updateTransferBurnFee(uint256)']:writes at the last depth:['8']
['updateInflationAdjustmentFactor(uint256)']:writes at the last depth:['12']
['updateMinStakes(uint256)']:writes at the last depth:['10']
['updateNextStakingContract(address)']:writes at the last depth:['24']
['updateMaxStakingDays(uint256)']:writes at the last depth:['26']
['updateMaxStreak(uint256)']:writes at the last depth:['14']
['updateUseExternalCalcIterative(bool)']:writes at the last depth:['24']
['updateMinStakeDurationDays(uint8)']:writes at the last depth:['11']
['updateEnableUniswapSellBurns(bool)']:writes at the last depth:['9']
['updateUniswapSellBurnPercent(uint8)']:writes at the last depth:['7']
['updateFreeze(bool)']:writes at the last depth:['24']
['updateIncreaseTransferFees(bool)']:writes at the last depth:['33']
['updatePreviousStakingContract(address)']:writes at the last depth:['31']
['updateTokenAddress(address)']:writes at the last depth:['1']
['updateOracle(address)']:writes at the last depth:['30']
['updateLiquidityStakingContract(address)']:writes at the last depth:['29']
['updateUniswapPair(address)']:writes at the last depth:['6']
['updateStreak(bool,uint256)']:writes at the last depth:['13']
['updateCheckPreviousContractWhitelist(bool)']:writes at the last depth:['33']
['updateMinPercentIncrease(uint8)']:writes at the last depth:['11']
['updateStreak(bool,uint256)']:writes at the last depth:['15']
['updateHoldersDay(bool)']:writes at the last depth:['33', '24']
['updateEnableBurns(bool)']:writes at the last depth:['6']
['transferOwnership(address)']:writes at the last depth:['0']
['updateBlacklist(address,uint256,bool)']:writes at the last depth:['4']
['updateBlacklist(address,uint256,bool)']:writes at the last depth:['4']
['updateCalculator(address)']:writes at the last depth:['24', '23']
['updateCalculator(address)']:writes at the last depth:['24', '23']
['updateHoldersDay(bool)']:writes at the last depth:['33', '24']
['updateStateNegative(int256,uint256,uint256,uint256)']:writes at the last depth:['7', '22', '15', '13']
['updateStateNegative(int256,uint256,uint256,uint256)']:writes at the last depth:['7', '22', '15', '13']
['resetStakeTimeDebug(address,uint256,uint256,bool)']:writes at the last depth:['2']
['updateUniWhitelist(address,string,bool)']:writes at the last depth:['5']
['updateWhitelist(address,string,bool)']:writes at the last depth:['3']
['updateUniWhitelist(address,string,bool)']:writes at the last depth:['5']
['updateWhitelist(address,string,bool)']:writes at the last depth:['3']
['updateUniWhitelist(address,string,bool)']:writes at the last depth:['5']
['updateWhitelist(address,string,bool)']:writes at the last depth:['3']
['updateUniWhitelist(address,string,bool)']:writes at the last depth:['5']
['updateWhitelist(address,string,bool)']:writes at the last depth:['3']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['6', '20', '19', '17', '10', '28', '18', '13', '21', '16']
contract coverage: 67.50%
============================
iteration:4
['updateState(uint256,uint256,uint256,uint256)', 'updateHoldersDayRewardDenominator(uint256)']:writes at the last depth:['27']
['updateState(uint256,uint256,uint256,uint256)', 'updateTransferBurnFee(uint256)']:writes at the last depth:['8']
['updateState(uint256,uint256,uint256,uint256)', 'updateInflationAdjustmentFactor(uint256)']:writes at the last depth:['12']
['updateState(uint256,uint256,uint256,uint256)', 'updateMinStakes(uint256)']:writes at the last depth:['10']
['updateState(uint256,uint256,uint256,uint256)', 'updateNextStakingContract(address)']:writes at the last depth:['24']
['updateState(uint256,uint256,uint256,uint256)', 'updateMaxStakingDays(uint256)']:writes at the last depth:['26']
['updateState(uint256,uint256,uint256,uint256)', 'updateMaxStreak(uint256)']:writes at the last depth:['14']
['updateState(uint256,uint256,uint256,uint256)', 'updateUseExternalCalcIterative(bool)']:writes at the last depth:['24']
['updateState(uint256,uint256,uint256,uint256)', 'updateMinStakeDurationDays(uint8)']:writes at the last depth:['11']
['updateState(uint256,uint256,uint256,uint256)', 'updateEnableUniswapSellBurns(bool)']:writes at the last depth:['9']
['updateState(uint256,uint256,uint256,uint256)', 'updateUniswapSellBurnPercent(uint8)']:writes at the last depth:['7']
['updateState(uint256,uint256,uint256,uint256)', 'removeLatestUpdate()']:writes at the last depth:['28']
['updateState(uint256,uint256,uint256,uint256)', 'updateFreeze(bool)']:writes at the last depth:['24']
['updateState(uint256,uint256,uint256,uint256)', 'updateIncreaseTransferFees(bool)']:writes at the last depth:['33']
['updateState(uint256,uint256,uint256,uint256)', 'updatePreviousStakingContract(address)']:writes at the last depth:['31']
['updateState(uint256,uint256,uint256,uint256)', 'updateTokenAddress(address)']:writes at the last depth:['1']
['updateState(uint256,uint256,uint256,uint256)', 'updateOracle(address)']:writes at the last depth:['30']
['updateState(uint256,uint256,uint256,uint256)', 'updateLiquidityStakingContract(address)']:writes at the last depth:['29']
['updateState(uint256,uint256,uint256,uint256)', 'updateUniswapPair(address)']:writes at the last depth:['6']
['updateState(uint256,uint256,uint256,uint256)', 'updateStreak(bool,uint256)']:writes at the last depth:['13']
['updateState(uint256,uint256,uint256,uint256)', 'updateCheckPreviousContractWhitelist(bool)']:writes at the last depth:['33']
['updateState(uint256,uint256,uint256,uint256)', 'updateMinPercentIncrease(uint8)']:writes at the last depth:['11']
['updateState(uint256,uint256,uint256,uint256)', 'updateStreak(bool,uint256)']:writes at the last depth:['15']
['updateState(uint256,uint256,uint256,uint256)', 'updateHoldersDay(bool)']:writes at the last depth:['33', '24']
['updateState(uint256,uint256,uint256,uint256)', 'updateEnableBurns(bool)']:writes at the last depth:['6']
['updateState(uint256,uint256,uint256,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['updateState(uint256,uint256,uint256,uint256)', 'updateBlacklist(address,uint256,bool)']:writes at the last depth:['4']
['updateState(uint256,uint256,uint256,uint256)', 'updateBlacklist(address,uint256,bool)']:writes at the last depth:['4']
['updateState(uint256,uint256,uint256,uint256)', 'updateCalculator(address)']:writes at the last depth:['24', '23']
['updateState(uint256,uint256,uint256,uint256)', 'updateCalculator(address)']:writes at the last depth:['24', '23']
['updateState(uint256,uint256,uint256,uint256)', 'updateHoldersDay(bool)']:writes at the last depth:['33', '24']
['updateState(uint256,uint256,uint256,uint256)', 'updateStateNegative(int256,uint256,uint256,uint256)']:writes at the last depth:['7', '22', '15', '13']
['updateState(uint256,uint256,uint256,uint256)', 'updateStateNegative(int256,uint256,uint256,uint256)']:writes at the last depth:['7', '22', '15', '13']
['updateState(uint256,uint256,uint256,uint256)', 'resetStakeTimeDebug(address,uint256,uint256,bool)']:writes at the last depth:['2']
['updateState(uint256,uint256,uint256,uint256)', 'updateUniWhitelist(address,string,bool)']:writes at the last depth:['5']
['updateState(uint256,uint256,uint256,uint256)', 'updateWhitelist(address,string,bool)']:writes at the last depth:['3']
['updateState(uint256,uint256,uint256,uint256)', 'updateUniWhitelist(address,string,bool)']:writes at the last depth:['5']
['updateState(uint256,uint256,uint256,uint256)', 'updateWhitelist(address,string,bool)']:writes at the last depth:['3']
['updateState(uint256,uint256,uint256,uint256)', 'updateUniWhitelist(address,string,bool)']:writes at the last depth:['5']
['updateState(uint256,uint256,uint256,uint256)', 'updateWhitelist(address,string,bool)']:writes at the last depth:['3']
['updateState(uint256,uint256,uint256,uint256)', 'updateUniWhitelist(address,string,bool)']:writes at the last depth:['5']
['updateState(uint256,uint256,uint256,uint256)', 'updateWhitelist(address,string,bool)']:writes at the last depth:['3']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
['updateState(uint256,uint256,uint256,uint256)', 'updateState(uint256,uint256,uint256,uint256)']:writes at the last depth:['20', '19', '17', '28', '18', '13', '21', '16']
contract coverage: 67.50%
============================
iteration:5
contract coverage: 67.50%
============================
iteration:6
contract coverage: 67.50%
============================
iteration:7
contract coverage: 67.50%
============================
iteration:8
contract coverage: 67.50%
============================
iteration:9
contract coverage: 67.50%
============================
iteration:10
contract coverage: 67.50%
============================
iteration:11
contract coverage: 67.50%
============================
iteration:12
contract coverage: 67.50%
============================
iteration:13
contract coverage: 67.50%
============================
iteration:14
contract coverage: 67.50%
============================
iteration:15
contract coverage: 67.50%
============================
iteration:16
contract coverage: 67.50%
============================
iteration:17
contract coverage: 67.50%
============================
iteration:18
contract coverage: 67.50%
============================
iteration:19
contract coverage: 67.50%
============================
iteration:20
contract coverage: 67.50%
============================
iteration:21
contract coverage: 67.50%
============================
iteration:22
contract coverage: 67.50%
============================
iteration:23
contract coverage: 67.50%
============================
iteration:24
contract coverage: 67.50%
============================
iteration:25
contract coverage: 67.50%
============================
iteration:26
contract coverage: 67.50%
============================
iteration:27
contract coverage: 67.50%
============================
iteration:28
contract coverage: 67.50%
============================
iteration:29
contract coverage: 67.50%
============================
iteration:30
contract coverage: 67.50%
============================
iteration:31
contract coverage: 67.50%
============================
iteration:32
contract coverage: 67.50%
============================
iteration:33
contract coverage: 67.50%
============================
iteration:34
contract coverage: 67.50%
============================
iteration:35
contract coverage: 67.50%
============================
iteration:36
contract coverage: 67.50%
============================
iteration:37
contract coverage: 67.50%
============================
iteration:38
contract coverage: 67.50%
============================
iteration:39
contract coverage: 67.50%
============================
iteration:40
contract coverage: 67.50%
============================
iteration:41
contract coverage: 67.50%
============================
iteration:42
contract coverage: 67.50%
============================
iteration:43
contract coverage: 67.50%
============================
iteration:44
contract coverage: 67.50%
============================
iteration:45
contract coverage: 67.50%
============================
iteration:46
contract coverage: 67.50%
============================
iteration:47
contract coverage: 67.50%
============================
iteration:48
contract coverage: 67.50%
============================
iteration:49
contract coverage: 67.50%
============================
iteration:50
contract coverage: 67.50%
============================
iteration:51
contract coverage: 67.50%
============================
iteration:52
contract coverage: 67.50%
============================
iteration:53
contract coverage: 67.50%
============================
iteration:54
contract coverage: 67.50%
============================
iteration:55
contract coverage: 67.50%
============================
iteration:56
contract coverage: 67.50%
============================
iteration:57
contract coverage: 67.50%
============================
iteration:58
contract coverage: 67.50%
============================
iteration:59
contract coverage: 67.50%
============================
iteration:60
contract coverage: 67.50%
============================
iteration:61
contract coverage: 67.50%
============================
iteration:62
contract coverage: 67.50%
============================
iteration:63
contract coverage: 67.50%
============================
iteration:64
contract coverage: 67.50%
============================
iteration:65
contract coverage: 67.50%
============================
iteration:66
contract coverage: 67.50%
============================
iteration:67
contract coverage: 67.50%
============================
iteration:68
contract coverage: 67.50%
============================
iteration:69
contract coverage: 67.50%
============================
iteration:70
contract coverage: 67.50%
============================
iteration:71
contract coverage: 67.50%
============================
iteration:72
contract coverage: 67.50%
============================
iteration:73
contract coverage: 67.50%
============================
iteration:74
contract coverage: 67.50%
============================
iteration:75
contract coverage: 67.50%
============================
iteration:76
contract coverage: 67.50%
============================
iteration:77
contract coverage: 67.50%
============================
iteration:78
contract coverage: 67.50%
============================
iteration:79
contract coverage: 67.50%
============================
iteration:80
contract coverage: 67.50%
============================
iteration:81
contract coverage: 67.50%
============================
iteration:82
contract coverage: 67.50%
============================
iteration:83
contract coverage: 67.50%
============================
iteration:84
contract coverage: 67.50%
============================
iteration:85
contract coverage: 67.50%
============================
iteration:86
contract coverage: 67.50%
============================
iteration:87
contract coverage: 67.50%
============================
iteration:88
contract coverage: 67.50%
============================
iteration:89
contract coverage: 67.50%
============================
iteration:90
contract coverage: 67.50%
============================
iteration:91
contract coverage: 67.50%
============================
iteration:92
contract coverage: 67.50%
============================
iteration:93
contract coverage: 67.50%
============================
iteration:94
contract coverage: 67.50%
============================
iteration:95
contract coverage: 67.50%
============================
iteration:96
contract coverage: 67.50%
============================
iteration:97
contract coverage: 67.50%
============================
iteration:98
contract coverage: 67.50%
============================
iteration:99
contract coverage: 67.50%
============================
iteration:100
contract coverage: 67.50%
============================
iteration:101
contract coverage: 67.50%
============================
iteration:102
contract coverage: 67.50%
============================
iteration:103
contract coverage: 67.50%
============================
iteration:104
contract coverage: 67.50%
============================
iteration:105
contract coverage: 67.50%
============================
iteration:106
contract coverage: 67.50%
============================
iteration:107
contract coverage: 67.50%
============================
iteration:108
contract coverage: 67.50%
============================
iteration:109
contract coverage: 67.50%
============================
iteration:110
contract coverage: 67.50%
============================
iteration:111
contract coverage: 67.50%
============================
iteration:112
contract coverage: 67.50%
============================
iteration:113
contract coverage: 67.50%
============================
iteration:114
contract coverage: 67.50%
============================
iteration:115
contract coverage: 67.50%
============================
iteration:116
contract coverage: 67.50%
============================
iteration:117
contract coverage: 67.50%
============================
iteration:118
contract coverage: 67.50%
============================
iteration:119
contract coverage: 67.50%
============================
iteration:120
contract coverage: 67.50%
============================
iteration:121
contract coverage: 67.50%
============================
iteration:122
contract coverage: 67.50%
============================
iteration:123
contract coverage: 67.50%
============================
iteration:124
contract coverage: 67.50%
#@statespace
2371 nodes, 2370 edges, 36900 total states
#@coverage
Achieved 2.91% coverage for code: 
#@coverage
Achieved 67.50% coverage for code: 
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: resetStakeTimeDebug(address,uint256,uint256,bool)
PC address: 7801
Estimated Gas Usage: 1290 - 1715
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:857

function resetStakeTimeDebug(address account, uint startTimestamp, uint lastTimestamp, bool migrated) external onlyOwner {      
        stakers[account].lastTimestamp = startTimestamp;
        stakers[account].startTimestamp = lastTimestamp;
        stakers[account].hasMigrated = migrated;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: resetStakeTimeDebug(address,uint256,uint256,bool), txdata: 0x0a75e7720000000100010100000102010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateMaxStreak(uint256)
PC address: 8124
Estimated Gas Usage: 1219 - 1644
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:648

function updateMaxStreak(uint _maxStreak) external onlyOwner {
        maxStreak = _maxStreak;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateMaxStreak(uint256), txdata: 0x0e775b320000000100000280010004400000000240000100020202408000400004080000, decoded_data: (26959950684520271960910339580446605430442296215251975388622139949056,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateCheckPreviousContractWhitelist(bool)
PC address: 8219
Estimated Gas Usage: 1247 - 1672
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:664

function updateCheckPreviousContractWhitelist(bool _checkPreviousStakingContractWhitelist) external onlyOwner {
        checkPreviousStakingContractWhitelist = _checkPreviousStakingContractWhitelist;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateCheckPreviousContractWhitelist(bool), txdata: 0x0e97501f0000000100000202010102404080000100100200000400802000000000020000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateStateNegative(int256,uint256,uint256,uint256)
PC address: 8335
Estimated Gas Usage: 1236 - 1661
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:306

function updateStateNegative(int numerator, uint denominator, uint256 price, uint256 volume) external onlyOracle { 
        require(numerator < minPercentIncrease);
        
        uint secondsSinceLastUpdate = (block.timestamp - lastNegativeUpdate);       
        
        if (secondsSinceLastUpdate < 129600) { 
            negativeStreak++;
        } else {
            negativeStreak = 0;
        }
        
        streak = 1;
        
        uniswapSellerBurnPercent = uniswapSellerBurnPercent + (negativeStreak * 2);     
        
        if(increaseTransferFees) {
            transferBurnPercent = transferBurnPercent + (negativeStreak * 2);       
        }
        
        lastNegativeUpdate = block.timestamp;

        if(useExternalCalc) {
            externalCalculator.negativeDayCallback(numerator, denominator, price, volume);
        }
        
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateStateNegative(int256,uint256,uint256,uint256), txdata: 0x10b2bc750000000100000080000800000000002000400002400001000000000008010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (26959947470620428171932585813319224066379261268409553374098025938944, 0, 0, 0), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PampStaking
Function name: updateStateNegative(int256,uint256,uint256,uint256)
PC address: 8386
Estimated Gas Usage: 2933 - 3688
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:311

if (secondsSinceLastUpdate < 129600) { 
            negativeStreak++;
        } else {
            negativeStreak = 0;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateStateNegative(int256,uint256,uint256,uint256), txdata: 0x10b2bc758000000180100804010280088000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (-57896044578211582812192727581201005593984752465863961107854093697914845003776, 0, 0, 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateTransferBurnFee(uint256)
PC address: 8765
Estimated Gas Usage: 1174 - 1599
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:644

function updateTransferBurnFee(uint _transferBurnFee) external onlyOwner {
        transferBurnPercent = _transferBurnFee;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateTransferBurnFee(uint256), txdata: 0x199ae9cd0000000100000201000008000000008000010020800400401008100040020800, decoded_data: (26959949887303833041189600232024929421068455262734734270187792631808,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateOracle(address)
PC address: 9036
Estimated Gas Usage: 1224 - 1649
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:636

function updateOracle(address _oracle) external onlyOwner {
        oracle = _oracle;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateOracle(address), txdata: 0x1cb44dfc0000000100000201022004081000208010080820000010204010004000040001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateEnableUniswapSellBurns(bool)
PC address: 9214
Estimated Gas Usage: 1180 - 1605
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:616

function updateEnableUniswapSellBurns(bool _enableDirectSellBurns) external onlyOwner {
        enableUniswapDirectBurns = _enableDirectSellBurns;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateEnableUniswapSellBurns(bool), txdata: 0x23c268700000000108020201080808020000000202000000400120800000800010000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateState(uint256,uint256,uint256,uint256)
PC address: 9336
Estimated Gas Usage: 1302 - 1727
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:258

function updateState(uint numerator, uint denominator, uint256 price, uint256 volume) external onlyOracle {  
    
        require(numerator > 0 && denominator > 0 && price > 0 && volume > 0, "Parameters cannot be negative or zero");
        
        if ((numerator < 2 && denominator == 100) || (numerator < 20 && denominator == 1000)) {
            require(mulDiv(1000, numerator, denominator) >= minPercentIncrease, "Increase must be at least minPercentIncrease to count");
        }
        
        uint secondsSinceLastUpdate = (block.timestamp - lastUpdate.timestamp);       
        
        if (secondsSinceLastUpdate < 129600) { 
            streak++;
        } else {
            streak = 1;
        }
        
        if (streak > maxStreak) {
            streak = maxStreak;
        }
        
        if (price >= 1000 && priceTarget1Hit == false) { 
            priceTarget1Hit = true;
            streak = 50;
            emit MassiveCelebration();
            
        } else if (price >= 10000 && priceTarget2Hit == false) {   
            priceTarget2Hit = true;
            streak = maxStreak;
            minStake = 100E18;        
            emit MassiveCelebration();
        }
        
        if(negativeStreak > 0) {
            uniswapSellerBurnPercent = uniswapSellerBurnPercent - (negativeStreak * 2);
            if(increaseTransferFees) {
                transferBurnPercent = transferBurnPercent - (negativeStreak * 2);
            }
            negativeStreak = 0;
        }
        
        
        lastUpdate = update(block.timestamp, numerator, denominator, price, volume, streak);
        
        updates.push(lastUpdate);

    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateState(uint256,uint256,uint256,uint256), txdata: 0x2c36dd5c2000808000104080040010080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (14474898029076772681224283733873819905675083975375961280537281666710077702144, 0, 0, 0), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PampStaking
Function name: updateState(uint256,uint256,uint256,uint256)
PC address: 9637
Estimated Gas Usage: 83598 - 366094
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:266

block.timestamp - lastUpdate.timestamp

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateState(uint256,uint256,uint256,uint256), txdata: 0x2c36dd5c0000000000000000000000000000000000000000000000000000000000000001012001200101010101010101010480010101080101010101010101010101200101028008400020010000028080040001010101200000000000000000000008010801010101010108010104040102010101010101400101800101010101200101, decoded_data: (1, 508859719226540107351900112136607148284406008464553177820902025160114118657, 456730188664823781484579669112304924641832027243730329156715520973544097793, 3620276564542928274017966650791891021274019628850735141014006048085646508289), value: 0x0
Caller: [CREATOR], function: updateState(uint256,uint256,uint256,uint256), txdata: 0x2c36dd5c0000000000000000000000000000000000000000000000000000000000000001010101010110010108010101010101010101010101010101010102020101010180000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101, decoded_data: (1, 454086624466234153726578278171091697760018988946835825471062291620684693761, 57896044618658097711785492504343953926634992332820282019728792003956564819968, 454086624460063511464984254936031011189294057512315937409637584344757371137), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PampStaking
Function name: updateState(uint256,uint256,uint256,uint256)
PC address: 9650
Estimated Gas Usage: 2350 - 2775
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:268

if (secondsSinceLastUpdate < 129600) { 
            streak++;
        } else {
            streak = 1;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateState(uint256,uint256,uint256,uint256), txdata: 0x2c36dd5c0000000000000000000100000000000000000000000000000000000000000000010102022010010101010101010101010101010101080101010101010101010101010101010101040801010801080280100101010220204080010408024008800101010101010101010101010101010101010101010101010101010101010101, decoded_data: (95780971304118053647396689196894323976171195136475136, 454093556437208652994638794652448367862750648537874209730650903748011950337, 454086624460063530467928971903720551713592286620486747164810689762205632640, 454086624460063511464984254936031011189294057512315937409637584344757371137), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateIncreaseTransferFees(bool)
PC address: 10442
Estimated Gas Usage: 1223 - 1648
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:660

function updateIncreaseTransferFees(bool _increaseTransferFees) external onlyOwner {
        increaseTransferFees = _increaseTransferFees;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateIncreaseTransferFees(bool), txdata: 0x4b7864a70000000100000201000400200100080020044000000001401040200840000008, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateWhitelist(address,string,bool)
PC address: 10556
Estimated Gas Usage: 1454 - 1879
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:587

function updateWhitelist(address addr, string calldata reason, bool remove) external onlyOwner {
        if (remove) {
            delete whitelist[addr];
        } else {
            whitelist[addr] = reason;
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateWhitelist(address,string,bool), txdata: 0x4cd4d1dcffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: removeLatestUpdate()
PC address: 10813
Estimated Gas Usage: 1070 - 1495
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:679

function removeLatestUpdate() external onlyOwner {
        delete updates[updates.length - 1];
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeLatestUpdate(), txdata: 0x50f5861d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateStreak(bool,uint256)
PC address: 11046
Estimated Gas Usage: 1273 - 1698
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:564

function updateStreak(bool negative, uint _streak) external onlyOwner {
        if(negative) {
            negativeStreak = _streak;
        } else {
            streak = _streak;
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateStreak(bool,uint256), txdata: 0x5966aa5000000001000000000001001000000080021040000020000010800102002002000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateTokenAddress(address)
PC address: 11180
Estimated Gas Usage: 1179 - 1604
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:540

function updateTokenAddress(PampToken newToken) external onlyOwner {
        require(address(newToken) != address(0));
        token = newToken;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateTokenAddress(address), txdata: 0x6691461a0000000100000202401008000000400001040100000020020000000800000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: transferHook(address,address,uint256,uint256,uint256)
PC address: 11404
Estimated Gas Usage: 1349 - 1774
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:719

function transferHook(address sender, address recipient, uint256 amount, uint256 senderBalance, uint256 recipientBalance) external onlyToken returns (uint256, uint256, uint256) {
        
        if(sender == liquidityStakingContract) {
            
            token.mint(recipient, amount);
            return (senderBalance, recipientBalance, 0);
        }

        if(checkPreviousStakingContractWhitelist){      
            string memory whitelistSender = previousStakingContract.getWhitelist(sender);
            string memory whitelistRecipient = previousStakingContract.getWhitelist(recipient);
            
            if(bytes(whitelistSender).length > 0) {
                whitelist[sender] = whitelistSender;
            }
            if(bytes(whitelistRecipient).length > 0) {
                whitelist[recipient] = whitelistRecipient;
            }
        }
        
        assert(freeze == false);
        assert(sender != recipient);
        assert(amount > 0);
        assert(senderBalance >= amount);
        
        
        uint totalAmount = amount;
        bool shouldAddStaker = true;    
        uint burnedAmount = 0;
        
        if (enableBurns && bytes(whitelist[sender]).length == 0 && bytes(whitelist[recipient]).length == 0) { 
                
            burnedAmount = mulDiv(amount, burnFee(), 100); 
            
            
            if (blacklist[recipient] > 0) {   
                burnedAmount = mulDiv(amount, blacklist[recipient], 100);      
                shouldAddStaker = false;            
            }
            
            
            
            if (burnedAmount > 0) {
                if (burnedAmount > amount) {
                    totalAmount = 0;
                } else {
                    totalAmount = amount.sub(burnedAmount);
                }
                senderBalance = senderBalance.sub(burnedAmount, "ERC20: burn amount exceeds balance");  
            }
        } else if (recipient == uniswapV2Pair) {    
            shouldAddStaker = false;
            if (enableUniswapDirectBurns && bytes(uniwhitelist[sender]).length == 0) { 
                burnedAmount = mulDiv(amount, uniswapSellerBurnPercent, 100);     
                if (burnedAmount > 0) {
                    if (burnedAmount > amount) {
                        totalAmount = 0;
                    } else {
                        totalAmount = amount.sub(burnedAmount);
                    }
                    senderBalance = senderBalance.sub(burnedAmount, "ERC20: burn amount exceeds balance");
                }
            }
        
        }
        
        if (bytes(whitelist[recipient]).length > 0) {
            shouldAddStaker = false;
        } else if (recipientBalance >= minStake && checkPreviousStakingContractWhitelist) { 
            assert(stakers[recipient].hasMigrated);  
        }
        
        
        
        
        if (shouldAddStaker && stakers[recipient].startTimestamp > 0 && recipientBalance > 0) {  
        
            assert(stakers[recipient].hasMigrated);    
            
            uint percent = mulDiv(1000000, totalAmount, recipientBalance);      
            if(percent == 0) {
                percent == 2;
            }
            percent = percent.div(2);       

            if(percent.add(stakers[recipient].startTimestamp) > block.timestamp) {         
                stakers[recipient].startTimestamp = block.timestamp;
            } else {
                stakers[recipient].startTimestamp = stakers[recipient].startTimestamp.add(percent);               
            }
            if(percent.add(stakers[recipient].lastTimestamp) > block.timestamp) {
                stakers[recipient].lastTimestamp = block.timestamp;
            } else {
                stakers[recipient].lastTimestamp = stakers[recipient].lastTimestamp.add(percent);                 
            }
        } else if (shouldAddStaker && recipientBalance == 0 && (stakers[recipient].startTimestamp > 0 || stakers[recipient].lastTimestamp > 0)) { 
            delete stakers[recipient];
            numStakers--;
            emit StakerRemoved(recipient);
        }
        
        senderBalance = senderBalance.sub(totalAmount, "ERC20: transfer amount exceeds balance");       
        recipientBalance = recipientBalance.add(totalAmount);
        
        if (shouldAddStaker && stakers[recipient].startTimestamp == 0 && (totalAmount >= minStake || recipientBalance >= minStake)) {        
            numStakers++;
            stakers[recipient] = staker(block.timestamp, block.timestamp, true);
            emit StakerAdded(recipient);
        }
        
        if (senderBalance < minStake) {        
            
            delete stakers[sender];
            numStakers--;
            emit StakerRemoved(sender);
        } else {
            stakers[sender].startTimestamp = block.timestamp;      
            stakers[sender].lastTimestamp = block.timestamp;       
            stakers[sender].hasMigrated = true;       
        }
    
        return (senderBalance, recipientBalance, burnedAmount);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferHook(address,address,uint256,uint256,uint256), txdata: 0x7154fcde00000001000001040040208000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateBlacklist(address,uint256,bool)
PC address: 16662
Estimated Gas Usage: 1261 - 1686
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:603

function updateBlacklist(address addr, uint256 fee, bool remove) external onlyOwner {
        if (remove) {
            delete blacklist[addr];
        } else {
            blacklist[addr] = fee;
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateBlacklist(address,uint256,bool), txdata: 0x7f9dc75e000000010004080100000104020008048000000810000100804000000001000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateFreeze(bool)
PC address: 16899
Estimated Gas Usage: 1223 - 1648
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:624

function updateFreeze(bool _enableFreeze) external onlyOwner {
        freeze = _enableFreeze;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateFreeze(bool), txdata: 0x82e0cf6b0000000100000201000008000000000001200080041080404004020040000400, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateHoldersDayRewardDenominator(uint256)
PC address: 17032
Estimated Gas Usage: 1150 - 1575
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:656

function updateHoldersDayRewardDenominator(uint _holdersDayRewardDenominator) external onlyOwner {
        holdersDayRewardDenominator = _holdersDayRewardDenominator;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateHoldersDayRewardDenominator(uint256), txdata: 0x8d47f6410000008080100008800800042002020200200002200204040400008020800802, decoded_data: (3464359728800442629443466017026171834585038417554595794822732328208386,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateLiquidityStakingContract(address)
PC address: 17256
Estimated Gas Usage: 1244 - 1669
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:632

function updateLiquidityStakingContract(address _liquidityStakingContract) external onlyOwner {
        liquidityStakingContract = _liquidityStakingContract;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateLiquidityStakingContract(address), txdata: 0x9766b1bb0000000100000200020008100040000810800000044000002040020000000002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateEnableBurns(bool)
PC address: 17409
Estimated Gas Usage: 1266 - 1691
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:583

function updateEnableBurns(bool _enabledBurns) external onlyOwner {
        enableBurns = _enabledBurns;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateEnableBurns(bool), txdata: 0x982496200000000100000201000008000000004020010204108080400080400200020408, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: burn(address,uint256)
PC address: 17805
Estimated Gas Usage: 1229 - 1654
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:848

function burn(address account, uint256 amount) external onlyOwner {     
        token._burn(account, amount);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: burn(address,uint256), txdata: 0x9dc29fac00000001000000000001004080200040000201021080082000400800000104000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updatePreviousStakingContract(address)
PC address: 18065
Estimated Gas Usage: 1224 - 1649
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:640

function updatePreviousStakingContract(PreviousContract previousContract) external onlyOwner {
        previousStakingContract = previousContract;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updatePreviousStakingContract(address), txdata: 0x9ea7077b0000000440400801008008008010100408801020800001080204100180400104, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateUniswapSellBurnPercent(uint8)
PC address: 18218
Estimated Gas Usage: 1246 - 1671
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:620

function updateUniswapSellBurnPercent(uint8 _sellerBurnPercent) external onlyOwner {
        uniswapSellerBurnPercent = _sellerBurnPercent;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateUniswapSellBurnPercent(uint8), txdata: 0x9f37c3b00000000100020180800008040010000001000401800004000402020000100800, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: resetStakeTimeMigrateState(address)
PC address: 18321
Estimated Gas Usage: 1166 - 1591
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:334

function resetStakeTimeMigrateState(address addr) external onlyNextStakingContract returns (uint256 startTimestamp, uint256 lastTimestamp) {
        startTimestamp = stakers[addr].startTimestamp;
        lastTimestamp = stakers[addr].lastTimestamp;
        stakers[addr].lastTimestamp = block.timestamp;
        stakers[addr].startTimestamp = block.timestamp;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: resetStakeTimeMigrateState(address), txdata: 0x9ff379570000000000000000000000000000001000001010208040020800000001018010, decoded_data: ('0x0000001000001010208040020800000001018010',), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateInflationAdjustmentFactor(uint256)
PC address: 18923
Estimated Gas Usage: 1195 - 1620
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:560

function updateInflationAdjustmentFactor(uint256 _inflationAdjustmentFactor) external onlyOwner {
        inflationAdjustmentFactor = _inflationAdjustmentFactor;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateInflationAdjustmentFactor(uint256), txdata: 0xa512ceba0000004000800108080810020020000208020001100820008002020040021000, decoded_data: (1725489244500827015260357336360623374369876475854494448856624196096000,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateMaxStakingDays(uint256)
PC address: 19018
Estimated Gas Usage: 1217 - 1642
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:652

function updateMaxStakingDays(uint _maxStakingDays) external onlyOwner {
        maxStakingDays = _maxStakingDays;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateMaxStakingDays(uint256), txdata: 0xa5595ff60000000100000202100008400080000000000002084040400408000802000210, decoded_data: (26959949893973253728576907784607506207433654598658196433087779308048,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateMinStakeDurationDays(uint8)
PC address: 19354
Estimated Gas Usage: 1179 - 1604
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:572

function updateMinStakeDurationDays(uint8 _minStakeDurationDays) external onlyOwner {
        minStakeDurationDays = _minStakeDurationDays;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateMinStakeDurationDays(uint8), txdata: 0xad16790f0000000100040201088008020408020008400001400880400400200410010000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateMyStakes(address,uint256,uint256)
PC address: 19511
Estimated Gas Usage: 1305 - 1730
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:371

function updateMyStakes(address stakerAddress, uint256 balance, uint256 totalSupply) external onlyToken returns (uint256) {     
        
        assert(balance > 0);
        
        staker memory thisStaker = stakers[stakerAddress];
        
        assert(thisStaker.lastTimestamp > 0); 
        
        assert(thisStaker.startTimestamp > 0);
        
        assert(thisStaker.hasMigrated);     
        
        assert(block.timestamp > thisStaker.lastTimestamp);
        assert(lastUpdate.timestamp > thisStaker.lastTimestamp);
        
        uint daysStaked = block.timestamp.sub(thisStaker.startTimestamp) / 86400;  
        
        assert(daysStaked >= minStakeDurationDays);
        assert(balance >= minStake);
        
        assert(thisStaker.lastTimestamp >= thisStaker.startTimestamp); 
        
        uint numTokens = iterativelyCalculateOwedRewards(thisStaker.lastTimestamp, thisStaker.startTimestamp, balance, stakerAddress, totalSupply);
        
        stakers[stakerAddress].lastTimestamp = block.timestamp;        
        emit StakesUpdated(numTokens);
        
        return numTokens;       
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateMyStakes(address,uint256,uint256), txdata: 0xb1fba3ed000000018002020101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateMyStakes(address,uint256,uint256)
PC address: 19666
Estimated Gas Usage: 4113 - 6097
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateMyStakes(address,uint256,uint256), txdata: 0xb1fba3ed000000000000000000000000000000800002000400000080102001101010010001800101012001400101010401010101010101010201040101010401014004010000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000008000020004000000801020011010100100', 678476201699671377098711718102475707511646395523483959823904673028043179009, 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateUseExternalCalcIterative(bool)
PC address: 20074
Estimated Gas Usage: 1178 - 1603
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:555

function updateUseExternalCalcIterative(bool _useExternalCalcIterative) external onlyOwner {
        useExternalCalcIterative = _useExternalCalcIterative;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateUseExternalCalcIterative(bool), txdata: 0xb3fb84e20000000000000000000000000480008001010480000100004040800010008000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updates(uint256)
PC address: 20116
Estimated Gas Usage: 1156 - 1251
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:215

update[] public updates

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updates(uint256), txdata: 0xb4c2f7270000000000000101000000000000000000000000000000000000000000000000, decoded_data: (1613215145994376956305797881764370268938305349227256869814272,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateMinStakes(uint256)
PC address: 20261
Estimated Gas Usage: 1216 - 1641
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:576

function updateMinStakes(uint _minStake) external onlyOwner {
        minStake = _minStake;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateMinStakes(uint256), txdata: 0xb51ff3b70000000100000208200408020000010001200180041080000000000100002000, decoded_data: (26959949932028566032627920464788957667515710713228023955458751471616,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateCalculator(address)
PC address: 20356
Estimated Gas Usage: 1244 - 1669
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:545

function updateCalculator(CalculatorInterface calc) external onlyOwner {
        if(address(calc) == address(0)) {
            externalCalculator = CalculatorInterface(address(0));
            useExternalCalc = false;
        } else {
            externalCalculator = calc;
            useExternalCalc = true;
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateCalculator(address), txdata: 0xb5d011fd0000000120080804408080020100108040048010104000021020002008201010, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateUniswapPair(address)
PC address: 21568
Estimated Gas Usage: 1201 - 1626
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:611

function updateUniswapPair(address addr) external onlyOwner {
        require(addr != address(0));
        uniswapV2Pair = addr;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateUniswapPair(address), txdata: 0xc12b7c4e0000000100000201000008008000000100108008020800000000000000028008, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateHoldersDay(bool)
PC address: 22811
Estimated Gas Usage: 1200 - 1625
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:530

function updateHoldersDay(bool _enableHoldersDay) external onlyOwner {
        enableHoldersDay = _enableHoldersDay;
        if(enableHoldersDay) {
            deleteHoldersDayRewarded();
            emit HoldersDayEnabled();
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateHoldersDay(bool), txdata: 0xd2ceaeb80000000100000201000008088004000040002000100080000004020820100000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateNextStakingContract(address)
PC address: 23358
Estimated Gas Usage: 1155 - 1580
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:628

function updateNextStakingContract(address nextContract) external onlyOwner {
        nextStakingContract = nextContract;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateNextStakingContract(address), txdata: 0xf07484c80000000000000020008020000002400004080010010040208020400200080040, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: transferOwnership(address)
PC address: 23511
Estimated Gas Usage: 1177 - 1602
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:668

function transferOwnership(address newOwner) external onlyOwner {
        assert(newOwner != address(0));
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000001000202080028010080208400880000180, decoded_data: ('0x0000001000202080028010080208400880000180',), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateUniWhitelist(address,string,bool)
PC address: 23902
Estimated Gas Usage: 1452 - 1877
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:595

function updateUniWhitelist(address addr, string calldata reason, bool remove) external onlyOwner {
        if (remove) {
            delete uniwhitelist[addr];
        } else {
            uniwhitelist[addr] = reason;
        }     
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateUniWhitelist(address,string,bool), txdata: 0xfdd8c75bffffff8001024010040808080408800202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: updateMinPercentIncrease(uint8)
PC address: 24159
Estimated Gas Usage: 1265 - 1690
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:579

function updateMinPercentIncrease(uint8 _minIncrease) external onlyOwner {
        minPercentIncrease = _minIncrease;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateMinPercentIncrease(uint8), txdata: 0xfff505d50000000100000201000008000000004004040802014000040002040080100140, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PampStaking
Function name: getDaysStaked(address)
PC address: 24284
Estimated Gas Usage: 1352 - 2015
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:22

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getDaysStaked(address), txdata: 0x9b3e0b640000000200010100020200040000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PampStaking
Function name: iterativelyCalculateOwedRewards(uint256,uint256,uint256,address,uint256)
PC address: 24285
Estimated Gas Usage: 2441 - 3812
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:17

sub(a, b, "SafeMath: subtraction overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: iterativelyCalculateOwedRewards(uint256,uint256,uint256,address,uint256), txdata: 0xbb9b05c600000001010000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (27065258958819292762336237232756948502645236412265097763553057701888, 0, 0, '0x0000000000000000000000000000000000000000', 0), value: 0x0


time_used: 36050.31103801727 seconds
#@contract_info_time
0x738d3cec4e685a2546ab6c3b055fd6b8c1198093.sol:0.6.12:PampStaking:36050.31103801727:36100:60:36000
