++++ 0x6d4988238b6396d15a63ed675d96dd4d86a70f2f.sol  :  0.5.0  :  WithdrawStorage ++++
655251735853922694967911662580490717076041977877 is added into actors.
Starting preprocessing.
number of genesis states: 1
total instructions: 7810
['constructor']:writes at the last depth:['0', '2', '3', '4']
preprocessing: Achieved 62.25% coverage.
dynamic svars:[]
static svars:['0', '1', '4', '3', '2']
Ending preprocessing.
preprocessing time(s): 43.8032705783844
contract coverage: 39.05%
setAddress(bytes32,address):0.0 is not considered
Function Reads: State variables read in conditions
	setRewardsAmount(address,uint256):['1']
	getLastWithdrawalPrice(address,address):['1']
	getWithdrawalLimitBalance(address,address):['1']
	getCumulativePrice(address):['1']
	getStorageAddress():['1']
	kill():['4']
	getWithdrawalLimitTotal(address,address):['1']
	getPendingWithdrawal(address,address):['1']
	renounceOwnership():['0']
	setWithdrawalLimitTotal(address,address,uint256):['1']
	setLastWithdrawalPrice(address,address,uint256):['1']
	owner():[]
	isOwner():[]
	setStorage(address):['0']
	setWithdrawalLimitBalance(address,address,uint256):['1']
	changeOwner(address):['0']
	setCumulativePrice(address,uint256):['1']
	_owner():[]
	configAddress():[]
	getRewardsAmount(address):['1']
	setPendingWithdrawal(address,address,uint256):['1']
	transferOwnership(address):['0']
	createStorage():['0', '1']
	deleteAddress(bytes32):[]
	getAddress(bytes32):[]
	deleteBool(bytes32):[]
	setInt(bytes32,int256):[]
	deleteBytes(bytes32):[]
	setString(bytes32,string):[]
	getBool(bytes32):[]
	deleteInt(bytes32):[]
	getString(bytes32):[]
	setBool(bytes32,bool):[]
	getUint(bytes32):[]
	getBytes(bytes32):[]
	setAddress(bytes32,address):[]
	setBytes(bytes32,bytes32):[]
	getInt(bytes32):[]
	setUint(bytes32,uint256):[]
	deleteUint(bytes32):[]
	deleteString(bytes32):[]
	validateAddress(address,address):[]
	validateAddresses(address,address,address):[]
	validateGroups(address,address,address):[]
	validateIllegalAddress(address):[]
	validateGroup(address,address):[]
Function Writes: State variables written
	renounceOwnership():['0']
	setStorage(address):['1']
	constructor:['0']
	transferOwnership(address):['0']
	createStorage():['1']
setAddress(bytes32,address):0.0 is not considered
============================
iteration:3
targets:['getCumulativePrice(address)', 'getRewardsAmount(address)', 'getLastWithdrawalPrice(address,address)', 'getWithdrawalLimitBalance(address,address)', 'getWithdrawalLimitTotal(address,address)', 'getPendingWithdrawal(address,address)', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'setLastWithdrawalPrice(address,address,uint256)', 'getStorageAddress()', 'setRewardsAmount(address,uint256)', 'createStorage()', 'changeOwner(address)']
['renounceOwnership()']:writes at the last depth:['0']
['setStorage(address)']:writes at the last depth:['1']
['transferOwnership(address)']:writes at the last depth:['0']
['createStorage()']:writes at the last depth:['1']
contract coverage: 60.17%
============================
iteration:4
['createStorage()', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 60.17%
============================
iteration:5
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 60.17%
============================
iteration:6
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 60.17%
============================
iteration:7
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 60.17%
============================
iteration:8
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 60.17%
============================
iteration:9
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 60.17%
============================
iteration:10
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 60.17%
============================
iteration:11
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 60.17%
============================
iteration:12
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 60.17%
============================
iteration:13
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 60.17%
============================
iteration:14
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 60.17%
============================
iteration:15
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 60.17%
============================
iteration:16
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 60.17%
============================
iteration:17
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 60.17%
============================
iteration:18
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 60.17%
============================
iteration:19
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:20
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)', 'createStorage()']:writes at the last depth:['1']
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:21
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'renounceOwnership()', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'renounceOwnership()', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'renounceOwnership()', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'renounceOwnership()', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'renounceOwnership()', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'renounceOwnership()', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'renounceOwnership()', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'renounceOwnership()', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'renounceOwnership()', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'renounceOwnership()', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'renounceOwnership()', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'renounceOwnership()', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:22
['createStorage()', 'setCumulativePrice(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:23
['createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:24
['createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:25
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:26
['createStorage()', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setAddress(bytes32,address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:27
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:28
['createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:29
['createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:30
['createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:31
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:32
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:33
['createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:34
['createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:35
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:36
['createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:37
['createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)', 'renounceOwnership()']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)', 'setStorage(address)']:writes at the last depth:['1']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)', 'changeOwner(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)', 'createStorage()']:writes at the last depth:['1']
['createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)', 'setAddress(bytes32,address)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 61.40%
============================
iteration:38
contract coverage: 61.40%
============================
iteration:39
contract coverage: 61.40%
============================
iteration:40
contract coverage: 61.40%
============================
iteration:41
contract coverage: 61.40%
============================
iteration:42
contract coverage: 61.40%
============================
iteration:43
contract coverage: 61.40%
============================
iteration:44
contract coverage: 61.40%
============================
iteration:45
contract coverage: 61.40%
============================
iteration:46
contract coverage: 61.40%
============================
iteration:47
contract coverage: 61.40%
============================
iteration:48
contract coverage: 61.40%
============================
iteration:49
contract coverage: 61.40%
============================
iteration:50
contract coverage: 61.40%
============================
iteration:51
contract coverage: 61.40%
============================
iteration:52
contract coverage: 61.40%
============================
iteration:53
contract coverage: 61.40%
============================
iteration:54
contract coverage: 61.40%
============================
iteration:55
contract coverage: 61.40%
#@statespace
21715 nodes, 21714 edges, 271947 total states
#@coverage
Achieved 2.29% coverage for code: 60806040523480156200001157600080fd5b5060405160208062004e52833981018060405260208110156200003357600080fd5b8101908080519060200190929190505050806200005e6200020b640100000000026401000000009004565b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200016562000213565b604051809103906000f08015801562000182573d6000803e3d6000fd5b50600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000224565b600033905090565b604051610ad3806200437f83390190565b61414b80620002346000396000f3fe608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630630ba681461013857806306aa2d48146101935780630ac252b9146102185780631382da2c1461029d578063393a4d341461030257806341c0e1b5146103595780634f9bce8f146103705780635699c7b1146103f5578063715018a61461047a57806376446e831461049157806383b41a401461050c5780638da5cb5b146105875780638f32d59b146105de5780639137c1a71461060d578063a6f797aa1461065e578063a6f9dae1146106d9578063afca58a71461072a578063b2bdfa7b14610799578063d6c31871146107f0578063dbe9345114610847578063dcaf498e146108ac578063f2fde38b14610927578063fb971d0114610978575b600080fd5b34801561014457600080fd5b506101916004803603604081101561015b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061098f565b005b34801561019f57600080fd5b50610202600480360360408110156101b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bc0565b6040518082815260200191505060405180910390f35b34801561022457600080fd5b506102876004803603604081101561023b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c82565b6040518082815260200191505060405180910390f35b3480156102a957600080fd5b506102ec600480360360208110156102c057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d44565b6040518082815260200191505060405180910390f35b34801561030e57600080fd5b50610317610e04565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561036557600080fd5b5061036e610ef4565b005b34801561037c57600080fd5b506103df6004803603604081101561039357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ff4565b6040518082815260200191505060405180910390f35b34801561040157600080fd5b506104646004803603604081101561041857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110b6565b6040518082815260200191505060405180910390f35b34801561048657600080fd5b5061048f611178565b005b34801561049d57600080fd5b5061050a600480360360608110156104b457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112b3565b005b34801561051857600080fd5b506105856004803603606081101561052f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114e6565b005b34801561059357600080fd5b5061059c611719565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105ea57600080fd5b506105f3611742565b604051808215151515815260200191505060405180910390f35b34801561061957600080fd5b5061065c6004803603602081101561063057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117a0565b005b34801561066a57600080fd5b506106d76004803603606081101561068157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611860565b005b3480156106e557600080fd5b50610728600480360360208110156106fc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a93565b005b34801561073657600080fd5b506107836004803603604081101561074d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611be7565b6040518082815260200191505060405180910390f35b3480156107a557600080fd5b506107ae611e1c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107fc57600080fd5b50610805611e42565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561085357600080fd5b506108966004803603602081101561086a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e6c565b6040518082815260200191505060405180910390f35b3480156108b857600080fd5b50610925600480360360608110156108cf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f2c565b005b34801561093357600080fd5b506109766004803603602081101561094a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061215f565b005b34801561098457600080fd5b5061098d6121e7565b005b610997612396565b73ffffffffffffffffffffffffffffffffffffffff166349616d79336109bb6123c0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610a1c57600080fd5b505afa158015610a30573d6000803e3d6000fd5b505050506040513d6020811015610a4657600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015610b0657600080fd5b505afa158015610b1a573d6000803e3d6000fd5b50505050610b266123ea565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a610b4a846124da565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610ba457600080fd5b505af1158015610bb8573d6000803e3d6000fd5b505050505050565b6000610bca6123ea565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610bef858561256d565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610c3f57600080fd5b505afa158015610c53573d6000803e3d6000fd5b505050506040513d6020811015610c6957600080fd5b8101908080519060200190929190505050905092915050565b6000610c8c6123ea565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610cb18585612644565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610d0157600080fd5b505afa158015610d15573d6000803e3d6000fd5b505050506040513d6020811015610d2b57600080fd5b8101908080519060200190929190505050905092915050565b6000610d4e6123ea565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610d728461271b565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610dc257600080fd5b505afa158015610dd6573d6000803e3d6000fd5b505050506040513d6020811015610dec57600080fd5b81019080805190602001909291905050509050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610ecc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fb9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6f6e6c79206f776e6572206d6574686f6400000000000000000000000000000081525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000610ffe6123ea565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f561102385856127ae565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561107357600080fd5b505afa158015611087573d6000803e3d6000fd5b505050506040513d602081101561109d57600080fd5b8101908080519060200190929190505050905092915050565b60006110c06123ea565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56110e58585612885565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561113557600080fd5b505afa158015611149573d6000803e3d6000fd5b505050506040513d602081101561115f57600080fd5b8101908080519060200190929190505050905092915050565b611180611742565b15156111f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6112bb612396565b73ffffffffffffffffffffffffffffffffffffffff166349616d79336112df6123c0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561134057600080fd5b505afa158015611354573d6000803e3d6000fd5b505050506040513d602081101561136a57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561142a57600080fd5b505afa15801561143e573d6000803e3d6000fd5b5050505061144a6123ea565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a61146f85856127ae565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156114c957600080fd5b505af11580156114dd573d6000803e3d6000fd5b50505050505050565b6114ee612396565b73ffffffffffffffffffffffffffffffffffffffff166349616d79336115126123c0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561157357600080fd5b505afa158015611587573d6000803e3d6000fd5b505050506040513d602081101561159d57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561165d57600080fd5b505afa158015611671573d6000803e3d6000fd5b5050505061167d6123ea565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6116a2858561256d565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156116fc57600080fd5b505af1158015611710573d6000803e3d6000fd5b50505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661178461295c565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b6117a8611742565b151561181c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611868612396565b73ffffffffffffffffffffffffffffffffffffffff166349616d793361188c6123c0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156118ed57600080fd5b505afa158015611901573d6000803e3d6000fd5b505050506040513d602081101561191757600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156119d757600080fd5b505afa1580156119eb573d6000803e3d6000fd5b505050506119f76123ea565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611a1c8585612644565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611a7657600080fd5b505af1158015611a8a573d6000803e3d6000fd5b50505050505050565b611a9b611742565b1515611b0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a6f9dae1826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611bcc57600080fd5b505af1158015611be0573d6000803e3d6000fd5b5050505050565b6000611bf1612396565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611c156123c0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611c7657600080fd5b505afa158015611c8a573d6000803e3d6000fd5b505050506040513d6020811015611ca057600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015611d6057600080fd5b505afa158015611d74573d6000803e3d6000fd5b50505050611d806123ea565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611da48561271b565b846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611dfe57600080fd5b505af1158015611e12573d6000803e3d6000fd5b5050505092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000611e766123ea565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5611e9a846124da565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611eea57600080fd5b505afa158015611efe573d6000803e3d6000fd5b505050506040513d6020811015611f1457600080fd5b81019080805190602001909291905050509050919050565b611f34612396565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611f586123c0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611fb957600080fd5b505afa158015611fcd573d6000803e3d6000fd5b505050506040513d6020811015611fe357600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156120a357600080fd5b505afa1580156120b7573d6000803e3d6000fd5b505050506120c36123ea565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6120e88585612885565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561214257600080fd5b505af1158015612156573d6000803e3d6000fd5b50505050505050565b612167611742565b15156121db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6121e481612964565b50565b6121ef611742565b1515612263576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612329576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f73746f726167652069732073657474656400000000000000000000000000000081525060200191505060405180910390fd5b6000612333612aed565b604051809103906000f08015801561234f573d6000803e3d6000fd5b50905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156124b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008160405160200180807f5f72657761726473416d6f756e74000000000000000000000000000000000000815250600e018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b6000828260405160200180807f5f6c6173745769746864726177616c50726963650000000000000000000000008152506014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b6000828260405160200180807f5f7769746864726177616c4c696d697442616c616e63650000000000000000008152506017018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b60008160405160200180807f5f63756d756c61746976655072696365000000000000000000000000000000008152506010018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b6000828260405160200180807f5f7769746864726177616c4c696d6974546f74616c00000000000000000000008152506015018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b6000828260405160200180807f5f70656e64696e675769746864726177616c00000000000000000000000000008152506012018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612a2f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60405161162280612afe8339019056fe6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b506115c2806100606000396000f3fe608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a72305820dfaee049add41854d9b4abc88b43345143c1d745b0e709c7f3d4f868e0c7470a0029a165627a7a72305820e55cc82be31975f1e514027578a4d0d9eff964dcd049d1bc2fb326d6ac3aa7140029608060405234801561001057600080fd5b50610ab3806100206000396000f3fe60806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806349616d79146100725780636dd893b9146100e3578063a219296314610174578063b292b54914610205578063d16ff47014610256575b600080fd5b34801561007e57600080fd5b506100e16004803603604081101561009557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102c7565b005b3480156100ef57600080fd5b506101726004803603606081101561010657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103d9565b005b34801561018057600080fd5b506102036004803603606081101561019757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610526565b005b34801561021157600080fd5b506102546004803603602081101561022857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107bd565b005b34801561026257600080fd5b506102c56004803603604081101561027957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108d0565b005b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156103d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561039957808201518184015260208101905061037e565b50505050905090810190601f1680156103c65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561041257610521565b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c206164647265737300000000000000000081525090151561051f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104e45780820151818401526020810190506104c9565b50505050905090810190601f1680156105115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b8173ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156105bf57600080fd5b505afa1580156105d3573d6000803e3d6000fd5b505050506040513d60208110156105e957600080fd5b810190808051906020019092919050505015610604576107b8565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561069d57600080fd5b505afa1580156106b1573d6000803e3d6000fd5b505050506040513d60208110156106c757600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561077b578082015181840152602081019050610760565b50505050905090810190601f1680156107a85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156108cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610891578082015181840152602081019050610876565b50505050905090810190601f1680156108be5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561096957600080fd5b505afa15801561097d573d6000803e3d6000fd5b505050506040513d602081101561099357600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610a82576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a47578082015181840152602081019050610a2c565b50505050905090810190601f168015610a745780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505056fea165627a7a72305820de18ce4b180fa4a03a925a42f245369440f70da417869b70570a8e04a7d5493d0029
#@coverage
Achieved 1.08% coverage for code: 608060405234801561001057600080fd5b50610ab3806100206000396000f3fe60806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806349616d79146100725780636dd893b9146100e3578063a219296314610174578063b292b54914610205578063d16ff47014610256575b600080fd5b34801561007e57600080fd5b506100e16004803603604081101561009557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102c7565b005b3480156100ef57600080fd5b506101726004803603606081101561010657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103d9565b005b34801561018057600080fd5b506102036004803603606081101561019757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610526565b005b34801561021157600080fd5b506102546004803603602081101561022857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107bd565b005b34801561026257600080fd5b506102c56004803603604081101561027957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108d0565b005b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156103d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561039957808201518184015260208101905061037e565b50505050905090810190601f1680156103c65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561041257610521565b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c206164647265737300000000000000000081525090151561051f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104e45780820151818401526020810190506104c9565b50505050905090810190601f1680156105115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b8173ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156105bf57600080fd5b505afa1580156105d3573d6000803e3d6000fd5b505050506040513d60208110156105e957600080fd5b810190808051906020019092919050505015610604576107b8565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561069d57600080fd5b505afa1580156106b1573d6000803e3d6000fd5b505050506040513d60208110156106c757600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561077b578082015181840152602081019050610760565b50505050905090810190601f1680156107a85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156108cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610891578082015181840152602081019050610876565b50505050905090810190601f1680156108be5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561096957600080fd5b505afa15801561097d573d6000803e3d6000fd5b505050506040513d602081101561099357600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610a82576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a47578082015181840152602081019050610a2c565b50505050905090810190601f168015610a745780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505056fea165627a7a72305820de18ce4b180fa4a03a925a42f245369440f70da417869b70570a8e04a7d5493d002900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
#@coverage
Achieved 61.40% coverage for code: 608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630630ba681461013857806306aa2d48146101935780630ac252b9146102185780631382da2c1461029d578063393a4d341461030257806341c0e1b5146103595780634f9bce8f146103705780635699c7b1146103f5578063715018a61461047a57806376446e831461049157806383b41a401461050c5780638da5cb5b146105875780638f32d59b146105de5780639137c1a71461060d578063a6f797aa1461065e578063a6f9dae1146106d9578063afca58a71461072a578063b2bdfa7b14610799578063d6c31871146107f0578063dbe9345114610847578063dcaf498e146108ac578063f2fde38b14610927578063fb971d0114610978575b600080fd5b34801561014457600080fd5b506101916004803603604081101561015b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061098f565b005b34801561019f57600080fd5b50610202600480360360408110156101b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bc0565b6040518082815260200191505060405180910390f35b34801561022457600080fd5b506102876004803603604081101561023b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c82565b6040518082815260200191505060405180910390f35b3480156102a957600080fd5b506102ec600480360360208110156102c057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d44565b6040518082815260200191505060405180910390f35b34801561030e57600080fd5b50610317610e04565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561036557600080fd5b5061036e610ef4565b005b34801561037c57600080fd5b506103df6004803603604081101561039357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ff4565b6040518082815260200191505060405180910390f35b34801561040157600080fd5b506104646004803603604081101561041857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110b6565b6040518082815260200191505060405180910390f35b34801561048657600080fd5b5061048f611178565b005b34801561049d57600080fd5b5061050a600480360360608110156104b457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112b3565b005b34801561051857600080fd5b506105856004803603606081101561052f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114e6565b005b34801561059357600080fd5b5061059c611719565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105ea57600080fd5b506105f3611742565b604051808215151515815260200191505060405180910390f35b34801561061957600080fd5b5061065c6004803603602081101561063057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117a0565b005b34801561066a57600080fd5b506106d76004803603606081101561068157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611860565b005b3480156106e557600080fd5b50610728600480360360208110156106fc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a93565b005b34801561073657600080fd5b506107836004803603604081101561074d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611be7565b6040518082815260200191505060405180910390f35b3480156107a557600080fd5b506107ae611e1c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107fc57600080fd5b50610805611e42565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561085357600080fd5b506108966004803603602081101561086a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e6c565b6040518082815260200191505060405180910390f35b3480156108b857600080fd5b50610925600480360360608110156108cf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f2c565b005b34801561093357600080fd5b506109766004803603602081101561094a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061215f565b005b34801561098457600080fd5b5061098d6121e7565b005b610997612396565b73ffffffffffffffffffffffffffffffffffffffff166349616d79336109bb6123c0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610a1c57600080fd5b505afa158015610a30573d6000803e3d6000fd5b505050506040513d6020811015610a4657600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015610b0657600080fd5b505afa158015610b1a573d6000803e3d6000fd5b50505050610b266123ea565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a610b4a846124da565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610ba457600080fd5b505af1158015610bb8573d6000803e3d6000fd5b505050505050565b6000610bca6123ea565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610bef858561256d565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610c3f57600080fd5b505afa158015610c53573d6000803e3d6000fd5b505050506040513d6020811015610c6957600080fd5b8101908080519060200190929190505050905092915050565b6000610c8c6123ea565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610cb18585612644565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610d0157600080fd5b505afa158015610d15573d6000803e3d6000fd5b505050506040513d6020811015610d2b57600080fd5b8101908080519060200190929190505050905092915050565b6000610d4e6123ea565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610d728461271b565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610dc257600080fd5b505afa158015610dd6573d6000803e3d6000fd5b505050506040513d6020811015610dec57600080fd5b81019080805190602001909291905050509050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610ecc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fb9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6f6e6c79206f776e6572206d6574686f6400000000000000000000000000000081525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000610ffe6123ea565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f561102385856127ae565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561107357600080fd5b505afa158015611087573d6000803e3d6000fd5b505050506040513d602081101561109d57600080fd5b8101908080519060200190929190505050905092915050565b60006110c06123ea565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56110e58585612885565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561113557600080fd5b505afa158015611149573d6000803e3d6000fd5b505050506040513d602081101561115f57600080fd5b8101908080519060200190929190505050905092915050565b611180611742565b15156111f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6112bb612396565b73ffffffffffffffffffffffffffffffffffffffff166349616d79336112df6123c0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561134057600080fd5b505afa158015611354573d6000803e3d6000fd5b505050506040513d602081101561136a57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561142a57600080fd5b505afa15801561143e573d6000803e3d6000fd5b5050505061144a6123ea565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a61146f85856127ae565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156114c957600080fd5b505af11580156114dd573d6000803e3d6000fd5b50505050505050565b6114ee612396565b73ffffffffffffffffffffffffffffffffffffffff166349616d79336115126123c0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561157357600080fd5b505afa158015611587573d6000803e3d6000fd5b505050506040513d602081101561159d57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561165d57600080fd5b505afa158015611671573d6000803e3d6000fd5b5050505061167d6123ea565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6116a2858561256d565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156116fc57600080fd5b505af1158015611710573d6000803e3d6000fd5b50505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661178461295c565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b6117a8611742565b151561181c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611868612396565b73ffffffffffffffffffffffffffffffffffffffff166349616d793361188c6123c0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156118ed57600080fd5b505afa158015611901573d6000803e3d6000fd5b505050506040513d602081101561191757600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156119d757600080fd5b505afa1580156119eb573d6000803e3d6000fd5b505050506119f76123ea565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611a1c8585612644565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611a7657600080fd5b505af1158015611a8a573d6000803e3d6000fd5b50505050505050565b611a9b611742565b1515611b0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a6f9dae1826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611bcc57600080fd5b505af1158015611be0573d6000803e3d6000fd5b5050505050565b6000611bf1612396565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611c156123c0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611c7657600080fd5b505afa158015611c8a573d6000803e3d6000fd5b505050506040513d6020811015611ca057600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015611d6057600080fd5b505afa158015611d74573d6000803e3d6000fd5b50505050611d806123ea565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611da48561271b565b846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611dfe57600080fd5b505af1158015611e12573d6000803e3d6000fd5b5050505092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000611e766123ea565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5611e9a846124da565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611eea57600080fd5b505afa158015611efe573d6000803e3d6000fd5b505050506040513d6020811015611f1457600080fd5b81019080805190602001909291905050509050919050565b611f34612396565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611f586123c0565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611fb957600080fd5b505afa158015611fcd573d6000803e3d6000fd5b505050506040513d6020811015611fe357600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156120a357600080fd5b505afa1580156120b7573d6000803e3d6000fd5b505050506120c36123ea565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6120e88585612885565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561214257600080fd5b505af1158015612156573d6000803e3d6000fd5b50505050505050565b612167611742565b15156121db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6121e481612964565b50565b6121ef611742565b1515612263576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612329576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f73746f726167652069732073657474656400000000000000000000000000000081525060200191505060405180910390fd5b6000612333612aed565b604051809103906000f08015801561234f573d6000803e3d6000fd5b50905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156124b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008160405160200180807f5f72657761726473416d6f756e74000000000000000000000000000000000000815250600e018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b6000828260405160200180807f5f6c6173745769746864726177616c50726963650000000000000000000000008152506014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b6000828260405160200180807f5f7769746864726177616c4c696d697442616c616e63650000000000000000008152506017018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b60008160405160200180807f5f63756d756c61746976655072696365000000000000000000000000000000008152506010018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b6000828260405160200180807f5f7769746864726177616c4c696d6974546f74616c00000000000000000000008152506015018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b6000828260405160200180807f5f70656e64696e675769746864726177616c00000000000000000000000000008152506012018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612a2f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60405161162280612afe8339019056fe6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b506115c2806100606000396000f3fe608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a72305820dfaee049add41854d9b4abc88b43345143c1d745b0e709c7f3d4f868e0c7470a0029a165627a7a72305820e55cc82be31975f1e514027578a4d0d9eff964dcd049d1bc2fb326d6ac3aa7140029
#@coverage
Achieved 1.24% coverage for code: 6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b506115c2806100606000396000f3fe608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a72305820dfaee049add41854d9b4abc88b43345143c1d745b0e709c7f3d4f868e0c7470a00290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
#@coverage
Achieved 15.25% coverage for code: 608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a72305820dfaee049add41854d9b4abc88b43345143c1d745b0e709c7f3d4f868e0c7470a0029
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setRewardsAmount(address,uint256)
PC address: 2825
Estimated Gas Usage: 8770 - 114253
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6d4988238b6396d15a63ed675d96dd4d86a70f2f.sol:430

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [SOMEGUY], function: setRewardsAmount(address,uint256), txdata: 0x0630ba6800000000000000000000000000008002000000000200800000000020024002400000000000000000000000000000408000000080001000000008800000000801, decoded_data: ('0x0000800200000000020080000000002002400240', 5618742442608677132851880469351934430545921), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setRewardsAmount(address,uint256)
PC address: 2983
Estimated Gas Usage: 8770 - 114253
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6d4988238b6396d15a63ed675d96dd4d86a70f2f.sol:432

eternalStorage().setUint(getRewardsAmountKey(_property), _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setPendingWithdrawal(address,address,uint256), txdata: 0xdcaf498e000000000000000000000000000000000000000000000000000404000100000000000000000000000000000000000000000110400000000400102000000000040000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000004040001000000', '0x0000000000011040000000040010200000000004', 0), value: 0x0
Caller: [SOMEGUY], function: setRewardsAmount(address,uint256), txdata: 0x0630ba6800000000000000000000000000000000000400080001000000000220400020000000000000000000000000000100011000100000040001104080000200000408, decoded_data: ('0x0000000000040008000100000000022040002000', 5709083327710718770469708219195173075685475336), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setWithdrawalLimitTotal(address,address,uint256)
PC address: 5165
Estimated Gas Usage: 9051 - 114629
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6d4988238b6396d15a63ed675d96dd4d86a70f2f.sol:483

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [SOMEGUY], function: setWithdrawalLimitTotal(address,address,uint256), txdata: 0x76446e83000000000000000000000000000000208000108000008004400004001000100000000000000000000000000020000020084080010000040004001000008000200000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000002080001080000080044000040010001000', '0x2000002008408001000004000400100000800020', 0), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setWithdrawalLimitTotal(address,address,uint256)
PC address: 5324
Estimated Gas Usage: 9051 - 114629
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6d4988238b6396d15a63ed675d96dd4d86a70f2f.sol:485

eternalStorage().setUint(
			getWithdrawalLimitTotalKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [SOMEGUY], function: setPendingWithdrawal(address,address,uint256), txdata: 0xdcaf498e000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000040001010000000802020020008020100004400000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000400000000', '0x0004000101000000080202002000802010000440', 0), value: 0x0
Caller: [SOMEGUY], function: setWithdrawalLimitTotal(address,address,uint256), txdata: 0x76446e83000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000004000004000000100000000042040080000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0040000000400000400000010000000004204008', 0), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setAddress(bytes32,address)
PC address: 5728
Estimated Gas Usage: 9070 - 114648
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6d4988238b6396d15a63ed675d96dd4d86a70f2f.sol:555

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [SOMEGUY], function: setLastWithdrawalPrice(address,address,uint256), txdata: 0x83b41a40000000000000000000000000041001000004000000000000000100080008020000000000000000000000000020808020200200100180400204804040024080200000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0410010000040000000000000001000800080200', '0x2080802020020010018040020480404002408020', 0), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setAddress(bytes32,address)
PC address: 5887
Estimated Gas Usage: 9070 - 114648
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6d4988238b6396d15a63ed675d96dd4d86a70f2f.sol:557

eternalStorage().setUint(
			getLastWithdrawalPriceKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [SOMEGUY], function: setPendingWithdrawal(address,address,uint256), txdata: 0xdcaf498e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084000800020008002000202100220080401400000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0008400080002000800200020210022008040140', 0), value: 0x0
Caller: [SOMEGUY], function: setLastWithdrawalPrice(address,address,uint256), txdata: 0x83b41a40000000000000000000000000000000000000000000000000000001010000007100000000000000000000000010202000000410020040000001011020000480200000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000010100000071', '0x1020200000041002004000000101102000048020', 0), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setWithdrawalLimitBalance(address,address,uint256)
PC address: 6618
Estimated Gas Usage: 9161 - 114739
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6d4988238b6396d15a63ed675d96dd4d86a70f2f.sol:519

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [SOMEGUY], function: setWithdrawalLimitBalance(address,address,uint256), txdata: 0xa6f797aa000000000000000000000000008008800120202020010002088000001004004000000000000000000000000040402080200840000002800004100040000400400000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0080088001202020200100020880000010040040', '0x4040208020084000000280000410004000040040', 0), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setWithdrawalLimitBalance(address,address,uint256)
PC address: 6777
Estimated Gas Usage: 9161 - 114739
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6d4988238b6396d15a63ed675d96dd4d86a70f2f.sol:521

eternalStorage().setUint(
			getWithdrawalLimitBalanceKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [SOMEGUY], function: setPendingWithdrawal(address,address,uint256), txdata: 0xdcaf498e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002012010802080080008040008020000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0201201080208008000804000802000000000000', 0), value: 0x0
Caller: [SOMEGUY], function: setWithdrawalLimitBalance(address,address,uint256), txdata: 0xa6f797aa000000000000000000000000000000000000000000000010000000000000000000000000000000000000000040204040200204042040408002080880400240080000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000100000000000000000', '0x4020404020020404204040800208088040024008', 0), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setCumulativePrice(address,uint256)
PC address: 7523
Estimated Gas Usage: 9180 - 114944
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6d4988238b6396d15a63ed675d96dd4d86a70f2f.sol:456

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [SOMEGUY], function: setCumulativePrice(address,uint256), txdata: 0xafca58a700000000000000000000000000000080100002002080040001100210404080400000000000000000000000000200401004204000108000800002021001408000, decoded_data: ('0x0000008010000200208004000110021040408040', 11423562177949546001201003805029179123967229952), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setCumulativePrice(address,uint256)
PC address: 7681
Estimated Gas Usage: 9180 - 114944
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6d4988238b6396d15a63ed675d96dd4d86a70f2f.sol:458

eternalStorage().setUint(getCumulativePriceKey(_property), _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setPendingWithdrawal(address,address,uint256), txdata: 0xdcaf498e000000000000000000000000801020204010000200804008008000040100080000000000000000000000000000010410202000800010028001008001800200400000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x8010202040100002008040080080000401000800', '0x0001041020200080001002800100800180020040', 0), value: 0x0
Caller: [SOMEGUY], function: setCumulativePrice(address,uint256), txdata: 0xafca58a700000000000000000000000000020001048010010402028000002000800102000000000000000000000000000408000802000100000020004000001040014004, decoded_data: ('0x0002000104801001040202800000200080010200', 23014371769801014723552155482187144512996982788), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setPendingWithdrawal(address,address,uint256)
PC address: 8358
Estimated Gas Usage: 9290 - 114868
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6d4988238b6396d15a63ed675d96dd4d86a70f2f.sol:591

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [SOMEGUY], function: setPendingWithdrawal(address,address,uint256), txdata: 0xdcaf498e000000000000000000000000000000000000000000000000000000000000008000000000000000000000000040080402800040800404040180000410100801020000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000080', '0x4008040280004080040404018000041010080102', 0), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setPendingWithdrawal(address,address,uint256)
PC address: 8517
Estimated Gas Usage: 9290 - 114868
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6d4988238b6396d15a63ed675d96dd4d86a70f2f.sol:593

eternalStorage().setUint(
			getPendingWithdrawalKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [SOMEGUY], function: setPendingWithdrawal(address,address,uint256), txdata: 0xdcaf498e000000000000000000000000000000000000000000000000000001010000000000000000000000000000000004010008020000040400010040000000400008010000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000010100000000', '0x0401000802000004040001004000000040000801', 0), value: 0x0
Caller: [SOMEGUY], function: setPendingWithdrawal(address,address,uint256), txdata: 0xdcaf498e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040020008000000200840104080800004200000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000004002000800000020084010408080000420', 0), value: 0x0


time_used: 36127.563668489456 seconds
#@contract_info_time
0x6d4988238b6396d15a63ed675d96dd4d86a70f2f.sol:0.5.0:WithdrawStorage:36127.563668489456:36100:60:36000
