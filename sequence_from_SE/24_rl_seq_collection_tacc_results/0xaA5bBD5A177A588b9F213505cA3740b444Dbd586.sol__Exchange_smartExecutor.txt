++++ 0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol  :  0.4.24  :  Exchange ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 6011
['constructor']:writes at the last depth:['0', '4', '5', '8', '9', '10', '11', '12', '6']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 60.82% coverage.
dynamic svars:['2', '1']
static svars:['0', '11', '12', '7', '3', '9', '8', '6', '10', '4', '5']
Ending preprocessing.
preprocessing time(s): 100.7180757522583
contract coverage: 58.43%
withdrawTradeMining() is not reachable
buyOrderWithEth(uint256) is not reachable
cancelOrder(uint256) is not reachable
calcFees(uint256,uint256) is not reachable
getBuyTokenAmount(uint256,uint256) is not reachable
tradeMiningAmount(uint256,uint256) is not reachable
tokenFallback(address,uint256,bytes) is not reachable
Function Reads: State variables read in conditions
	sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address):[]
	orderCount():[]
	changeTradeMiningPrice(uint256,uint256):[]
	cancelOrder(uint256):[]
	feeMul():[]
	treasury():[]
	tradeMiningMul():[]
	calcFees(uint256,uint256):[]
	remainingAmount(uint256):[]
	feeDiv():[]
	buyOrderWithEth(uint256):[]
	tokenFallback(address,uint256,bytes):[]
	tradeMiningAmount(uint256,uint256):[]
	tradeMiningBalance():[]
	sellEther(address,uint256,uint256):[]
	buyOrderWithERC20Token(uint256,address,uint256):[]
	getBalance(address,address):[]
	isOrderActive(uint256):[]
	sellEtherWithRing(address,uint256,uint256,address):[]
	sellERC20Token(address,address,uint256,uint256,uint256):[]
	withdrawTradeMining():[]
	tradeMiningDiv():[]
	getBuyTokenAmount(uint256,uint256):[]
Function Writes: State variables written
	cancelOrder(uint256):['0']
	changeTradeMiningPrice(uint256,uint256):['11', '12']
	buyOrderWithEth(uint256):['0']
	sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address):['0']
	withdrawTradeMining():['7']
	buyOrderWithERC20Token(uint256,address,uint256):['0']
	sellEther(address,uint256,uint256):['0', '3']
	sellEtherWithRing(address,uint256,uint256,address):['0', '3']
	tokenFallback(address,uint256,bytes):['7', '0']
	sellERC20Token(address,address,uint256,uint256,uint256):['0']
============================
iteration:3
targets:['withdrawTradeMining()', 'buyOrderWithEth(uint256)', 'cancelOrder(uint256)', 'calcFees(uint256,uint256)', 'getBuyTokenAmount(uint256,uint256)', 'tradeMiningAmount(uint256,uint256)', 'tokenFallback(address,uint256,bytes)']
['changeTradeMiningPrice(uint256,uint256)']:writes at the last depth:['12', '11']
['tokenFallback(address,uint256,bytes)']:writes at the last depth:['7']
['sellEther(address,uint256,uint256)']:writes at the last depth:['2', '0', '1', '3']
['sellEtherWithRing(address,uint256,uint256,address)']:writes at the last depth:['2', '0', '1', '3']
['tokenFallback(address,uint256,bytes)']:writes at the last depth:['2', '0', '1', '3']
['tokenFallback(address,uint256,bytes)']:writes at the last depth:['2', '0', '1', '3']
['sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)']:writes at the last depth:['2', '0', '1', '3']
['sellERC20Token(address,address,uint256,uint256,uint256)']:writes at the last depth:['2', '0', '1', '3']
contract coverage: 77.51%
============================
iteration:4
['sellERC20Token(address,address,uint256,uint256,uint256)', 'changeTradeMiningPrice(uint256,uint256)']:writes at the last depth:['12', '11']
['sellERC20Token(address,address,uint256,uint256,uint256)', 'tokenFallback(address,uint256,bytes)']:writes at the last depth:['7']
['sellERC20Token(address,address,uint256,uint256,uint256)', 'cancelOrder(uint256)']:writes at the last depth:['', '2', '0']
['sellERC20Token(address,address,uint256,uint256,uint256)', 'cancelOrder(uint256)']:writes at the last depth:['', '2', '0']
['sellERC20Token(address,address,uint256,uint256,uint256)', 'sellEther(address,uint256,uint256)']:writes at the last depth:['', '0', '3']
['sellERC20Token(address,address,uint256,uint256,uint256)', 'sellEtherWithRing(address,uint256,uint256,address)']:writes at the last depth:['', '0', '3']
['sellERC20Token(address,address,uint256,uint256,uint256)', 'tokenFallback(address,uint256,bytes)']:writes at the last depth:['', '1', '0', '3']
['sellERC20Token(address,address,uint256,uint256,uint256)', 'tokenFallback(address,uint256,bytes)']:writes at the last depth:['', '1', '0', '3']
['sellERC20Token(address,address,uint256,uint256,uint256)', 'sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)']:writes at the last depth:['', '1', '0', '3']
['sellERC20Token(address,address,uint256,uint256,uint256)', 'sellERC20Token(address,address,uint256,uint256,uint256)']:writes at the last depth:['', '1', '0', '3']
contract coverage: 79.04%
============================
iteration:5
['sellERC20Token(address,address,uint256,uint256,uint256)', 'sellERC20Token(address,address,uint256,uint256,uint256)', 'changeTradeMiningPrice(uint256,uint256)']:writes at the last depth:['12', '11']
['sellERC20Token(address,address,uint256,uint256,uint256)', 'sellERC20Token(address,address,uint256,uint256,uint256)', 'tokenFallback(address,uint256,bytes)']:writes at the last depth:['', '1', '0', '3']
contract coverage: 79.04%
============================
iteration:6
contract coverage: 79.04%
============================
iteration:7
['sellERC20Token(address,address,uint256,uint256,uint256)', 'sellERC20Token(address,address,uint256,uint256,uint256)', 'changeTradeMiningPrice(uint256,uint256)', 'sellEther(address,uint256,uint256)']:writes at the last depth:['', '0', '3']
['sellERC20Token(address,address,uint256,uint256,uint256)', 'sellERC20Token(address,address,uint256,uint256,uint256)', 'changeTradeMiningPrice(uint256,uint256)', 'sellEtherWithRing(address,uint256,uint256,address)']:writes at the last depth:['', '0', '3']
contract coverage: 79.04%
============================
iteration:8
contract coverage: 79.04%
============================
iteration:9
contract coverage: 79.04%
============================
iteration:10
contract coverage: 79.04%
============================
iteration:11
contract coverage: 79.04%
============================
iteration:12
contract coverage: 79.04%
============================
iteration:13
contract coverage: 79.04%
============================
iteration:14
contract coverage: 79.04%
============================
iteration:15
contract coverage: 79.04%
============================
iteration:16
contract coverage: 79.04%
============================
iteration:17
contract coverage: 79.04%
============================
iteration:18
contract coverage: 79.04%
============================
iteration:19
contract coverage: 79.04%
============================
iteration:20
contract coverage: 79.04%
============================
iteration:21
contract coverage: 79.04%
============================
iteration:22
contract coverage: 79.04%
============================
iteration:23
contract coverage: 79.04%
#@statespace
1937 nodes, 1936 edges, 34327 total states
#@coverage
Achieved 3.65% coverage for code: 
#@coverage
Achieved 79.04% coverage for code: 608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806322fdd3ea146101385780632453ffa8146101ed57806341f9377f14610218578063514fcac71461024f57806353e1a7a01461027c57806361d027b3146102a75780636fb768e8146102fe57806378d067dd1461032957806387bda8f21461037457806389a447e0146103b5578063a4ff9c34146103e0578063c0ee0b8a14610400578063c49063e714610493578063c655de64146104de578063cb2bb26414610509578063cf6ff17314610567578063d4fac45d146105be578063d6e4358514610635578063e3319e821461067a578063eeb3377a146106f8578063f2037fec1461078d578063fc5f4241146107a4578063ff700e52146107cf575b600080fd5b34801561014457600080fd5b506101d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061081a565b6040518082815260200191505060405180910390f35b3480156101f957600080fd5b50610202610854565b6040518082815260200191505060405180910390f35b34801561022457600080fd5b5061024d600480360381019080803590602001909291908035906020019092919050505061085a565b005b34801561025b57600080fd5b5061027a600480360381019080803590602001909291905050506108d8565b005b34801561028857600080fd5b50610291610caa565b6040518082815260200191505060405180910390f35b3480156102b357600080fd5b506102bc610cb0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030a57600080fd5b50610313610cd6565b6040518082815260200191505060405180910390f35b34801561033557600080fd5b5061035e6004803603810190808035906020019092919080359060200190929190505050610cdc565b6040518082815260200191505060405180910390f35b34801561038057600080fd5b5061039f60048036038101908080359060200190929190505050610e8a565b6040518082815260200191505060405180910390f35b3480156103c157600080fd5b506103ca610eaa565b6040518082815260200191505060405180910390f35b6103fe60048036038101908080359060200190929190505050610eb0565b005b34801561040c57600080fd5b50610491600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610ef0565b005b34801561049f57600080fd5b506104c86004803603810190808035906020019092919080359060200190929190505050611082565b6040518082815260200191505060405180910390f35b3480156104ea57600080fd5b506104f3611119565b6040518082815260200191505060405180910390f35b610551600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061111f565b6040518082815260200191505060405180910390f35b34801561057357600080fd5b506105bc60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061118b565b005b3480156105ca57600080fd5b5061061f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111c3565b6040518082815260200191505060405180910390f35b34801561064157600080fd5b506106606004803603810190808035906020019092919050505061124a565b604051808215151515815260200191505060405180910390f35b6106e2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611277565b6040518082815260200191505060405180910390f35b34801561070457600080fd5b50610777600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291905050506112c2565b6040518082815260200191505060405180910390f35b34801561079957600080fd5b506107a261131d565b005b3480156107b057600080fd5b506107b96113f6565b6040518082815260200191505060405180910390f35b3480156107db57600080fd5b5061080460048036038101908080359060200190929190803590602001909291905050506113fc565b6040518082815260200191505060405180910390f35b60008060008611151561082c57600080fd5b61083688876115d4565b90506108473389898489898961190d565b9150509695505050505050565b60035481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108b657600080fd5b600081141515156108c657600080fd5b81600b8190555080600c819055505050565b60008060009054906101000a900460ff161515156108f557600080fd5b60016000806101000a81548160ff0219169083151502179055506002600083815260200190815260200160002090506000816004015411151561093757600080fd5b8060000160149054906101000a900460ff16151561095457600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109b257600080fd5b610a698160040154600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e2090919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b648160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600401548360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e39565b1515610b6f57600080fd5b60026000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560048201600090556005820160009055600682016000905550507faa2a006d186dc89a3d6851834c85d16226329ac40bcad6531a5756a38ed1c90f8242604051808381526020018281526020019250505060405180910390a160008060006101000a81548160ff0219169083151502179055505050565b60095481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b6000806000600260008581526020019081526020016000209150600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610dcf57610d9d8260060154610d8f846005015488611fc890919063ffffffff16565b611ffb90919063ffffffff16565b9050610dc8600a54610dba60095484611fc890919063ffffffff16565b611ffb90919063ffffffff16565b9250610e7f565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e7957610e72600a54610e6460095488611fc890919063ffffffff16565b611ffb90919063ffffffff16565b9250610e7e565b600092505b5b829250505092915050565b600060026000838152602001908152602001600020600401549050919050565b600a5481565b600034111515610ebf57600080fd5b610eed3382600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634612016565b50565b60008151148015610f4e5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15610f6257610f5c826124d1565b5061107d565b605481511415610fdc57610fd68333610f856040856124f790919063ffffffff16565b85610f9a60008761252f90919063ffffffff16565b610fae60208861252f90919063ffffffff16565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661190d565b5061107c565b606881511415611047576110418333610fff6040856124f790919063ffffffff16565b8561101460008761252f90919063ffffffff16565b61102860208861252f90919063ffffffff16565b61103c6054896124f790919063ffffffff16565b61190d565b5061107b565b602081511415611075576110708361106960008461252f90919063ffffffff16565b3385612016565b61107a565b600080fd5b5b5b5b505050565b6000806000808514156110985760009250611111565b6002600085815260200190815260200160002091508160000160149054906101000a900460ff1615156110ce5760009250611111565b6110f7600c546110e9600b5488611fc890919063ffffffff16565b611ffb90919063ffffffff16565b905080600754101561110d576007549250611111565b8092505b505092915050565b60075481565b6000803411151561112f57600080fd5b61118233600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686348787600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661190d565b90509392505050565b60008111151561119a57600080fd5b60006111a683836115d4565b1115156111b257600080fd5b6111be33848484612016565b505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006002600083815260200190815260200160002060000160149054906101000a900460ff169050919050565b6000803411151561128757600080fd5b6112b833600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16873488888861190d565b9050949350505050565b6000806000851115156112d457600080fd5b6112de87866115d4565b9050611311338888848888600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661190d565b91505095945050505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561137b57600080fd5b600060075411151561138c57600080fd5b600754905060006007819055506113e8600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e39565b15156113f357600080fd5b50565b600c5481565b6000806000808511151561140f57600080fd5b600260008581526020019081526020016000209150600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806115155750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1561158d57611531600954600a54611e2090919063ffffffff16565b905061158681611578846005015461156a600a5461155c88600601548c611fc890919063ffffffff16565b611fc890919063ffffffff16565b611ffb90919063ffffffff16565b611ffb90919063ffffffff16565b92506115bd565b6115ba82600501546115ac846006015488611fc890919063ffffffff16565b611ffb90919063ffffffff16565b92505b6000831115156115cc57600080fd5b505092915050565b6000806000806000809054906101000a900460ff161515156115f557600080fd5b60016000806101000a81548160ff0219169083151502179055508592508273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156116ad57600080fd5b505af11580156116c1573d6000803e3d6000fd5b505050506040513d60208110156116d757600080fd5b810190808051906020019092919050505091508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156117c157600080fd5b505af11580156117d5573d6000803e3d6000fd5b505050506040513d60208110156117eb57600080fd5b8101908080519060200190929190505050508273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561189857600080fd5b505af11580156118ac573d6000803e3d6000fd5b505050506040513d60208110156118c257600080fd5b810190808051906020019092919050505090506118e88282611e2090919063ffffffff16565b935060008060006101000a81548160ff02191690831515021790555050505092915050565b60008060009054906101000a900460ff1615151561192a57600080fd5b60016000806101000a81548160ff02191690831515021790555060008511151561195357600080fd5b60008411151561196257600080fd5b60008311151561197157600080fd5b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16141515156119ac57600080fd5b60036000815480929190600101919050559050610100604051908101604052808973ffffffffffffffffffffffffffffffffffffffff1681526020016001151581526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152506002600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816004015560c0820151816005015560e08201518160060155905050611c5485600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461255890919063ffffffff16565b600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f9684ab37f360879637d39ea3a41f58c0705a15f80d518ec92bd1c7383ef8a61a81898989868a8a8a42604051808a81526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001838152602001828152602001995050505050505050505060405180910390a160008060006101000a81548160ff021916908315150217905550979650505050505050565b6000828211151515611e2e57fe5b818303905092915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611edd578373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015611ed7573d6000803e3d6000fd5b50611fbd565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611f8057600080fd5b505af1158015611f94573d6000803e3d6000fd5b505050506040513d6020811015611faa57600080fd5b8101908080519060200190929190505050505b600190509392505050565b60008082840290506000841480611fe95750828482811515611fe657fe5b04145b1515611ff157fe5b8091505092915050565b600080828481151561200957fe5b0490508091505092915050565b6000806000809054906101000a900460ff1615151561203457600080fd5b60016000806101000a81548160ff0219169083151502179055506003548510151561205e57600080fd5b60008311151561206d57600080fd5b6002600086815260200190815260200160002091508160000160149054906101000a900460ff16151561209f57600080fd5b8160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141515156120fe57600080fd5b8160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151561215c57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612236573273ffffffffffffffffffffffffffffffffffffffff168260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561223557600080fd5b5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156122c2576122bb868685612576565b905061235d565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561234e576123478686856127d8565b905061235c565b612359868685612a4c565b90505b5b6123678187612c7c565b151561237257600080fd5b6000600260008781526020019081526020016000206004015414156124af5760026000868152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560048201600090556005820160009055600682016000905550507feb3b41be12efa25c0c65725eeff2e2ad0250e2e5de2aa939e18f36aa656e98808542604051808381526020018281526020019250505060405180910390a15b60008060006101000a81548160ff021916908315150217905550505050505050565b60006124e88260075461255890919063ffffffff16565b60078190555060019050919050565b6000806014830184511015151561250d57600080fd5b6c01000000000000000000000000836020860101510490508091505092915050565b6000806020830184511015151561254557600080fd5b8260208501015190508091505092915050565b600080828401905083811015151561256c57fe5b8091505092915050565b6000806000806002600087815260200190815260200160002092506125be83600601546125b0856005015488611fc890919063ffffffff16565b611ffb90919063ffffffff16565b91506125e9600a546125db60095485611fc890919063ffffffff16565b611ffb90919063ffffffff16565b90506000821115156125fa57600080fd5b8260040154821115151561260d57600080fd5b612624828460040154611e2090919063ffffffff16565b836004018190555061267f8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e39565b151561268a57600080fd5b6126cb876126a18385611e2090919063ffffffff16565b8560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e39565b15156126d657600080fd5b7f01f5d7c359dba416997ea6c723ea4663e9ad524f956ed8bb3b5234e6475a7285878460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16886127318587611e2090919063ffffffff16565b898642604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390a18093505050509392505050565b60008060008060026000878152602001908152602001600020925061281c600a5461280e60095488611fc890919063ffffffff16565b611ffb90919063ffffffff16565b915061285d836006015461284f8560050154612841868a611e2090919063ffffffff16565b611fc890919063ffffffff16565b611ffb90919063ffffffff16565b905060008111151561286e57600080fd5b8260040154811115151561288157600080fd5b612898818460040154611e2090919063ffffffff16565b83600401819055506129058360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166128db8488611e2090919063ffffffff16565b8560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e39565b151561291057600080fd5b61293f87828560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e39565b151561294a57600080fd5b7f01f5d7c359dba416997ea6c723ea4663e9ad524f956ed8bb3b5234e6475a7285878460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688846129a6878b611e2090919063ffffffff16565b8742604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390a18193505050509392505050565b6000806000600260008681526020019081526020016000209150612a938260060154612a85846005015487611fc890919063ffffffff16565b611ffb90919063ffffffff16565b9050600081111515612aa457600080fd5b81600401548111151515612ab757600080fd5b612ace818360040154611e2090919063ffffffff16565b8260040181905550612b298260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e39565b1515612b3457600080fd5b8160000160149054906101000a900460ff161515612b5157600080fd5b612b8086828460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e39565b1515612b8b57600080fd5b7f01f5d7c359dba416997ea6c723ea4663e9ad524f956ed8bb3b5234e6475a7285868360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878488600042604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390a16000925050509392505050565b6000806000841415612c915760019150612e17565b612ce0600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e39565b1515612ceb57600080fd5b60006007541415612cff5760019150612e17565b612d28600c54612d1a600b5487611fc890919063ffffffff16565b611ffb90919063ffffffff16565b90506000811415612d3c5760019150612e17565b600754811115612d4c5760075490505b612d6181600754611e2090919063ffffffff16565b600781905550612d948382600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e39565b1515612d9f57600080fd5b7f5a9ec13c12ca9563a7b3108125f74c57ed388bb313394ea50f7e4a71b01497c2838242604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1600191505b50929150505600a165627a7a723058208d7ab9005a85813b64ee7046d853cbf07a0be3c16905462a23f13e5b1cb172110029
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Exchange
Function name: tokenFallback(address,uint256,bytes)
PC address: 1106
Estimated Gas Usage: 72023 - 322307
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:344

function tokenFallback(address from, uint value, bytes data) public {
    
    
    
    
    if (data.length == 0 && msg.sender == saturnToken) {
      _topUpTradeMining(value);
    } else if (data.length == 84) {
      _newOrder(from, msg.sender, data.toAddress(64), value, data.toUint(0), data.toUint(32), etherAddress);
    } else if (data.length == 104) {
      _newOrder(from, msg.sender, data.toAddress(64), value, data.toUint(0), data.toUint(32), data.toAddress(84));
    } else if (data.length == 32) {
      _executeOrder(from, data.toUint(0), msg.sender, value);
    } else {
      
      revert();
    }
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a00000000000000000000000000000000000100000000000000000000010000002849e200380a3743000101402d6f020a08181016101641014005422108146008ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: cancelOrder(uint256)
PC address: 2959
Estimated Gas Usage: 74615 - 336089
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:433

delete orderBook[orderId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a010101010101010101010110deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000200000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0140000200001001008000012000008008000040000000001000800080000101100804200401011001080102028000080108010102201004000102040102208004, value: 0x0
Caller: [CREATOR], function: cancelOrder(uint256), txdata: 0x514fcac7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: cancelOrder(uint256)
PC address: 2986
Estimated Gas Usage: 74615 - 336089
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:433

delete orderBook[orderId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a010101010101010101010110deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000200000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0140000200001001008000012000008008000040000000001000800080000101100804200401011001080102028000080108010102201004000102040102208004, value: 0x0
Caller: [CREATOR], function: cancelOrder(uint256), txdata: 0x514fcac7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: cancelOrder(uint256)
PC address: 3006
Estimated Gas Usage: 74615 - 336089
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:433

delete orderBook[orderId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a010101010101010101010110deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000200000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0140000200001001008000012000008008000040000000001000800080000101100804200401011001080102028000080108010102201004000102040102208004, value: 0x0
Caller: [CREATOR], function: cancelOrder(uint256), txdata: 0x514fcac7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: cancelOrder(uint256)
PC address: 3018
Estimated Gas Usage: 74615 - 336089
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:433

delete orderBook[orderId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a010101010101010101010110deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000200000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0140000200001001008000012000008008000040000000001000800080000101100804200401011001080102028000080108010102201004000102040102208004, value: 0x0
Caller: [CREATOR], function: cancelOrder(uint256), txdata: 0x514fcac7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: cancelOrder(uint256)
PC address: 3045
Estimated Gas Usage: 74615 - 336089
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:433

delete orderBook[orderId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a010101010101010101010110deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000200000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0140000200001001008000012000008008000040000000001000800080000101100804200401011001080102028000080108010102201004000102040102208004, value: 0x0
Caller: [CREATOR], function: cancelOrder(uint256), txdata: 0x514fcac7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: cancelOrder(uint256)
PC address: 3131
Estimated Gas Usage: 74615 - 336089
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:433

delete orderBook[orderId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a010101010101010101010110deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000200000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0140000200001001008000012000008008000040000000001000800080000101100804200401011001080102028000080108010102201004000102040102208004, value: 0x0
Caller: [CREATOR], function: cancelOrder(uint256), txdata: 0x514fcac7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: cancelOrder(uint256)
PC address: 3139
Estimated Gas Usage: 74615 - 336089
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:433

delete orderBook[orderId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a010101010101010101010110deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000200000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0140000200001001008000012000008008000040000000001000800080000101100804200401011001080102028000080108010102201004000102040102208004, value: 0x0
Caller: [CREATOR], function: cancelOrder(uint256), txdata: 0x514fcac7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: cancelOrder(uint256)
PC address: 3147
Estimated Gas Usage: 74615 - 336089
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:433

delete orderBook[orderId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a010101010101010101010110deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000200000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0140000200001001008000012000008008000040000000001000800080000101100804200401011001080102028000080108010102201004000102040102208004, value: 0x0
Caller: [CREATOR], function: cancelOrder(uint256), txdata: 0x514fcac7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 4847
Estimated Gas Usage: 90190 - 482341
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:396

etherAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 5808
Estimated Gas Usage: 88971 - 480792
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:600

tkn.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0140000101000000080101800410010201010404010204018080000204000001024000400801010100018001020401008020010800000804000100010201800180, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 5808
Estimated Gas Usage: 90190 - 482341
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:600

tkn.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000001000100000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000080008040010208800180010180080101200101100810108001080120008001010010011080010101800201400204014004100808400208011001011008080804, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6084
Estimated Gas Usage: 88971 - 480792
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:601

tkn.transferFrom(msg.sender, address(this), amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0140000101000000080101800410010201010404010204018080000204000001024000400801010100018001020401008020010800000804000100010201800180, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6084
Estimated Gas Usage: 90190 - 482341
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:601

tkn.transferFrom(msg.sender, address(this), amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000001000100000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000080008040010208800180010180080101200101100810108001080120008001010010011080010101800201400204014004100808400208011001011008080804, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6084
Estimated Gas Usage: 88971 - 480792
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:601

tkn.transferFrom(msg.sender, address(this), amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea0000010420200101102001800000000000000000000000000000000000000000400000100100100810200101004001800208080a80010080100280010808a0200220100180400200020440800220008010000001020180028001400840020101011020200000000000024000102004200400018001204004800040404080800220, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6084
Estimated Gas Usage: 90190 - 482341
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:601

tkn.transferFrom(msg.sender, address(this), amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a0101010101010101010101010000000000000000000000000000000000000008010101010180010104010101ffbefcfffffffffb7fbbbb7fbfffffffbfdffff42001020200408020081010010180010401000101100101000010010240800101101002004001200101100100080080000440100408001001010100010480004008, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6299
Estimated Gas Usage: 88971 - 480792
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:602

tkn.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0140000101000000080101800410010201010404010204018080000204000001024000400801010100018001020401008020010800000804000100010201800180, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6299
Estimated Gas Usage: 90190 - 482341
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:602

tkn.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000001000100000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000080008040010208800180010180080101200101100810108001080120008001010010011080010101800201400204014004100808400208011001011008080804, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6389
Estimated Gas Usage: 88971 - 480792
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:178

rentrancy_lock = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6389
Estimated Gas Usage: 90190 - 482341
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:178

rentrancy_lock = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6403
Estimated Gas Usage: 88971 - 480792
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:178

rentrancy_lock = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6403
Estimated Gas Usage: 90190 - 482341
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:178

rentrancy_lock = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6420
Estimated Gas Usage: 88971 - 480792
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:175

rentrancy_lock

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6420
Estimated Gas Usage: 90190 - 482341
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:175

rentrancy_lock

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6453
Estimated Gas Usage: 88971 - 480792
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:176

rentrancy_lock = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6453
Estimated Gas Usage: 90190 - 482341
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:176

rentrancy_lock = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6467
Estimated Gas Usage: 88971 - 480792
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:176

rentrancy_lock = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6467
Estimated Gas Usage: 90190 - 482341
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:176

rentrancy_lock = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6578
Estimated Gas Usage: 88971 - 480792
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:460

orderCount++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6578
Estimated Gas Usage: 90190 - 482341
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:460

orderCount++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6589
Estimated Gas Usage: 88971 - 480792
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:460

orderCount++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6589
Estimated Gas Usage: 90190 - 482341
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:460

orderCount++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6777
Estimated Gas Usage: 88971 - 480792
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6777
Estimated Gas Usage: 90190 - 482341
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6830
Estimated Gas Usage: 88971 - 480792
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6830
Estimated Gas Usage: 90190 - 482341
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6848
Estimated Gas Usage: 88971 - 480792
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6848
Estimated Gas Usage: 90190 - 482341
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6862
Estimated Gas Usage: 88971 - 480792
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6862
Estimated Gas Usage: 90190 - 482341
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6880
Estimated Gas Usage: 88971 - 480792
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6880
Estimated Gas Usage: 90190 - 482341
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6933
Estimated Gas Usage: 88971 - 480792
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6933
Estimated Gas Usage: 90190 - 482341
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6951
Estimated Gas Usage: 88971 - 480792
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6951
Estimated Gas Usage: 90190 - 482341
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 7004
Estimated Gas Usage: 88971 - 480792
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 7004
Estimated Gas Usage: 90190 - 482341
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 7022
Estimated Gas Usage: 88971 - 480792
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 7022
Estimated Gas Usage: 90190 - 482341
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 7075
Estimated Gas Usage: 88971 - 480792
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 7075
Estimated Gas Usage: 90190 - 482341
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 7086
Estimated Gas Usage: 88971 - 480792
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 7086
Estimated Gas Usage: 90190 - 482341
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 7096
Estimated Gas Usage: 88971 - 480792
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 7096
Estimated Gas Usage: 90190 - 482341
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 7106
Estimated Gas Usage: 88971 - 480792
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 7106
Estimated Gas Usage: 90190 - 482341
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:461

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 7238
Estimated Gas Usage: 88971 - 480792
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:462

balances[owner][sellToken]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 7238
Estimated Gas Usage: 90190 - 482341
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:462

balances[owner][sellToken]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 7379
Estimated Gas Usage: 88971 - 480792
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:462

balances[owner][sellToken] = balances[owner][sellToken].add(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 7379
Estimated Gas Usage: 90190 - 482341
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:462

balances[owner][sellToken] = balances[owner][sellToken].add(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaaa0120000040800108010101010001021001000101020101010080010100010080012002201001020101010400000104100202002010801001010004010010018010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 7686
Estimated Gas Usage: 88971 - 480792
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:178

rentrancy_lock = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 7700
Estimated Gas Usage: 88971 - 480792
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:178

rentrancy_lock = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea042080004008000000082008deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10028010010140400208804000000000000000000000000000000000000000000280800202100101100108048000012010088001020102200280800840040210042080020104040801044010028040048002084040080210801001200110800401, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Exchange
Function name: getBuyTokenAmount(uint256,uint256)
PC address: 7725
Estimated Gas Usage: 4217 - 5162
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:288

feeDiv.sub(feeMul)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000020102000008080808080800800000400100001000000000000000000000000000000000000000000000000000000000000000081, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getBuyTokenAmount(uint256,uint256), txdata: 0xff700e5202, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 7725
Estimated Gas Usage: 12245 - 136876
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:603

balanceAfter.sub(balanceBefore)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea0101010101010101010101010000000000000000000000000000000000000010084004008000408002000840000000002000800001200200000100400000000001, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: Exchange
Function name: cancelOrder(uint256)
PC address: 7873
Estimated Gas Usage: 73750 - 334753
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:588

destination.transfer(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x84d14c0000000026, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a008000048000010801081020000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000004000000000000001018000000101800040080101000808800801808008010101400201800102400400044008400208408002400180800204200000400440012040108004804001, value: 0x0
Caller: [ATTACKER], function: cancelOrder(uint256), txdata: 0x514fcac7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Exchange
Function name: calcFees(uint256,uint256)
PC address: 8200
Estimated Gas Usage: 5687 - 7292
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:303

amount.mul(feeMul).div(feeDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000200000000000000000000000000000000000000001010101010101010101010100000000000000000000000000000000000000000240010280010000200800010200040040402000040080020101802020808080200010010110010120022010010804800010010102000120022002010101000104, value: 0x0
Caller: [ATTACKER], function: calcFees(uint256,uint256), txdata: 0x78d067dd, value: 0x0


time_used: 19375.110860824585 seconds
#@contract_info_time
0xaA5bBD5A177A588b9F213505cA3740b444Dbd586.sol:0.4.24:Exchange:19375.110860824585:36100:60:36000
