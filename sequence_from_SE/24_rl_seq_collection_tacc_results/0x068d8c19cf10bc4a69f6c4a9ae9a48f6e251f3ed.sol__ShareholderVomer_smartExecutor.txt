++++ 0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol  :  0.5.16  :  ShareholderVomer ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 5700
['constructor']:writes at the last depth:[]
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 83.82% coverage.
dynamic svars:['56', '60', '59', '58', '57', '64']
static svars:['51', '66', '67', '52', '53', '0', '54', '55', '61', '62', '63']
Ending preprocessing.
preprocessing time(s): 101.07107400894165
contract coverage: 50.39%
transferTokens(address,address,uint256) is not reachable
withdraw(uint256) is not reachable
fallback is not reachable
takeEth(address,uint256) is not reachable
updatePaymentMode(address,uint256,uint256) is not reachable
acceptOwner() is not reachable
getInfo(address) is not reachable
setPartnerContract(address,int256) is not reachable
setDepositTokens(address[],uint256[]) is not reachable
lockFunds(uint256) is not reachable
setAdmin(address,bool) is not reachable
changeIndividualVMRCup(address,uint256) is not reachable
changeOwnerCandidate(address) is not reachable
giveBackEth() is not reachable
changeMinBalance(uint256) is not reachable
initialize() is not reachable
getInfoExt(address) is not reachable
Function Reads: State variables read in conditions
	updatePaymentMode(address,uint256,uint256):['62']
	getUserProfitByToken(address,address):[]
	acceptOwner():[]
	changeIndividualVMRCup(address,uint256):[]
	dateUntilFundsLocked():[]
	getInfo(address):[]
	lockFunds(uint256):[]
	owner():[]
	getInfoExt(address):[]
	transferTokens(address,address,uint256):[]
	giveBackEth():[]
	newOwnerCandidate():[]
	getPartnerInfo(address):[]
	changeOwnerCandidate(address):[]
	setDepositTokens(address[],uint256[]):[]
	takeEth(address,uint256):[]
	initialize():[]
	fundsLockedtoWithdraw():[]
	getPaymentInfo():[]
	withdraw(uint256):[]
	admins(address):[]
	setPartnerContract(address,int256):[]
	setAdmin(address,bool):[]
	changeMinBalance(uint256):[]
Function Writes: State variables written
	giveBackEth():['60']
	acceptOwner():['51']
	lockFunds(uint256):['66', '67']
	changeOwnerCandidate(address):['52']
	changeMinBalance(uint256):['53']
	initialize():['0', '54', '55', '53', '56', '51', '61']
	changeIndividualVMRCup(address,uint256):['59']
	updatePaymentMode(address,uint256,uint256):['61', '62', '63']
	setPartnerContract(address,int256):['60']
	setAdmin(address,bool):['58']
	takeEth(address,uint256):['60']
	fallback:['56']
============================
iteration:3
targets:['transferTokens(address,address,uint256)', 'withdraw(uint256)', 'fallback', 'takeEth(address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'acceptOwner()', 'getInfo(address)', 'setPartnerContract(address,int256)', 'setDepositTokens(address[],uint256[])', 'lockFunds(uint256)', 'setAdmin(address,bool)', 'changeIndividualVMRCup(address,uint256)', 'changeOwnerCandidate(address)', 'giveBackEth()', 'changeMinBalance(uint256)', 'initialize()', 'getInfoExt(address)']
['giveBackEth()']:writes at the last depth:[]
['initialize()']:writes at the last depth:['54', '53', '51', '56', '0', '61', '55']
contract coverage: 70.81%
============================
iteration:4
['initialize()', 'fallback']:writes at the last depth:[]
['initialize()', 'fallback']:writes at the last depth:[]
['initialize()', 'fallback']:writes at the last depth:[]
['initialize()', 'fallback']:writes at the last depth:[]
['initialize()', 'fallback']:writes at the last depth:[]
['initialize()', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'lockFunds(uint256)']:writes at the last depth:['67', '66']
['initialize()', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 70.81%
============================
iteration:5
['initialize()', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'lockFunds(uint256)']:writes at the last depth:['67', '66']
['initialize()', 'transferTokens(address,address,uint256)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 70.81%
============================
iteration:6
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'lockFunds(uint256)']:writes at the last depth:['67', '66']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 70.81%
============================
iteration:7
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'lockFunds(uint256)']:writes at the last depth:['67', '66']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 70.81%
============================
iteration:8
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'lockFunds(uint256)']:writes at the last depth:['67', '66']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 70.81%
============================
iteration:9
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'lockFunds(uint256)']:writes at the last depth:['67', '66']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 70.81%
============================
iteration:10
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'lockFunds(uint256)']:writes at the last depth:['67', '66']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 70.81%
============================
iteration:11
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'lockFunds(uint256)']:writes at the last depth:['67', '66']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'updatePaymentMode(address,uint256,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 82.35%
============================
iteration:12
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'lockFunds(uint256)']:writes at the last depth:['67', '66']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'setDepositTokens(address[],uint256[])']:writes at the last depth:['']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'setDepositTokens(address[],uint256[])']:writes at the last depth:['']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'getInfo(address)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 85.40%
============================
iteration:13
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'lockFunds(uint256)']:writes at the last depth:['67', '66']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'giveBackEth()']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'takeEth(address,uint256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'takeEth(address,uint256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'takeEth(address,uint256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'takeEth(address,uint256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'getInfo(address)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 85.40%
============================
iteration:14
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'lockFunds(uint256)']:writes at the last depth:['67', '66']
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 85.40%
============================
iteration:15
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'lockFunds(uint256)']:writes at the last depth:['67', '66']
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'updatePaymentMode(address,uint256,uint256)']:writes at the last depth:['62', '63', '61']
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'getInfo(address)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)', 'getInfo(address)']:writes at the last depth:[]
contract coverage: 85.40%
============================
iteration:16
contract coverage: 85.40%
============================
iteration:17
contract coverage: 85.40%
============================
iteration:18
contract coverage: 85.40%
============================
iteration:19
contract coverage: 85.40%
============================
iteration:20
contract coverage: 85.40%
============================
iteration:21
contract coverage: 85.40%
============================
iteration:22
contract coverage: 85.40%
============================
iteration:23
contract coverage: 85.40%
============================
iteration:24
contract coverage: 85.40%
============================
iteration:25
contract coverage: 85.40%
============================
iteration:26
contract coverage: 85.40%
============================
iteration:27
contract coverage: 85.40%
============================
iteration:28
contract coverage: 85.40%
============================
iteration:29
contract coverage: 85.40%
============================
iteration:30
contract coverage: 85.40%
============================
iteration:31
contract coverage: 85.40%
============================
iteration:32
contract coverage: 85.40%
============================
iteration:33
contract coverage: 85.40%
============================
iteration:34
contract coverage: 85.40%
============================
iteration:35
contract coverage: 85.40%
============================
iteration:36
contract coverage: 85.40%
============================
iteration:37
contract coverage: 85.40%
============================
iteration:38
contract coverage: 85.40%
============================
iteration:39
contract coverage: 85.40%
============================
iteration:40
contract coverage: 85.40%
============================
iteration:41
contract coverage: 85.40%
============================
iteration:42
contract coverage: 85.40%
============================
iteration:43
contract coverage: 85.40%
#@statespace
5652 nodes, 5651 edges, 76199 total states
#@coverage
Achieved 0.35% coverage for code: 608060405234801561001057600080fd5b50612e10806100206000396000f3fe60806040526004361061014b5760003560e01c80638c8f95fb116100b6578063d6c633e81161006f578063d6c633e814610bbc578063e9889b8114610c21578063ebbc496514610ca6578063eef793d914610cbd578063f8800fae14610d18578063ffdd5cf114610d435761014b565b80638c8f95fb146109d45780638da5cb5b14610a0f578063978d635014610a66578063a64b6e5f14610ae0578063ab7c63f114610b5b578063d091b55014610b655761014b565b806354f79cf31161010857806354f79cf31461079f578063561a01b81461080b5780635b14319c1461085c5780636d89ffb0146109375780638129fc1c1461099257806389c3ef6c146109a95761014b565b806304da3f19146105aa5780632e1a7d4d14610608578063429b62e514610643578063446d5b4e146106ac5780634b0bddd2146107075780634ea18fab14610764575b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461018357600080fd5b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156101de576105a8565b6101e83333610de7565b6000603960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000603b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561027e5760355490505b808260030154101561028f57600080fd5b6000341461029c57600080fd5b60008260000154141580156102b8575081600001548260020154105b156103eb57600061031762278d00610309856001015442036102fb60646102ed60148a6000015461116090919063ffffffff16565b6111e690919063ffffffff16565b61116090919063ffffffff16565b6111e690919063ffffffff16565b9050826000015461033584600201548361127590919063ffffffff16565b11156103735782600201548360000154111561036d57610366836002015484600001546112fd90919063ffffffff16565b9050610372565b600090505b5b60008111156103e95761039381846002015461127590919063ffffffff16565b836002018190555060003390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156103e6573d6000803e3d6000fd5b50505b505b6000604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000808260020154141561044457603f5461044a565b81600201545b9050600081856003015411610463578460030154610465565b815b905060006104bd62278d006104af886001015442036104a1606461049360148961116090919063ffffffff16565b6111e690919063ffffffff16565b61116090919063ffffffff16565b6111e690919063ffffffff16565b90506000670de0b6b3a7640000603e548302816104d657fe5b0490506105263382603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113869092919063ffffffff16565b80856000016000603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550428760010181905550505050505050505b005b3480156105b657600080fd5b506105bf611399565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561061457600080fd5b506106416004803603602081101561062b57600080fd5b81019080803590602001909291905050506113ca565b005b34801561064f57600080fd5b506106926004803603602081101561066657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114b8565b604051808215151515815260200191505060405180910390f35b3480156106b857600080fd5b50610705600480360360408110156106cf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114d8565b005b34801561071357600080fd5b506107626004803603604081101561072a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061158e565b005b34801561077057600080fd5b5061079d6004803603602081101561078757600080fd5b8101908080359060200190929190505050611640565b005b3480156107ab57600080fd5b506107ee600480360360208110156107c257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116ab565b604051808381526020018281526020019250505060405180910390f35b34801561081757600080fd5b5061085a6004803603602081101561082e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061173d565b005b34801561086857600080fd5b506109356004803603604081101561087f57600080fd5b810190808035906020019064010000000081111561089c57600080fd5b8201836020820111156108ae57600080fd5b803590602001918460208302840111640100000000831117156108d057600080fd5b9091929391929390803590602001906401000000008111156108f157600080fd5b82018360208201111561090357600080fd5b8035906020019184602083028401116401000000008311171561092557600080fd5b90919293919293905050506117d8565b005b34801561094357600080fd5b506109906004803603604081101561095a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506118f2565b005b34801561099e57600080fd5b506109a7611a22565b005b3480156109b557600080fd5b506109be611d36565b6040518082815260200191505060405180910390f35b3480156109e057600080fd5b50610a0d600480360360208110156109f757600080fd5b8101908080359060200190929190505050611d3c565b005b348015610a1b57600080fd5b50610a24611dc2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a7257600080fd5b50610ab560048036036020811015610a8957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611de8565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b348015610aec57600080fd5b50610b5960048036036060811015610b0357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611fd5565b005b610b6361205c565b005b348015610b7157600080fd5b50610b7a612110565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bc857600080fd5b50610c1f60048036036060811015610bdf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050612136565b005b348015610c2d57600080fd5b50610c9060048036036040811015610c4457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612295565b6040518082815260200191505060405180910390f35b348015610cb257600080fd5b50610cbb61231f565b005b348015610cc957600080fd5b50610d1660048036036040811015610ce057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506123de565b005b348015610d2457600080fd5b50610d2d612487565b6040518082815260200191505060405180910390f35b348015610d4f57600080fd5b50610d9260048036036020811015610d6657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061248d565b604051808b81526020018a81526020018981526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020019a505050505050505050505060405180910390f35b603860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661115c576000806000603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffdd5cf1866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060806040518083038186803b158015610edc57600080fd5b505afa158015610ef0573d6000803e3d6000fd5b505050506040513d6080811015610f0657600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190505050508093508194508295505050506000831115611074576000610f9b84610f8d6014610f7f6064610f7162278d008a61116090919063ffffffff16565b61116090919063ffffffff16565b6111e690919063ffffffff16565b6111e690919063ffffffff16565b420390506000603960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050604051806080016040528086815260200183815260200184815260200182815250603960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505050505b6001603860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611158576001603860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050505b5050565b60008083141561117357600090506111e0565b600082840290508284828161118457fe5b04146111db576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612d636021913960400191505060405180910390fd5b809150505b92915050565b600080821161125d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b600082848161126857fe5b0490508091505092915050565b6000808284019050838110156112f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600082821115611375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b600082840390508091505092915050565b61139383838360006127e3565b50505050565b600080603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150603e5490509091565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461142157fe5b42604354111561144c5760425461144182476112fd90919063ffffffff16565b1161144b57600080fd5b5b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156114b4573d6000803e3d6000fd5b5050565b603a6020528060005260406000206000915054906101000a900460ff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461152f57fe5b600081121561153d57600080fd5b6000603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160000181905550505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115e557fe5b80603a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461169757fe5b670de0b6b3a7640000810260358190555050565b600080603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549150603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050915091565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461179457fe5b80603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661182b57fe5b600084849050905082829050811461184257600080fd5b60008090505b818161ffff1610156118ea5783838261ffff1681811061186457fe5b905060200201356039600088888561ffff1681811061187f57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055508080600101915050611848565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561192b573391505b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600101548260000154011361198557600080fd5b818160010154826000015401101561199c57600080fd5b8181600101600082825403925050819055506119b8838361293f565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f14ab110831c9d210715b0adedbc67b2f0b80c10ad2853488332d1e4fbd85f81d846040518082815260200191505060405180910390a3505050565b600060019054906101000a900460ff1680611a415750611a406129bd565b5b80611a5857506000809054906101000a900460ff16155b611aad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612d84602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015611afd576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b73063b98a414eaa1d4a5d4fc235a22db1427199024603660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550739c235ac2c33077a30593a3fd27a0087c687a80a3603760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550683635c9adc5dea000006035819055506001603860007312a09763ec6e5b7cbc4feb7178db8c91a79e456a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016038600073b7722517f410914fff62df357a0c14b88efb936973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555033603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000603d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015611d335760008060016101000a81548160ff0219169083151502179055505b50565b60425481565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d9357fe5b426043541115611dac576042548111611dab57600080fd5b5b8060428190555062278d00420160438190555050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080611df6612d03565b604060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815250509050611eb4612d3a565b603960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050600082602001511415611f3d57603f54611f43565b81602001515b955085816060015111611f5a578060600151611f5c565b855b9450611fb262278d00611fa483602001514203611f966064611f8860148c61116090919063ffffffff16565b6111e690919063ffffffff16565b61116090919063ffffffff16565b6111e690919063ffffffff16565b9350670de0b6b3a7640000603e54850281611fc957fe5b04925050509193509193565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461202c57fe5b61205782828573ffffffffffffffffffffffffffffffffffffffff166113869092919063ffffffff16565b505050565b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015413156120bf573481600101600082825401925050819055505b3373ffffffffffffffffffffffffffffffffffffffff167fac51d2759ef9a0c22072ba515685b302d83fa6ff1d5ec2948396ac46e82d864c346040518082815260200191505060405180910390a250565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461218d57fe5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806122155750603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b61221e57600080fd5b82603d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000821461226f5781603e819055505b6000603e54141561227f57600080fd5b670de0b6b3a76400008102603f81905550505050565b6000604060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461237957600080fd5b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461243557fe5b670de0b6b3a76400008102603b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60435481565b600080600080600080600080600080479650603b60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054945060008514156124f05760355494505b603e549050603860008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661269557603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffdd5cf18c6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060806040518083038186803b1580156125e557600080fd5b505afa1580156125f9573d6000803e3d6000fd5b505050506040513d608081101561260f57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505050809a50819b50829c50505050603960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015495506127d6565b61269d612d3a565b603960008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905080600001519a506000816000015111156127805761277d62278d0061276f8360200151420361276160646127536014886000015161116090919063ffffffff16565b6111e690919063ffffffff16565b61116090919063ffffffff16565b6111e690919063ffffffff16565b99505b80604001519850806060015196506127978c611de8565b9091925090915080955081965050506127d28c603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612295565b9250505b9193959799509193959799565b6000808314156127f65760019050612937565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480612870575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b156129075781156128b7578373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050509050612937565b8373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156128fd573d6000803e3d6000fd5b5060019050612937565b61293284848773ffffffffffffffffffffffffffffffffffffffff166129d49092919063ffffffff16565b600190505b949350505050565b600082905060008173ffffffffffffffffffffffffffffffffffffffff168360405180600001905060006040518083038185875af1925050503d80600081146129a4576040519150601f19603f3d011682016040523d82523d6000602084013e6129a9565b606091505b50509050806129b757600080fd5b50505050565b6000803090506000813b9050600081149250505090565b612aa0838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612aa5565b505050565b612ac48273ffffffffffffffffffffffffffffffffffffffff16612cf0565b612b36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e74726163740081525060200191505060405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b60208310612b855780518252602082019150602081019050602083039250612b62565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612be7576040519150601f19603f3d011682016040523d82523d6000602084013e612bec565b606091505b509150915081612c64576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656481525060200191505060405180910390fd5b600081511115612cea57808060200190516020811015612c8357600080fd5b8101908080519060200190929190505050612ce9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612db2602a913960400191505060405180910390fd5b5b50505050565b600080823b905060008111915050919050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b604051806080016040528060008152602001600081526020016000815260200160008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a265627a7a723158200b282f15f7d0423681e4b1dac97933878430ffd3563c9678ae515c11008d808264736f6c63430005100032
#@coverage
Achieved 85.40% coverage for code: 60806040526004361061014b5760003560e01c80638c8f95fb116100b6578063d6c633e81161006f578063d6c633e814610bbc578063e9889b8114610c21578063ebbc496514610ca6578063eef793d914610cbd578063f8800fae14610d18578063ffdd5cf114610d435761014b565b80638c8f95fb146109d45780638da5cb5b14610a0f578063978d635014610a66578063a64b6e5f14610ae0578063ab7c63f114610b5b578063d091b55014610b655761014b565b806354f79cf31161010857806354f79cf31461079f578063561a01b81461080b5780635b14319c1461085c5780636d89ffb0146109375780638129fc1c1461099257806389c3ef6c146109a95761014b565b806304da3f19146105aa5780632e1a7d4d14610608578063429b62e514610643578063446d5b4e146106ac5780634b0bddd2146107075780634ea18fab14610764575b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461018357600080fd5b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156101de576105a8565b6101e83333610de7565b6000603960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000603b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561027e5760355490505b808260030154101561028f57600080fd5b6000341461029c57600080fd5b60008260000154141580156102b8575081600001548260020154105b156103eb57600061031762278d00610309856001015442036102fb60646102ed60148a6000015461116090919063ffffffff16565b6111e690919063ffffffff16565b61116090919063ffffffff16565b6111e690919063ffffffff16565b9050826000015461033584600201548361127590919063ffffffff16565b11156103735782600201548360000154111561036d57610366836002015484600001546112fd90919063ffffffff16565b9050610372565b600090505b5b60008111156103e95761039381846002015461127590919063ffffffff16565b836002018190555060003390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156103e6573d6000803e3d6000fd5b50505b505b6000604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000808260020154141561044457603f5461044a565b81600201545b9050600081856003015411610463578460030154610465565b815b905060006104bd62278d006104af886001015442036104a1606461049360148961116090919063ffffffff16565b6111e690919063ffffffff16565b61116090919063ffffffff16565b6111e690919063ffffffff16565b90506000670de0b6b3a7640000603e548302816104d657fe5b0490506105263382603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113869092919063ffffffff16565b80856000016000603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550428760010181905550505050505050505b005b3480156105b657600080fd5b506105bf611399565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561061457600080fd5b506106416004803603602081101561062b57600080fd5b81019080803590602001909291905050506113ca565b005b34801561064f57600080fd5b506106926004803603602081101561066657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114b8565b604051808215151515815260200191505060405180910390f35b3480156106b857600080fd5b50610705600480360360408110156106cf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114d8565b005b34801561071357600080fd5b506107626004803603604081101561072a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061158e565b005b34801561077057600080fd5b5061079d6004803603602081101561078757600080fd5b8101908080359060200190929190505050611640565b005b3480156107ab57600080fd5b506107ee600480360360208110156107c257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116ab565b604051808381526020018281526020019250505060405180910390f35b34801561081757600080fd5b5061085a6004803603602081101561082e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061173d565b005b34801561086857600080fd5b506109356004803603604081101561087f57600080fd5b810190808035906020019064010000000081111561089c57600080fd5b8201836020820111156108ae57600080fd5b803590602001918460208302840111640100000000831117156108d057600080fd5b9091929391929390803590602001906401000000008111156108f157600080fd5b82018360208201111561090357600080fd5b8035906020019184602083028401116401000000008311171561092557600080fd5b90919293919293905050506117d8565b005b34801561094357600080fd5b506109906004803603604081101561095a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506118f2565b005b34801561099e57600080fd5b506109a7611a22565b005b3480156109b557600080fd5b506109be611d36565b6040518082815260200191505060405180910390f35b3480156109e057600080fd5b50610a0d600480360360208110156109f757600080fd5b8101908080359060200190929190505050611d3c565b005b348015610a1b57600080fd5b50610a24611dc2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a7257600080fd5b50610ab560048036036020811015610a8957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611de8565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b348015610aec57600080fd5b50610b5960048036036060811015610b0357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611fd5565b005b610b6361205c565b005b348015610b7157600080fd5b50610b7a612110565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bc857600080fd5b50610c1f60048036036060811015610bdf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050612136565b005b348015610c2d57600080fd5b50610c9060048036036040811015610c4457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612295565b6040518082815260200191505060405180910390f35b348015610cb257600080fd5b50610cbb61231f565b005b348015610cc957600080fd5b50610d1660048036036040811015610ce057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506123de565b005b348015610d2457600080fd5b50610d2d612487565b6040518082815260200191505060405180910390f35b348015610d4f57600080fd5b50610d9260048036036020811015610d6657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061248d565b604051808b81526020018a81526020018981526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020019a505050505050505050505060405180910390f35b603860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661115c576000806000603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffdd5cf1866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060806040518083038186803b158015610edc57600080fd5b505afa158015610ef0573d6000803e3d6000fd5b505050506040513d6080811015610f0657600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190505050508093508194508295505050506000831115611074576000610f9b84610f8d6014610f7f6064610f7162278d008a61116090919063ffffffff16565b61116090919063ffffffff16565b6111e690919063ffffffff16565b6111e690919063ffffffff16565b420390506000603960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050604051806080016040528086815260200183815260200184815260200182815250603960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505050505b6001603860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611158576001603860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050505b5050565b60008083141561117357600090506111e0565b600082840290508284828161118457fe5b04146111db576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612d636021913960400191505060405180910390fd5b809150505b92915050565b600080821161125d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b600082848161126857fe5b0490508091505092915050565b6000808284019050838110156112f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600082821115611375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b600082840390508091505092915050565b61139383838360006127e3565b50505050565b600080603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150603e5490509091565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461142157fe5b42604354111561144c5760425461144182476112fd90919063ffffffff16565b1161144b57600080fd5b5b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156114b4573d6000803e3d6000fd5b5050565b603a6020528060005260406000206000915054906101000a900460ff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461152f57fe5b600081121561153d57600080fd5b6000603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160000181905550505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115e557fe5b80603a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461169757fe5b670de0b6b3a7640000810260358190555050565b600080603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549150603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050915091565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461179457fe5b80603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661182b57fe5b600084849050905082829050811461184257600080fd5b60008090505b818161ffff1610156118ea5783838261ffff1681811061186457fe5b905060200201356039600088888561ffff1681811061187f57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055508080600101915050611848565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561192b573391505b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600101548260000154011361198557600080fd5b818160010154826000015401101561199c57600080fd5b8181600101600082825403925050819055506119b8838361293f565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f14ab110831c9d210715b0adedbc67b2f0b80c10ad2853488332d1e4fbd85f81d846040518082815260200191505060405180910390a3505050565b600060019054906101000a900460ff1680611a415750611a406129bd565b5b80611a5857506000809054906101000a900460ff16155b611aad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612d84602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015611afd576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b73063b98a414eaa1d4a5d4fc235a22db1427199024603660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550739c235ac2c33077a30593a3fd27a0087c687a80a3603760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550683635c9adc5dea000006035819055506001603860007312a09763ec6e5b7cbc4feb7178db8c91a79e456a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016038600073b7722517f410914fff62df357a0c14b88efb936973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555033603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000603d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015611d335760008060016101000a81548160ff0219169083151502179055505b50565b60425481565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d9357fe5b426043541115611dac576042548111611dab57600080fd5b5b8060428190555062278d00420160438190555050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080611df6612d03565b604060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815250509050611eb4612d3a565b603960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050600082602001511415611f3d57603f54611f43565b81602001515b955085816060015111611f5a578060600151611f5c565b855b9450611fb262278d00611fa483602001514203611f966064611f8860148c61116090919063ffffffff16565b6111e690919063ffffffff16565b61116090919063ffffffff16565b6111e690919063ffffffff16565b9350670de0b6b3a7640000603e54850281611fc957fe5b04925050509193509193565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461202c57fe5b61205782828573ffffffffffffffffffffffffffffffffffffffff166113869092919063ffffffff16565b505050565b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015413156120bf573481600101600082825401925050819055505b3373ffffffffffffffffffffffffffffffffffffffff167fac51d2759ef9a0c22072ba515685b302d83fa6ff1d5ec2948396ac46e82d864c346040518082815260200191505060405180910390a250565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461218d57fe5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806122155750603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b61221e57600080fd5b82603d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000821461226f5781603e819055505b6000603e54141561227f57600080fd5b670de0b6b3a76400008102603f81905550505050565b6000604060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461237957600080fd5b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461243557fe5b670de0b6b3a76400008102603b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60435481565b600080600080600080600080600080479650603b60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054945060008514156124f05760355494505b603e549050603860008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661269557603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffdd5cf18c6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060806040518083038186803b1580156125e557600080fd5b505afa1580156125f9573d6000803e3d6000fd5b505050506040513d608081101561260f57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505050809a50819b50829c50505050603960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015495506127d6565b61269d612d3a565b603960008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905080600001519a506000816000015111156127805761277d62278d0061276f8360200151420361276160646127536014886000015161116090919063ffffffff16565b6111e690919063ffffffff16565b61116090919063ffffffff16565b6111e690919063ffffffff16565b99505b80604001519850806060015196506127978c611de8565b9091925090915080955081965050506127d28c603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612295565b9250505b9193959799509193959799565b6000808314156127f65760019050612937565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480612870575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b156129075781156128b7578373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050509050612937565b8373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156128fd573d6000803e3d6000fd5b5060019050612937565b61293284848773ffffffffffffffffffffffffffffffffffffffff166129d49092919063ffffffff16565b600190505b949350505050565b600082905060008173ffffffffffffffffffffffffffffffffffffffff168360405180600001905060006040518083038185875af1925050503d80600081146129a4576040519150601f19603f3d011682016040523d82523d6000602084013e6129a9565b606091505b50509050806129b757600080fd5b50505050565b6000803090506000813b9050600081149250505090565b612aa0838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612aa5565b505050565b612ac48273ffffffffffffffffffffffffffffffffffffffff16612cf0565b612b36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e74726163740081525060200191505060405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b60208310612b855780518252602082019150602081019050602083039250612b62565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612be7576040519150601f19603f3d011682016040523d82523d6000602084013e612bec565b606091505b509150915081612c64576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656481525060200191505060405180910390fd5b600081511115612cea57808060200190516020811015612c8357600080fd5b8101908080519060200190929190505050612ce9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612db2602a913960400191505060405180910390fd5b5b50505050565b600080823b905060008111915050919050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b604051806080016040528060008152602001600081526020016000815260200160008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a265627a7a723158200b282f15f7d0423681e4b1dac97933878430ffd3563c9678ae515c11008d808264736f6c63430005100032
==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: fallback
PC address: 382
Estimated Gas Usage: 62 - 157
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:522

require(msg.sender == tx.origin)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: fallback
PC address: 473
Estimated Gas Usage: 935 - 1360
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:524

if (msg.sender == owner) return;

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8020043000080, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: withdraw(uint256)
PC address: 5151
Estimated Gas Usage: 1122 - 1547
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:335

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000101002000000008081002408000044080014002, decoded_data: (5731302405058112253726044064405325257193373698,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: withdraw(uint256)
PC address: 5152
Estimated Gas Usage: 1132 - 1557
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:419

function withdraw(uint256 amount)  public onlyOwner {
        if (dateUntilFundsLocked > now) require(address(this).balance.sub(amount) > fundsLockedtoWithdraw);
        owner.transfer(amount);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000004000004000001000012000201000020140004008, decoded_data: (365375431110797537009884699489270160973189103624,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ShareholderVomer
Function name: withdraw(uint256)
PC address: 5163
Estimated Gas Usage: 1947 - 2372
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:420

if (dateUntilFundsLocked > now) require(address(this).balance.sub(amount) > fundsLockedtoWithdraw)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [CREATOR], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000020000000000000000000000, decoded_data: (618970019642690137449562112,), value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ShareholderVomer
Function name: withdraw(uint256)
PC address: 5278
Estimated Gas Usage: 3612 - 38553
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:421

owner.transfer(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8040000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [ATTACKER], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010110012001020401020101400180011001808040012001000180010201, decoded_data: ('0x0000000000000010000000000000000000000000', '0x0000000000000000000000000000000000000001', 454086626039797701597521357132616928737617739677926554614025481094361580033), value: 0x0
Caller: [ATTACKER], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f000000000000000000000000014020800400102008080008000040000080010000000000000000000000000000000000000000000000000000000000000000002001088001010101020102010101100801800102010101010208010140010101, decoded_data: ('0x0140208004001020080800080000400000800100', '0x0000000000000000000000000000000000000000', 14475836666678975813140319489632059030979274552005627995952925022064321036545), value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000002000000000000000000040000000000000000000040, decoded_data: (748288838313422294120287872290776191444112361128000,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: setPartnerContract(address,int256)
PC address: 5421
Estimated Gas Usage: 1199 - 1624
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:335

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setPartnerContract(address,int256), txdata: 0x446d5b4e00000000000000000000000000000120000080008010010000020140100840100000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000012000008000801001000002014010084010', 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: setPartnerContract(address,int256)
PC address: 5422
Estimated Gas Usage: 1209 - 1634
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:401

function setPartnerContract(address addr, int256 maxCredit) onlyOwner public {
        require(maxCredit >= 0);
        Partner storage data = partners[addr];
        data.maxCredit = maxCredit;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setPartnerContract(address,int256), txdata: 0x446d5b4e00000000000000000000000040020000000080088040000080402000002000200000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x4002000000008008804000008040200000200020', 0), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: setAdmin(address,bool)
PC address: 5603
Estimated Gas Usage: 1227 - 1652
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:335

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setAdmin(address,bool), txdata: 0x4b0bddd210101010101010101010101040400010100204800201804000102008022010801010101010101010101010101010101010101010101010101010101010101010, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: setAdmin(address,bool)
PC address: 5604
Estimated Gas Usage: 1237 - 1662
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:407

function setAdmin(address newAdmin, bool activate) onlyOwner public {
        admins[newAdmin] = activate;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setAdmin(address,bool), txdata: 0x4b0bddd200000000000000000000000000404080802040080108040000002002010820000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0040408080204008010804000000200201082000', False), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: changeMinBalance(uint256)
PC address: 5781
Estimated Gas Usage: 1210 - 1635
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:335

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeMinBalance(uint256), txdata: 0x4ea18fab0000000000000000000000008000404080000001200108001002802040100104, decoded_data: (730756415799963758247291623209824333977028133124,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: changeMinBalance(uint256)
PC address: 5782
Estimated Gas Usage: 1220 - 1645
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:442

function changeMinBalance(uint256 newMinBalanceInInteger) public onlyOwner {
        MinBalanceVMR = newMinBalanceInInteger * 10**18;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: changeMinBalance(uint256), txdata: 0x4ea18fab0000000000000000000000000040014080800001010000020801012004010000, decoded_data: (1427356753869172119265931479018994822220414976,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ShareholderVomer
Function name: changeMinBalance(uint256)
PC address: 5794
Estimated Gas Usage: 6254 - 26679
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:443

newMinBalanceInInteger * 10**18

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [ATTACKER], function: changeMinBalance(uint256), txdata: 0x4ea18fab0000045fa048600000200561bce1457227e453da100010000004c0000ec5e801, decoded_data: (30185060060556622177680529808642548420869658396796913195227168243050497,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: changeOwnerCandidate(address)
PC address: 6034
Estimated Gas Usage: 1127 - 1552
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:335

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeOwnerCandidate(address), txdata: 0x561a01b80808080808080808080808080808000100200801800820040010400004401010, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: changeOwnerCandidate(address)
PC address: 6035
Estimated Gas Usage: 1137 - 1562
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:433

function changeOwnerCandidate(address payable newOwner) public onlyOwner {
        newOwnerCandidate = newOwner;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeOwnerCandidate(address), txdata: 0x561a01b80808080808080808080808088008082040018001080208082004020440080210, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: setDepositTokens(address[],uint256[])
PC address: 6186
Estimated Gas Usage: 1550 - 2165
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:511

function setDepositTokens(address[] calldata userAddress, uint256[] calldata amountTokens) onlyAdmin external {
        uint256 len = userAddress.length;
        require(len == amountTokens.length);

        for(uint16 i = 0;i < len; i++) {
            investors[userAddress[i]].totalVMR = amountTokens[i];
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setDepositTokens(address[],uint256[]), txdata: 0x5b14319c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, decoded_data: ([], []), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: lockFunds(uint256)
PC address: 7569
Estimated Gas Usage: 1099 - 1524
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:335

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: lockFunds(uint256), txdata: 0x8c8f95fbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfb, decoded_data: (113975742739475941377711047988943783808512808435591300289819033670534100155387,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: lockFunds(uint256)
PC address: 7570
Estimated Gas Usage: 1109 - 1534
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:424

function lockFunds(uint256 amount) public onlyOwner {
        
        if (dateUntilFundsLocked > now) {
            require(amount > fundsLockedtoWithdraw);
        }
        fundsLockedtoWithdraw = amount;
        dateUntilFundsLocked = now + 30 days;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: lockFunds(uint256), txdata: 0x8c8f95fbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfb, decoded_data: (113975742739475941377711047988943783808512808435591300289819033670534100155387,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ShareholderVomer
Function name: lockFunds(uint256)
PC address: 7581
Estimated Gas Usage: 1924 - 2349
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:426

if (dateUntilFundsLocked > now) {
            require(amount > fundsLockedtoWithdraw);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [ATTACKER], function: lockFunds(uint256), txdata: 0x8c8f95fb0000000000000000000000000000000000000000000040000000000000000000, decoded_data: (302231454903657293676544,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ShareholderVomer
Function name: lockFunds(uint256)
PC address: 7609
Estimated Gas Usage: 11979 - 52404
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:430

now + 30 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [ATTACKER], function: lockFunds(uint256), txdata: 0x8c8f95fb0000000000000000000000000000800000000000000000000000000000000000, decoded_data: (11150372599265311570767859136324180752990208,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: transferTokens(address,address,uint256)
PC address: 8234
Estimated Gas Usage: 1231 - 1656
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:335

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020204040040280200420204008001040100810010000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', '0x2020404004028020042020400800104010081001', 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: transferTokens(address,address,uint256)
PC address: 8235
Estimated Gas Usage: 1241 - 1666
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:452

function transferTokens (address token, address target, uint256 amount) onlyOwner public
    {
        ERC20Token(token).universalTransfer(target, amount);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000020020108010201800000800000200000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000400000002002010801020180000080000020', 0), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: updatePaymentMode(address,uint256,uint256)
PC address: 8587
Estimated Gas Usage: 1158 - 1583
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:335

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updatePaymentMode(address,uint256,uint256), txdata: 0xd6c633e8808080808080808080808080080840080040208001808080208080108004080880808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: updatePaymentMode(address,uint256,uint256)
PC address: 8588
Estimated Gas Usage: 1168 - 1593
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:360

function updatePaymentMode(address newPaymantMode, uint256 newRateInWei, uint256 newGlobalLimitVMRInInteger) onlyOwner public {
        require(newPaymantMode == address(0) || newPaymantMode == address(VMR_Token));
        paymentToken = newPaymantMode;
        if (newRateInWei != 0) VMR_ETH_RATE = newRateInWei;
        require(VMR_ETH_RATE != 0);
        globalLimitVMR = newGlobalLimitVMRInInteger * 10**18;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: updatePaymentMode(address,uint256,uint256), txdata: 0xd6c633e8000000000000000000000000000000080200808020800000084010100880080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000802008080208000000840101008800808', 0, 0), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ShareholderVomer
Function name: updatePaymentMode(address,uint256,uint256)
PC address: 8842
Estimated Gas Usage: 18847 - 79932
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:365

newGlobalLimitVMRInInteger * 10**18

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [SOMEGUY], function: updatePaymentMode(address,uint256,uint256), txdata: 0xd6c633e8000000000000000000000000063b98a414eaa1d4a5d4fc235a22db1427199024020104080810010140020810000000000000000000000000000000000000000000004c024c00009102c0a33629db05800000e92760744e22c1844ec900ab0401, decoded_data: ('0x063b98a414eaa1d4a5d4fc235a22db1427199024', 906420367745353626898858038698265284925694379157402351441154690284693487616, 524594645984494206713319388507121595395489022224467500997148426191438849), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: acceptOwner()
PC address: 9076
Estimated Gas Usage: 1060 - 1485
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:438

require(msg.sender == newOwnerCandidate)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: acceptOwner(), txdata: 0xebbc4965, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: changeIndividualVMRCup(address,uint256)
PC address: 9267
Estimated Gas Usage: 1197 - 1622
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:335

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: changeIndividualVMRCup(address,uint256), txdata: 0xeef793d980808080808080808080808080020040808020002010200080800480008010008080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: changeIndividualVMRCup(address,uint256)
PC address: 9268
Estimated Gas Usage: 1207 - 1632
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:412

function changeIndividualVMRCup(address userAddress, uint256 minAmountInInteger) onlyOwner public {
        individualVMRCup[userAddress] = minAmountInInteger * 10**18;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeIndividualVMRCup(address,uint256), txdata: 0xeef793d908080808080808080808080802104002200110800110020820800420084000080808080808080808080808080808080808080808080808080808080808080808, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ShareholderVomer
Function name: changeIndividualVMRCup(address,uint256)
PC address: 9280
Estimated Gas Usage: 6333 - 26948
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:413

minAmountInInteger * 10**18

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [CREATOR], function: changeIndividualVMRCup(address,uint256), txdata: 0xeef793d9000000000000000000000000000000000000000000000000000000000000000000000cf0aec00d9430029000c00000000000000102c80000000102d155575a84, decoded_data: ('0x0000000000000000000000000000000000000000', 89309746706392382202531937574313672093363398064784368962651237463317124), value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ShareholderVomer
Function name: transferTokens(address,address,uint256)
PC address: 10471
Estimated Gas Usage: 2325 - 36936
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:214

address(uint160(to)).transfer(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100080b4c400a000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [ATTACKER], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5ffcfcfcfcfcfcfcfcfcfcfcfc0000000000200101000080000401040001020000fcfcfcfcfcfcfcfcfcfcfcfc20000100000202404004808000080010021001040202010101040101010101400101020440020101011040022001020140010101, value: 0x0
Caller: [ATTACKER], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f4b4b4b4b4b4b4b4b4b4b4b4b00010000000101010001010004000400010101804b4b4b4b4b4b4b4b4b4b4b4b00000000000000000000000000000000000000010804010140040201010101011004010110080120010140010180100110010104, value: 0x0
Caller: [ATTACKER], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f4b4b4b4b4b4b4b4b4b4b4b4beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee4b4b4b4b4b4b4b4b4b4b4b4bdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef601120081a0652a30559203c8004100880010140400280401040406000016001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ShareholderVomer
Function name: transferTokens(address,address,uint256)
PC address: 11192
Estimated Gas Usage: 3940 - 40947
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:182

address(token).call(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [SOMEGUY], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000004002800101010180400102204001044001010101100101010101040104010101, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000000', 28952439454056667563651670177524982526879399997588526721218478498413231014145), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ShareholderVomer
Function name: transferTokens(address,address,uint256)
PC address: 11217
Estimated Gas Usage: 3940 - 40947
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [SOMEGUY], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000010101011001010101010108100101011001010101041001018001024001010204022020, decoded_data: ('0x0000000000000000000400000000000000000000', '0x0000000000000000000000000000000001010101', 7238779353209059381372357735389051646385734944474802204408579987169077239840), value: 0x0


time_used: 36060.4831430912 seconds
#@contract_info_time
0x068d8c19cf10bc4a69f6c4a9ae9a48f6e251f3ed.sol:0.5.16:ShareholderVomer:36060.4831430912:36100:60:36000
