++++ 0x9b97bb0bf1f65afb024a9d4fdf6037bd12ec3d40.sol  :  0.5.9  :  EtherWin ++++
1178969272939685631144305945522239555557685570784 is added into actors.
954536653761909700937439582516630481700047753763 is added into actors.
390249626435611189575833390714560531680251756715 is added into actors.
553127782651945101962429955892548712560126830607 is added into actors.
Starting preprocessing.
number of genesis states: 1
total instructions: 5574
['constructor']:writes at the last depth:['6', '7', '8', '11', '12', '13', '23', '0', '2', '3', '4', '5', '1', '16', '16', '16', '16', '16', '16', '16']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 91.30% coverage.
dynamic svars:['16', '20', '19', '21', '14', '15', '22', '17']
static svars:['10', '8', '24', '9', '6', '7', '23', '1', '3', '4', '5', '18', '12', '13', '0', '11', '2']
Ending preprocessing.
preprocessing time(s): 104.29658699035645
contract coverage: 64.84%
withdrawRefsPercent() is not reachable
transferEthersToDividendManager() is not reachable
returnDeposit() is not reachable
claimTokens(address) is not reachable
Function Reads: State variables read in conditions
	jackpotValue(uint256,uint256):['20', '19']
	play(address,uint256):['14']
	blocks(uint256):[]
	admin():['0']
	ownerWallet2():[]
	addWinBlock(uint256):['17', '15', '16']
	addEth():['10']
	transferEthersToDividendManager():['24', '9']
	tickets(address,uint256):[]
	claimTokens(address):['0']
	minWei():[]
	minJackpotValue(uint256):['20', '19']
	lastPayout():[]
	ownerWallet1():[]
	ownerWallet3():[]
	getPrize(uint256):['14', '17', '15', '6', '16']
	JPBlocks(uint256):['20']
	changeWeiPerBlock(uint256):['0']
	setOwnerWallet(address,address,address):['0']
	refs(address):[]
	returnDeposit():['0']
	setDividendManager(address):['0']
	owner():[]
	devWallet():[]
	ownersPercent():[]
	refPercent():[]
	ownersWeis():[]
	allTicketsForBlock(uint256):[]
	maxWeiPerBlock():[]
	withdrawRefsPercent():['21']
	allTicketsPrice():[]
	dividendManagerAddress():[]
	userRefs(address):[]
	winBlocks(uint256):[]
	maxWei():[]
	prizePercent():[]
	depositWeis():[]
	changeTicketWeiLimit(uint256,uint256,uint256):['0']
Function Writes: State variables written
	addEth():['10']
	returnDeposit():['10']
	changeWeiPerBlock(uint256):['8']
	transferEthersToDividendManager():['24', '9']
	changeTicketWeiLimit(uint256,uint256,uint256):['6', '7', '23']
	setDividendManager(address):['1']
	withdrawRefsPercent():['21']
	setOwnerWallet(address,address,address):['3', '4', '5']
	play(address,uint256):['14', '15', '22', '18', '19']
	addWinBlock(uint256):['17', '20']
	getPrize(uint256):['14', '17']
============================
iteration:3
targets:['withdrawRefsPercent()', 'addWinBlock(uint256)', 'play(address,uint256)', 'getPrize(uint256)', 'transferEthersToDividendManager()', 'JPBlocks(uint256)', 'minJackpotValue(uint256)', 'jackpotValue(uint256,uint256)', 'returnDeposit()', 'claimTokens(address)']
['addEth()']:writes at the last depth:['10']
['changeWeiPerBlock(uint256)']:writes at the last depth:['8']
['setDividendManager(address)']:writes at the last depth:['1']
['returnDeposit()']:writes at the last depth:['10']
['changeTicketWeiLimit(uint256,uint256,uint256)']:writes at the last depth:['6', '7', '23']
['setOwnerWallet(address,address,address)']:writes at the last depth:['5', '3', '4']
['claimTokens(address)']:writes at the last depth:[]
contract coverage: 64.84%
============================
iteration:4
['claimTokens(address)', 'addEth()']:writes at the last depth:['10']
['claimTokens(address)', 'changeWeiPerBlock(uint256)']:writes at the last depth:['8']
['claimTokens(address)', 'setDividendManager(address)']:writes at the last depth:['1']
['claimTokens(address)', 'returnDeposit()']:writes at the last depth:['10']
['claimTokens(address)', 'changeTicketWeiLimit(uint256,uint256,uint256)']:writes at the last depth:['6', '7', '23']
['claimTokens(address)', 'setOwnerWallet(address,address,address)']:writes at the last depth:['5', '3', '4']
['claimTokens(address)', 'claimTokens(address)']:writes at the last depth:[]
contract coverage: 64.84%
============================
iteration:5
['claimTokens(address)', 'claimTokens(address)', 'addEth()']:writes at the last depth:['10']
['claimTokens(address)', 'claimTokens(address)', 'changeWeiPerBlock(uint256)']:writes at the last depth:['8']
['claimTokens(address)', 'claimTokens(address)', 'setDividendManager(address)']:writes at the last depth:['1']
['claimTokens(address)', 'claimTokens(address)', 'returnDeposit()']:writes at the last depth:['10']
['claimTokens(address)', 'claimTokens(address)', 'changeTicketWeiLimit(uint256,uint256,uint256)']:writes at the last depth:['6', '7', '23']
['claimTokens(address)', 'claimTokens(address)', 'setOwnerWallet(address,address,address)']:writes at the last depth:['5', '3', '4']
['claimTokens(address)', 'claimTokens(address)', 'claimTokens(address)']:writes at the last depth:[]
contract coverage: 64.84%
============================
iteration:6
['claimTokens(address)', 'claimTokens(address)', 'claimTokens(address)', 'addEth()']:writes at the last depth:['10']
['claimTokens(address)', 'claimTokens(address)', 'claimTokens(address)', 'changeWeiPerBlock(uint256)']:writes at the last depth:['8']
['claimTokens(address)', 'claimTokens(address)', 'claimTokens(address)', 'setDividendManager(address)']:writes at the last depth:['1']
['claimTokens(address)', 'claimTokens(address)', 'claimTokens(address)', 'returnDeposit()']:writes at the last depth:['10']
['claimTokens(address)', 'claimTokens(address)', 'claimTokens(address)', 'changeTicketWeiLimit(uint256,uint256,uint256)']:writes at the last depth:['6', '7', '23']
['claimTokens(address)', 'claimTokens(address)', 'claimTokens(address)', 'setOwnerWallet(address,address,address)']:writes at the last depth:['5', '3', '4']
['claimTokens(address)', 'claimTokens(address)', 'claimTokens(address)', 'claimTokens(address)']:writes at the last depth:[]
contract coverage: 64.84%
============================
iteration:7
['claimTokens(address)', 'claimTokens(address)', 'setOwnerWallet(address,address,address)', 'addEth()']:writes at the last depth:['10']
['claimTokens(address)', 'claimTokens(address)', 'setOwnerWallet(address,address,address)', 'changeWeiPerBlock(uint256)']:writes at the last depth:['8']
['claimTokens(address)', 'claimTokens(address)', 'setOwnerWallet(address,address,address)', 'setDividendManager(address)']:writes at the last depth:['1']
['claimTokens(address)', 'claimTokens(address)', 'setOwnerWallet(address,address,address)', 'returnDeposit()']:writes at the last depth:['10']
['claimTokens(address)', 'claimTokens(address)', 'setOwnerWallet(address,address,address)', 'changeTicketWeiLimit(uint256,uint256,uint256)']:writes at the last depth:['6', '7', '23']
['claimTokens(address)', 'claimTokens(address)', 'setOwnerWallet(address,address,address)', 'setOwnerWallet(address,address,address)']:writes at the last depth:['5', '3', '4']
['claimTokens(address)', 'claimTokens(address)', 'setOwnerWallet(address,address,address)', 'claimTokens(address)']:writes at the last depth:[]
contract coverage: 64.84%
============================
iteration:8
['claimTokens(address)', 'claimTokens(address)', 'changeTicketWeiLimit(uint256,uint256,uint256)', 'addEth()']:writes at the last depth:['10']
['claimTokens(address)', 'claimTokens(address)', 'changeTicketWeiLimit(uint256,uint256,uint256)', 'changeWeiPerBlock(uint256)']:writes at the last depth:['8']
['claimTokens(address)', 'claimTokens(address)', 'changeTicketWeiLimit(uint256,uint256,uint256)', 'setDividendManager(address)']:writes at the last depth:['1']
['claimTokens(address)', 'claimTokens(address)', 'changeTicketWeiLimit(uint256,uint256,uint256)', 'returnDeposit()']:writes at the last depth:['10']
['claimTokens(address)', 'claimTokens(address)', 'changeTicketWeiLimit(uint256,uint256,uint256)', 'changeTicketWeiLimit(uint256,uint256,uint256)']:writes at the last depth:['6', '7', '23']
['claimTokens(address)', 'claimTokens(address)', 'changeTicketWeiLimit(uint256,uint256,uint256)', 'setOwnerWallet(address,address,address)']:writes at the last depth:['5', '3', '4']
['claimTokens(address)', 'claimTokens(address)', 'changeTicketWeiLimit(uint256,uint256,uint256)', 'claimTokens(address)']:writes at the last depth:[]
contract coverage: 64.84%
============================
iteration:9
['claimTokens(address)', 'claimTokens(address)', 'returnDeposit()', 'addEth()']:writes at the last depth:['10']
['claimTokens(address)', 'claimTokens(address)', 'returnDeposit()', 'changeWeiPerBlock(uint256)']:writes at the last depth:['8']
['claimTokens(address)', 'claimTokens(address)', 'returnDeposit()', 'setDividendManager(address)']:writes at the last depth:['1']
['claimTokens(address)', 'claimTokens(address)', 'returnDeposit()', 'returnDeposit()']:writes at the last depth:['10']
['claimTokens(address)', 'claimTokens(address)', 'returnDeposit()', 'changeTicketWeiLimit(uint256,uint256,uint256)']:writes at the last depth:['6', '7', '23']
['claimTokens(address)', 'claimTokens(address)', 'returnDeposit()', 'setOwnerWallet(address,address,address)']:writes at the last depth:['5', '3', '4']
['claimTokens(address)', 'claimTokens(address)', 'returnDeposit()', 'claimTokens(address)']:writes at the last depth:[]
contract coverage: 64.84%
============================
iteration:10
['claimTokens(address)', 'claimTokens(address)', 'setDividendManager(address)', 'addEth()']:writes at the last depth:['10']
['claimTokens(address)', 'claimTokens(address)', 'setDividendManager(address)', 'changeWeiPerBlock(uint256)']:writes at the last depth:['8']
['claimTokens(address)', 'claimTokens(address)', 'setDividendManager(address)', 'setDividendManager(address)']:writes at the last depth:['1']
['claimTokens(address)', 'claimTokens(address)', 'setDividendManager(address)', 'returnDeposit()']:writes at the last depth:['10']
['claimTokens(address)', 'claimTokens(address)', 'setDividendManager(address)', 'changeTicketWeiLimit(uint256,uint256,uint256)']:writes at the last depth:['6', '7', '23']
['claimTokens(address)', 'claimTokens(address)', 'setDividendManager(address)', 'setOwnerWallet(address,address,address)']:writes at the last depth:['5', '3', '4']
['claimTokens(address)', 'claimTokens(address)', 'setDividendManager(address)', 'claimTokens(address)']:writes at the last depth:[]
contract coverage: 64.84%
============================
iteration:11
['claimTokens(address)', 'claimTokens(address)', 'changeWeiPerBlock(uint256)', 'addEth()']:writes at the last depth:['10']
['claimTokens(address)', 'claimTokens(address)', 'changeWeiPerBlock(uint256)', 'changeWeiPerBlock(uint256)']:writes at the last depth:['8']
['claimTokens(address)', 'claimTokens(address)', 'changeWeiPerBlock(uint256)', 'setDividendManager(address)']:writes at the last depth:['1']
['claimTokens(address)', 'claimTokens(address)', 'changeWeiPerBlock(uint256)', 'returnDeposit()']:writes at the last depth:['10']
['claimTokens(address)', 'claimTokens(address)', 'changeWeiPerBlock(uint256)', 'changeTicketWeiLimit(uint256,uint256,uint256)']:writes at the last depth:['6', '7', '23']
['claimTokens(address)', 'claimTokens(address)', 'changeWeiPerBlock(uint256)', 'setOwnerWallet(address,address,address)']:writes at the last depth:['5', '3', '4']
['claimTokens(address)', 'claimTokens(address)', 'changeWeiPerBlock(uint256)', 'claimTokens(address)']:writes at the last depth:[]
contract coverage: 64.89%
============================
iteration:12
['claimTokens(address)', 'claimTokens(address)', 'addEth()', 'addEth()']:writes at the last depth:['10']
['claimTokens(address)', 'claimTokens(address)', 'addEth()', 'changeWeiPerBlock(uint256)']:writes at the last depth:['8']
['claimTokens(address)', 'claimTokens(address)', 'addEth()', 'setDividendManager(address)']:writes at the last depth:['1']
['claimTokens(address)', 'claimTokens(address)', 'addEth()', 'returnDeposit()']:writes at the last depth:['10']
['claimTokens(address)', 'claimTokens(address)', 'addEth()', 'changeTicketWeiLimit(uint256,uint256,uint256)']:writes at the last depth:['6', '7', '23']
['claimTokens(address)', 'claimTokens(address)', 'addEth()', 'setOwnerWallet(address,address,address)']:writes at the last depth:['5', '3', '4']
['claimTokens(address)', 'claimTokens(address)', 'addEth()', 'claimTokens(address)']:writes at the last depth:[]
contract coverage: 64.89%
============================
iteration:13
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'addEth()']:writes at the last depth:['10']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'changeWeiPerBlock(uint256)']:writes at the last depth:['8']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'setDividendManager(address)']:writes at the last depth:['1']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'returnDeposit()']:writes at the last depth:['10']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'changeTicketWeiLimit(uint256,uint256,uint256)']:writes at the last depth:['6', '7', '23']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'setOwnerWallet(address,address,address)']:writes at the last depth:['5', '3', '4']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'claimTokens(address)']:writes at the last depth:[]
contract coverage: 64.89%
============================
iteration:14
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'claimTokens(address)', 'addEth()']:writes at the last depth:['10']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'claimTokens(address)', 'changeWeiPerBlock(uint256)']:writes at the last depth:['8']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'claimTokens(address)', 'setDividendManager(address)']:writes at the last depth:['1']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'claimTokens(address)', 'returnDeposit()']:writes at the last depth:['10']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'claimTokens(address)', 'changeTicketWeiLimit(uint256,uint256,uint256)']:writes at the last depth:['6', '7', '23']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'claimTokens(address)', 'setOwnerWallet(address,address,address)']:writes at the last depth:['5', '3', '4']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'claimTokens(address)', 'claimTokens(address)']:writes at the last depth:[]
contract coverage: 64.89%
============================
iteration:15
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'setOwnerWallet(address,address,address)', 'addEth()']:writes at the last depth:['10']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'setOwnerWallet(address,address,address)', 'changeWeiPerBlock(uint256)']:writes at the last depth:['8']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'setOwnerWallet(address,address,address)', 'setDividendManager(address)']:writes at the last depth:['1']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'setOwnerWallet(address,address,address)', 'returnDeposit()']:writes at the last depth:['10']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'setOwnerWallet(address,address,address)', 'changeTicketWeiLimit(uint256,uint256,uint256)']:writes at the last depth:['6', '7', '23']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'setOwnerWallet(address,address,address)', 'setOwnerWallet(address,address,address)']:writes at the last depth:['5', '3', '4']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'setOwnerWallet(address,address,address)', 'claimTokens(address)']:writes at the last depth:[]
contract coverage: 64.89%
============================
iteration:16
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'changeTicketWeiLimit(uint256,uint256,uint256)', 'addEth()']:writes at the last depth:['10']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'changeTicketWeiLimit(uint256,uint256,uint256)', 'changeWeiPerBlock(uint256)']:writes at the last depth:['8']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'changeTicketWeiLimit(uint256,uint256,uint256)', 'setDividendManager(address)']:writes at the last depth:['1']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'changeTicketWeiLimit(uint256,uint256,uint256)', 'returnDeposit()']:writes at the last depth:['10']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'changeTicketWeiLimit(uint256,uint256,uint256)', 'changeTicketWeiLimit(uint256,uint256,uint256)']:writes at the last depth:['6', '7', '23']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'changeTicketWeiLimit(uint256,uint256,uint256)', 'setOwnerWallet(address,address,address)']:writes at the last depth:['5', '3', '4']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'changeTicketWeiLimit(uint256,uint256,uint256)', 'claimTokens(address)']:writes at the last depth:[]
contract coverage: 64.89%
============================
iteration:17
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'returnDeposit()', 'addEth()']:writes at the last depth:['10']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'returnDeposit()', 'changeWeiPerBlock(uint256)']:writes at the last depth:['8']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'returnDeposit()', 'setDividendManager(address)']:writes at the last depth:['1']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'returnDeposit()', 'returnDeposit()']:writes at the last depth:['10']
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'returnDeposit()', 'changeTicketWeiLimit(uint256,uint256,uint256)']:writes at the last depth:['6', '7', '23']
contract coverage: 64.89%
============================
iteration:18
['claimTokens(address)', 'setOwnerWallet(address,address,address)', 'setDividendManager(address)', 'addEth()']:writes at the last depth:['10']
contract coverage: 64.89%
============================
iteration:19
contract coverage: 64.89%
============================
iteration:20
contract coverage: 64.89%
============================
iteration:21
contract coverage: 64.89%
============================
iteration:22
['claimTokens(address)', 'returnDeposit()', 'addEth()']:writes at the last depth:['10']
['claimTokens(address)', 'returnDeposit()', 'changeTicketWeiLimit(uint256,uint256,uint256)']:writes at the last depth:['6', '7', '23']
contract coverage: 64.89%
============================
iteration:23
contract coverage: 64.89%
============================
iteration:24
contract coverage: 64.89%
============================
iteration:25
contract coverage: 64.89%
============================
iteration:26
contract coverage: 64.89%
============================
iteration:27
contract coverage: 64.89%
============================
iteration:28
contract coverage: 64.89%
============================
iteration:29
contract coverage: 64.89%
============================
iteration:30
contract coverage: 64.89%
============================
iteration:31
contract coverage: 64.89%
============================
iteration:32
contract coverage: 64.89%
============================
iteration:33
contract coverage: 64.89%
#@statespace
7580 nodes, 7579 edges, 76132 total states
#@coverage
Achieved 6.99% coverage for code: 60806040526611c37937e0800060065566b1a2bc2ec500006007556706f05b59d3b20000600855620166e3600b55611fbd600c556103e8600d55600560175534801561004a57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073ce82cf84558add0eff5ecfb3de63ff75df59ace0600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073a732e7665ff54ba63ae40e67fac9f23ecd0b1223600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073445b660236c39f5bc98bc49dddc7cf1f246a40ab600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507360e31b8b79bd92302fe452242ea6f7672a77a80f600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600f60106000600a60ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550600f60106000600b60ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550600f60106000600c60ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601460106000600d60ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601460106000600e60ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601e60106000600f60ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550606360106000609960ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550612918806103866000396000f3fe6080604052600436106102255760003560e01c8063a1099bf211610123578063c257581d116100ab578063e23e5a411161006f578063e23e5a4114610ae9578063f0e10c0d14610b42578063f25b3f9914610b9d578063f851a44014610bec578063fd502b8d14610c0357610225565b8063c257581d146109c2578063c2ac3aff146109fd578063d436a67714610a07578063dae7a13c14610a1e578063df8de3e714610a9857610225565b8063addd7020116100f2578063addd70201461086f578063b4d8a14d1461089a578063b9db102a146108e9578063babbc0ad14610914578063bb3c2bfe1461096b57610225565b8063a1099bf214610719578063a23e52db14610754578063acf9b8cf146107a3578063ad15767f146107de57610225565b8063559bdcaf116101b157806375c6c6da1161017557806375c6c6da1461059e5780637e88f603146106035780638bf605371461061a5780638da5cb5b1461066b5780638ea5220f146106c257610225565b8063559bdcaf146104a357806359d5335b146104ce57806360fcfe70146104f95780637485d6d5146105245780637524f4e31461057357610225565b80633e622f00116101f85780633e622f00146102fa5780633f511f231461031157806349b7a9c21461033c57806349f164f0146103935780634a26531b1461042457610225565b8063068b73101461022a578063108fb41514610255578063116715141461028057806328420f29146102ab575b600080fd5b34801561023657600080fd5b5061023f610c5a565b6040518082815260200191505060405180910390f35b34801561026157600080fd5b5061026a610c60565b6040518082815260200191505060405180910390f35b34801561028c57600080fd5b50610295610c66565b6040518082815260200191505060405180910390f35b3480156102b757600080fd5b506102f8600480360360608110156102ce57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610c6c565b005b34801561030657600080fd5b5061030f610d22565b005b34801561031d57600080fd5b50610326610ea4565b6040518082815260200191505060405180910390f35b34801561034857600080fd5b50610351610eaa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561039f57600080fd5b506103e2600480360360208110156103b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ed0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043057600080fd5b5061045d6004803603602081101561044757600080fd5b8101908080359060200190929190505050610f03565b60405180861515151581526020018560ff1660ff1681526020018460ff1660ff168152602001831515151581526020018281526020019550505050505060405180910390f35b3480156104af57600080fd5b506104b8610f6d565b6040518082815260200191505060405180910390f35b3480156104da57600080fd5b506104e3610f73565b6040518082815260200191505060405180910390f35b34801561050557600080fd5b5061050e610f79565b6040518082815260200191505060405180910390f35b34801561053057600080fd5b5061055d6004803603602081101561054757600080fd5b8101908080359060200190929190505050610f7f565b6040518082815260200191505060405180910390f35b34801561057f57600080fd5b50610588610f97565b6040518082815260200191505060405180910390f35b3480156105aa57600080fd5b506105ed600480360360208110156105c157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f9d565b6040518082815260200191505060405180910390f35b34801561060f57600080fd5b50610618610fb5565b005b34801561062657600080fd5b506106696004803603602081101561063d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110ae565b005b34801561067757600080fd5b50610680611185565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106ce57600080fd5b506106d76111aa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561072557600080fd5b506107526004803603602081101561073c57600080fd5b81019080803590602001909291905050506111d0565b005b34801561076057600080fd5b5061078d6004803603602081101561077757600080fd5b810190808035906020019092919050505061146d565b6040518082815260200191505060405180910390f35b3480156107af57600080fd5b506107dc600480360360208110156107c657600080fd5b810190808035906020019092919050505061148e565b005b3480156107ea57600080fd5b5061086d6004803603606081101561080157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061152a565b005b34801561087b57600080fd5b506108846116f9565b6040518082815260200191505060405180910390f35b3480156108a657600080fd5b506108d3600480360360208110156108bd57600080fd5b81019080803590602001909291905050506116ff565b6040518082815260200191505060405180910390f35b3480156108f557600080fd5b506108fe6117a4565b6040518082815260200191505060405180910390f35b34801561092057600080fd5b506109296117aa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561097757600080fd5b506109806117d0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109ce57600080fd5b506109fb600480360360208110156109e557600080fd5b81019080803590602001909291905050506117f6565b005b610a05611919565b005b348015610a1357600080fd5b50610a1c611936565b005b348015610a2a57600080fd5b50610a7760048036036040811015610a4157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c99565b60405180838152602001821515151581526020019250505060405180910390f35b348015610aa457600080fd5b50610ae760048036036020811015610abb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cd7565b005b348015610af557600080fd5b50610b2c60048036036040811015610b0c57600080fd5b810190808035906020019092919080359060200190929190505050611eda565b6040518082815260200191505060405180910390f35b348015610b4e57600080fd5b50610b9b60048036036040811015610b6557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f7c565b005b348015610ba957600080fd5b50610bd660048036036020811015610bc057600080fd5b810190808035906020019092919050505061243d565b6040518082815260200191505060405180910390f35b348015610bf857600080fd5b50610c01612455565b005b348015610c0f57600080fd5b50610c186124e8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60075481565b600b5481565b600a5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cc557600080fd5b8260068190555081600781905550806017819055507fb9362b96e28efbb7a7e63bb4a97faf9924ec0394635feff8588a6ae2a5f784fe600654600754604051808381526020018281526020019250505060405180910390a1505050565b6000601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610d6e57600080fd5b601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020543073ffffffffffffffffffffffffffffffffffffffff16311015610dd157600080fd5b6000601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ea0573d6000803e3d6000fd5b5050565b60125481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60166020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60116020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a900460ff16908060000160039054906101000a900460ff16908060010154905085565b600c5481565b600d5481565b60095481565b60136020528060005260406000206000915090505481565b60085481565b60156020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461100e57600080fd5b600a543073ffffffffffffffffffffffffffffffffffffffff1631101561103457600080fd5b6000600a5490506000600a819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156110aa573d6000803e3d6000fd5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461110757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561114157600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001840381526020019081526020016000209050600081600001541161123857600080fd5b8060010160009054906101000a900460ff161561125457600080fd5b6011600083815260200190815260200160002060000160009054906101000a900460ff1661128657611285826117f6565b5b6011600083815260200190815260200160002060000160009054906101000a900460ff166112b357600080fd5b60008090506011600084815260200190815260200160002060000160039054906101000a900460ff16156112f6576112ef83836000015461250e565b9050611349565b611346600a6113386011600087815260200190815260200160002060000160029054906101000a900460ff1660ff16856000015461254f90919063ffffffff16565b61258690919063ffffffff16565b90505b60018260010160006101000a81548160ff0219169083151502179055507360fc8444349fee867fd9c0638a2f9a02b352aca773ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561140157600080fd5b505af1158015611415573d6000803e3d6000fd5b50505050823373ffffffffffffffffffffffffffffffffffffffff167f6770b7080a2fdf538ff535ceb0b3ccb507cb803153c3d85f1e35f78178e8c8eb836040518082815260200191505060405180910390a3505050565b6014818154811061147a57fe5b906000526020600020016000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114e757600080fd5b806008819055507f9a568cbf96fdfd2bcd750b9de431eafe51ebad2b7476c01c3c9d8c27a6607c456008546040518082815260200191505060405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461158357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156115bd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115f757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561163157600080fd5b82600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60065481565b60008060009050600060148054905011156117765761176f60136000600160146001601480549050038154811061173257fe5b906000526020600020015403815260200190815260200160002054601360008681526020019081526020016000205461259f90919063ffffffff16565b905061178d565b601360008481526020019081526020016000205490505b61179c600654600654836125b6565b915050919050565b60185481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b4361180b6006836126ce90919063ffffffff16565b10801561181b5750610100430381115b61182457600080fd5b6011600082815260200190815260200160002060000160009054906101000a900460ff161561185257600080fd5b6000600f6000600184038152602001908152602001600020541161187557600080fd5b600081409050600081601f6020811061188a57fe5b1a60f81b60f81c905060006010600060108460ff16816118a657fe5b0660ff1660ff16815260200190815260200160002060009054906101000a900460ff1660ff16118061190157506000601060008360ff1660ff16815260200190815260200160002060009054906101000a900460ff1660ff16115b61190a57600080fd5b61191483826126ea565b505050565b61192e34600a546126ce90919063ffffffff16565b600a81905550565b61194e62093a806018546126ce90919063ffffffff16565b42101561195a57600080fd5b6009543073ffffffffffffffffffffffffffffffffffffffff1631101561198057600080fd5b60006009541161198f57600080fd5b42601881905550600060095490506000600981905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6119ed83613a986128ac565b9081150290604051600060405180830381858888f19350505050158015611a18573d6000803e3d6000fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc611a61836113886128ac565b9081150290604051600060405180830381858888f19350505050158015611a8c573d6000803e3d6000fd5b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc611ad5836175306128ac565b9081150290604051600060405180830381858888f19350505050158015611b00573d6000803e3d6000fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc611b49836188b86128ac565b9081150290604051600060405180830381858888f19350505050158015611b74573d6000803e3d6000fd5b506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a289d187611bc484613a986128ac565b6040518263ffffffff1660e01b81526004016000604051808303818588803b158015611bef57600080fd5b505af1158015611c03573d6000803e3d6000fd5b50505050507f8c9a4f13b67cb64d7c6aa1ae0c9bf07694af521a28b93e7060020810ab4bc59f600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b600e602052816000526040600020602052806000526040600020600091509150508060000154908060010160009054906101000a900460ff16905082565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d3057600080fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611db457600080fd5b505afa158015611dc8573d6000803e3d6000fd5b505050506040513d6020811015611dde57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611e9957600080fd5b505af1158015611ead573d6000803e3d6000fd5b505050506040513d6020811015611ec357600080fd5b810190808051906020019092919050505050505050565b6000806000905060006014805490501115611f5157611f4a601360006001601460016014805490500381548110611f0d57fe5b906000526020600020015403815260200190815260200160002054601360008781526020019081526020016000205461259f90919063ffffffff16565b9050611f68565b601360008581526020019081526020016000205490505b611f738384836125b6565b91505092915050565b7360fc8444349fee867fd9c0638a2f9a02b352aca773ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561204b57600080fd5b505af115801561205f573d6000803e3d6000fd5b505050506000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600043815260200190815260200160002090506120ce8282600001546126ce90919063ffffffff16565b81600001819055506120fc82600f6000438152602001908152602001600020546126ce90919063ffffffff16565b600f600043815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561217c57503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b156122005782601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b612215826012546126ce90919063ffffffff16565b6012819055506012546013600043815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff16601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146123a7576123256122d783600d546128ac565b601560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546126ce90919063ffffffff16565b601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061239c61238b83612386600d54600c5461259f90919063ffffffff16565b6128ac565b6009546126ce90919063ffffffff16565b6009819055506123ce565b6123c76123b683600c546128ac565b6009546126ce90919063ffffffff16565b6009819055505b8273ffffffffffffffffffffffffffffffffffffffff16433373ffffffffffffffffffffffffffffffffffffffff167f5452a85b225ef4259cf69950e73ab227ccafb86408af83a1dafbee4abd7f5a6084600001546040518082815260200191505060405180910390a4505050565b600f6020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146124ae57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061254782600f60006001870381526020019081526020016000205460116000878152602001908152602001600020600101546125b6565b905092915050565b6000808314156125625760009050612580565b600082840290508284828161257357fe5b041461257b57fe5b809150505b92915050565b60008082848161259257fe5b0490508091505092915050565b6000828211156125ab57fe5b818303905092915050565b60008084905060008490506000849050600061260b670de0b6b3a76400006125fd6017546125ef6103e88961254f90919063ffffffff16565b61258690919063ffffffff16565b61258690919063ffffffff16565b90506000612625601960065461254f90919063ffffffff16565b905061263a818361254f90919063ffffffff16565b91506000612665856126576127108961254f90919063ffffffff16565b61258690919063ffffffff16565b9050600061267e6103ff8661254f90919063ffffffff16565b90506126a96305f5e10061269b838561254f90919063ffffffff16565b61258690919063ffffffff16565b91506126be82856126ce90919063ffffffff16565b9750505050505050509392505050565b6000808284019050838110156126e057fe5b8091505092915050565b600060116000848152602001908152602001600020905060018160000160006101000a81548160ff021916908315150217905550818160000160016101000a81548160ff021916908360ff1602179055506010600060108460ff168161274c57fe5b0660ff1660ff16815260200190815260200160002060009054906101000a900460ff168160000160026101000a81548160ff021916908360ff16021790555060998260ff16141561287a5760018160000160036101000a81548160ff0219169083151502179055506000601480549050111561282d576128206013600060016014600160148054905003815481106127e057fe5b906000526020600020015403815260200190815260200160002054601360006001870381526020019081526020016000205461259f90919063ffffffff16565b816001018190555061284d565b601360006001850381526020019081526020016000205481600101819055505b60148390806001815401808255809150509060018203906000526020600020016000909192909190915055505b827fcc1325d9dce0926e1a052173c628a244b156c438edbcdff68251760607d5a90560405160405180910390a2505050565b6000806128d7620186a06128c9858761254f90919063ffffffff16565b61258690919063ffffffff16565b9050809150509291505056fea265627a7a72305820c0494a431c9b6f6fb91a2d351cc6363a91760ea3b495b568ee3b10f6ece9f9bb64736f6c63430005090032
#@coverage
Achieved 64.89% coverage for code: 6080604052600436106102255760003560e01c8063a1099bf211610123578063c257581d116100ab578063e23e5a411161006f578063e23e5a4114610ae9578063f0e10c0d14610b42578063f25b3f9914610b9d578063f851a44014610bec578063fd502b8d14610c0357610225565b8063c257581d146109c2578063c2ac3aff146109fd578063d436a67714610a07578063dae7a13c14610a1e578063df8de3e714610a9857610225565b8063addd7020116100f2578063addd70201461086f578063b4d8a14d1461089a578063b9db102a146108e9578063babbc0ad14610914578063bb3c2bfe1461096b57610225565b8063a1099bf214610719578063a23e52db14610754578063acf9b8cf146107a3578063ad15767f146107de57610225565b8063559bdcaf116101b157806375c6c6da1161017557806375c6c6da1461059e5780637e88f603146106035780638bf605371461061a5780638da5cb5b1461066b5780638ea5220f146106c257610225565b8063559bdcaf146104a357806359d5335b146104ce57806360fcfe70146104f95780637485d6d5146105245780637524f4e31461057357610225565b80633e622f00116101f85780633e622f00146102fa5780633f511f231461031157806349b7a9c21461033c57806349f164f0146103935780634a26531b1461042457610225565b8063068b73101461022a578063108fb41514610255578063116715141461028057806328420f29146102ab575b600080fd5b34801561023657600080fd5b5061023f610c5a565b6040518082815260200191505060405180910390f35b34801561026157600080fd5b5061026a610c60565b6040518082815260200191505060405180910390f35b34801561028c57600080fd5b50610295610c66565b6040518082815260200191505060405180910390f35b3480156102b757600080fd5b506102f8600480360360608110156102ce57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610c6c565b005b34801561030657600080fd5b5061030f610d22565b005b34801561031d57600080fd5b50610326610ea4565b6040518082815260200191505060405180910390f35b34801561034857600080fd5b50610351610eaa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561039f57600080fd5b506103e2600480360360208110156103b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ed0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043057600080fd5b5061045d6004803603602081101561044757600080fd5b8101908080359060200190929190505050610f03565b60405180861515151581526020018560ff1660ff1681526020018460ff1660ff168152602001831515151581526020018281526020019550505050505060405180910390f35b3480156104af57600080fd5b506104b8610f6d565b6040518082815260200191505060405180910390f35b3480156104da57600080fd5b506104e3610f73565b6040518082815260200191505060405180910390f35b34801561050557600080fd5b5061050e610f79565b6040518082815260200191505060405180910390f35b34801561053057600080fd5b5061055d6004803603602081101561054757600080fd5b8101908080359060200190929190505050610f7f565b6040518082815260200191505060405180910390f35b34801561057f57600080fd5b50610588610f97565b6040518082815260200191505060405180910390f35b3480156105aa57600080fd5b506105ed600480360360208110156105c157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f9d565b6040518082815260200191505060405180910390f35b34801561060f57600080fd5b50610618610fb5565b005b34801561062657600080fd5b506106696004803603602081101561063d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110ae565b005b34801561067757600080fd5b50610680611185565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106ce57600080fd5b506106d76111aa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561072557600080fd5b506107526004803603602081101561073c57600080fd5b81019080803590602001909291905050506111d0565b005b34801561076057600080fd5b5061078d6004803603602081101561077757600080fd5b810190808035906020019092919050505061146d565b6040518082815260200191505060405180910390f35b3480156107af57600080fd5b506107dc600480360360208110156107c657600080fd5b810190808035906020019092919050505061148e565b005b3480156107ea57600080fd5b5061086d6004803603606081101561080157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061152a565b005b34801561087b57600080fd5b506108846116f9565b6040518082815260200191505060405180910390f35b3480156108a657600080fd5b506108d3600480360360208110156108bd57600080fd5b81019080803590602001909291905050506116ff565b6040518082815260200191505060405180910390f35b3480156108f557600080fd5b506108fe6117a4565b6040518082815260200191505060405180910390f35b34801561092057600080fd5b506109296117aa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561097757600080fd5b506109806117d0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109ce57600080fd5b506109fb600480360360208110156109e557600080fd5b81019080803590602001909291905050506117f6565b005b610a05611919565b005b348015610a1357600080fd5b50610a1c611936565b005b348015610a2a57600080fd5b50610a7760048036036040811015610a4157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c99565b60405180838152602001821515151581526020019250505060405180910390f35b348015610aa457600080fd5b50610ae760048036036020811015610abb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cd7565b005b348015610af557600080fd5b50610b2c60048036036040811015610b0c57600080fd5b810190808035906020019092919080359060200190929190505050611eda565b6040518082815260200191505060405180910390f35b348015610b4e57600080fd5b50610b9b60048036036040811015610b6557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f7c565b005b348015610ba957600080fd5b50610bd660048036036020811015610bc057600080fd5b810190808035906020019092919050505061243d565b6040518082815260200191505060405180910390f35b348015610bf857600080fd5b50610c01612455565b005b348015610c0f57600080fd5b50610c186124e8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60075481565b600b5481565b600a5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cc557600080fd5b8260068190555081600781905550806017819055507fb9362b96e28efbb7a7e63bb4a97faf9924ec0394635feff8588a6ae2a5f784fe600654600754604051808381526020018281526020019250505060405180910390a1505050565b6000601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610d6e57600080fd5b601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020543073ffffffffffffffffffffffffffffffffffffffff16311015610dd157600080fd5b6000601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ea0573d6000803e3d6000fd5b5050565b60125481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60166020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60116020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a900460ff16908060000160039054906101000a900460ff16908060010154905085565b600c5481565b600d5481565b60095481565b60136020528060005260406000206000915090505481565b60085481565b60156020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461100e57600080fd5b600a543073ffffffffffffffffffffffffffffffffffffffff1631101561103457600080fd5b6000600a5490506000600a819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156110aa573d6000803e3d6000fd5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461110757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561114157600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001840381526020019081526020016000209050600081600001541161123857600080fd5b8060010160009054906101000a900460ff161561125457600080fd5b6011600083815260200190815260200160002060000160009054906101000a900460ff1661128657611285826117f6565b5b6011600083815260200190815260200160002060000160009054906101000a900460ff166112b357600080fd5b60008090506011600084815260200190815260200160002060000160039054906101000a900460ff16156112f6576112ef83836000015461250e565b9050611349565b611346600a6113386011600087815260200190815260200160002060000160029054906101000a900460ff1660ff16856000015461254f90919063ffffffff16565b61258690919063ffffffff16565b90505b60018260010160006101000a81548160ff0219169083151502179055507360fc8444349fee867fd9c0638a2f9a02b352aca773ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561140157600080fd5b505af1158015611415573d6000803e3d6000fd5b50505050823373ffffffffffffffffffffffffffffffffffffffff167f6770b7080a2fdf538ff535ceb0b3ccb507cb803153c3d85f1e35f78178e8c8eb836040518082815260200191505060405180910390a3505050565b6014818154811061147a57fe5b906000526020600020016000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114e757600080fd5b806008819055507f9a568cbf96fdfd2bcd750b9de431eafe51ebad2b7476c01c3c9d8c27a6607c456008546040518082815260200191505060405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461158357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156115bd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115f757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561163157600080fd5b82600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60065481565b60008060009050600060148054905011156117765761176f60136000600160146001601480549050038154811061173257fe5b906000526020600020015403815260200190815260200160002054601360008681526020019081526020016000205461259f90919063ffffffff16565b905061178d565b601360008481526020019081526020016000205490505b61179c600654600654836125b6565b915050919050565b60185481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b4361180b6006836126ce90919063ffffffff16565b10801561181b5750610100430381115b61182457600080fd5b6011600082815260200190815260200160002060000160009054906101000a900460ff161561185257600080fd5b6000600f6000600184038152602001908152602001600020541161187557600080fd5b600081409050600081601f6020811061188a57fe5b1a60f81b60f81c905060006010600060108460ff16816118a657fe5b0660ff1660ff16815260200190815260200160002060009054906101000a900460ff1660ff16118061190157506000601060008360ff1660ff16815260200190815260200160002060009054906101000a900460ff1660ff16115b61190a57600080fd5b61191483826126ea565b505050565b61192e34600a546126ce90919063ffffffff16565b600a81905550565b61194e62093a806018546126ce90919063ffffffff16565b42101561195a57600080fd5b6009543073ffffffffffffffffffffffffffffffffffffffff1631101561198057600080fd5b60006009541161198f57600080fd5b42601881905550600060095490506000600981905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6119ed83613a986128ac565b9081150290604051600060405180830381858888f19350505050158015611a18573d6000803e3d6000fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc611a61836113886128ac565b9081150290604051600060405180830381858888f19350505050158015611a8c573d6000803e3d6000fd5b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc611ad5836175306128ac565b9081150290604051600060405180830381858888f19350505050158015611b00573d6000803e3d6000fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc611b49836188b86128ac565b9081150290604051600060405180830381858888f19350505050158015611b74573d6000803e3d6000fd5b506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a289d187611bc484613a986128ac565b6040518263ffffffff1660e01b81526004016000604051808303818588803b158015611bef57600080fd5b505af1158015611c03573d6000803e3d6000fd5b50505050507f8c9a4f13b67cb64d7c6aa1ae0c9bf07694af521a28b93e7060020810ab4bc59f600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b600e602052816000526040600020602052806000526040600020600091509150508060000154908060010160009054906101000a900460ff16905082565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d3057600080fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611db457600080fd5b505afa158015611dc8573d6000803e3d6000fd5b505050506040513d6020811015611dde57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611e9957600080fd5b505af1158015611ead573d6000803e3d6000fd5b505050506040513d6020811015611ec357600080fd5b810190808051906020019092919050505050505050565b6000806000905060006014805490501115611f5157611f4a601360006001601460016014805490500381548110611f0d57fe5b906000526020600020015403815260200190815260200160002054601360008781526020019081526020016000205461259f90919063ffffffff16565b9050611f68565b601360008581526020019081526020016000205490505b611f738384836125b6565b91505092915050565b7360fc8444349fee867fd9c0638a2f9a02b352aca773ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561204b57600080fd5b505af115801561205f573d6000803e3d6000fd5b505050506000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600043815260200190815260200160002090506120ce8282600001546126ce90919063ffffffff16565b81600001819055506120fc82600f6000438152602001908152602001600020546126ce90919063ffffffff16565b600f600043815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561217c57503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b156122005782601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b612215826012546126ce90919063ffffffff16565b6012819055506012546013600043815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff16601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146123a7576123256122d783600d546128ac565b601560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546126ce90919063ffffffff16565b601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061239c61238b83612386600d54600c5461259f90919063ffffffff16565b6128ac565b6009546126ce90919063ffffffff16565b6009819055506123ce565b6123c76123b683600c546128ac565b6009546126ce90919063ffffffff16565b6009819055505b8273ffffffffffffffffffffffffffffffffffffffff16433373ffffffffffffffffffffffffffffffffffffffff167f5452a85b225ef4259cf69950e73ab227ccafb86408af83a1dafbee4abd7f5a6084600001546040518082815260200191505060405180910390a4505050565b600f6020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146124ae57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061254782600f60006001870381526020019081526020016000205460116000878152602001908152602001600020600101546125b6565b905092915050565b6000808314156125625760009050612580565b600082840290508284828161257357fe5b041461257b57fe5b809150505b92915050565b60008082848161259257fe5b0490508091505092915050565b6000828211156125ab57fe5b818303905092915050565b60008084905060008490506000849050600061260b670de0b6b3a76400006125fd6017546125ef6103e88961254f90919063ffffffff16565b61258690919063ffffffff16565b61258690919063ffffffff16565b90506000612625601960065461254f90919063ffffffff16565b905061263a818361254f90919063ffffffff16565b91506000612665856126576127108961254f90919063ffffffff16565b61258690919063ffffffff16565b9050600061267e6103ff8661254f90919063ffffffff16565b90506126a96305f5e10061269b838561254f90919063ffffffff16565b61258690919063ffffffff16565b91506126be82856126ce90919063ffffffff16565b9750505050505050509392505050565b6000808284019050838110156126e057fe5b8091505092915050565b600060116000848152602001908152602001600020905060018160000160006101000a81548160ff021916908315150217905550818160000160016101000a81548160ff021916908360ff1602179055506010600060108460ff168161274c57fe5b0660ff1660ff16815260200190815260200160002060009054906101000a900460ff168160000160026101000a81548160ff021916908360ff16021790555060998260ff16141561287a5760018160000160036101000a81548160ff0219169083151502179055506000601480549050111561282d576128206013600060016014600160148054905003815481106127e057fe5b906000526020600020015403815260200190815260200160002054601360006001870381526020019081526020016000205461259f90919063ffffffff16565b816001018190555061284d565b601360006001850381526020019081526020016000205481600101819055505b60148390806001815401808255809150509060018203906000526020600020016000909192909190915055505b827fcc1325d9dce0926e1a052173c628a244b156c438edbcdff68251760607d5a90560405160405180910390a2505050565b6000806128d7620186a06128c9858761254f90919063ffffffff16565b61258690919063ffffffff16565b9050809150509291505056fea265627a7a72305820c0494a431c9b6f6fb91a2d351cc6363a91760ea3b495b568ee3b10f6ece9f9bb64736f6c63430005090032
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherWin
Function name: JPBlocks(uint256)
PC address: 5241
Estimated Gas Usage: 1113 - 1208
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x9b97bb0bf1f65afb024a9d4fdf6037bd12ec3d40.sol:144

uint[] public JPBlocks

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: JPBlocks(uint256), txdata: 0xa23e52db1010101010101010101010100810000010018010081040010440041008804040, decoded_data: (7265385991361016183439748078930822853620945812278750019025559332931879583808,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: EtherWin
Function name: addWinBlock(uint256)
PC address: 6162
Estimated Gas Usage: 387 - 482
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x9b97bb0bf1f65afb024a9d4fdf6037bd12ec3d40.sol:194

(_blockNum.add(6) < block.number) && (_blockNum > block.number - 256)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addWinBlock(uint256), txdata: 0xc257581d200453dca530c00001102040ce82cf84558add0eff5ecfb3de63ff75df59ace0, decoded_data: (14481657336455271067330170722895293735337668923134044023504089769658895936736,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: EtherWin
Function name: addWinBlock(uint256)
PC address: 6175
Estimated Gas Usage: 401 - 496
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x9b97bb0bf1f65afb024a9d4fdf6037bd12ec3d40.sol:194

require( (_blockNum.add(6) < block.number) && (_blockNum > block.number - 256) )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addWinBlock(uint256), txdata: 0xc257581d0001008500086cc860369644ce82cf84558add0eff5ecfb3de63ff75df59ace0, decoded_data: (1770432741150931567586994028352509004202811153362982010482403323399482592,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EtherWin
Function name: transferEthersToDividendManager()
PC address: 6485
Estimated Gas Usage: 1146 - 1241
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x9b97bb0bf1f65afb024a9d4fdf6037bd12ec3d40.sol:330

require(now >= lastPayout.add(7 days) )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferEthersToDividendManager(), txdata: 0xd436a677, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EtherWin
Function name: claimTokens(address)
PC address: 7836
Estimated Gas Usage: 5430 - 75404
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9b97bb0bf1f65afb024a9d4fdf6037bd12ec3d40.sol:385

token.transfer(owner, balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: claimTokens(address), txdata: 0xdf8de3e7000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: EtherWin
Function name: claimTokens(address)
PC address: 7836
Estimated Gas Usage: 5430 - 75404
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9b97bb0bf1f65afb024a9d4fdf6037bd12ec3d40.sol:385

token.transfer(owner, balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: claimTokens(address), txdata: 0xdf8de3e70000000020208010008080204001808010001000800040000000018000040001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherWin
Function name: jackpotValue(uint256,uint256)
PC address: 9617
Estimated Gas Usage: 4441 - 4726
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x9b97bb0bf1f65afb024a9d4fdf6037bd12ec3d40.sol:299

varA.mul(10000).div(varB)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: jackpotValue(uint256,uint256), txdata: 0xe23e5a4100000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (4194304, 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherWin
Function name: addWinBlock(uint256)
PC address: 9951
Estimated Gas Usage: 345 - 440
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x9b97bb0bf1f65afb024a9d4fdf6037bd12ec3d40.sol:194

_blockNum.add(6)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addWinBlock(uint256), txdata: 0xc257581dfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, decoded_data: (115792089237316195423570985008687907853269984665640564039457584007913129639932,), value: 0x0


time_used: 35305.95999598503 seconds
#@contract_info_time
0x9b97bb0bf1f65afb024a9d4fdf6037bd12ec3d40.sol:0.5.9:EtherWin:35305.95999598503:36100:60:36000
