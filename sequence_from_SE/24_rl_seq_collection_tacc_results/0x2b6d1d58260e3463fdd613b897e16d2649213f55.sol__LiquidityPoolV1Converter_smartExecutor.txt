++++ 0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol  :  0.4.26  :  LiquidityPoolV1Converter ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 13945
['constructor']:writes at the last depth:['3', '8', '0', '2', '4']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 49.02% coverage.
dynamic svars:['7', '6', '41']
static svars:['3', '5', '0', '1', '2', '8', '4']
Ending preprocessing.
preprocessing time(s): 102.06152248382568
contract coverage: 53.42%
acceptOwnership() is not reachable
connectorTokens(uint256) is not reachable
reserveTokens(uint256) is not reachable
acceptTokenOwnership() is not reachable
reserveWeight(address) is not reachable
getConnectorBalance(address) is not reachable
reserveBalance(address) is not reachable
acceptAnchorOwnership() is not reachable
fund(uint256) is not reachable
convert(address,address,uint256,address,address) is not reachable
liquidate(uint256) is not reachable
rateAndFee(address,address,uint256) is not reachable
getReturn(address,address,uint256) is not reachable
removeLiquidity(uint256,address[],uint256[]) is not reachable
addLiquidity(address[],uint256[],uint256) is not reachable
withdrawETH(address) is not reachable
withdrawTokens(address,address,uint256) is not reachable
updateRegistry() is not reachable
Function Reads: State variables read in conditions
	restrictRegistryUpdate(bool):[]
	reserveRatio():[]
	connectors(address):[]
	hasETHReserve():[]
	connectorTokens(uint256):[]
	reserveWeight(address):[]
	getReturn(address,address,uint256):[]
	transferTokenOwnership(address):[]
	isActive():[]
	onlyOwnerCanUpdateRegistry():[]
	acceptTokenOwnership():[]
	withdrawFromAnchor(address,address,uint256):[]
	converterType():[]
	liquidate(uint256):[]
	rateAndFee(address,address,uint256):[]
	updateRegistry():[]
	setConversionWhitelist(address):[]
	version():[]
	conversionFee():[]
	withdrawTokens(address,address,uint256):[]
	prevRegistry():[]
	transferAnchorOwnership(address):[]
	withdrawETH(address):[]
	addReserve(address,uint32):[]
	decimalLength(uint256):[]
	connectorTokenCount():[]
	acceptOwnership():[]
	registry():[]
	addLiquidity(address[],uint256[],uint256):[]
	owner():[]
	maxConversionFee():[]
	reserveTokenCount():[]
	geometricMean(uint256[]):[]
	removeLiquidity(uint256,address[],uint256[]):[]
	restoreRegistry():[]
	roundDiv(uint256,uint256):[]
	conversionsEnabled():[]
	conversionWhitelist():[]
	fund(uint256):[]
	acceptAnchorOwnership():[]
	reserveTokens(uint256):[]
	safeTransfer(address,address,uint256):[]
	isV28OrHigher():[]
	anchor():[]
	newOwner():[]
	upgrade():[]
	reserves(address):[]
	getConnectorBalance(address):[]
	safeTransferFrom(address,address,address,uint256):[]
	reserveBalance(address):[]
	convert(address,address,uint256,address,address):[]
	safeApprove(address,address,uint256):[]
	setConversionFee(uint32):[]
	transferOwnership(address):[]
	token():[]
Function Writes: State variables written
	restrictRegistryUpdate(bool):['3']
	liquidate(uint256):['3']
	setConversionWhitelist(address):['5']
	withdrawETH(address):['3']
	withdrawTokens(address,address,uint256):['3']
	acceptOwnership():['0', '1']
	restoreRegistry():['2']
	fund(uint256):['3']
	addLiquidity(address[],uint256[],uint256):['3']
	removeLiquidity(uint256,address[],uint256[]):['3']
	convert(address,address,uint256,address,address):['3']
	transferOwnership(address):['1']
============================
iteration:3
targets:['acceptOwnership()', 'connectorTokens(uint256)', 'reserveTokens(uint256)', 'acceptTokenOwnership()', 'reserveWeight(address)', 'getConnectorBalance(address)', 'reserveBalance(address)', 'acceptAnchorOwnership()', 'fund(uint256)', 'convert(address,address,uint256,address,address)', 'liquidate(uint256)', 'rateAndFee(address,address,uint256)', 'getReturn(address,address,uint256)', 'removeLiquidity(uint256,address[],uint256[])', 'addLiquidity(address[],uint256[],uint256)', 'withdrawETH(address)', 'withdrawTokens(address,address,uint256)', 'updateRegistry()']
['restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['isActive()']:writes at the last depth:[]
['setConversionWhitelist(address)']:writes at the last depth:['5']
['withdrawFromAnchor(address,address,uint256)']:writes at the last depth:[]
['restoreRegistry()']:writes at the last depth:['2']
['transferTokenOwnership(address)']:writes at the last depth:[]
['transferAnchorOwnership(address)']:writes at the last depth:[]
['transferOwnership(address)']:writes at the last depth:['1']
['setConversionFee(uint32)']:writes at the last depth:['8']
['updateRegistry()']:writes at the last depth:['2', '3']
['updateRegistry()']:writes at the last depth:['2', '3']
['safeTransfer(address,address,uint256)']:writes at the last depth:[]
['safeApprove(address,address,uint256)']:writes at the last depth:[]
['safeTransferFrom(address,address,address,uint256)']:writes at the last depth:[]
['liquidate(uint256)']:writes at the last depth:['3']
['addReserve(address,uint32)']:writes at the last depth:['', '8', '7', '6']
['fund(uint256)']:writes at the last depth:['7', '3']
['withdrawTokens(address,address,uint256)']:writes at the last depth:['3']
contract coverage: 53.42%
============================
iteration:4
contract coverage: 53.42%
============================
iteration:5
contract coverage: 53.42%
============================
iteration:6
contract coverage: 53.42%
============================
iteration:7
contract coverage: 53.42%
============================
iteration:8
contract coverage: 53.42%
============================
iteration:9
contract coverage: 53.42%
============================
iteration:10
contract coverage: 53.42%
============================
iteration:11
contract coverage: 53.42%
============================
iteration:12
contract coverage: 53.42%
============================
iteration:13
contract coverage: 53.42%
============================
iteration:14
contract coverage: 53.42%
============================
iteration:15
contract coverage: 53.42%
============================
iteration:16
contract coverage: 53.42%
============================
iteration:17
contract coverage: 53.42%
============================
iteration:18
contract coverage: 53.42%
============================
iteration:19
contract coverage: 53.42%
============================
iteration:20
contract coverage: 53.42%
============================
iteration:21
contract coverage: 53.42%
#@statespace
12168 nodes, 12167 edges, 130699 total states
#@coverage
Achieved 3.06% coverage for code: 
#@coverage
Achieved 53.42% coverage for code: 
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: connectorTokens(uint256)
PC address: 5668
Estimated Gas Usage: 1105 - 1200
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:930

function connectorTokens(uint256 _index) public view returns (IERC20Token) {
        return ConverterBase.reserveTokens[_index];
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101200101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: connectorTokens(uint256), txdata: 0x19b64015, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: isActive()
PC address: 6030
Estimated Gas Usage: 2854 - 38027
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:741

anchor.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: isActive(), txdata: 0x22f3e2d4, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: withdrawFromAnchor(address,address,uint256)
PC address: 6534
Estimated Gas Usage: 3881 - 39202
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:763

anchor.withdrawTokens(_token, _to, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawFromAnchor(address,address,uint256), txdata: 0x395900d4, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 6867
Estimated Gas Usage: 24219 - 170546
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:1247

ISmartToken(anchor).totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef80808080808080808080808001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: liquidate(uint256), txdata: 0x415f124001, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 6931
Estimated Gas Usage: 24219 - 170546
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:1248

anchor

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: liquidate(uint256), txdata: 0x415f124001, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 7125
Estimated Gas Usage: 24219 - 170546
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:1248

ISmartToken(anchor).destroy(msg.sender, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef80808080808080808080808001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: liquidate(uint256), txdata: 0x415f124001, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 7125
Estimated Gas Usage: 24219 - 170546
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:1248

ISmartToken(anchor).destroy(msg.sender, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: liquidate(uint256), txdata: 0x415f124002, decoded_data: (904625697166532776746648320380374280103671755200316906558262375061821325312,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 7125
Estimated Gas Usage: 24219 - 170546
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:1248

ISmartToken(anchor).destroy(msg.sender, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: liquidate(uint256), txdata: 0x415f124001, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 7150
Estimated Gas Usage: 24219 - 170546
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:1250

reserveTokens.length

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: liquidate(uint256), txdata: 0x415f124001, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 7265
Estimated Gas Usage: 24219 - 170546
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:1254

removeLiquidityFromPool(reserveTokens, reserveMinReturnAmounts, totalSupply, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: liquidate(uint256), txdata: 0x415f124001, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 7294
Estimated Gas Usage: 24219 - 170546
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:1254

removeLiquidityFromPool(reserveTokens, reserveMinReturnAmounts, totalSupply, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: liquidate(uint256), txdata: 0x415f124001, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 7416
Estimated Gas Usage: 24219 - 170546
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:420

locked = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: liquidate(uint256), txdata: 0x415f124001, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 7430
Estimated Gas Usage: 24219 - 170546
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:420

locked = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: liquidate(uint256), txdata: 0x415f124001, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 8385
Estimated Gas Usage: 19955 - 131484
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:373

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 8812
Estimated Gas Usage: 19955 - 131484
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:376

newRegistry.addressOf(CONTRACT_REGISTRY)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 8812
Estimated Gas Usage: 19955 - 131484
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:376

newRegistry.addressOf(CONTRACT_REGISTRY)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010d, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 8812
Estimated Gas Usage: 19955 - 131484
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:376

newRegistry.addressOf(CONTRACT_REGISTRY)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 9014
Estimated Gas Usage: 19955 - 131484
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:379

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 9053
Estimated Gas Usage: 19955 - 131484
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:379

prevRegistry = registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 9106
Estimated Gas Usage: 19955 - 131484
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:379

prevRegistry = registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 9118
Estimated Gas Usage: 19955 - 131484
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:382

registry = newRegistry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 9171
Estimated Gas Usage: 19955 - 131484
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:382

registry = newRegistry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: withdrawTokens(address,address,uint256)
PC address: 9446
Estimated Gas Usage: 21191 - 136864
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:779

reserves[_token].isSet

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: withdrawTokens(address,address,uint256)
PC address: 9757
Estimated Gas Usage: 21191 - 136864
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:783

reserves[_token].isSet

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000040000000000000000000000000000000100000000000000000000000004, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef40404040404040404040404001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: withdrawTokens(address,address,uint256)
PC address: 9794
Estimated Gas Usage: 21191 - 136864
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:420

locked = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000040000000000000000000000000000000100000000000000000000000004, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef40404040404040404040404001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: withdrawTokens(address,address,uint256)
PC address: 9808
Estimated Gas Usage: 21191 - 136864
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:420

locked = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000040000000000000000000000000000000100000000000000000000000004, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef40404040404040404040404001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: transferTokenOwnership(address)
PC address: 9909
Estimated Gas Usage: 7210 - 77563
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:750

anchor

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: transferAnchorOwnership(address)
PC address: 9909
Estimated Gas Usage: 6589 - 76612
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:750

anchor

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferAnchorOwnership(address), txdata: 0x67b6d57c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: transferTokenOwnership(address)
PC address: 10095
Estimated Gas Usage: 7210 - 77563
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:750

anchor.transferOwnership(_newOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: transferTokenOwnership(address)
PC address: 10095
Estimated Gas Usage: 7210 - 77563
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:750

anchor.transferOwnership(_newOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101100100000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: transferTokenOwnership(address)
PC address: 10095
Estimated Gas Usage: 7210 - 77563
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:750

anchor.transferOwnership(_newOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 10659
Estimated Gas Usage: 43446 - 201783
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:811

anchor

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000010000010001000000000000000000000000000000000000000000000000000000000000000000000007, decoded_data: ('0x0000000000000000010000010001000000000000', 458752), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 10812
Estimated Gas Usage: 43446 - 201783
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:811

reserves[_token].isSet

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000010000010001000000000000000000000000000000000000000000000000000000000000000000000007, decoded_data: ('0x0000000000000000010000010001000000000000', 458752), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 10946
Estimated Gas Usage: 43446 - 201783
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:812

reserveRatio

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000010000010001000000000000000000000000000000000000000000000000000000000000000000000007, decoded_data: ('0x0000000000000000010000010001000000000000', 458752), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 11335
Estimated Gas Usage: 43446 - 201783
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:816

newReserve.balance = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000010000010001000000000000000000000000000000000000000000000000000000000000000000000007, decoded_data: ('0x0000000000000000010000010001000000000000', 458752), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 11349
Estimated Gas Usage: 43446 - 201783
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:817

newReserve.weight = _weight

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000010000010001000000000000000000000000000000000000000000000000000000000000000000000007, decoded_data: ('0x0000000000000000010000010001000000000000', 458752), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 11370
Estimated Gas Usage: 43446 - 201783
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:817

newReserve.weight = _weight

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000010000010001000000000000000000000000000000000000000000000000000000000000000000000007, decoded_data: ('0x0000000000000000010000010001000000000000', 458752), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 11385
Estimated Gas Usage: 43446 - 201783
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:818

newReserve.isSet = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000010000010001000000000000000000000000000000000000000000000000000000000000000000000007, decoded_data: ('0x0000000000000000010000010001000000000000', 458752), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 11399
Estimated Gas Usage: 43446 - 201783
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:818

newReserve.isSet = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000010000010001000000000000000000000000000000000000000000000000000000000000000000000007, decoded_data: ('0x0000000000000000010000010001000000000000', 458752), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 11409
Estimated Gas Usage: 43446 - 201783
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000010000010001000000000000000000000000000000000000000000000000000000000000000000000007, decoded_data: ('0x0000000000000000010000010001000000000000', 458752), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 11413
Estimated Gas Usage: 43446 - 201783
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000010000010001000000000000000000000000000000000000000000000000000000000000000000000007, decoded_data: ('0x0000000000000000010000010001000000000000', 458752), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 11447
Estimated Gas Usage: 43446 - 201783
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:819

reserveTokens.push(_token)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000010000010001000000000000000000000000000000000000000000000000000000000000000000000007, decoded_data: ('0x0000000000000000010000010001000000000000', 458752), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 11500
Estimated Gas Usage: 43446 - 201783
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:819

reserveTokens.push(_token)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000010000010001000000000000000000000000000000000000000000000000000000000000000000000007, decoded_data: ('0x0000000000000000010000010001000000000000', 458752), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 11512
Estimated Gas Usage: 43446 - 201783
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:820

reserveRatio += _weight

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000010000010001000000000000000000000000000000000000000000000000000000000000000000000007, decoded_data: ('0x0000000000000000010000010001000000000000', 458752), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 11534
Estimated Gas Usage: 43446 - 201783
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:820

reserveRatio += _weight

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000010000010001000000000000000000000000000000000000000000000000000000000000000000000007, decoded_data: ('0x0000000000000000010000010001000000000000', 458752), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 11555
Estimated Gas Usage: 43446 - 201783
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:820

reserveRatio += _weight

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000010000010001000000000000000000000000000000000000000000000000000000000000000000000007, decoded_data: ('0x0000000000000000010000010001000000000000', 458752), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: addReserve(address,uint32)
PC address: 13395
Estimated Gas Usage: 43446 - 201783
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:798

reserveTokens.length

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, decoded_data: , value: 0x0
Caller: [CREATOR], function: addReserve(address,uint32), txdata: 0x6a49d2c40000000000000000000000000000000000000000010000010001000000000000000000000000000000000000000000000000000000000000000000000007, decoded_data: ('0x0000000000000000010000010001000000000000', 458752), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LiquidityPoolV1Converter
Function name: roundDiv(uint256,uint256)
PC address: 14148
Estimated Gas Usage: 1130 - 1506
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:1414

_n + _d / 2

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: roundDiv(uint256,uint256), txdata: 0xbbb7e5d8808221a6a9d00000005210000200840000002000202400002488000080800181ff, decoded_data: (58125966987943222039217239733217771664965304049183839777553198924745202991489, 115339776388732929035197660848497720713218148788040405586178452820382218977280), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: roundDiv(uint256,uint256)
PC address: 14156
Estimated Gas Usage: 1045 - 1140
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:1413

function roundDiv(uint256 _n, uint256 _d) public pure returns (uint256) {
        return (_n + _d / 2) / _d;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: roundDiv(uint256,uint256), txdata: 0xbbb7e5d8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: geometricMean(uint256[])
PC address: 14156
Estimated Gas Usage: 1225 - 4000
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:1423

roundDiv(numOfDigits, length)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: geometricMean(uint256[]), txdata: 0xa60e7724, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 14599
Estimated Gas Usage: 28956 - 194911
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:1199

ISmartToken(anchor).totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 14704
Estimated Gas Usage: 28956 - 194911
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:1204

reserveTokens.length

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 15943
Estimated Gas Usage: 28956 - 194911
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:1240

anchor

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 16137
Estimated Gas Usage: 28956 - 194911
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:1240

ISmartToken(anchor).issue(msg.sender, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 16137
Estimated Gas Usage: 28956 - 194911
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:1240

ISmartToken(anchor).issue(msg.sender, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 16170
Estimated Gas Usage: 28956 - 194911
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:420

locked = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 16184
Estimated Gas Usage: 28956 - 194911
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:420

locked = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: reserveTokens(uint256)
PC address: 16376
Estimated Gas Usage: 1894 - 1989
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:599

IERC20Token[] public reserveTokens

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: reserveTokens(uint256), txdata: 0xd031370b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: withdrawTokens(address,address,uint256)
PC address: 19342
Estimated Gas Usage: 21191 - 136864
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:252

owner

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 21076
Estimated Gas Usage: 24219 - 170546
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:399

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: liquidate(uint256), txdata: 0x415f124001, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 21076
Estimated Gas Usage: 28956 - 194911
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:399

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: transferTokenOwnership(address)
PC address: 21226
Estimated Gas Usage: 7210 - 77563
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:399

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: transferAnchorOwnership(address)
PC address: 21226
Estimated Gas Usage: 6589 - 76612
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:399

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferAnchorOwnership(address), txdata: 0x67b6d57c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: updateRegistry()
PC address: 21226
Estimated Gas Usage: 19955 - 131484
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:399

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010102010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: withdrawTokens(address,address,uint256)
PC address: 21226
Estimated Gas Usage: 21191 - 136864
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:399

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000010001000202081000020000400102000002100100000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 21226
Estimated Gas Usage: 28956 - 194911
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:399

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 21226
Estimated Gas Usage: 24219 - 170546
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:399

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: liquidate(uint256), txdata: 0x415f124001, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: fund(uint256)
PC address: 21226
Estimated Gas Usage: 28956 - 194911
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:399

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: fund(uint256), txdata: 0xca1d209d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: liquidate(uint256)
PC address: 23796
Estimated Gas Usage: 24219 - 170546
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:885

reserveTokens.length

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: liquidate(uint256), txdata: 0x415f124001, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: safeTransfer(address,address,uint256)
PC address: 24715
Estimated Gas Usage: 2451 - 40542
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:497

call(
                gas,            
                _token,         
                0,              
                add(_data, 32), 
                mload(_data),   
                ret,            
                32              
            )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: safeTransfer(address,address,uint256), txdata: 0xd1660f99efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidityPoolV1Converter
Function name: withdrawTokens(address,address,uint256)
PC address: 24715
Estimated Gas Usage: 21191 - 136864
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:497

call(
                gas,            
                _token,         
                0,              
                add(_data, 32), 
                mload(_data),   
                ret,            
                32              
            )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000001000001000101204001200102048001200100000000000000000000000020, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e020202020202020202020202000000000000000000000000000000000000000102020202020202020202020201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityPoolV1Converter
Function name: withdrawTokens(address,address,uint256)
PC address: 24715
Estimated Gas Usage: 21191 - 136864
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:497

call(
                gas,            
                _token,         
                0,              
                add(_data, 32), 
                mload(_data),   
                ret,            
                32              
            )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000001, value: 0x0


time_used: 36097.85106921196 seconds
#@contract_info_time
0x2b6d1d58260e3463fdd613b897e16d2649213f55.sol:0.4.26:LiquidityPoolV1Converter:36097.85106921196:36100:60:36000
