++++ 0x54a4a1167b004b004520c605e3f01906f683413d.sol  :  0.4.18  :  KyberUniswapReserve ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 7699
['constructor']:writes at the last depth:['9', '15', '0', '7', '8']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 88.13% coverage.
dynamic svars:['4', '5', '3', '10', '6', '11', '12', '13', '14', '2']
static svars:['15', '9', '8', '1', '0', '7']
Ending preprocessing.
preprocessing time(s): 103.30792355537415
contract coverage: 63.75%
claimAdmin() is not reachable
removeAlerter(address) is not reachable
removeOperator(address) is not reachable
delistToken(address) is not reachable
setInternalActivationConfig(address,uint256,uint256) is not reachable
addAlerter(address) is not reachable
addOperator(address) is not reachable
isValidTokens(address,address) is not reachable
Function Reads: State variables read in conditions
	enableTrade():[]
	removeAlerter(address):[]
	tokenExchange(address):[]
	internalPricePremiumBps(address):[]
	listToken(address):[]
	feeBps():[]
	pendingAdmin():[]
	getOperators():['4']
	DEFAULT_FEE_BPS():[]
	addPremium(address,uint256):[]
	withdrawToken(address,uint256,address):[]
	addAlerter(address):[]
	internalInventoryMin(address):[]
	setKyberNetwork(address):[]
	shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256):[]
	disableTrade():['3']
	setFee(uint256):[]
	trade(address,uint256,address,address,uint256,bool):['15']
	transferAdmin(address):[]
	claimAdmin():[]
	transferAdminQuickly(address):[]
	isValidTokens(address,address):[]
	setInternalActivationConfig(address,uint256,uint256):[]
	getAlerters():['5']
	getConversionRate(address,address,uint256,uint256):['15']
	uniswapFactory():[]
	addOperator(address):[]
	internalInventoryMax(address):[]
	setInternalInventoryLimits(address,uint256,uint256):['2']
	deductFee(uint256):[]
	delistToken(address):[]
	removeOperator(address):[]
	kyberNetwork():[]
	calculateSpreadBps(uint256,uint256):[]
	internalActivationMinSpreadBps(address):[]
	withdrawEther(uint256,address):[]
	getBalance(address,address):[]
	tradeEnabled():[]
	admin():[]
Function Writes: State variables written
	enableTrade():['15']
	removeAlerter(address):['3', '5']
	setFee(uint256):['9']
	disableTrade():['15']
	setKyberNetwork(address):['8']
	listToken(address):['10', '6', '11', '12', '13']
	transferAdmin(address):['1']
	claimAdmin():['0', '1']
	addAlerter(address):['3', '5']
	transferAdminQuickly(address):['0']
	setInternalActivationConfig(address,uint256,uint256):['13', '14']
	delistToken(address):['10', '11', '12', '13', '14']
	removeOperator(address):['2', '4']
	setInternalInventoryLimits(address,uint256,uint256):['11', '12']
	addOperator(address):['2', '4']
============================
iteration:3
targets:['claimAdmin()', 'removeAlerter(address)', 'removeOperator(address)', 'trade(address,uint256,address,address,uint256,bool)', 'setInternalInventoryLimits(address,uint256,uint256)', 'delistToken(address)', 'disableTrade()', 'getConversionRate(address,address,uint256,uint256)', 'setInternalActivationConfig(address,uint256,uint256)', 'getOperators()', 'getAlerters()', 'addAlerter(address)', 'addOperator(address)', 'isValidTokens(address,address)']
['fallback']:writes at the last depth:[]
['enableTrade()']:writes at the last depth:['15']
['setFee(uint256)']:writes at the last depth:['9']
['setKyberNetwork(address)']:writes at the last depth:['8']
['fallback']:writes at the last depth:[]
['transferAdmin(address)']:writes at the last depth:['1']
['withdrawToken(address,uint256,address)']:writes at the last depth:[]
['transferAdminQuickly(address)']:writes at the last depth:['0']
['shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['withdrawEther(uint256,address)']:writes at the last depth:[]
['shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['getBalance(address,address)']:writes at the last depth:[]
['addAlerter(address)']:writes at the last depth:['3', '5']
['shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['addOperator(address)']:writes at the last depth:['2', '4']
['shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)']:writes at the last depth:['11', '10', '13', '14', '12', '6']
['listToken(address)']:writes at the last depth:['11', '10', '13', '14', '12', '6']
contract coverage: 87.00%
============================
iteration:4
['listToken(address)', 'fallback']:writes at the last depth:[]
['listToken(address)', 'enableTrade()']:writes at the last depth:['15']
['listToken(address)', 'setFee(uint256)']:writes at the last depth:['9']
['listToken(address)', 'setKyberNetwork(address)']:writes at the last depth:['8']
['listToken(address)', 'fallback']:writes at the last depth:[]
['listToken(address)', 'transferAdmin(address)']:writes at the last depth:['1']
['listToken(address)', 'withdrawToken(address,uint256,address)']:writes at the last depth:[]
['listToken(address)', 'transferAdminQuickly(address)']:writes at the last depth:['0']
['listToken(address)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'withdrawEther(uint256,address)']:writes at the last depth:[]
['listToken(address)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'setInternalActivationConfig(address,uint256,uint256)']:writes at the last depth:['14', '13']
['listToken(address)', 'getBalance(address,address)']:writes at the last depth:[]
['listToken(address)', 'addAlerter(address)']:writes at the last depth:['', '5', '3']
['listToken(address)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'delistToken(address)']:writes at the last depth:['11', '10', '13', '14', '12']
['listToken(address)', 'addOperator(address)']:writes at the last depth:['', '2', '4']
['listToken(address)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'listToken(address)']:writes at the last depth:['11', '10', '13', '6', '14', '12']
['listToken(address)', 'listToken(address)']:writes at the last depth:['11', '10', '13', '6', '14', '12']
['listToken(address)', 'getConversionRate(address,address,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'getConversionRate(address,address,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
['listToken(address)', 'getConversionRate(address,address,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
['listToken(address)', 'getConversionRate(address,address,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
['listToken(address)', 'getConversionRate(address,address,uint256,uint256)']:writes at the last depth:[]
contract coverage: 87.00%
============================
iteration:5
contract coverage: 87.00%
============================
iteration:6
contract coverage: 87.04%
============================
iteration:7
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'fallback']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'enableTrade()']:writes at the last depth:['15']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'setFee(uint256)']:writes at the last depth:['9']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'setKyberNetwork(address)']:writes at the last depth:['8']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'fallback']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'transferAdmin(address)']:writes at the last depth:['1']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'withdrawToken(address,uint256,address)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'transferAdminQuickly(address)']:writes at the last depth:['0']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'withdrawEther(uint256,address)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'setInternalActivationConfig(address,uint256,uint256)']:writes at the last depth:['14', '13']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'getBalance(address,address)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'addAlerter(address)']:writes at the last depth:['3', '', '5']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'delistToken(address)']:writes at the last depth:['11', '10', '13', '14', '12']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'addOperator(address)']:writes at the last depth:['', '2', '4']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'listToken(address)']:writes at the last depth:['11', '10', '13', '14', '12', '6']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'listToken(address)']:writes at the last depth:['11', '10', '13', '14', '12', '6']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'getConversionRate(address,address,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
contract coverage: 87.04%
============================
iteration:8
contract coverage: 87.04%
============================
iteration:9
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'fallback']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'enableTrade()']:writes at the last depth:['15']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'setFee(uint256)']:writes at the last depth:['9']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'setKyberNetwork(address)']:writes at the last depth:['8']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'fallback']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'transferAdmin(address)']:writes at the last depth:['1']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'withdrawToken(address,uint256,address)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'transferAdminQuickly(address)']:writes at the last depth:['0']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'withdrawEther(uint256,address)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'setInternalActivationConfig(address,uint256,uint256)']:writes at the last depth:['14', '13']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'getBalance(address,address)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'addAlerter(address)']:writes at the last depth:['', '5', '3']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'delistToken(address)']:writes at the last depth:['11', '10', '13', '14', '12']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'addOperator(address)']:writes at the last depth:['', '2', '4']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'listToken(address)']:writes at the last depth:['11', '10', '13', '6', '14', '12']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'listToken(address)']:writes at the last depth:['11', '10', '13', '6', '14', '12']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'getConversionRate(address,address,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)']:writes at the last depth:[]
contract coverage: 87.04%
============================
iteration:10
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'fallback']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'enableTrade()']:writes at the last depth:['15']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'setFee(uint256)']:writes at the last depth:['9']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'setKyberNetwork(address)']:writes at the last depth:['8']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'fallback']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'transferAdmin(address)']:writes at the last depth:['1']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'withdrawToken(address,uint256,address)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'transferAdminQuickly(address)']:writes at the last depth:['0']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'withdrawEther(uint256,address)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'setInternalActivationConfig(address,uint256,uint256)']:writes at the last depth:['14', '13']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'addAlerter(address)']:writes at the last depth:['', '5', '3']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'delistToken(address)']:writes at the last depth:['11', '10', '13', '14', '12']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'listToken(address)']:writes at the last depth:['11', '10', '13', '14', '12', '6']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'listToken(address)']:writes at the last depth:['11', '10', '13', '14', '12', '6']
contract coverage: 87.04%
============================
iteration:11
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'fallback']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'enableTrade()']:writes at the last depth:['15']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'setFee(uint256)']:writes at the last depth:['9']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'setKyberNetwork(address)']:writes at the last depth:['8']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'fallback']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'transferAdmin(address)']:writes at the last depth:['1']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'withdrawToken(address,uint256,address)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'transferAdminQuickly(address)']:writes at the last depth:['0']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'withdrawEther(uint256,address)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'setInternalActivationConfig(address,uint256,uint256)']:writes at the last depth:['14', '13']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'getBalance(address,address)']:writes at the last depth:[]
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'addAlerter(address)']:writes at the last depth:['', '5', '3']
['listToken(address)', 'trade(address,uint256,address,address,uint256,bool)', 'trade(address,uint256,address,address,uint256,bool)', 'delistToken(address)']:writes at the last depth:['11', '10', '13', '14', '12']
contract coverage: 87.04%
============================
iteration:12
contract coverage: 87.04%
============================
iteration:13
contract coverage: 87.04%
============================
iteration:14
contract coverage: 87.04%
============================
iteration:15
contract coverage: 87.04%
============================
iteration:16
contract coverage: 87.04%
============================
iteration:17
contract coverage: 87.04%
============================
iteration:18
contract coverage: 87.04%
============================
iteration:19
contract coverage: 87.04%
============================
iteration:20
contract coverage: 87.04%
============================
iteration:21
contract coverage: 87.04%
============================
iteration:22
contract coverage: 87.04%
============================
iteration:23
contract coverage: 87.04%
============================
iteration:24
contract coverage: 87.04%
============================
iteration:25
contract coverage: 87.04%
============================
iteration:26
contract coverage: 87.04%
============================
iteration:27
contract coverage: 87.04%
============================
iteration:28
contract coverage: 87.04%
============================
iteration:29
contract coverage: 87.04%
============================
iteration:30
contract coverage: 87.04%
============================
iteration:31
contract coverage: 87.04%
============================
iteration:32
contract coverage: 87.04%
============================
iteration:33
contract coverage: 87.04%
============================
iteration:34
contract coverage: 87.04%
============================
iteration:35
contract coverage: 87.04%
============================
iteration:36
contract coverage: 87.04%
============================
iteration:37
contract coverage: 87.04%
============================
iteration:38
contract coverage: 87.04%
============================
iteration:39
contract coverage: 87.04%
============================
iteration:40
contract coverage: 87.04%
============================
iteration:41
contract coverage: 87.04%
============================
iteration:42
contract coverage: 87.04%
============================
iteration:43
contract coverage: 87.04%
============================
iteration:44
contract coverage: 87.04%
============================
iteration:45
contract coverage: 87.04%
============================
iteration:46
contract coverage: 87.04%
============================
iteration:47
contract coverage: 87.04%
============================
iteration:48
contract coverage: 87.04%
============================
iteration:49
contract coverage: 87.04%
============================
iteration:50
contract coverage: 87.04%
============================
iteration:51
contract coverage: 87.04%
============================
iteration:52
contract coverage: 87.04%
============================
iteration:53
contract coverage: 87.04%
============================
iteration:54
contract coverage: 87.04%
============================
iteration:55
contract coverage: 87.04%
============================
iteration:56
contract coverage: 87.04%
============================
iteration:57
contract coverage: 87.04%
============================
iteration:58
contract coverage: 87.04%
============================
iteration:59
contract coverage: 87.04%
============================
iteration:60
contract coverage: 87.04%
============================
iteration:61
contract coverage: 87.04%
============================
iteration:62
contract coverage: 87.04%
============================
iteration:63
contract coverage: 87.04%
============================
iteration:64
contract coverage: 87.04%
============================
iteration:65
contract coverage: 87.04%
============================
iteration:66
contract coverage: 87.04%
============================
iteration:67
contract coverage: 87.04%
============================
iteration:68
contract coverage: 87.04%
============================
iteration:69
contract coverage: 87.04%
============================
iteration:70
contract coverage: 87.04%
============================
iteration:71
contract coverage: 87.04%
============================
iteration:72
contract coverage: 87.04%
============================
iteration:73
contract coverage: 87.04%
============================
iteration:74
contract coverage: 87.04%
============================
iteration:75
contract coverage: 87.04%
============================
iteration:76
contract coverage: 87.04%
============================
iteration:77
contract coverage: 87.04%
============================
iteration:78
contract coverage: 87.04%
============================
iteration:79
contract coverage: 87.04%
============================
iteration:80
contract coverage: 87.04%
============================
iteration:81
contract coverage: 87.04%
============================
iteration:82
contract coverage: 87.04%
============================
iteration:83
contract coverage: 87.04%
============================
iteration:84
contract coverage: 87.04%
============================
iteration:85
contract coverage: 87.04%
============================
iteration:86
contract coverage: 87.04%
============================
iteration:87
contract coverage: 87.04%
============================
iteration:88
contract coverage: 87.04%
============================
iteration:89
contract coverage: 87.04%
#@statespace
4337 nodes, 4336 edges, 60020 total states
#@coverage
Achieved 2.64% coverage for code: 606060405260196009556001600f60006101000a81548160ff02191690831515021790555034156200003057600080fd5b604051606080620049f383398101604052808051906020019091908051906020019091908051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008373ffffffffffffffffffffffffffffffffffffffff1614151515620000c657600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff1614151515620000ed57600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff16141515156200011457600080fd5b82600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505061480a80620001e96000396000f3006060604052600436106101e2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806299d386146101e457806301a12fd3146102115780630dd94b961461024a5780631db95078146102c35780631fc1e25f1461031057806324a9d85314610349578063267822471461037257806327a099d8146103c757806333d8262c146104315780633a6e7d391461045a5780633ccdbb28146104b0578063408ee7fe1461051157806348caa2061461054a57806354a325a6146105975780635a65d4c9146105d05780636940030f1461066457806369fe0e2d146106915780636cf69811146106b457806375829def1461075557806377f50f971461078e5780637acc8678146107a35780637be98598146107dc5780637bec03aa1461084c5780637c423f54146108975780637cd44272146109015780638bdb2afa1461097f5780639870d7fe146109d4578063998614cb14610a0d5780639b9a33ff14610a5a578063a9afaaaf14610aa5578063abffc9ac14610adc578063ac8a584a14610b15578063b78b842d14610b4e578063bc91970a14610ba3578063c3e0d71214610be3578063ce56c45414610c30578063d4fac45d14610c72578063d621e81314610cde578063f851a44014610d0b575b005b34156101ef57600080fd5b6101f7610d60565b604051808215151515815260200191505060405180910390f35b341561021c57600080fd5b610248600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e1b565b005b341561025557600080fd5b610281600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110dd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102ce57600080fd5b6102fa600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611110565b6040518082815260200191505060405180910390f35b341561031b57600080fd5b610347600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611128565b005b341561035457600080fd5b61035c6115d3565b6040518082815260200191505060405180910390f35b341561037d57600080fd5b6103856115d9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103d257600080fd5b6103da6115ff565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561041d578082015181840152602081019050610402565b505050509050019250505060405180910390f35b341561043c57600080fd5b610444611693565b6040518082815260200191505060405180910390f35b341561046557600080fd5b61049a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611698565b6040518082815260200191505060405180910390f35b34156104bb57600080fd5b61050f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611710565b005b341561051c57600080fd5b610548600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506118e0565b005b341561055557600080fd5b610581600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611ad6565b6040518082815260200191505060405180910390f35b34156105a257600080fd5b6105ce600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611aee565b005b34156105db57600080fd5b61064a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091908035906020019091905050611c38565b604051808215151515815260200191505060405180910390f35b341561066f57600080fd5b610677611fae565b604051808215151515815260200191505060405180910390f35b341561069c57600080fd5b6106b26004808035906020019091905050612066565b005b61073b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919080351515906020019091905050612113565b604051808215151515815260200191505060405180910390f35b341561076057600080fd5b61078c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612893565b005b341561079957600080fd5b6107a16129f3565b005b34156107ae57600080fd5b6107da600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612bcf565b005b34156107e757600080fd5b610832600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612dc4565b604051808215151515815260200191505060405180910390f35b341561085757600080fd5b610895600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050612f8b565b005b34156108a257600080fd5b6108aa6131a3565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156108ed5780820151818401526020810190506108d2565b505050509050019250505060405180910390f35b341561090c57600080fd5b610969600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050613237565b6040518082815260200191505060405180910390f35b341561098a57600080fd5b6109926133ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156109df57600080fd5b610a0b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506133f4565b005b3415610a1857600080fd5b610a44600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506135ea565b6040518082815260200191505060405180910390f35b3415610a6557600080fd5b610aa3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050613602565b005b3415610ab057600080fd5b610ac660048080359060200190919050506137f5565b6040518082815260200191505060405180910390f35b3415610ae757600080fd5b610b13600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613814565b005b3415610b2057600080fd5b610b4c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613ade565b005b3415610b5957600080fd5b610b61613da3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610bae57600080fd5b610bcd6004808035906020019091908035906020019091905050613dc9565b6040518082815260200191505060405180910390f35b3415610bee57600080fd5b610c1a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613df2565b6040518082815260200191505060405180910390f35b3415610c3b57600080fd5b610c70600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613e0a565b005b3415610c7d57600080fd5b610cc8600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613f14565b6040518082815260200191505060405180910390f35b3415610ce957600080fd5b610cf1614044565b604051808215151515815260200191505060405180910390f35b3415610d1657600080fd5b610d1e614057565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dbd57600080fd5b6001600f60006101000a81548160ff0219169083151502179055507f7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e7356001604051808215151515815260200191505060405180910390a16001905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7857600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610ed057600080fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600090505b6005805490508110156110d9578173ffffffffffffffffffffffffffffffffffffffff16600582815481101515610f6057fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110ce576005600160058054905003815481101515610fbf57fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600582815481101515610ffa57fe5b906000526020600020900160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506005805480919060019003611058919061474d565b507f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762826000604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a16110d9565b806001019050610f2d565b5050565b600a6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e6020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561118557600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff16141515156111ab57600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306f2bf62836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561127057600080fd5b6102c65a03f1151561128157600080fd5b50505060405180519050905080600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506113148261407c565b8173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3827f80000000000000000000000000000000000000000000000000000000000000006000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156113df57600080fd5b6102c65a03f115156113f057600080fd5b50505060405180519050151561140557600080fd5b7f8000000000000000000000000000000000000000000000000000000000000000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f99d2b755eb38920131acb332adf086ea38d15009f223c21f3aa978d6ab2347868282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b60095481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611607614779565b600480548060200260200160405190810160405280929190818152602001828054801561168957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161163f575b5050505050905090565b601981565b60006b204fce5e3e2502611000000082111515156116b557600080fd5b612710600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461271001830281151561170757fe5b04905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561176b57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561181657600080fd5b6102c65a03f1151561182757600080fd5b50505060405180519050151561183c57600080fd5b7f72cb8a894ddb372ceec3d2a7648d86f17d5a15caae0e986c53109b8a9a9385e6838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561193b57600080fd5b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561199457600080fd5b60326005805490501015156119a857600080fd5b7f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762816001604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a16001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060058054806001018281611a84919061478d565b9160005260206000209001600083909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600b6020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b4957600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff1614151515611b6f57600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f38622430bb6defd4452b087e8d0b4a6d1c4d35c179c2d7d875d4abb272b9d88b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b6000806000806000806b204fce5e3e250261100000008b101515611c5b57600080fd5b6b204fce5e3e2502611000000089101515611c7557600080fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff161415611de1578994508473ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515611d6357600080fd5b6102c65a03f11515611d7457600080fd5b50505060405180519050935088841080611dce5750600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054898503105b15611ddc5760009550611f9f565b611f1c565b8b9450883073ffffffffffffffffffffffffffffffffffffffff16311015611e0c5760009550611f9f565b600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548b8673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515611ef057600080fd5b6102c65a03f11515611f0157600080fd5b50505060405180519050011115611f1b5760009550611f9f565b5b866ec097ce7bc90715b34b9f1000000000811515611f3657fe5b04925082881115611f4a5760009550611f9f565b600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150611f968389613dc9565b90508181101595505b50505050509695505050505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561200857600080fd5b6000600f60006101000a81548160ff0219169083151502179055507f7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e7356000604051808215151515815260200191505060405180910390a16001905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120c157600080fd5b61271081111515156120d257600080fd5b806009819055507f8c4d35e54a3f2ef1134138fd8ea3daee6a3c89e10d2665996babdf70261e2c76816040518082815260200191505060405180910390a150565b600080600080600080600f60009054906101000a900460ff16151561213757600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561219357600080fd5b61219d8c8b612dc4565b15156121a857600080fd5b8615612229576000881115156121bd57600080fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff161415612218578a3414151561221357600080fd5b612228565b60003414151561222757600080fd5b5b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff16141515612378578b73ffffffffffffffffffffffffffffffffffffffff166323b872dd33308e6000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b151561235157600080fd5b6102c65a03f1151561236257600080fd5b50505060405180519050151561237757600080fd5b5b6123848c8b8d8b6141dc565b9450600160028981151561239457fe5b0614935073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614156125f857831515612522576123f08b6137f5565b9050600a60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff1663f39b5b9b8260017f80000000000000000000000000000000000000000000000000000000000000006000604051602001526040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180838152602001828152602001925050506020604051808303818588803b15156124f457600080fd5b6125ee5a03f1151561250557600080fd5b5050505060405180519050925084831015151561252157600080fd5b5b8973ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8a876000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156125cd57600080fd5b6102c65a03f115156125de57600080fd5b5050506040518051905015156125f357600080fd5b612782565b83151561274157600a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff166395e3c50b8c60017f80000000000000000000000000000000000000000000000000000000000000006000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050602060405180830381600087803b151561270957600080fd5b6102c65a03f1151561271a57600080fd5b50505060405180519050925061272f836137f5565b925084831015151561274057600080fd5b5b8873ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050151561278157600080fd5b5b3373ffffffffffffffffffffffffffffffffffffffff167f3e5691bfb48667c037c1014f0b320bbf4095c37ad5cd1f0b2573366756f54ac68d8d8d898e8a604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182151515158152602001965050505050505060405180910390a26001955050505050509695505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128ee57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561292a57600080fd5b7f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc40600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a180600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612a4f57600080fd5b7f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c2a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612c6657600080fd5b7f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc4081604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a17f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed816000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148015612ea15750600073ffffffffffffffffffffffffffffffffffffffff16600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b80612f835750600073ffffffffffffffffffffffffffffffffffffffff16600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015612f82575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b5b905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612fe657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561308157600080fd5b6103e8821115151561309257600080fd5b6101f481111515156130a357600080fd5b81600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ff32eb6e759557a6efda6830142e2357097b173bc01c7a45d4f409fd9ce87387b838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1505050565b6131ab614779565b600580548060200260200160405190810160405280929190818152602001828054801561322d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116131e3575b5050505050905090565b60008060008060008060008061324d8c8c612dc4565b151561325c57600097506133bf565b600f60009054906101000a900460ff16151561327b57600097506133bf565b60008a141561328d57600097506133bf565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614156132dd578a9650613333565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16141561332d578b9650613332565b600080fd5b5b61333e8c8c8c614204565b8096508197505050600086141561335857600097506133bf565b6133638b8d88614204565b9050809450506133738787611698565b92506133838c8b8d868989611c38565b915081156133ae576133a78a846133998f61447a565b6133a28f61447a565b6145b1565b90506133b2565b8490505b6133bc8183614662565b97505b50505050505050949350505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561344f57600080fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156134a857600080fd5b60326004805490501015156134bc57600080fd5b7f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b816001604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a16001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060048054806001018281613598919061478d565b9160005260206000209001600083909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600c6020528060005260406000206000915090505481565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561365a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156136f557600080fd5b81600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f5421c19be109a988c30678d84f56dd237868f8147ba05c20a6b78726e8f5d8ca838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1505050565b600061271060095461271003830281151561380c57fe5b049050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561386f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561390a57600080fd5b600a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600b60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600d60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600e60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090557f6621c4efc5efa31320394260425b7d14cbb9d7e3754b2c98c04af66b1cbf315b81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613b3b57600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515613b9357600080fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600090505b600480549050811015613d9f578173ffffffffffffffffffffffffffffffffffffffff16600482815481101515613c2357fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613d94576004600160048054905003815481101515613c8257fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600482815481101515613cbd57fe5b906000526020600020900160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600481818054905003915081613d1e919061474d565b507f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b826000604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a1613d9f565b806001019050613bf0565b5050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000849150839050808201818303614e2002811515613de757fe5b059250505092915050565b600d6020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613e6557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501515613ea557600080fd5b7fec47e7ed86c86774d1a72c19f35c639911393fe7c1a34031fdbd260890da90de8282604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613f7d578173ffffffffffffffffffffffffffffffffffffffff1631905061403e565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561402057600080fd5b6102c65a03f1151561403157600080fd5b5050506040518051905090505b92915050565b600f60009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561410e576012600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506141d9565b8073ffffffffffffffffffffffffffffffffffffffff1663313ce5676000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561417a57600080fd5b6102c65a03f1151561418b57600080fd5b50505060405180519050600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b50565b60006141fa836141eb8761447a565b6141f48761447a565b8561469b565b9050949350505050565b600080600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141561435457600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663cd7724c36142d8866137f5565b6000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561433257600080fd5b6102c65a03f1151561434357600080fd5b505050604051805190509250614453565b600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506144508173ffffffffffffffffffffffffffffffffffffffff166395b68fe7866000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561443057600080fd5b6102c65a03f1151561444157600080fd5b505050604051805190506137f5565b92505b61446f84846144618961447a565b61446a8961447a565b6145b1565b915050935093915050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156144ce57601291506145ab565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114156145a7578273ffffffffffffffffffffffffffffffffffffffff1663313ce5676000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561458557600080fd5b6102c65a03f1151561459657600080fd5b5050506040518051905091506145ab565b8091505b50919050565b60006b204fce5e3e2502611000000085111515156145ce57600080fd5b6b204fce5e3e2502611000000084111515156145e957600080fd5b82821015156146285760128383031115151561460457600080fd5b84838303600a0a02670de0b6b3a7640000850281151561462057fe5b04905061465a565b60128284031115151561463a57600080fd5b84828403600a0a670de0b6b3a764000086020281151561465657fe5b0490505b949350505050565b600081614670576000614673565b60015b60ff1660028481151561468257fe5b06146146915760018303614693565b825b905092915050565b60006b204fce5e3e2502611000000085111515156146b857600080fd5b620f4240670de0b6b3a76400000282111515156146d457600080fd5b8383101515614713576012848403111515156146ef57600080fd5b670de0b6b3a7640000848403600a0a8387020281151561470b57fe5b049050614745565b60128385031115151561472557600080fd5b828403600a0a670de0b6b3a76400000282860281151561474157fe5b0490505b949350505050565b8154818355818115116147745781836000526020600020918201910161477391906147b9565b5b505050565b602060405190810160405280600081525090565b8154818355818115116147b4578183600052602060002091820191016147b391906147b9565b5b505050565b6147db91905b808211156147d75760008160009055506001016147bf565b5090565b905600a165627a7a72305820f589b5ffd998d45e5a639eb829fd0e8f2880c62f41c3e103fcbb8536b5c0708d0029
#@coverage
Achieved 87.04% coverage for code: 6060604052600436106101e2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806299d386146101e457806301a12fd3146102115780630dd94b961461024a5780631db95078146102c35780631fc1e25f1461031057806324a9d85314610349578063267822471461037257806327a099d8146103c757806333d8262c146104315780633a6e7d391461045a5780633ccdbb28146104b0578063408ee7fe1461051157806348caa2061461054a57806354a325a6146105975780635a65d4c9146105d05780636940030f1461066457806369fe0e2d146106915780636cf69811146106b457806375829def1461075557806377f50f971461078e5780637acc8678146107a35780637be98598146107dc5780637bec03aa1461084c5780637c423f54146108975780637cd44272146109015780638bdb2afa1461097f5780639870d7fe146109d4578063998614cb14610a0d5780639b9a33ff14610a5a578063a9afaaaf14610aa5578063abffc9ac14610adc578063ac8a584a14610b15578063b78b842d14610b4e578063bc91970a14610ba3578063c3e0d71214610be3578063ce56c45414610c30578063d4fac45d14610c72578063d621e81314610cde578063f851a44014610d0b575b005b34156101ef57600080fd5b6101f7610d60565b604051808215151515815260200191505060405180910390f35b341561021c57600080fd5b610248600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e1b565b005b341561025557600080fd5b610281600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110dd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102ce57600080fd5b6102fa600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611110565b6040518082815260200191505060405180910390f35b341561031b57600080fd5b610347600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611128565b005b341561035457600080fd5b61035c6115d3565b6040518082815260200191505060405180910390f35b341561037d57600080fd5b6103856115d9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103d257600080fd5b6103da6115ff565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561041d578082015181840152602081019050610402565b505050509050019250505060405180910390f35b341561043c57600080fd5b610444611693565b6040518082815260200191505060405180910390f35b341561046557600080fd5b61049a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611698565b6040518082815260200191505060405180910390f35b34156104bb57600080fd5b61050f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611710565b005b341561051c57600080fd5b610548600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506118e0565b005b341561055557600080fd5b610581600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611ad6565b6040518082815260200191505060405180910390f35b34156105a257600080fd5b6105ce600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611aee565b005b34156105db57600080fd5b61064a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091908035906020019091905050611c38565b604051808215151515815260200191505060405180910390f35b341561066f57600080fd5b610677611fae565b604051808215151515815260200191505060405180910390f35b341561069c57600080fd5b6106b26004808035906020019091905050612066565b005b61073b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919080351515906020019091905050612113565b604051808215151515815260200191505060405180910390f35b341561076057600080fd5b61078c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612893565b005b341561079957600080fd5b6107a16129f3565b005b34156107ae57600080fd5b6107da600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612bcf565b005b34156107e757600080fd5b610832600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612dc4565b604051808215151515815260200191505060405180910390f35b341561085757600080fd5b610895600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050612f8b565b005b34156108a257600080fd5b6108aa6131a3565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156108ed5780820151818401526020810190506108d2565b505050509050019250505060405180910390f35b341561090c57600080fd5b610969600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050613237565b6040518082815260200191505060405180910390f35b341561098a57600080fd5b6109926133ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156109df57600080fd5b610a0b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506133f4565b005b3415610a1857600080fd5b610a44600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506135ea565b6040518082815260200191505060405180910390f35b3415610a6557600080fd5b610aa3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050613602565b005b3415610ab057600080fd5b610ac660048080359060200190919050506137f5565b6040518082815260200191505060405180910390f35b3415610ae757600080fd5b610b13600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613814565b005b3415610b2057600080fd5b610b4c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613ade565b005b3415610b5957600080fd5b610b61613da3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610bae57600080fd5b610bcd6004808035906020019091908035906020019091905050613dc9565b6040518082815260200191505060405180910390f35b3415610bee57600080fd5b610c1a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613df2565b6040518082815260200191505060405180910390f35b3415610c3b57600080fd5b610c70600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613e0a565b005b3415610c7d57600080fd5b610cc8600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613f14565b6040518082815260200191505060405180910390f35b3415610ce957600080fd5b610cf1614044565b604051808215151515815260200191505060405180910390f35b3415610d1657600080fd5b610d1e614057565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dbd57600080fd5b6001600f60006101000a81548160ff0219169083151502179055507f7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e7356001604051808215151515815260200191505060405180910390a16001905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7857600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610ed057600080fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600090505b6005805490508110156110d9578173ffffffffffffffffffffffffffffffffffffffff16600582815481101515610f6057fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110ce576005600160058054905003815481101515610fbf57fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600582815481101515610ffa57fe5b906000526020600020900160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506005805480919060019003611058919061474d565b507f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762826000604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a16110d9565b806001019050610f2d565b5050565b600a6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e6020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561118557600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff16141515156111ab57600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306f2bf62836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561127057600080fd5b6102c65a03f1151561128157600080fd5b50505060405180519050905080600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506113148261407c565b8173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3827f80000000000000000000000000000000000000000000000000000000000000006000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156113df57600080fd5b6102c65a03f115156113f057600080fd5b50505060405180519050151561140557600080fd5b7f8000000000000000000000000000000000000000000000000000000000000000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f99d2b755eb38920131acb332adf086ea38d15009f223c21f3aa978d6ab2347868282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b60095481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611607614779565b600480548060200260200160405190810160405280929190818152602001828054801561168957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161163f575b5050505050905090565b601981565b60006b204fce5e3e2502611000000082111515156116b557600080fd5b612710600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461271001830281151561170757fe5b04905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561176b57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561181657600080fd5b6102c65a03f1151561182757600080fd5b50505060405180519050151561183c57600080fd5b7f72cb8a894ddb372ceec3d2a7648d86f17d5a15caae0e986c53109b8a9a9385e6838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561193b57600080fd5b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561199457600080fd5b60326005805490501015156119a857600080fd5b7f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762816001604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a16001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060058054806001018281611a84919061478d565b9160005260206000209001600083909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600b6020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b4957600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff1614151515611b6f57600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f38622430bb6defd4452b087e8d0b4a6d1c4d35c179c2d7d875d4abb272b9d88b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b6000806000806000806b204fce5e3e250261100000008b101515611c5b57600080fd5b6b204fce5e3e2502611000000089101515611c7557600080fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff161415611de1578994508473ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515611d6357600080fd5b6102c65a03f11515611d7457600080fd5b50505060405180519050935088841080611dce5750600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054898503105b15611ddc5760009550611f9f565b611f1c565b8b9450883073ffffffffffffffffffffffffffffffffffffffff16311015611e0c5760009550611f9f565b600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548b8673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515611ef057600080fd5b6102c65a03f11515611f0157600080fd5b50505060405180519050011115611f1b5760009550611f9f565b5b866ec097ce7bc90715b34b9f1000000000811515611f3657fe5b04925082881115611f4a5760009550611f9f565b600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150611f968389613dc9565b90508181101595505b50505050509695505050505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561200857600080fd5b6000600f60006101000a81548160ff0219169083151502179055507f7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e7356000604051808215151515815260200191505060405180910390a16001905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120c157600080fd5b61271081111515156120d257600080fd5b806009819055507f8c4d35e54a3f2ef1134138fd8ea3daee6a3c89e10d2665996babdf70261e2c76816040518082815260200191505060405180910390a150565b600080600080600080600f60009054906101000a900460ff16151561213757600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561219357600080fd5b61219d8c8b612dc4565b15156121a857600080fd5b8615612229576000881115156121bd57600080fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff161415612218578a3414151561221357600080fd5b612228565b60003414151561222757600080fd5b5b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff16141515612378578b73ffffffffffffffffffffffffffffffffffffffff166323b872dd33308e6000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b151561235157600080fd5b6102c65a03f1151561236257600080fd5b50505060405180519050151561237757600080fd5b5b6123848c8b8d8b6141dc565b9450600160028981151561239457fe5b0614935073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614156125f857831515612522576123f08b6137f5565b9050600a60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff1663f39b5b9b8260017f80000000000000000000000000000000000000000000000000000000000000006000604051602001526040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180838152602001828152602001925050506020604051808303818588803b15156124f457600080fd5b6125ee5a03f1151561250557600080fd5b5050505060405180519050925084831015151561252157600080fd5b5b8973ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8a876000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156125cd57600080fd5b6102c65a03f115156125de57600080fd5b5050506040518051905015156125f357600080fd5b612782565b83151561274157600a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff166395e3c50b8c60017f80000000000000000000000000000000000000000000000000000000000000006000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050602060405180830381600087803b151561270957600080fd5b6102c65a03f1151561271a57600080fd5b50505060405180519050925061272f836137f5565b925084831015151561274057600080fd5b5b8873ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050151561278157600080fd5b5b3373ffffffffffffffffffffffffffffffffffffffff167f3e5691bfb48667c037c1014f0b320bbf4095c37ad5cd1f0b2573366756f54ac68d8d8d898e8a604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182151515158152602001965050505050505060405180910390a26001955050505050509695505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128ee57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561292a57600080fd5b7f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc40600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a180600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612a4f57600080fd5b7f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c2a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612c6657600080fd5b7f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc4081604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a17f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed816000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148015612ea15750600073ffffffffffffffffffffffffffffffffffffffff16600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b80612f835750600073ffffffffffffffffffffffffffffffffffffffff16600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015612f82575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b5b905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612fe657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561308157600080fd5b6103e8821115151561309257600080fd5b6101f481111515156130a357600080fd5b81600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ff32eb6e759557a6efda6830142e2357097b173bc01c7a45d4f409fd9ce87387b838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1505050565b6131ab614779565b600580548060200260200160405190810160405280929190818152602001828054801561322d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116131e3575b5050505050905090565b60008060008060008060008061324d8c8c612dc4565b151561325c57600097506133bf565b600f60009054906101000a900460ff16151561327b57600097506133bf565b60008a141561328d57600097506133bf565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614156132dd578a9650613333565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16141561332d578b9650613332565b600080fd5b5b61333e8c8c8c614204565b8096508197505050600086141561335857600097506133bf565b6133638b8d88614204565b9050809450506133738787611698565b92506133838c8b8d868989611c38565b915081156133ae576133a78a846133998f61447a565b6133a28f61447a565b6145b1565b90506133b2565b8490505b6133bc8183614662565b97505b50505050505050949350505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561344f57600080fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156134a857600080fd5b60326004805490501015156134bc57600080fd5b7f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b816001604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a16001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060048054806001018281613598919061478d565b9160005260206000209001600083909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600c6020528060005260406000206000915090505481565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561365a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156136f557600080fd5b81600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f5421c19be109a988c30678d84f56dd237868f8147ba05c20a6b78726e8f5d8ca838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1505050565b600061271060095461271003830281151561380c57fe5b049050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561386f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561390a57600080fd5b600a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600b60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600d60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600e60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090557f6621c4efc5efa31320394260425b7d14cbb9d7e3754b2c98c04af66b1cbf315b81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613b3b57600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515613b9357600080fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600090505b600480549050811015613d9f578173ffffffffffffffffffffffffffffffffffffffff16600482815481101515613c2357fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613d94576004600160048054905003815481101515613c8257fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600482815481101515613cbd57fe5b906000526020600020900160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600481818054905003915081613d1e919061474d565b507f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b826000604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a1613d9f565b806001019050613bf0565b5050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000849150839050808201818303614e2002811515613de757fe5b059250505092915050565b600d6020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613e6557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501515613ea557600080fd5b7fec47e7ed86c86774d1a72c19f35c639911393fe7c1a34031fdbd260890da90de8282604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613f7d578173ffffffffffffffffffffffffffffffffffffffff1631905061403e565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561402057600080fd5b6102c65a03f1151561403157600080fd5b5050506040518051905090505b92915050565b600f60009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561410e576012600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506141d9565b8073ffffffffffffffffffffffffffffffffffffffff1663313ce5676000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561417a57600080fd5b6102c65a03f1151561418b57600080fd5b50505060405180519050600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b50565b60006141fa836141eb8761447a565b6141f48761447a565b8561469b565b9050949350505050565b600080600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141561435457600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663cd7724c36142d8866137f5565b6000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561433257600080fd5b6102c65a03f1151561434357600080fd5b505050604051805190509250614453565b600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506144508173ffffffffffffffffffffffffffffffffffffffff166395b68fe7866000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561443057600080fd5b6102c65a03f1151561444157600080fd5b505050604051805190506137f5565b92505b61446f84846144618961447a565b61446a8961447a565b6145b1565b915050935093915050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156144ce57601291506145ab565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114156145a7578273ffffffffffffffffffffffffffffffffffffffff1663313ce5676000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561458557600080fd5b6102c65a03f1151561459657600080fd5b5050506040518051905091506145ab565b8091505b50919050565b60006b204fce5e3e2502611000000085111515156145ce57600080fd5b6b204fce5e3e2502611000000084111515156145e957600080fd5b82821015156146285760128383031115151561460457600080fd5b84838303600a0a02670de0b6b3a7640000850281151561462057fe5b04905061465a565b60128284031115151561463a57600080fd5b84828403600a0a670de0b6b3a764000086020281151561465657fe5b0490505b949350505050565b600081614670576000614673565b60015b60ff1660028481151561468257fe5b06146146915760018303614693565b825b905092915050565b60006b204fce5e3e2502611000000085111515156146b857600080fd5b620f4240670de0b6b3a76400000282111515156146d457600080fd5b8383101515614713576012848403111515156146ef57600080fd5b670de0b6b3a7640000848403600a0a8387020281151561470b57fe5b049050614745565b60128385031115151561472557600080fd5b828403600a0a670de0b6b3a76400000282860281151561474157fe5b0490505b949350505050565b8154818355818115116147745781836000526020600020918201910161477391906147b9565b5b505050565b602060405190810160405280600081525090565b8154818355818115116147b4578183600052602060002091820191016147b391906147b9565b5b505050565b6147db91905b808211156147d75760008160009055506001016147bf565b5090565b905600a165627a7a72305820f589b5ffd998d45e5a639eb829fd0e8f2880c62f41c3e103fcbb8536b5c0708d0029
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KyberUniswapReserve
Function name: listToken(address)
PC address: 4726
Estimated Gas Usage: 39236 - 266343
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:620

uniswapFactory.getExchange(token)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: listToken(address), txdata: 0x1fc1e25f00000000000000000000000002, decoded_data: ('0x0200000000000000000000000000000000000000',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KyberUniswapReserve
Function name: listToken(address)
PC address: 4821
Estimated Gas Usage: 39236 - 266343
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:622

tokenExchange[address(token)] = address(uniswapExchange)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: aaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeefaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa01, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: listToken(address), txdata: 0x1fc1e25f00000000000000000000000001, decoded_data: ('0x0100000000000000000000000000000000000000',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KyberUniswapReserve
Function name: listToken(address)
PC address: 4874
Estimated Gas Usage: 39236 - 266343
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:622

tokenExchange[address(token)] = address(uniswapExchange)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: aaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeefaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa01, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: listToken(address), txdata: 0x1fc1e25f00000000000000000000000001, decoded_data: ('0x0100000000000000000000000000000000000000',), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KyberUniswapReserve
Function name: listToken(address)
PC address: 5093
Estimated Gas Usage: 39236 - 266343
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:625

token.approve(uniswapExchange, 2 ** 255)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101020101010101010101804001010201800140000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: listToken(address), txdata: 0x1fc1e25f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: KyberUniswapReserve
Function name: listToken(address)
PC address: 5093
Estimated Gas Usage: 37683 - 230135
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:625

token.approve(uniswapExchange, 2 ** 255)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010280080201012080010102010401010801000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000004, decoded_data: , value: 0x0
Caller: [CREATOR], function: listToken(address), txdata: 0x1fc1e25f000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, decoded_data: ('0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KyberUniswapReserve
Function name: listToken(address)
PC address: 5093
Estimated Gas Usage: 39236 - 266343
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:625

token.approve(uniswapExchange, 2 ** 255)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000001001400101010101010101010101000802010801000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: listToken(address), txdata: 0x1fc1e25f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KyberUniswapReserve
Function name: listToken(address)
PC address: 5224
Estimated Gas Usage: 39236 - 266343
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:628

internalInventoryMin[address(token)] = 2 ** 255

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000001001400101010101010101010101000802010801000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: listToken(address), txdata: 0x1fc1e25f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KyberUniswapReserve
Function name: listToken(address)
PC address: 5293
Estimated Gas Usage: 39236 - 266343
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:629

internalInventoryMax[address(token)] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000001001400101010101010101010101000802010801000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: listToken(address), txdata: 0x1fc1e25f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KyberUniswapReserve
Function name: listToken(address)
PC address: 5362
Estimated Gas Usage: 39236 - 266343
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:630

internalActivationMinSpreadBps[address(token)] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000001001400101010101010101010101000802010801000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: listToken(address), txdata: 0x1fc1e25f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KyberUniswapReserve
Function name: listToken(address)
PC address: 5431
Estimated Gas Usage: 39236 - 266343
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:631

internalPricePremiumBps[address(token)] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000202010210010101041008400140010001088080000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: listToken(address), txdata: 0x1fc1e25f00000000000000000000000080, decoded_data: ('0x8000000000000000000000000000000000000000',), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KyberUniswapReserve
Function name: withdrawToken(address,uint256,address)
PC address: 6172
Estimated Gas Usage: 3848 - 39845
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:272

token.transfer(sendTo, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101080401010408010101010101000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address,uint256,address), txdata: 0x3ccdbb28000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KyberUniswapReserve
Function name: shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)
PC address: 7529
Estimated Gas Usage: 2490 - 37616
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:732

token.balanceOf(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010104010101010101010201011001010101010101010101010101010101020140011001010101011001100201010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256), txdata: 0x5a65d4c9000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000009, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KyberUniswapReserve
Function name: shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)
PC address: 7625
Estimated Gas Usage: 2490 - 37616
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:735

internalInventoryMin[token]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010020080101010100020280010140010104040101010101010101010101010101010101010101100140010101010101010108010101010101010101010101010101, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256), txdata: 0x5a65d4c9000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KyberUniswapReserve
Function name: shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)
PC address: 7926
Estimated Gas Usage: 4093 - 39409
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:742

token.balanceOf(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000100000000200000000100000000010000001000000000000000000000000000000200010000000000010120010000010000000000000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256), txdata: 0x5a65d4c9020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KyberUniswapReserve
Function name: shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)
PC address: 7948
Estimated Gas Usage: 4093 - 39409
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:742

token.balanceOf(this) + srcAmount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000010010000000000040001010000000000000000000000000000000000000040000100000000010400000000010101000100000000000000000000000080, decoded_data: , value: 0x0
Caller: [ATTACKER], function: shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256), txdata: 0x5a65d4c90000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000014, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: KyberUniswapReserve
Function name: shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256)
PC address: 7989
Estimated Gas Usage: 3320 - 38355
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:730

if (srcToken == ETH_TOKEN_ADDRESS) {
                token = destToken;
                uint tokenBalance = token.balanceOf(this);
                if (
                    tokenBalance < destAmount ||
                    tokenBalance - destAmount < internalInventoryMin[token]
                ) {
                    return false;
                }
            } else {
                token = srcToken;
                if (this.balance < destAmount) return false;
                if (token.balanceOf(this) + srcAmount > internalInventoryMax[token]) {
                    return false;
                }
            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000001010000000000000000000000010008000000000000000000000000000000000000000000010000010004000000002000000000000000000000000040, decoded_data: , value: 0x0
Caller: [ATTACKER], function: shouldUseInternalInventory(address,uint256,address,uint256,uint256,uint256), txdata: 0x5a65d4c9000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KyberUniswapReserve
Function name: trade(address,uint256,address,address,uint256,bool)
PC address: 9269
Estimated Gas Usage: 9894 - 82482
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:506

tokenExchange[address(destToken)]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000010400000102000110000102000040010000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: listToken(address), txdata: 0x1fc1e25f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0
Caller: [SOMEGUY], function: trade(address,uint256,address,address,uint256,bool), txdata: 0x6cf69811eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeedeadbeefdeadbeefdeadbeefdeadbeefdeadbeefeeeeeeeeeeeeeeeeeeeeeeee01010101010101010101010101010101eeeeeeee0000000000000000000000000000000000000000000014041dced101a220080101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KyberUniswapReserve
Function name: trade(address,uint256,address,address,uint256,bool)
PC address: 9466
Estimated Gas Usage: 9894 - 82482
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:507

exchange.ethToTokenSwapInput.value(quantity)(
                        1, 
                        2 ** 255 
                    )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x60000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000002001200400000000000000000000000000000410000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: listToken(address), txdata: 0x1fc1e25f00000000000000000000000080, decoded_data: ('0x8000000000000000000000000000000000000000',), value: 0x0
Caller: [ATTACKER], function: trade(address,uint256,address,address,uint256,bool), txdata: 0x6cf69811808080808080808080808080eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000808080808080808080808080800000000000000000000000000000000000000080808080808080808080808001010101010101010101010101010101808080800000000000000000000000000000000000000000000053c21bceccefa004040101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KyberUniswapReserve
Function name: trade(address,uint256,address,address,uint256,bool)
PC address: 9466
Estimated Gas Usage: 9894 - 82482
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:507

exchange.ethToTokenSwapInput.value(quantity)(
                        1, 
                        2 ** 255 
                    )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000010400000102000110000102000040010000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: listToken(address), txdata: 0x1fc1e25f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0
Caller: [SOMEGUY], function: trade(address,uint256,address,address,uint256,bool), txdata: 0x6cf69811eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeedeadbeefdeadbeefdeadbeefdeadbeefdeadbeefeeeeeeeeeeeeeeeeeeeeeeee01010101010101010101010101010101eeeeeeee0000000000000000000000000000000000000000000014041dced101a220080101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KyberUniswapReserve
Function name: trade(address,uint256,address,address,uint256,bool)
PC address: 9683
Estimated Gas Usage: 9894 - 82482
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:515

destToken.transfer(destAddress, expectedDestAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x43f6902012800000c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000201080000010100010000010010100001010004000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: , value: 0x0
Caller: [CREATOR], function: listToken(address), txdata: 0x1fc1e25f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0
Caller: [CREATOR], function: trade(address,uint256,address,address,uint256,bool), txdata: 0x6cf69811808080808080808080808080eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef80808080808080808080808001010101010101010101010101010101808080800000000000000000000000000000000000000000000068010410106e0210020110, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: KyberUniswapReserve
Function name: trade(address,uint256,address,address,uint256,bool)
PC address: 9683
Estimated Gas Usage: 9894 - 82482
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:515

destToken.transfer(destAddress, expectedDestAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x14600288020000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000008080400001014000001000010000020001200001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: , value: 0x0
Caller: [ATTACKER], function: listToken(address), txdata: 0x1fc1e25fafafafafafafafafafafafaf01, value: 0x0
Caller: [CREATOR], function: trade(address,uint256,address,address,uint256,bool), txdata: 0x6cf69811808080808080808080808080eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000080808080808080808080808001000000000000000000000000000000000000008080808080808080808080801008200004041020008040801010400880808080000000000000000000000000000000000000000000002002010204400201010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KyberUniswapReserve
Function name: trade(address,uint256,address,address,uint256,bool)
PC address: 14333
Estimated Gas Usage: 9894 - 82482
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:778

feeBps

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000010400000102000110000102000040010000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: listToken(address), txdata: 0x1fc1e25f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0
Caller: [SOMEGUY], function: trade(address,uint256,address,address,uint256,bool), txdata: 0x6cf69811eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeedeadbeefdeadbeefdeadbeefdeadbeefdeadbeefeeeeeeeeeeeeeeeeeeeeeeee01010101010101010101010101010101eeeeeeee0000000000000000000000000000000000000000000014041dced101a220080101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KyberUniswapReserve
Function name: deductFee(uint256)
PC address: 14339
Estimated Gas Usage: 1716 - 2092
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:778

amount * (10000 - feeBps)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101000101010120200101020101014010100104010101010101010101010101100101010108010101200101401001800480004001010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: deductFee(uint256), txdata: 0xa9afaaaf08, decoded_data: (3618502788666131106986593281521497120414687020801267626233049500247285301248,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KyberUniswapReserve
Function name: calculateSpreadBps(uint256,uint256)
PC address: 15831
Estimated Gas Usage: 1062 - 1438
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:768

askRate + bidRate

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010201020100000140100201800101101002018040010101010101010101010101010101100101010101012001040104080101040101010101010101010101010101, decoded_data: , value: 0x0
Caller: [ATTACKER], function: calculateSpreadBps(uint256,uint256), txdata: 0xbc91970a8959a9ca411e18c0110002720000000000000000000000000000000000000000cd, decoded_data: (62125281492572285796957199712805230800765262470344661857926766843648609878016, 92724133959569609616531452838988363710626354908032482922221893443836685844480), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KyberUniswapReserve
Function name: calculateSpreadBps(uint256,uint256)
PC address: 15834
Estimated Gas Usage: 1062 - 1438
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:768

askRate - bidRate

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000202018001080102040180400140018004028004000000000000000000000000012008800104010401010140040101010101040100000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: calculateSpreadBps(uint256,uint256), txdata: 0xbc91970a00000001000008040000000000000000000000000000000000000000000000003d, decoded_data: (26959959547763400808135942478059527095768630264573944521302430711808, 27591083763579249690772773771601415543161988533609665650027002439385550422016), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KyberUniswapReserve
Function name: calculateSpreadBps(uint256,uint256)
PC address: 15838
Estimated Gas Usage: 1062 - 1438
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:768

10000 * 2 * (askRate - bidRate)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101014020048010010010081001081040020101010101010101010101010101010801040102081001401001020101010101010801010101010101010101010101, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: calculateSpreadBps(uint256,uint256), txdata: 0xbc91970a60, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: KyberUniswapReserve
Function name: calculateSpreadBps(uint256,uint256)
PC address: 15846
Estimated Gas Usage: 976 - 1071
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:758

function calculateSpreadBps(
            uint _askRate,
            uint _bidRate
        )
            public
            pure
            returns(int)
        {
            int askRate = int(_askRate);
            int bidRate = int(_bidRate);
            return 10000 * 2 * (askRate - bidRate) / (askRate + bidRate);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010800400201010110010401010104400402012004010101010101010101010101010140010140010101040101010201010001400101010101010101010101010101, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: calculateSpreadBps(uint256,uint256), txdata: 0xbc91970a, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: KyberUniswapReserve
Function name: withdrawEther(uint256,address)
PC address: 16021
Estimated Gas Usage: 3484 - 38727
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:280

sendTo.transfer(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000410010001200808800000040220801004000240000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: listToken(address), txdata: 0x1fc1e25f00000000000000000000000010, decoded_data: ('0x1000000000000000000000000000000000000000',), value: 0x0
Caller: [ATTACKER], function: withdrawEther(uint256,address), txdata: 0xce56c4540000000000000000000000000000000000000000000000000000000000000001090909090909090909090909deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KyberUniswapReserve
Function name: getBalance(address,address)
PC address: 16422
Estimated Gas Usage: 2708 - 37834
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:110

token.balanceOf(user)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000002001400102200101100404022001010101102001000000000000000000000000010140010102020200010101010140202002010200000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: getBalance(address,address), txdata: 0xd4fac45d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KyberUniswapReserve
Function name: listToken(address)
PC address: 16648
Estimated Gas Usage: 39236 - 266343
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:51

decimals[token] = ETH_DECIMALS

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: aaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeefaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa01, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: listToken(address), txdata: 0x1fc1e25f00000000000000000000000001, decoded_data: ('0x0100000000000000000000000000000000000000',), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KyberUniswapReserve
Function name: listToken(address)
PC address: 16768
Estimated Gas Usage: 39236 - 266343
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:52

token.decimals()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101020101010101010101804001010201800140000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: listToken(address), txdata: 0x1fc1e25f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: KyberUniswapReserve
Function name: listToken(address)
PC address: 16768
Estimated Gas Usage: 39236 - 266343
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:52

token.decimals()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000001001018004020040012001082002000100080102000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000010, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: listToken(address), txdata: 0x1fc1e25f00000000000000000000000040, decoded_data: ('0x4000000000000000000000000000000000000000',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KyberUniswapReserve
Function name: listToken(address)
PC address: 16768
Estimated Gas Usage: 39236 - 266343
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:52

token.decimals()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: aaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeefaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa01, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: listToken(address), txdata: 0x1fc1e25f00000000000000000000000001, decoded_data: ('0x0100000000000000000000000000000000000000',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KyberUniswapReserve
Function name: listToken(address)
PC address: 16855
Estimated Gas Usage: 39236 - 266343
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:52

decimals[token] = token.decimals()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000001001400101010101010101010101000802010801000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: listToken(address), txdata: 0x1fc1e25f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KyberUniswapReserve
Function name: trade(address,uint256,address,address,uint256,bool)
PC address: 17803
Estimated Gas Usage: 9894 - 82482
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:61

token.decimals()

--------------------
Initial State:

Account: [CREATOR], balance: 0x43f6902012800000c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000201080000010100010000010010100001010004000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: , value: 0x0
Caller: [CREATOR], function: listToken(address), txdata: 0x1fc1e25f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0
Caller: [CREATOR], function: trade(address,uint256,address,address,uint256,bool), txdata: 0x6cf69811808080808080808080808080eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef80808080808080808080808001010101010101010101010101010101808080800000000000000000000000000000000000000000000068010410106e0210020110, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KyberUniswapReserve
Function name: trade(address,uint256,address,address,uint256,bool)
PC address: 18229
Estimated Gas Usage: 8205 - 46138
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:75

PRECISION * (10**(srcDecimals - dstDecimals))

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000002010801408001000140020101040001000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: , value: 0x0
Caller: [ATTACKER], function: listToken(address), txdata: 0x1fc1e25f02020202020202020202020208, value: 0x0
Caller: [CREATOR], function: trade(address,uint256,address,address,uint256,bool), txdata: 0x6cf69811202020202020202020202020eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000202020202020202020202020080000000000000000000000000000000000000020202020202020202020202004040404040404040404040404040404202020200000000000000000000000000000000000000000000020c318ced610a0000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: KyberUniswapReserve
Function name: trade(address,uint256,address,address,uint256,bool)
PC address: 18240
Estimated Gas Usage: 4914 - 6709
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x54a4a1167b004b004520c605e3f01906f683413d.sol:123

calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000002000000000010001000080008000000001004000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: , value: 0x0
Caller: [ATTACKER], function: listToken(address), txdata: 0x1fc1e25f00000000000000000000000010, decoded_data: ('0x1000000000000000000000000000000000000000',), value: 0x0
Caller: [CREATOR], function: trade(address,uint256,address,address,uint256,bool), txdata: 0x6cf69811afafafafafafafafafafafafeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000001000000000afafafafafafafafafafafaf10, value: 0x0


time_used: 36052.858937740326 seconds
#@contract_info_time
0x54a4a1167b004b004520c605e3f01906f683413d.sol:0.4.18:KyberUniswapReserve:36052.858937740326:36100:60:36000
