++++ 0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol  :  0.5.2  :  StakeManager ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 20922
['constructor']:writes at the last depth:['35', '0', '1']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 47.94% coverage.
dynamic svars:['30', '26', '32', '33', '27', '47', '31']
static svars:['0', '9', '14', '15', '25', '12', '13', '1', '3', '24', '6', '5', '7', '2', '28', '29', '11', '16', '22', '10', '8', '35', '23', '4', '34', '18', '20', '17', '21', '19']
Ending preprocessing.
preprocessing time(s): 104.05791187286377
contract coverage: 37.83%
totalStakedFor(address) is not reachable
withdrawRewards(uint256) is not reachable
unjail(uint256) is not reachable
ownerOf(uint256) is not reachable
getValidatorId(address) is not reachable
updateValidatorDelegation(bool) is not reachable
validatorAuction(uint256) is not reachable
slash(bytes) is not reachable
Function Reads: State variables read in conditions
	updateSigner(uint256,bytes):[]
	updateContractAddress(uint256,address):['0']
	stopAuctions(uint256):['0', '9']
	lock():['0']
	minHeimdallFee():[]
	token():[]
	changeRootChain(address):['1']
	validatorStake(uint256):[]
	logger():[]
	setDelegationEnabled(bool):['0']
	transferOwnership(address):['1']
	updateValidatorDelegation(bool):['27']
	latestSignerUpdateEpoch(uint256):[]
	unstakeClaim(uint256):['26']
	validatorState():[]
	updateDynastyValue(uint256):['0']
	transferFunds(uint256,uint256,address):['26']
	factory():[]
	updateCheckpointReward(uint256):['0']
	totalRewardsLiquidated():[]
	locked():[]
	updateCheckPointBlockInterval(uint256):['0']
	currentValidatorSetTotalStake():[]
	startAuction(uint256,uint256,bool,bytes):['0', '26']
	unlock():['0']
	withdrawalDelay():[]
	updateMinAmounts(uint256,uint256):['0']
	rootChain():[]
	confirmAuctionBid(uint256,uint256):['0', '32']
	totalHeimdallFee():[]
	updateProposerBonus(uint256):['0']
	updateValidatorState(uint256,int256):['26', '28']
	owner():[]
	isOwner():[]
	epoch():[]
	forceUnstake(uint256):['0']
	withdrawRewards(uint256):[]
	registry():[]
	CHECKPOINT_REWARD():[]
	currentValidatorSetSize():[]
	totalStaked():[]
	initialize(address,address,address,address,address,address,address,address):['35']
	delegationDeposit(uint256,uint256,address):['25', '26']
	dynasty():[]
	renounceOwnership():['1']
	currentEpoch():[]
	replacementCoolDown():[]
	userFeeExit(address):[]
	slash(bytes):[]
	ownerOf(uint256):[]
	topUpForFee(address,uint256):['0']
	reinitialize(address,address,address):['0']
	claimFee(uint256,uint256,bytes):[]
	validatorAuction(uint256):[]
	delegationEnabled():[]
	NFTCounter():[]
	getValidatorContract(uint256):[]
	governance():[]
	minDeposit():[]
	totalStakedFor(address):[]
	signerUpdateLimit():[]
	validatorThreshold():[]
	stakeFor(address,uint256,uint256,bool,bytes):[]
	restake(uint256,uint256,bool):['0']
	unstake(uint256):['32', '26']
	NFTContract():[]
	proposerBonus():[]
	validators(uint256):[]
	signerToValidator(address):[]
	accountStateRoot():[]
	setCurrentEpoch(uint256):['0']
	checkPointBlockInterval():[]
	validatorStateChanges(uint256):[]
	isValidator(uint256):['26']
	WITHDRAWAL_DELAY():[]
	setToken(address):['0']
	updateValidatorThreshold(uint256):['0']
	getValidatorId(address):[]
	unjail(uint256):[]
	stake(uint256,uint256,bool,bytes):['0']
	checkSignatures(uint256,bytes32,bytes32,address,bytes):['2']
	updateSignerUpdateLimit(uint256):['0']
	auctionPeriod():[]
	totalRewards():[]
Function Writes: State variables written
	lock():['0']
	unlock():['0']
	setCurrentEpoch(uint256):['9']
	updateCheckPointBlockInterval(uint256):['14']
	updateSignerUpdateLimit(uint256):['15']
	setDelegationEnabled(bool):['25']
	updateMinAmounts(uint256,uint256):['12', '13']
	renounceOwnership():['1']
	setToken(address):['3']
	stopAuctions(uint256):['24']
	reinitialize(address,address,address):['6', '5', '7']
	changeRootChain(address):['2']
	updateValidatorState(uint256,int256):['30', '28', '29']
	transferOwnership(address):['1']
	updateCheckpointReward(uint256):['11']
	updateValidatorThreshold(uint256):['16']
	updateProposerBonus(uint256):['22']
	updateDynastyValue(uint256):['10', '8']
	initialize(address,address,address,address,address,address,address,address):['35', '0']
	updateContractAddress(uint256,address):['26']
============================
iteration:3
targets:['transferFunds(uint256,uint256,address)', 'delegationDeposit(uint256,uint256,address)', 'updateValidatorState(uint256,int256)', 'updateContractAddress(uint256,address)', 'unstake(uint256)', 'updateDynastyValue(uint256)', 'updateProposerBonus(uint256)', 'unstakeClaim(uint256)', 'totalStakedFor(address)', 'updateCheckpointReward(uint256)', 'updateValidatorThreshold(uint256)', 'withdrawRewards(uint256)', 'unjail(uint256)', 'ownerOf(uint256)', 'restake(uint256,uint256,bool)', 'confirmAuctionBid(uint256,uint256)', 'getValidatorId(address)', 'forceUnstake(uint256)', 'updateCheckPointBlockInterval(uint256)', 'reinitialize(address,address,address)', 'lock()', 'unlock()', 'setToken(address)', 'topUpForFee(address,uint256)', 'updateValidatorDelegation(bool)', 'setDelegationEnabled(bool)', 'validatorAuction(uint256)', 'startAuction(uint256,uint256,bool,bytes)', 'isValidator(uint256)', 'stopAuctions(uint256)', 'initialize(address,address,address,address,address,address,address,address)', 'updateMinAmounts(uint256,uint256)', 'slash(bytes)', 'setCurrentEpoch(uint256)', 'updateSignerUpdateLimit(uint256)', 'stake(uint256,uint256,bool,bytes)']
['renounceOwnership()']:writes at the last depth:['1']
['changeRootChain(address)']:writes at the last depth:['2']
['transferOwnership(address)']:writes at the last depth:['1']
['initialize(address,address,address,address,address,address,address,address)']:writes at the last depth:['18', '12', '9', '14', '8', '22', '16', '4', '21', '13', '7', '25', '15', '5', '1', '0', '11', '10', '2', '3', '6', '35']
contract coverage: 58.48%
============================
iteration:4
['initialize(address,address,address,address,address,address,address,address)', 'lock()']:writes at the last depth:['0']
['initialize(address,address,address,address,address,address,address,address)', 'setCurrentEpoch(uint256)']:writes at the last depth:['9']
['initialize(address,address,address,address,address,address,address,address)', 'unlock()']:writes at the last depth:['0']
['initialize(address,address,address,address,address,address,address,address)', 'updateCheckPointBlockInterval(uint256)']:writes at the last depth:['14']
['initialize(address,address,address,address,address,address,address,address)', 'updateSignerUpdateLimit(uint256)']:writes at the last depth:['15']
['initialize(address,address,address,address,address,address,address,address)', 'setDelegationEnabled(bool)']:writes at the last depth:['25']
['initialize(address,address,address,address,address,address,address,address)', 'renounceOwnership()']:writes at the last depth:['1']
['initialize(address,address,address,address,address,address,address,address)', 'setToken(address)']:writes at the last depth:['3']
['initialize(address,address,address,address,address,address,address,address)', 'updateMinAmounts(uint256,uint256)']:writes at the last depth:['12', '13']
['initialize(address,address,address,address,address,address,address,address)', 'stopAuctions(uint256)']:writes at the last depth:['24']
['initialize(address,address,address,address,address,address,address,address)', 'changeRootChain(address)']:writes at the last depth:['2']
['initialize(address,address,address,address,address,address,address,address)', 'updateCheckpointReward(uint256)']:writes at the last depth:['11']
['initialize(address,address,address,address,address,address,address,address)', 'updateValidatorThreshold(uint256)']:writes at the last depth:['16']
['initialize(address,address,address,address,address,address,address,address)', 'transferOwnership(address)']:writes at the last depth:['1']
['initialize(address,address,address,address,address,address,address,address)', 'ownerOf(uint256)']:writes at the last depth:[]
['initialize(address,address,address,address,address,address,address,address)', 'updateProposerBonus(uint256)']:writes at the last depth:['22']
['initialize(address,address,address,address,address,address,address,address)', 'reinitialize(address,address,address)']:writes at the last depth:['7', '6', '5']
['initialize(address,address,address,address,address,address,address,address)', 'getValidatorId(address)']:writes at the last depth:[]
['initialize(address,address,address,address,address,address,address,address)', 'totalStakedFor(address)']:writes at the last depth:[]
['initialize(address,address,address,address,address,address,address,address)', 'updateContractAddress(uint256,address)']:writes at the last depth:['26']
['initialize(address,address,address,address,address,address,address,address)', 'updateDynastyValue(uint256)']:writes at the last depth:['21', '24', '8', '10']
['initialize(address,address,address,address,address,address,address,address)', 'transferFunds(uint256,uint256,address)']:writes at the last depth:[]
['initialize(address,address,address,address,address,address,address,address)', 'totalStakedFor(address)']:writes at the last depth:[]
['initialize(address,address,address,address,address,address,address,address)', 'topUpForFee(address,uint256)']:writes at the last depth:['34']
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)']:writes at the last depth:['20', '26']
['initialize(address,address,address,address,address,address,address,address)', 'restake(uint256,uint256,bool)']:writes at the last depth:['17', '26']
['initialize(address,address,address,address,address,address,address,address)', 'restake(uint256,uint256,bool)']:writes at the last depth:['17', '26']
['initialize(address,address,address,address,address,address,address,address)', 'restake(uint256,uint256,bool)']:writes at the last depth:['26', '17', '28']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)']:writes at the last depth:['30', '20', '26']
contract coverage: 58.56%
============================
iteration:5
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'lock()']:writes at the last depth:['0']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'setCurrentEpoch(uint256)']:writes at the last depth:['9']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'unlock()']:writes at the last depth:['0']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'updateCheckPointBlockInterval(uint256)']:writes at the last depth:['14']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'updateSignerUpdateLimit(uint256)']:writes at the last depth:['15']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'setDelegationEnabled(bool)']:writes at the last depth:['25']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'renounceOwnership()']:writes at the last depth:['1']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'setToken(address)']:writes at the last depth:['3']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'updateMinAmounts(uint256,uint256)']:writes at the last depth:['12', '13']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'stopAuctions(uint256)']:writes at the last depth:['24']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'changeRootChain(address)']:writes at the last depth:['2']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'updateCheckpointReward(uint256)']:writes at the last depth:['11']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'transferOwnership(address)']:writes at the last depth:['1']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'ownerOf(uint256)']:writes at the last depth:[]
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'updateProposerBonus(uint256)']:writes at the last depth:['22']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'reinitialize(address,address,address)']:writes at the last depth:['7', '6', '5']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'totalStakedFor(address)']:writes at the last depth:[]
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'updateDynastyValue(uint256)']:writes at the last depth:['21', '24', '8', '10']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'totalStakedFor(address)']:writes at the last depth:[]
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'topUpForFee(address,uint256)']:writes at the last depth:['34']
contract coverage: 58.56%
============================
iteration:6
contract coverage: 58.56%
============================
iteration:7
contract coverage: 58.56%
============================
iteration:8
contract coverage: 58.56%
============================
iteration:9
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'totalStakedFor(address)', 'reinitialize(address,address,address)']:writes at the last depth:['7', '6', '5']
contract coverage: 58.56%
============================
iteration:10
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'reinitialize(address,address,address)', 'updateSignerUpdateLimit(uint256)']:writes at the last depth:['15']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'reinitialize(address,address,address)', 'ownerOf(uint256)']:writes at the last depth:[]
contract coverage: 58.56%
============================
iteration:11
contract coverage: 58.56%
============================
iteration:12
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'ownerOf(uint256)', 'updateSignerUpdateLimit(uint256)']:writes at the last depth:['15']
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'ownerOf(uint256)', 'ownerOf(uint256)']:writes at the last depth:[]
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'ownerOf(uint256)', 'reinitialize(address,address,address)']:writes at the last depth:['7', '6', '5']
contract coverage: 58.56%
============================
iteration:13
contract coverage: 58.56%
============================
iteration:14
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'updateCheckpointReward(uint256)', 'setCurrentEpoch(uint256)']:writes at the last depth:['9']
contract coverage: 58.56%
============================
iteration:15
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'changeRootChain(address)', 'renounceOwnership()']:writes at the last depth:['1']
contract coverage: 58.56%
============================
iteration:16
contract coverage: 58.56%
============================
iteration:17
contract coverage: 58.56%
============================
iteration:18
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'setToken(address)', 'reinitialize(address,address,address)']:writes at the last depth:['7', '6', '5']
contract coverage: 58.56%
============================
iteration:19
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'renounceOwnership()', 'setCurrentEpoch(uint256)']:writes at the last depth:['9']
contract coverage: 58.56%
============================
iteration:20
contract coverage: 58.56%
============================
iteration:21
['initialize(address,address,address,address,address,address,address,address)', 'forceUnstake(uint256)', 'updateSignerUpdateLimit(uint256)', 'updateSignerUpdateLimit(uint256)']:writes at the last depth:['15']
contract coverage: 58.56%
============================
iteration:22
contract coverage: 58.56%
============================
iteration:23
contract coverage: 58.56%
============================
iteration:24
contract coverage: 58.56%
============================
iteration:25
contract coverage: 58.56%
============================
iteration:26
contract coverage: 58.56%
============================
iteration:27
contract coverage: 58.56%
============================
iteration:28
contract coverage: 58.56%
============================
iteration:29
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'lock()']:writes at the last depth:['0']
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'setCurrentEpoch(uint256)']:writes at the last depth:['9']
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'unlock()']:writes at the last depth:['0']
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'updateCheckPointBlockInterval(uint256)']:writes at the last depth:['14']
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'updateSignerUpdateLimit(uint256)']:writes at the last depth:['15']
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'setDelegationEnabled(bool)']:writes at the last depth:['25']
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'renounceOwnership()']:writes at the last depth:['1']
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'setToken(address)']:writes at the last depth:['3']
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'updateMinAmounts(uint256,uint256)']:writes at the last depth:['12', '13']
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'stopAuctions(uint256)']:writes at the last depth:['24']
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'changeRootChain(address)']:writes at the last depth:['2']
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'updateValidatorThreshold(uint256)']:writes at the last depth:['16']
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'ownerOf(uint256)']:writes at the last depth:[]
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'updateProposerBonus(uint256)']:writes at the last depth:['22']
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'reinitialize(address,address,address)']:writes at the last depth:['7', '6', '5']
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'getValidatorId(address)']:writes at the last depth:[]
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'totalStakedFor(address)']:writes at the last depth:[]
['initialize(address,address,address,address,address,address,address,address)', 'withdrawRewards(uint256)', 'updateContractAddress(uint256,address)']:writes at the last depth:['26']
contract coverage: 58.56%
============================
iteration:30
contract coverage: 58.56%
============================
iteration:31
contract coverage: 58.56%
============================
iteration:32
contract coverage: 58.56%
============================
iteration:33
contract coverage: 58.56%
============================
iteration:34
contract coverage: 58.56%
============================
iteration:35
contract coverage: 58.56%
============================
iteration:36
contract coverage: 58.56%
============================
iteration:37
contract coverage: 58.56%
============================
iteration:38
contract coverage: 58.56%
============================
iteration:39
contract coverage: 58.56%
============================
iteration:40
contract coverage: 58.56%
============================
iteration:41
contract coverage: 58.56%
============================
iteration:42
contract coverage: 58.56%
============================
iteration:43
contract coverage: 58.56%
============================
iteration:44
contract coverage: 58.56%
============================
iteration:45
contract coverage: 58.56%
============================
iteration:46
contract coverage: 58.56%
============================
iteration:47
contract coverage: 58.56%
============================
iteration:48
contract coverage: 58.56%
============================
iteration:49
contract coverage: 58.56%
============================
iteration:50
contract coverage: 58.56%
============================
iteration:51
contract coverage: 58.56%
============================
iteration:52
contract coverage: 58.56%
============================
iteration:53
contract coverage: 58.56%
============================
iteration:54
contract coverage: 58.56%
============================
iteration:55
contract coverage: 58.56%
============================
iteration:56
contract coverage: 58.56%
============================
iteration:57
contract coverage: 58.56%
============================
iteration:58
contract coverage: 58.56%
============================
iteration:59
contract coverage: 58.56%
============================
iteration:60
contract coverage: 58.56%
============================
iteration:61
contract coverage: 58.56%
============================
iteration:62
contract coverage: 58.56%
============================
iteration:63
contract coverage: 58.56%
============================
iteration:64
contract coverage: 58.56%
============================
iteration:65
contract coverage: 58.56%
============================
iteration:66
contract coverage: 58.56%
============================
iteration:67
contract coverage: 58.56%
============================
iteration:68
contract coverage: 58.56%
============================
iteration:69
contract coverage: 58.56%
============================
iteration:70
contract coverage: 58.56%
============================
iteration:71
contract coverage: 58.56%
============================
iteration:72
contract coverage: 58.56%
============================
iteration:73
contract coverage: 58.56%
============================
iteration:74
contract coverage: 58.56%
#@statespace
4706 nodes, 4705 edges, 63178 total states
#@coverage
Achieved 0.54% coverage for code: 
#@coverage
Achieved 58.56% coverage for code: 608060405234801561001057600080fd5b50600436106104c9576000357c0100000000000000000000000000000000000000000000000000000000900480637b1039991161028a578063bc8756a91161016e578063e8afa8e8116100eb578063f41a9642116100af578063f41a964214611af3578063f4547a4d14611bb8578063f771fc8714611c06578063f83d08ba14611c34578063fba58f3414611c3e578063fc0c546a14611c5c576104c9565b8063e8afa8e8146119af578063eceec1d3146119f3578063f24ccbfe14611a35578063f28699fa14611a7f578063f2fde38b14611aaf576104c9565b8063d6de07d011610132578063d6de07d0146118bc578063d7f5549d146118ec578063d86d53e71461192e578063e59ee0c61461195c578063e6692f4914611981576104c9565b8063bc8756a914611794578063c45a015514611804578063cbf383d51461184e578063cd6b83881461187c578063cf3090121461189a576104c9565b8063987ab9db11610207578063a440ab1e116101cb578063a440ab1e1461164f578063a47690711461167d578063a68548771461169b578063a69df4b514611734578063a7ab69611461173e578063b1d23f021461175c576104c9565b8063987ab9db1461154957806399d18f6f146115935780639a8a6243146115cb5780639b33f434146115e95780639ff1150014611617576104c9565b80638da5cb5b1161024e5780638da5cb5b146114635780638f32d59b146114ad578063900cf0cf146114cf57806391460149146114ed5780639342c8f41461151b576104c9565b80637b1039991461129a5780637d669752146112e45780637f952d9514611302578063817b1cd2146113205780638a29e2de1461133e576104c9565b806341b3d185116103b15780635e47655f1161032e5780636901b253116102f25780636901b2531461116e5780637060054d146111de578063715018a6146111fc578063766718081461120657806377939d101461122457806378f84a4414611242576104c9565b80635e47655f14610e905780636352211e14610f5f5780636365679814610fcd5780636400e3851461101b57806368cb812a1461109f576104c9565b80635325e144116103755780635325e14414610ca557806354b8c60114610d985780635508d8e114610dba57806356342d8c14610dd85780635aa6e67514610e46576104c9565b806341b3d18514610af85780634b341aed14610b165780634e3c83f114610b6e5780634fd101d714610b8c5780634fdd20f114610baa576104c9565b806317c2b9101161044a57806328cc4e411161040e57806328cc4e41146108ed5780632e17de781461093157806331c2273b1461095f57806334274586146109a957806335aa2e44146109c75780633862da0b14610aa0576104c9565b806317c2b910146107f45780631dd6b9b114610812578063253164111461084057806325726df21461085e5780632649263a146108a7576104c9565b80630ebb172a116104915780630ebb172a146106de578063144fa6d7146106fc57806316827b1b14610740578063174e68321461076e578063178c2c83146107c6576104c9565b8063028c4c67146104ce578063066647a01461056757806306cfb104146106745780630cccfc58146106a25780630e15561a146106c0575b600080fd5b610565600480360360808110156104e457600080fd5b8101908080359060200190929190803590602001909291908035151590602001909291908035906020019064010000000081111561052157600080fd5b82018360208201111561053357600080fd5b8035906020019184600183028401116401000000008311171561055557600080fd5b9091929391929390505050611ca6565b005b61065e600480360360a081101561057d57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156105d857600080fd5b8201836020820111156105ea57600080fd5b8035906020019184600183028401116401000000008311171561060c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611cfe565b6040518082815260200191505060405180910390f35b6106a06004803603602081101561068a57600080fd5b8101908080359060200190929190505050611f9a565b005b6106aa61204c565b6040518082815260200191505060405180910390f35b6106c8612052565b6040518082815260200191505060405180910390f35b6106e6612058565b6040518082815260200191505060405180910390f35b61073e6004803603602081101561071257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061205e565b005b61076c6004803603602081101561075657600080fd5b8101908080359060200190929190505050612186565b005b6107b06004803603602081101561078457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506122fa565b6040518082815260200191505060405180910390f35b6107f2600480360360208110156107dc57600080fd5b8101908080359060200190929190505050612402565b005b6107fc6128c6565b6040518082815260200191505060405180910390f35b61083e6004803603602081101561082857600080fd5b81019080803590602001909291905050506128cc565b005b61084861297e565b6040518082815260200191505060405180910390f35b61088a6004803603602081101561087457600080fd5b8101908080359060200190929190505050612984565b604051808381526020018281526020019250505060405180910390f35b6108d3600480360360208110156108bd57600080fd5b81019080803590602001909291905050506129a8565b604051808215151515815260200191505060405180910390f35b61092f6004803603606081101561090357600080fd5b810190808035906020019092919080359060200190929190803515159060200190929190505050612a8a565b005b61095d6004803603602081101561094757600080fd5b810190808035906020019092919050505061303e565b005b6109676131cf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6109b16131f5565b6040518082815260200191505060405180910390f35b6109f3600480360360208110156109dd57600080fd5b81019080803590602001909291905050506131fb565b604051808981526020018881526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001826003811115610a8557fe5b60ff1681526020019850505050505050505060405180910390f35b610ae260048036036020811015610ab657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613290565b6040518082815260200191505060405180910390f35b610b006132a8565b6040518082815260200191505060405180910390f35b610b5860048036036020811015610b2c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132ae565b6040518082815260200191505060405180910390f35b610b7661350a565b6040518082815260200191505060405180910390f35b610b94613510565b6040518082815260200191505060405180910390f35b610ca3600480360360a0811015610bc057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080351515906020019092919080359060200190640100000000811115610c1d57600080fd5b820183602082011115610c2f57600080fd5b80359060200191846001830284011164010000000083111715610c5157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050613516565b005b610cd160048036036020811015610cbb57600080fd5b8101908080359060200190929190505050613619565b604051808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018315151515815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610d59578082015181840152602081019050610d3e565b50505050905090810190601f168015610d865780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b610da0613713565b604051808215151515815260200191505060405180910390f35b610dc2613726565b6040518082815260200191505060405180910390f35b610e0460048036036020811015610dee57600080fd5b810190808035906020019092919050505061372c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610e4e61376c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610f4960048036036020811015610ea657600080fd5b8101908080359060200190640100000000811115610ec357600080fd5b820183602082011115610ed557600080fd5b80359060200191846001830284011164010000000083111715610ef757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050613792565b6040518082815260200191505060405180910390f35b610f8b60048036036020811015610f7557600080fd5b8101908080359060200190929190505050613bff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61101960048036036040811015610fe357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613cd2565b005b61109d6004803603606081101561103157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613cea565b005b61116c600480360360608110156110b557600080fd5b810190808035906020019092919080359060200190929190803590602001906401000000008111156110e657600080fd5b8201836020820111156110f857600080fd5b8035906020019184600183028401116401000000008311171561111a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050613e5a565b005b6111c46004803603606081101561118457600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614204565b604051808215151515815260200191505060405180910390f35b6111e66144a0565b6040518082815260200191505060405180910390f35b6112046144a6565b005b61120e61457a565b6040518082815260200191505060405180910390f35b61122c614580565b6040518082815260200191505060405180910390f35b6112846004803603602081101561125857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614586565b6040518082815260200191505060405180910390f35b6112a261459e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6112ec6145c4565b6040518082815260200191505060405180910390f35b61130a6145ca565b6040518082815260200191505060405180910390f35b6113286145d7565b6040518082815260200191505060405180910390f35b611461600480360361010081101561135557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506145dd565b005b61146b6148ed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6114b5614917565b604051808215151515815260200191505060405180910390f35b6114d761496f565b6040518082815260200191505060405180910390f35b6115196004803603602081101561150357600080fd5b8101908080359060200190929190505050614979565b005b6115476004803603602081101561153157600080fd5b8101908080359060200190929190505050614a30565b005b611551614b8b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6115c9600480360360408110156115a957600080fd5b810190808035906020019092919080359060200190929190505050614bb1565b005b6115d36153f3565b6040518082815260200191505060405180910390f35b611615600480360360208110156115ff57600080fd5b81019080803590602001909291905050506153f9565b005b61164d6004803603604081101561162d57600080fd5b8101908080359060200190929190803590602001909291905050506155d7565b005b61167b6004803603602081101561166557600080fd5b81019080803590602001909291905050506156c0565b005b6116856157ea565b6040518082815260200191505060405180910390f35b611732600480360360808110156116b157600080fd5b810190808035906020019092919080359060200190929190803515159060200190929190803590602001906401000000008111156116ee57600080fd5b82018360208201111561170057600080fd5b8035906020019184600183028401116401000000008311171561172257600080fd5b90919293919293905050506157f7565b005b61173c61623f565b005b6117466162f1565b6040518082815260200191505060405180910390f35b6117926004803603604081101561177257600080fd5b8101908080359060200190929190803590602001909291905050506162fb565b005b6117ea600480360360608110156117aa57600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506163b5565b604051808215151515815260200191505060405180910390f35b61180c61668d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61187a6004803603602081101561186457600080fd5b81019080803590602001909291905050506166b3565b005b611884616827565b6040518082815260200191505060405180910390f35b6118a261682d565b604051808215151515815260200191505060405180910390f35b6118ea600480360360208110156118d257600080fd5b8101908080351515906020019092919050505061683f565b005b6119186004803603602081101561190257600080fd5b8101908080359060200190929190505050616a70565b6040518082815260200191505060405180910390f35b61195a6004803603602081101561194457600080fd5b8101908080359060200190929190505050616a88565b005b611964616f41565b604051808381526020018281526020019250505060405180910390f35b6119ad6004803603602081101561199757600080fd5b8101908080359060200190929190505050616f53565b005b6119f1600480360360208110156119c557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050617105565b005b611a1f60048036036020811015611a0957600080fd5b8101908080359060200190929190505050617214565b6040518082815260200191505060405180910390f35b611a3d617234565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b611aad60048036036020811015611a9557600080fd5b8101908080351515906020019092919050505061725a565b005b611af160048036036020811015611ac557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061731f565b005b611bb660048036036040811015611b0957600080fd5b810190808035906020019092919080359060200190640100000000811115611b3057600080fd5b820183602082011115611b4257600080fd5b80359060200191846001830284011164010000000083111715611b6457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061733e565b005b611c0460048036036040811015611bce57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506177c1565b005b611c3260048036036020811015611c1c57600080fd5b81019080803590602001909291905050506179e4565b005b611c3c617aaa565b005b611c46617b5c565b6040518082815260200191505060405180910390f35b611c64617b62565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b611cf73386868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050613516565b5050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d5c57600080fd5b6000611d87600e54611d79600b548a617b8890919063ffffffff16565b617bc690919063ffffffff16565b9050611d95600b5482617bf0565b90506000611dc16064611db360165485617b8890919063ffffffff16565b617bc690919063ffffffff16565b90506000601a6000601b60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611f2f578060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630d3319088383600001546040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611f1257600080fd5b505af1158015611f26573d6000803e3d6000fd5b50505050611f4f565b611f46828260010154617c0990919063ffffffff16565b81600101819055505b611f628284617c2a90919063ffffffff16565b92506000611f6e6157ea565b905087601781905550611f7f617c4c565b611f8b81858b89617ced565b94505050505095945050505050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612042576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061a0466026913960400191505060405180910390fd5b80600f8190555050565b60155481565b60135481565b60085481565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612106576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061a0466026913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561214257600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561222e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061a0466026913960400191505060405180910390fd5b60008111151561223d57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1980a50826010546040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156122d857600080fd5b505af11580156122ec573d6000803e3d6000fd5b505050508060108190555050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f745c598360006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b1580156123c057600080fd5b505afa1580156123d4573d6000803e3d6000fd5b505050506040513d60208110156123ea57600080fd5b81019080805190602001909291905050509050919050565b8061240c816181c2565b6002600381111561241957fe5b601a600084815260200190815260200160002060060160149054906101000a900460ff16600381111561244857fe5b1415156124bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f56616c696461746f72206973206e6f74206a61696c656400000000000000000081525060200191505060405180910390fd5b6000601a60008481526020019081526020016000206003015414151561254b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f56616c696461746f7220616c726561647920756e7374616b696e67000000000081525060200191505060405180910390fd5b6000600954905080601a600085815260200190815260200160002060040154111515156125e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f496e636f6d706c657465206a61696c20706572696f640000000000000000000081525060200191505060405180910390fd5b6000601a6000858152602001908152602001600020600001549050600c54811015151561260c57600080fd5b6000809050600073ffffffffffffffffffffffffffffffffffffffff16601a600087815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561275557601a600086815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166322f0f2f96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561271757600080fd5b505af115801561272b573d6000803e3d6000fd5b505050506040513d602081101561274157600080fd5b810190808051906020019092919050505090505b61277461276b8284617c0990919063ffffffff16565b600160006182c8565b6001601a600087815260200190815260200160002060060160146101000a81548160ff021916908360038111156127a757fe5b0217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f92ec5af86601a600089815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156128a757600080fd5b505af11580156128bb573d6000803e3d6000fd5b505050505050505050565b60175481565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612974576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061a0466026913960400191505060405180910390fd5b8060098190555050565b600e5481565b601e6020528060005260406000206000915090508060000154908060010154905082565b600080601a60008481526020019081526020016000206002015490506000601a60008581526020019081526020016000206003015490506000601a60008681526020019081526020016000206000015490506000601a600087815260200190815260200160002060060160149054906101000a900460ff16905060006009549050600083118015612a46575060008514158015612a455750808511155b5b8015612a5c57506000841480612a5b57508084115b5b8015612a7e575060016003811115612a7057fe5b826003811115612a7c57fe5b145b95505050505050919050565b612a9261841e565b82612a9c816181c2565b6000601a600086815260200190815260200160002060030154141515612b2a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4e6f20757365206f662072657374616b696e670000000000000000000000000081525060200191505060405180910390fd5b6000831115612cdc57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015612c2c57600080fd5b505af1158015612c40573d6000803e3d6000fd5b505050506040513d6020811015612c5657600080fd5b81019080805190602001909291905050501515612cdb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f5472616e73666572207374616b65206661696c6564000000000000000000000081525060200191505060405180910390fd5b5b8115612e5057612d0b601a60008681526020019081526020016000206001015484617c0990919063ffffffff16565b92506000601a600086815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515612e3257612e2f8173ffffffffffffffffffffffffffffffffffffffff166332ba2e536040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612de557600080fd5b505af1158015612df9573d6000803e3d6000fd5b505050506040513d6020811015612e0f57600080fd5b810190808051906020019092919050505085617c0990919063ffffffff16565b93505b6000601a600087815260200190815260200160002060010181905550505b6000612e6784601154617c0990919063ffffffff16565b905080601181905550612e9984601a600088815260200190815260200160002060000154617c0990919063ffffffff16565b601a600087815260200190815260200160002060000181905550612ebf846000806182c8565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663532e19a9866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015612f5057600080fd5b505af1158015612f64573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635616a7cc86601a600089815260200190815260200160002060000154846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050600060405180830381600087803b15801561301f57600080fd5b505af1158015613033573d6000803e3d6000fd5b505050505050505050565b80613048816181c2565b600060206000848152602001908152602001600020600001541415156130d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5761697420666f722061756374696f6e20636f6d706c6574696f6e000000000081525060200191505060405180910390fd5b6000601a60008481526020019081526020016000206002015411801561311257506000601a600084815260200190815260200160002060030154145b801561319b57506001600381111561312657fe5b601a600084815260200190815260200160002060060160149054906101000a900460ff16600381111561315557fe5b148061319a57506002600381111561316957fe5b601a600084815260200190815260200160002060060160149054906101000a900460ff16600381111561319857fe5b145b5b15156131a657600080fd5b60006131be6001600954617c0990919063ffffffff16565b90506131ca83826184a4565b505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60165481565b601a6020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060160149054906101000a900460ff16905088565b601b6020528060005260406000206000915090505481565b600c5481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806133df57506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156133a257600080fd5b505afa1580156133b6573d6000803e3d6000fd5b505050506040513d60208110156133cc57600080fd5b8101908080519060200190929190505050145b156133ed5760009050613505565b601a6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f745c598560006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b1580156134b557600080fd5b505afa1580156134c9573d6000803e3d6000fd5b505050506040513d60208110156134df57600080fd5b810190808051906020019092919050505081526020019081526020016000206000015490505b919050565b600f5481565b60105481565b61351e61841e565b6010546135296145ca565b101515613581576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061a0016021913960400191505060405180910390fd5b600c54841115156135fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f6d696e206465706f736974206c696d6974206661696c6564210000000000000081525060200191505060405180910390fd5b613605858486618804565b61361185858484618b35565b505050505050565b602080528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff1690806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156137095780601f106136de57610100808354040283529160200191613709565b820191906000526020600020905b8154815290600101906020018083116136ec57829003601f168201915b5050505050905085565b601960009054906101000a900460ff1681565b60125481565b6000601a600083815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d580b4186040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561382f57600080fd5b505afa158015613843573d6000803e3d6000fd5b505050506040513d602081101561385957600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161415156138f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f53656e646572206d75737420626520736c617368696e67206d616e616765722181525060200191505060405180910390fd5b60606139086139038461922a565b619258565b905060008090506000809050600080600090505b8451811015613bce576060613947868381518110151561393857fe5b90602001906020020151619258565b9050600061396c82600081518110151561395d57fe5b9060200190602002015161933b565b9050600061399183600181518110151561398257fe5b9060200190602002015161933b565b90506139a68186617c0990919063ffffffff16565b9450600073ffffffffffffffffffffffffffffffffffffffff16601a600084815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515613b2d576000601a600084815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a22a6428601a600086815260200190815260200160002060000154846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050602060405180830381600087803b158015613ad957600080fd5b505af1158015613aed573d6000803e3d6000fd5b505050506040513d6020811015613b0357600080fd5b81019080805190602001909291905050509050613b298183617c2a90919063ffffffff16565b9150505b613b5681601a600085815260200190815260200160002060000154617c2a90919063ffffffff16565b601a600084815260200190815260200160002060000181905550613b91836002815181101515613b8257fe5b906020019060200201516193ae565b15613bbe57613bb3613ba48360016193ef565b87617c0990919063ffffffff16565b955086806001019750505b505050808060010191505061391c565b50613bf3613be58383617c0990919063ffffffff16565b6000038460000360006182c8565b80945050505050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015613c9057600080fd5b505afa158015613ca4573d6000803e3d6000fd5b505050506040513d6020811015613cba57600080fd5b81019080805190602001909291905050509050919050565b613cda61841e565b613ce682826000618804565b5050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613d92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061a0466026913960400191505060405180910390fd5b82600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b3383604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040528051906020012073aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa636c8f455c909184601754856040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613f53578082015181840152602081019050613f38565b50505050905090810190601f168015613f805780820380516001836020036101000a031916815260200191505b509550505050505060206040518083038186803b158015613fa057600080fd5b505af4158015613fb4573d6000803e3d6000fd5b505050506040513d6020811015613fca57600080fd5b8101908080519060200190929190505050151561404f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f57726f6e67206163632070726f6f66000000000000000000000000000000000081525060200191505060405180910390fd5b60006140a3601f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485617c2a90919063ffffffff16565b90506140af33826196f4565b83601f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156141b857600080fd5b505af11580156141cc573d6000803e3d6000fd5b505050506040513d60208110156141e257600080fd5b810190808051906020019092919050505015156141fe57600080fd5b50505050565b6000601960009054906101000a900460ff16151561428a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f44656c65676174696f6e2069732064697361626c65640000000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16601a600086815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515614363576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f496e76616c696420636f6e74726163742061646472657373000000000000000081525060200191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8330866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561445c57600080fd5b505af1158015614470573d6000803e3d6000fd5b505050506040513d602081101561448657600080fd5b810190808051906020019092919050505090509392505050565b600a5481565b6144ae614917565b15156144b957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60095481565b60185481565b601f6020528060005260406000206000915090505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b6000601c60010154905090565b60115481565b602360009054906101000a900460ff16151515614662576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f616c726561647920696e6974656400000000000000000000000000000000000081525060200191505060405180910390fd5b6001602360006101000a81548160ff02191690831515021790555081600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061484d816197f0565b6120006008819055506001600981905550610376600a8190555069044664c7bf6451f00000600b81905550670de0b6b3a7640000600c81905550670de0b6b3a7640000600d81905550610400600e819055506064600f8190555060076010819055506001601281905550610800601581905550600a6016819055506001601960006101000a81548160ff0219169083151502179055505050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600954905090565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515614a21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061a0466026913960400191505060405180910390fd5b614a2d816009546184a4565b50565b80614a3a816181c2565b6000601a60008481526020019081526020016000206001015490506000601a600085815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515614b7a57614b778173ffffffffffffffffffffffffffffffffffffffff166332ba2e536040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015614b2d57600080fd5b505af1158015614b41573d6000803e3d6000fd5b505050506040513d6020811015614b5757600080fd5b810190808051906020019092919050505083617c0990919063ffffffff16565b91505b614b858433846198ec565b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b614bb961841e565b600060206000848152602001908152602001600020905060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480614c3a575083614c38336122fa565b145b1515614c91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602481526020018061a0226024913960400191505060405180910390fd5b60006009549050601554614cb2600a54601554617c0990919063ffffffff16565b614cc9856001015484617c2a90919063ffffffff16565b811515614cd257fe5b0610151515614d49576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4e6f7420616c6c6f776564206265666f72652061756374696f6e506572696f6481525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515614e12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496e76616c69642061756374696f6e000000000000000000000000000000000081525060200191505060405180910390fd5b6000601a600087815260200190815260200160002060000154905060008190506000856000015490506000601a60008a815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515614f5e57614f5b8173ffffffffffffffffffffffffffffffffffffffff1663a446c2db6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015614f1157600080fd5b505afa158015614f25573d6000803e3d6000fd5b505050506040513d6020811015614f3b57600080fd5b810190808051906020019092919050505084617c0990919063ffffffff16565b92505b818310158015614f8457506000601a60008b815260200190815260200160002060030154145b156151c457600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561504e57600080fd5b505af1158015615062573d6000803e3d6000fd5b505050506040513d602081101561507857600080fd5b810190808051906020019092919050505015156150fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4269642072657475726e206661696c656400000000000000000000000000000081525060200191505060405180910390fd5b848760010181905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e12ab1af8a8b876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050600060405180830381600087803b1580156151a757600080fd5b505af11580156151bb573d6000803e3d6000fd5b50505050615352565b6151d086896000618804565b6151da89866184a4565b600061529587848a60020160149054906101000a900460ff168b6003018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561528b5780601f106152605761010080835404028352916020019161528b565b820191906000526020600020905b81548152906001019060200180831161526e57829003601f168201915b5050505050618b35565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e12ab1af828c866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050600060405180830381600087803b15801561533857600080fd5b505af115801561534c573d6000803e3d6000fd5b50505050505b600087600101549050602060008b815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160146101000a81549060ff02191690556003820160006153ca9190619ec5565b505080602060008c81526020019081526020016000206001018190555050505050505050505050565b60225481565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156154a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061a0466026913960400191505060405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3b1d8cb826016546040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561553c57600080fd5b505af1158015615550573d6000803e3d6000fd5b50505050606481111515156155cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260078152602001807f746f6f206269670000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8060168190555050565b3373ffffffffffffffffffffffffffffffffffffffff16601a600084815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156156b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f496e76616c696420636f6e74726163742061646472657373000000000000000081525060200191505060405180910390fd5b6156bc816000806182c8565b5050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515615768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061a0466026913960400191505060405180910390fd5b6000811115156157e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f426c6f636b7320696e74657276616c206d757374206265206e6f6e2d7a65726f81525060200191505060405180910390fd5b80600e8190555050565b6000601c60000154905090565b6157ff61841e565b6000601a60008781526020019081526020016000206000015490506000601a600088815260200190815260200160002060030154148015615841575060008114155b15156158b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f496e76616c69642076616c696461746f7220666f7220616e2061756374696f6e81525060200191505060405180910390fd5b6000601b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156159b657600080fd5b505afa1580156159ca573d6000803e3d6000fd5b505050506040513d60208110156159e057600080fd5b8101908080519060200190929190505050148015615a1e57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b1515615a92576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f416c72656164792075736564206164647265737300000000000000000000000081525060200191505060405180910390fd5b60006009549050600060185490506000811480615aaf5750818111155b1515615b23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f436f6f6c646f776e20706572696f64000000000000000000000000000000000081525060200191505060405180910390fd5b601554615b3d601554600a54617c0990919063ffffffff16565b615b66601a60008d81526020019081526020016000206002015485617c2a90919063ffffffff16565b811515615b6f57fe5b06101515615be5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f496e76616c69642061756374696f6e20706572696f640000000000000000000081525060200191505060405180910390fd5b60008490506000601a60008c815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515615d0d57615d0a8173ffffffffffffffffffffffffffffffffffffffff1663a446c2db6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015615cc057600080fd5b505afa158015615cd4573d6000803e3d6000fd5b505050506040513d6020811015615cea57600080fd5b810190808051906020019092919050505083617c0990919063ffffffff16565b91505b6000602060008d81526020019081526020016000209050600081600001549050615d378482619b57565b93508b84101515615db0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4d7573742062696420686967686572000000000000000000000000000000000081525060200191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308f6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015615ea957600080fd5b505af1158015615ebd573d6000803e3d6000fd5b505050506040513d6020811015615ed357600080fd5b81019080805190602001909291905050501515615f58576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f5472616e7366657220616d6f756e74206661696c65640000000000000000000081525060200191505060405180910390fd5b6000811415156160fb57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561604b57600080fd5b505af115801561605f573d6000803e3d6000fd5b505050506040513d602081101561607557600080fd5b810190808051906020019092919050505015156160fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4269642072657475726e206661696c656400000000000000000000000000000081525060200191505060405180910390fd5b5b8b8260000181905550338260020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a8260020160146101000a81548160ff0219169083151502179055508989836003019190616176929190619f0d565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630934a6df8e8a8f6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050600060405180830381600087803b15801561621857600080fd5b505af115801561622c573d6000803e3d6000fd5b5050505050505050505050505050505050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156162e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061a0466026913960400191505060405180910390fd5b6162ef619b71565b565b6000600854905090565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156163a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061a0466026913960400191505060405180910390fd5b81600c8190555080600d819055505050565b60003373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d580b4186040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561645257600080fd5b505afa158015616466573d6000803e3d6000fd5b505050506040513d602081101561647c57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16148061651057503373ffffffffffffffffffffffffffffffffffffffff16601a600086815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515616584576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f496e76616c696420636f6e74726163742061646472657373000000000000000081525060200191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561664957600080fd5b505af115801561665d573d6000803e3d6000fd5b505050506040513d602081101561667357600080fd5b810190808051906020019092919050505090509392505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561675b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061a0466026913960400191505060405180910390fd5b60008111151561676a57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6fa74c482600b546040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561680557600080fd5b505af1158015616819573d6000803e3d6000fd5b5050505080600b8190555050565b60145481565b6000809054906101000a900460ff1681565b6000601b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061688c816129a8565b1515616900576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6e6f7420612076616c696461746f72000000000000000000000000000000000081525060200191505060405180910390fd5b6000601a600083815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156169e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f64656c65676174696f6e206e6f7420656e61626c65640000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16637ba8c820846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082151515158152602001915050600060405180830381600087803b158015616a5357600080fd5b505af1158015616a67573d6000803e3d6000fd5b50505050505050565b60216020528060005260406000206000915090505481565b80616a92816181c2565b6000601a6000848152602001908152602001600020600301549050600081118015616ad35750600954616ad060085483617c0990919063ffffffff16565b11155b8015616b185750600380811115616ae657fe5b601a600085815260200190815260200160002060060160149054906101000a900460ff166003811115616b1557fe5b14155b1515616b2357600080fd5b6000601a60008581526020019081526020016000206000015490506000616b5582601154617c2a90919063ffffffff16565b905080601181905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015616bef57600080fd5b505af1158015616c03573d6000803e3d6000fd5b505050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff601b6000601a600089815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506003601a600087815260200190815260200160002060060160146101000a81548160ff02191690836003811115616cd457fe5b0217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015616d9e57600080fd5b505af1158015616db2573d6000803e3d6000fd5b505050506040513d6020811015616dc857600080fd5b81019080805190602001909291905050501515616e4d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f5472616e73666572207374616b65206661696c6564000000000000000000000081525060200191505060405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ae2e26b1338785856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152602001828152602001945050505050600060405180830381600087803b158015616f2257600080fd5b505af1158015616f36573d6000803e3d6000fd5b505050505050505050565b601c8060000154908060010154905082565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515616ffb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061a0466026913960400191505060405180910390fd5b60008111151561700a57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a0e300a682600a546040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156170a557600080fd5b505af11580156170b9573d6000803e3d6000fd5b5050505080600a81905550806008819055506170df600482617bc690919063ffffffff16565b6015819055506170fc601554600954617c0990919063ffffffff16565b60188190555050565b61710d614917565b151561711857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561715457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f211c9015fc81c0dbd45bd99f0f29fc1c143bfd53442d5ffd722bbbef7a887fe960405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000601a6000838152602001908152602001600020600001549050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515617302576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061a0466026913960400191505060405180910390fd5b80601960006101000a81548160ff02191690831515021790555050565b617327614917565b151561733257600080fd5b61733b816197f0565b50565b81617348816181c2565b600061735383619b8d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156173d157506000601b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515617445576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496e76616c6964207369676e657200000000000000000000000000000000000081525060200191505060405180910390fd5b60006009549050617474600f546021600088815260200190815260200160002054617c0990919063ffffffff16565b81101515156174eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f496e76616c696420636865636b706f696e74206e756d6265722100000000000081525060200191505060405180910390fd5b6000601a600087815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b80fbce5878386896040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561763d578082015181840152602081019050617622565b50505050905090810190601f16801561766a5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561768c57600080fd5b505af11580156176a0573d6000803e3d6000fd5b505050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff601b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555085601b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082601a600088815260200190815260200160002060050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816021600088815260200190815260200160002081905550505050505050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515617869576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061a0466026913960400191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156178e257600080fd5b505afa1580156178f6573d6000803e3d6000fd5b505050506040513d602081101561790c57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614151561798b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061a06c6026913960400191505060405180910390fd5b80601a600084815260200190815260200160002060060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515617a8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061a0466026913960400191505060405180910390fd5b617aa181600954617c0990919063ffffffff16565b60188190555050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515617b52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061a0466026913960400191505060405180910390fd5b617b5a619c1b565b565b600d5481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080831415617b9b5760009050617bc0565b60008284029050828482811515617bae57fe5b04141515617bbb57600080fd5b809150505b92915050565b60008082111515617bd657600080fd5b60008284811515617be357fe5b0490508091505092915050565b6000818310617bff5781617c01565b825b905092915050565b6000808284019050838110151515617c2057600080fd5b8091505092915050565b6000828211151515617c3b57600080fd5b600082840390508091505092915050565b600060095490506000617c69600183617c0990919063ffffffff16565b9050617c73619f8d565b601e6000838152602001908152602001600020604080519081016040529081600082015481526020016001820154815250509050617cbb8160000151826020015160006182c8565b601e60008481526020019081526020016000206000808201600090556001820160009055505081600981905550505050565b600080600080600090505b84518167ffffffffffffffff1610156180b15760008673aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa6377d32e949091617d40898667ffffffffffffffff166041619c37565b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015617db1578082015181840152602081019050617d96565b50505050905090810190601f168015617dde5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015617dfc57600080fd5b505af4158015617e10573d6000803e3d6000fd5b505050506040513d6020811015617e2657600080fd5b810190808051906020019092919050505090506000601b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415617eb85750506180b1565b617ec1816129a8565b8015617ef857508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16115b156180a4578193506000601a600083815260200190815260200160002090506000808260060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515618040578073ffffffffffffffffffffffffffffffffffffffff1663b37f25908d8f617f9e88617214565b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050602060405180830381600087803b158015617ffe57600080fd5b505af1158015618012573d6000803e3d6000fd5b505050506040513d602081101561802857600080fd5b8101908080519060200190929190505050915061808b565b8260000154915061808261806f8e6180618f86617b8890919063ffffffff16565b617bc690919063ffffffff16565b8460010154617c0990919063ffffffff16565b83600101819055505b61809e8289617c0990919063ffffffff16565b97505050505b5050604181019050617cf8565b506180e06180bd6157ea565b6180d284600b54617b8890919063ffffffff16565b617bc690919063ffffffff16565b95506180f786601354617c0990919063ffffffff16565b60138190555061813e6001618130600361812260026181146157ea565b617b8890919063ffffffff16565b617bc690919063ffffffff16565b617c0990919063ffffffff16565b82101515156181b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f322f332b31206e6f6e2d6d616a6f72697479210000000000000000000000000081525060200191505060405180910390fd5b8592505050949350505050565b3373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561826857600080fd5b505afa15801561827c573d6000803e3d6000fd5b505050506040513d602081101561829257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161415156182c557600080fd5b50565b60008114156183d0576000831315618300576182f283601c60000154617c0990919063ffffffff16565b601c6000018190555061834e565b600083121561834d576183437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8402601c60000154617c2a90919063ffffffff16565b601c600001819055505b5b600082131561837d5761836f82601c60010154617c0990919063ffffffff16565b601c600101819055506183cb565b60008212156183ca576183c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8302601c60010154617c2a90919063ffffffff16565b601c600101819055505b5b618419565b82601e60008381526020019081526020016000206000016000828254019250508190555081601e6000838152602001908152602001600020600101600082825401925050819055505b505050565b6000809054906101000a900460ff161515156184a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260068152602001807f6c6f636b6564000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b565b6000601a600084815260200190815260200160002060000154905060006184ca84613bff565b905082601a60008681526020019081526020016000206003018190555060008090506000601a60008781526020019081526020016000206001015490506000601a600088815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156186d357600081905061862e8173ffffffffffffffffffffffffffffffffffffffff166332ba2e536040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156185e457600080fd5b505af11580156185f8573d6000803e3d6000fd5b505050506040513d602081101561860e57600080fd5b810190808051906020019092919050505084617c0990919063ffffffff16565b92508073ffffffffffffffffffffffffffffffffffffffff1663753868e36040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561869457600080fd5b505af11580156186a8573d6000803e3d6000fd5b505050506040513d60208110156186be57600080fd5b81019080805190602001909291905050509350505b6186de8785846198ec565b61870e8386016000037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff886182c8565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e04d483858989896040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152602001828152602001945050505050600060405180830381600087803b1580156187e357600080fd5b505af11580156187f7573d6000803e3d6000fd5b5050505050505050505050565b600d54821015151561887e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4e6f7420656e6f756768206865696d64616c6c2066656500000000000000000081525060200191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306188d18587617c0990919063ffffffff16565b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561898957600080fd5b505af115801561899d573d6000803e3d6000fd5b505050506040513d60208110156189b357600080fd5b81019080805190602001909291905050501515618a38576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f466565207472616e73666572206661696c65640000000000000000000000000081525060200191505060405180910390fd5b618a4d82602254617c0990919063ffffffff16565b602281905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a449d79584846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015618b1857600080fd5b505af1158015618b2c573d6000803e3d6000fd5b50505050505050565b600080618b4183619b8d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015618bbf57506000601b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515618c33576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496e76616c6964207369676e657200000000000000000000000000000000000081525060200191505060405180910390fd5b60006009549050600060125490506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000618c7f89601154617c0990919063ffffffff16565b905080601181905550610100604051908101604052808a81526020016000815260200185815260200160008152602001600081526020018673ffffffffffffffffffffffffffffffffffffffff16815260200189618cde576000618e35565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4ad26738686600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b158015618df957600080fd5b505af1158015618e0d573d6000803e3d6000fd5b505050506040513d6020811015618e2357600080fd5b81019080805190602001909291905050505b73ffffffffffffffffffffffffffffffffffffffff16815260200160016003811115618e5d57fe5b815250601a6000858152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160060160146101000a81548160ff02191690836003811115618f5757fe5b0217905550905050836021600085815260200190815260200160002081905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f198b856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561903c57600080fd5b505af1158015619050573d6000803e3d6000fd5b5050505082601b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506190a589600160006182c8565b8360206000858152602001908152602001600020600101819055508173ffffffffffffffffffffffffffffffffffffffff166333a8383c868986888e876040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001868152602001858152602001848152602001838152602001828103825287818151815260200191508051906020019080838360005b8381101561919757808201518184015260208101905061917c565b50505050905090810190601f1680156191c45780820380516001836020036101000a031916815260200191505b50975050505050505050600060405180830381600087803b1580156191e857600080fd5b505af11580156191fc573d6000803e3d6000fd5b50505050619214600184617c0990919063ffffffff16565b6012819055508295505050505050949350505050565b619232619fa7565b600060208301905060408051908101604052808451815260200182815250915050919050565b606061926382619cc5565b151561926e57600080fd5b600061927983619d13565b90506060816040519080825280602002602001820160405280156192b757816020015b6192a4619fc1565b81526020019060019003908161929c5790505b50905060006192c98560200151619d84565b8560200151019050600080600090505b8481101561932e576192ea83619e0d565b9150604080519081016040528083815260200184815250848281518110151561930f57fe5b90602001906020020181905250818301925080806001019150506192d9565b5082945050505050919050565b600080826000015111801561935557506021826000015111155b151561936057600080fd5b600061936f8360200151619d84565b905060008184600001510390506000808386602001510190508051915060208310156193a257826020036101000a820491505b81945050505050919050565b6000600182600001511415156193c357600080fd5b60008083602001519050805160001a9150600082146193e35760016193e6565b60005b92505050919050565b60008060009050600073ffffffffffffffffffffffffffffffffffffffff16601a600086815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561953a57601a600085815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663753868e36040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156194fc57600080fd5b505af1158015619510573d6000803e3d6000fd5b505050506040513d602081101561952657600080fd5b810190808051906020019092919050505090505b600060095490506195548482617c0990919063ffffffff16565b601a6000878152602001908152602001600020600401819055506002601a600087815260200190815260200160002060060160146101000a81548160ff021916908360038111156195a157fe5b0217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166381dc101b8683601a60008a815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b1580156196a957600080fd5b505af11580156196bd573d6000803e3d6000fd5b505050506196ea82601a600088815260200190815260200160002060000154617c0990919063ffffffff16565b9250505092915050565b61970981602254617c2a90919063ffffffff16565b602281905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663122b648183836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156197d457600080fd5b505af11580156197e8573d6000803e3d6000fd5b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561982c57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61990181601454617c0990919063ffffffff16565b6014819055506000601a600085815260200190815260200160002060010181905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156199e857600080fd5b505af11580156199fc573d6000803e3d6000fd5b505050506040513d6020811015619a1257600080fd5b81019080805190602001909291905050501515619a97576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f496e737566666963656e7420726577617264730000000000000000000000000081525060200191505060405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b685b26a84836014546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050600060405180830381600087803b158015619b3a57600080fd5b505af1158015619b4e573d6000803e3d6000fd5b50505050505050565b600081831015619b675781619b69565b825b905092915050565b60008060006101000a81548160ff021916908315150217905550565b600060408251141515619c08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496e76616c6964207075626b657900000000000000000000000000000000000081525060200191505060405180910390fd5b8180519060200120600190049050919050565b60016000806101000a81548160ff021916908315150217905550565b6060818301845110151515619c4b57600080fd5b6060821560008114619c6857604051915060208201604052619cb9565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015619ca65780518352602083019250602081019050619c89565b50868552601f19601f8301166040525050505b50809150509392505050565b60008082600001511415619cdc5760009050619d0e565b60008083602001519050805160001a915060c060ff168260ff161015619d0757600092505050619d0e565b6001925050505b919050565b60008082600001511415619d2a5760009050619d7f565b60008090506000619d3e8460200151619d84565b84602001510190506000846000015185602001510190505b80821015619d7857619d6782619e0d565b820191508280600101935050619d56565b8293505050505b919050565b600080825160001a9050608060ff16811015619da4576000915050619e08565b60b860ff16811080619dc9575060c060ff168110158015619dc8575060f860ff1681105b5b15619dd8576001915050619e08565b60c060ff16811015619df85760018060b80360ff16820301915050619e08565b60018060f80360ff168203019150505b919050565b6000806000835160001a9050608060ff16811015619e2e5760019150619ebb565b60b860ff16811015619e4b576001608060ff168203019150619eba565b60c060ff16811015619e7b5760b78103600185019450806020036101000a85510460018201810193505050619eb9565b60f860ff16811015619e9857600160c060ff168203019150619eb8565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b50805460018160011615610100020316600290046000825580601f10619eeb5750619f0a565b601f016020900490600052602060002090810190619f099190619fdb565b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10619f4e57803560ff1916838001178555619f7c565b82800160010185558215619f7c579182015b82811115619f7b578235825591602001919060010190619f60565b5b509050619f899190619fdb565b5090565b604080519081016040528060008152602001600081525090565b604080519081016040528060008152602001600081525090565b604080519081016040528060008152602001600081525090565b619ffd91905b80821115619ff9576000816000905550600101619fe1565b5090565b9056fe56616c696461746f7220736574205468726573686f6c64206578636565646564214f6e6c7920626964646572206f722076616c696461746f722063616e20636f6e6669726d4f6e6c7920676f7665726e616e636520636f6e747261637420697320617574686f72697a65644f776e6572206f6620636f6e7472616374206d757374206265207374616b654d616e61676572a165627a7a72305820ac99ab484a15739da70e04e65471ea1e1884b8c6b9e1ed69be5c572bca0c44770029
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: StakeManager
Function name: updateValidatorThreshold(uint256)
PC address: 8923
Estimated Gas Usage: 9496 - 64722
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3560

logger.logThresholdChange(newThreshold, validatorThreshold)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de0002800200000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000008000001001, value: 0x0
Caller: [ATTACKER], function: updateValidatorThreshold(uint256), txdata: 0x16827b1b0000000000000000100080000000000000000000000000000000000000000000, decoded_data: (392366748947319606766560537295077598168385300876570394624,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: updateValidatorThreshold(uint256)
PC address: 8950
Estimated Gas Usage: 9496 - 64722
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3561

validatorThreshold = newThreshold

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de0002000100010100000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000008000010820000801, value: 0x0
Caller: [SOMEGUY], function: updateValidatorThreshold(uint256), txdata: 0x16827b1b0000000000100800000080001010004004011008000040800401020140080100, decoded_data: (6594873733686786668176957493543664395783564894589507328862060800,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 11311
Estimated Gas Usage: 29790 - 196369
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3508

token.transferFrom(msg.sender, address(this), amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000010000100000000000000000000000000000100000001080801200001010001020204408000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001010201010000204080100102080204108040100000000000000000000000000101010101020104080040000800088004010104000000000000000000000000010240808000200200080002010120000408011000000000000000000000000020020280402010800420200420080820200404080000000000000000000000004000040401020202101080800120048001100110, decoded_data: ('0x0000000000000000000000000000001000010000', '0x0100000001080801200001010001020204408000', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0101020101000020408010010208020410804010', '0x0101010101020104080040000800088004010104', '0x0102408080002002000800020101200004080110', '0x2002028040201080042020042008082020040408', '0x4000040401020202101080800120048001100110'), value: 0x0
Caller: [SOMEGUY], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000010008000010800aa0010200040000040048080ef0000000000000000000000000000000000000000000000000000000000000000000000000101011001010101010101018080040140018001200180010140010110400801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 11516
Estimated Gas Usage: 29790 - 196369
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3512

validators[validatorId].reward

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000000010100000000000000000000000000008000000000200001000000080108000880000004000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001040201040104000004002000100040010820800000000000000000000000000101011080400100200180800204014001080108000000000000000000000000000040011002020008008080400404000810804000000000000000000000000002014008040101020420100008081001022040020000000000000000000000002004010404010201010201020804014010800040, decoded_data: ('0x0000000000000000000000000000000001010000', '0x8000000000200001000000080108000880000004', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0104020104010400000400200010004001082080', '0x0101011080400100200180800204014001080108', '0x0000400110020200080080804004040008108040', '0x0201400804010102042010000808100102204002', '0x2004010404010201010201020804014010800040'), value: 0x0
Caller: [SOMEGUY], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000010101010101010801010101000102010000000000000000000000000000000000000000000000000000000000000000000000000101012001201001028001202001080180040108100101100110014001018040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 11561
Estimated Gas Usage: 29790 - 196369
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3513

validators[validatorId].contractAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000000010100000000000000000000000000008000000000200001000000080108000880000004000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001040201040104000004002000100040010820800000000000000000000000000101011080400100200180800204014001080108000000000000000000000000000040011002020008008080400404000810804000000000000000000000000002014008040101020420100008081001022040020000000000000000000000002004010404010201010201020804014010800040, decoded_data: ('0x0000000000000000000000000000000001010000', '0x8000000000200001000000080108000880000004', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0104020104010400000400200010004001082080', '0x0101011080400100200180800204014001080108', '0x0000400110020200080080804004040008108040', '0x0201400804010102042010000808100102204002', '0x2004010404010201010201020804014010800040'), value: 0x0
Caller: [SOMEGUY], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000010101010101010801010101000102010000000000000000000000000000000000000000000000000000000000000000000000000101012001201001028001202001080180040108100101100110014001018040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 11853
Estimated Gas Usage: 29790 - 196369
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3517

validators[validatorId].reward = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000000010100000000000000000000000000008000000000200001000000080108000880000004000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001040201040104000004002000100040010820800000000000000000000000000101011080400100200180800204014001080108000000000000000000000000000040011002020008008080400404000810804000000000000000000000000002014008040101020420100008081001022040020000000000000000000000002004010404010201010201020804014010800040, decoded_data: ('0x0000000000000000000000000000000001010000', '0x8000000000200001000000080108000880000004', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0104020104010400000400200010004001082080', '0x0101011080400100200180800204014001080108', '0x0000400110020200080080804004040008108040', '0x0201400804010102042010000808100102204002', '0x2004010404010201010201020804014010800040'), value: 0x0
Caller: [SOMEGUY], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000010101010101010801010101000102010000000000000000000000000000000000000000000000000000000000000000000000000101012001201001028001202001080180040108100101100110014001018040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 11865
Estimated Gas Usage: 29790 - 196369
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3520

totalStaked

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000000010100000000000000000000000000008000000000200001000000080108000880000004000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001040201040104000004002000100040010820800000000000000000000000000101011080400100200180800204014001080108000000000000000000000000000040011002020008008080400404000810804000000000000000000000000002014008040101020420100008081001022040020000000000000000000000002004010404010201010201020804014010800040, decoded_data: ('0x0000000000000000000000000000000001010000', '0x8000000000200001000000080108000880000004', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0104020104010400000400200010004001082080', '0x0101011080400100200180800204014001080108', '0x0000400110020200080080804004040008108040', '0x0201400804010102042010000808100102204002', '0x2004010404010201010201020804014010800040'), value: 0x0
Caller: [SOMEGUY], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000010101010101010801010101000102010000000000000000000000000000000000000000000000000000000000000000000000000101012001201001028001202001080180040108100101100110014001018040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 11887
Estimated Gas Usage: 29790 - 196369
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3521

totalStaked = newTotalStaked

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000000010100000000000000000000000000008000000000200001000000080108000880000004000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001040201040104000004002000100040010820800000000000000000000000000101011080400100200180800204014001080108000000000000000000000000000040011002020008008080400404000810804000000000000000000000000002014008040101020420100008081001022040020000000000000000000000002004010404010201010201020804014010800040, decoded_data: ('0x0000000000000000000000000000000001010000', '0x8000000000200001000000080108000880000004', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0104020104010400000400200010004001082080', '0x0101011080400100200180800204014001080108', '0x0000400110020200080080804004040008108040', '0x0201400804010102042010000808100102204002', '0x2004010404010201010201020804014010800040'), value: 0x0
Caller: [SOMEGUY], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000010101010101010801010101000102010000000000000000000000000000000000000000000000000000000000000000000000000101012001201001028001202001080180040108100101100110014001018040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 11915
Estimated Gas Usage: 29790 - 196369
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3522

validators[validatorId].amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000000010100000000000000000000000000008000000000200001000000080108000880000004000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001040201040104000004002000100040010820800000000000000000000000000101011080400100200180800204014001080108000000000000000000000000000040011002020008008080400404000810804000000000000000000000000002014008040101020420100008081001022040020000000000000000000000002004010404010201010201020804014010800040, decoded_data: ('0x0000000000000000000000000000000001010000', '0x8000000000200001000000080108000880000004', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0104020104010400000400200010004001082080', '0x0101011080400100200180800204014001080108', '0x0000400110020200080080804004040008108040', '0x0201400804010102042010000808100102204002', '0x2004010404010201010201020804014010800040'), value: 0x0
Caller: [SOMEGUY], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000010101010101010801010101000102010000000000000000000000000000000000000000000000000000000000000000000000000101012001201001028001202001080180040108100101100110014001018040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 11954
Estimated Gas Usage: 29790 - 196369
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3522

validators[validatorId].amount = validators[validatorId].amount.add(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000000010100000000000000000000000000008000000000200001000000080108000880000004000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001040201040104000004002000100040010820800000000000000000000000000101011080400100200180800204014001080108000000000000000000000000000040011002020008008080400404000810804000000000000000000000000002014008040101020420100008081001022040020000000000000000000000002004010404010201010201020804014010800040, decoded_data: ('0x0000000000000000000000000000000001010000', '0x8000000000200001000000080108000880000004', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0104020104010400000400200010004001082080', '0x0101011080400100200180800204014001080108', '0x0000400110020200080080804004040008108040', '0x0201400804010102042010000808100102204002', '0x2004010404010201010201020804014010800040'), value: 0x0
Caller: [SOMEGUY], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000010101010101010801010101000102010000000000000000000000000000000000000000000000000000000000000000000000000101012001201001028001202001080180040108100101100110014001018040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 11973
Estimated Gas Usage: 29790 - 196369
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3526

logger

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000000010100000000000000000000000000008000000000200001000000080108000880000004000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001040201040104000004002000100040010820800000000000000000000000000101011080400100200180800204014001080108000000000000000000000000000040011002020008008080400404000810804000000000000000000000000002014008040101020420100008081001022040020000000000000000000000002004010404010201010201020804014010800040, decoded_data: ('0x0000000000000000000000000000000001010000', '0x8000000000200001000000080108000880000004', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0104020104010400000400200010004001082080', '0x0101011080400100200180800204014001080108', '0x0000400110020200080080804004040008108040', '0x0201400804010102042010000808100102204002', '0x2004010404010201010201020804014010800040'), value: 0x0
Caller: [SOMEGUY], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000010101010101010801010101000102010000000000000000000000000000000000000000000000000000000000000000000000000101012001201001028001202001080180040108100101100110014001018040, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 12115
Estimated Gas Usage: 29790 - 196369
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3526

logger.logStakeUpdate(validatorId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000010000020000000000000000000100000000000000000000000000000101010101010101010101010101000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000010840000400004000020110800002040101020100000000000000000000000010000000008000000000000000000000000000000000000000000000000000001001010440080180800140200880100810048001, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000001010000000000', '0x0000000001000002000000000000000000010000', '0x0101010101010101010101010101000000000000', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0108400004000040000201108000020401010201', '0x1000000000800000000000000000000000000000', '0x1001010440080180800140200880100810048001'), value: 0x0
Caller: [ATTACKER], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000010101010101010101010101010102010000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 12115
Estimated Gas Usage: 22712 - 168391
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3526

logger.logStakeUpdate(validatorId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00f0d8dvalue: 0x0
Caller: [SOMEGUY], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41002000000000000000aa0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (56539106072908298562948308529499658920983613122449165196368816109485293568, 0, False), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 12115
Estimated Gas Usage: 29790 - 196369
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3526

logger.logStakeUpdate(validatorId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000000010100000000000000000000000000008000000000200001000000080108000880000004000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001040201040104000004002000100040010820800000000000000000000000000101011080400100200180800204014001080108000000000000000000000000000040011002020008008080400404000810804000000000000000000000000002014008040101020420100008081001022040020000000000000000000000002004010404010201010201020804014010800040, decoded_data: ('0x0000000000000000000000000000000001010000', '0x8000000000200001000000080108000880000004', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0104020104010400000400200010004001082080', '0x0101011080400100200180800204014001080108', '0x0000400110020200080080804004040008108040', '0x0201400804010102042010000808100102204002', '0x2004010404010201010201020804014010800040'), value: 0x0
Caller: [SOMEGUY], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000010101010101010801010101000102010000000000000000000000000000000000000000000000000000000000000000000000000101012001201001028001202001080180040108100101100110014001018040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 12142
Estimated Gas Usage: 29790 - 196369
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3527

logger

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de0080002000800004000000044040000101000010080840108001012080010000000000000000000000000000200204800204000004010004800001020801040100000000000000000000000001080440400880400840802008100480040180080000000000000000000000000101010101010101010101010101040140040104000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000020120028001028002020102400804080402800100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000840040408000102021001801001040102400208, value: 0x0
Caller: [CREATOR], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000010101010101010101010101010102010000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 12222
Estimated Gas Usage: 29790 - 196369
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3527

validators[validatorId].amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de0080002000800004000000044040000101000010080840108001012080010000000000000000000000000000200204800204000004010004800001020801040100000000000000000000000001080440400880400840802008100480040180080000000000000000000000000101010101010101010101010101040140040104000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000020120028001028002020102400804080402800100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000840040408000102021001801001040102400208, value: 0x0
Caller: [CREATOR], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000010101010101010101010101010102010000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 12322
Estimated Gas Usage: 29790 - 196369
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3527

logger.logRestaked(validatorId, validators[validatorId].amount, newTotalStaked)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000010000020000000000000000000100000000000000000000000000000101010101010101010101010101000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000010840000400004000020110800002040101020100000000000000000000000010000000008000000000000000000000000000000000000000000000000000001001010440080180800140200880100810048001, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000001010000000000', '0x0000000001000002000000000000000000010000', '0x0101010101010101010101010101000000000000', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0108400004000040000201108000020401010201', '0x1000000000800000000000000000000000000000', '0x1001010440080180800140200880100810048001'), value: 0x0
Caller: [ATTACKER], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000010101010101010101010101010102010000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 12322
Estimated Gas Usage: 29790 - 196369
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3527

logger.logRestaked(validatorId, validators[validatorId].amount, newTotalStaked)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2dedecoded_data: ('0x0000000000000000000000000000000000000001', '0x0000000000000000400000000000000080100401', '0x0000000000000000000000000000000000004040', '0x0101010101010101010101010101000000000004', '0x0140200202020120041002100180040180080180', '0x0000008008408080011000080804020440802020', '0x1001801040800401080101010140010001808002', '0x0880204002028000200108040104022020020804'), value: 0x0
Caller: [SOMEGUY], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000000000000001010000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 12322
Estimated Gas Usage: 29790 - 196369
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3527

logger.logRestaked(validatorId, validators[validatorId].amount, newTotalStaked)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de0080002000800004000000044040000101000010080840108001012080010000000000000000000000000000200204800204000004010004800001020801040100000000000000000000000001080440400880400840802008100480040180080000000000000000000000000101010101010101010101010101040140040104000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000020120028001028002020102400804080402800100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000840040408000102021001801001040102400208, value: 0x0
Caller: [CREATOR], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000010101010101010101010101010102010000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StakeManager
Function name: totalStakedFor(address)
PC address: 13496
Estimated Gas Usage: 6347 - 76792
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3301

NFTContract.tokenOfOwnerByIndex(user, 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2devalue: 0x0
Caller: [SOMEGUY], function: totalStakedFor(address), txdata: 0x4b341aed0000000000000000000000000101010008000008022020088020080040004000, decoded_data: ('0x0101010008000008022020088020080040004000',), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: StakeManager
Function name: updateProposerBonus(uint256)
PC address: 21823
Estimated Gas Usage: 9520 - 64746
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3604

logger.logProposerBonusChange(newProposerBonus, proposerBonus)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de0400010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000000001001002040120, value: 0x0
Caller: [SOMEGUY], function: updateProposerBonus(uint256), txdata: 0x9b33f4340000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: updateProposerBonus(uint256)
PC address: 21971
Estimated Gas Usage: 9520 - 64746
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3606

proposerBonus = newProposerBonus

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de010101088010011000408001aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000080020000000401040200040, value: 0x0
Caller: [SOMEGUY], function: updateProposerBonus(uint256), txdata: 0x9b33f4340000000000000000000000000000000000000000000000000000000000000040, decoded_data: (64,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: StakeManager
Function name: transferFunds(uint256,uint256,address)
PC address: 26188
Estimated Gas Usage: 5463 - 75623
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3452

token.transfer(delegator, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000001012001020001084000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010201010102010101010101010401010101, value: 0x0
Caller: [ATTACKER], function: transferFunds(uint256,uint256,address), txdata: 0xbc8756a9000000001000022010100808010101010101010101018010010401010402080402020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StakeManager
Function name: transferFunds(uint256,uint256,address)
PC address: 26188
Estimated Gas Usage: 5463 - 75623
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3452

token.transfer(delegator, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2devalue: 0x0
Caller: [SOMEGUY], function: transferFunds(uint256,uint256,address), txdata: 0xbc8756a9000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (4294967296, 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: StakeManager
Function name: updateCheckpointReward(uint256)
PC address: 26632
Estimated Gas Usage: 9495 - 64721
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3572

logger.logRewardUpdate(newReward, CHECKPOINT_REWARD)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de0001000000000000000101000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000001080004001, value: 0x0
Caller: [CREATOR], function: updateCheckpointReward(uint256), txdata: 0xcbf383d50000000000000100000001100008020001010004400000008020402001000080, decoded_data: (1606938044656518899476155180621699865741421343543235339878528,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: updateCheckpointReward(uint256)
PC address: 26659
Estimated Gas Usage: 9495 - 64721
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3573

CHECKPOINT_REWARD = newReward

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de0000000000004001010101010000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000000100800101, value: 0x0
Caller: [CREATOR], function: updateCheckpointReward(uint256), txdata: 0xcbf383d50100008001000410404020084010020810040080400010020000001040040000, decoded_data: (452316299561758605084997267103322953489564131262949986555807657565721198592,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: StakeManager
Function name: updateDynastyValue(uint256)
PC address: 28840
Estimated Gas Usage: 26430 - 141656
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3590

logger.logDynastyValueChange(newDynasty, dynasty)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de4040000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000000000010100400001, value: 0x0
Caller: [SOMEGUY], function: updateDynastyValue(uint256), txdata: 0xe6692f490000000000000000000000010000000000000000000000000000000000000000, decoded_data: (1461501637330902918203684832716283019655932542976,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: updateDynastyValue(uint256)
PC address: 28867
Estimated Gas Usage: 26430 - 141656
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3591

dynasty = newDynasty

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de0000000001000008000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000080020008000010002000000100020201, value: 0x0
Caller: [SOMEGUY], function: updateDynastyValue(uint256), txdata: 0xe6692f490000000004000000000000000002400002000000010402080080040008000840, decoded_data: (421249166674228746791722287414036879169532999019560273060783196224,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: updateDynastyValue(uint256)
PC address: 28874
Estimated Gas Usage: 26430 - 141656
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3592

WITHDRAWAL_DELAY = newDynasty

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de0000000001000008000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000080020008000010002000000100020201, value: 0x0
Caller: [SOMEGUY], function: updateDynastyValue(uint256), txdata: 0xe6692f490000000004000000000000000002400002000000010402080080040008000840, decoded_data: (421249166674228746791722287414036879169532999019560273060783196224,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: updateDynastyValue(uint256)
PC address: 28900
Estimated Gas Usage: 26430 - 141656
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3593

auctionPeriod = newDynasty.div(4)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de0000000001000008000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000080020008000010002000000100020201, value: 0x0
Caller: [SOMEGUY], function: updateDynastyValue(uint256), txdata: 0xe6692f490000000004000000000000000002400002000000010402080080040008000840, decoded_data: (421249166674228746791722287414036879169532999019560273060783196224,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: updateDynastyValue(uint256)
PC address: 28907
Estimated Gas Usage: 26430 - 141656
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3595

auctionPeriod

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de0000000001000008000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000080020008000010002000000100020201, value: 0x0
Caller: [SOMEGUY], function: updateDynastyValue(uint256), txdata: 0xe6692f490000000004000000000000000002400002000000010402080080040008000840, decoded_data: (421249166674228746791722287414036879169532999019560273060783196224,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: updateDynastyValue(uint256)
PC address: 28910
Estimated Gas Usage: 26430 - 141656
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3595

currentEpoch

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de0000000001000008000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000080020008000010002000000100020201, value: 0x0
Caller: [SOMEGUY], function: updateDynastyValue(uint256), txdata: 0xe6692f490000000004000000000000000002400002000000010402080080040008000840, decoded_data: (421249166674228746791722287414036879169532999019560273060783196224,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: updateDynastyValue(uint256)
PC address: 28929
Estimated Gas Usage: 26430 - 141656
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3595

replacementCoolDown = currentEpoch.add(auctionPeriod)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de0000000001000008000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000080020008000010002000000100020201, value: 0x0
Caller: [SOMEGUY], function: updateDynastyValue(uint256), txdata: 0xe6692f490000000004000000000000000002400002000000010402080080040008000840, decoded_data: (421249166674228746791722287414036879169532999019560273060783196224,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 33508
Estimated Gas Usage: 29790 - 196369
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3888

validatorState.amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000000010100000000000000000000000000008000000000200001000000080108000880000004000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001040201040104000004002000100040010820800000000000000000000000000101011080400100200180800204014001080108000000000000000000000000000040011002020008008080400404000810804000000000000000000000000002014008040101020420100008081001022040020000000000000000000000002004010404010201010201020804014010800040, decoded_data: ('0x0000000000000000000000000000000001010000', '0x8000000000200001000000080108000880000004', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0104020104010400000400200010004001082080', '0x0101011080400100200180800204014001080108', '0x0000400110020200080080804004040008108040', '0x0201400804010102042010000808100102204002', '0x2004010404010201010201020804014010800040'), value: 0x0
Caller: [SOMEGUY], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000010101010101010801010101000102010000000000000000000000000000000000000000000000000000000000000000000000000101012001201001028001202001080180040108100101100110014001018040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 33530
Estimated Gas Usage: 29790 - 196369
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3888

validatorState.amount = validatorState.amount.add(uint256(amount))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000000010100000000000000000000000000008000000000200001000000080108000880000004000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001040201040104000004002000100040010820800000000000000000000000000101011080400100200180800204014001080108000000000000000000000000000040011002020008008080400404000810804000000000000000000000000002014008040101020420100008081001022040020000000000000000000000002004010404010201010201020804014010800040, decoded_data: ('0x0000000000000000000000000000000001010000', '0x8000000000200001000000080108000880000004', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0104020104010400000400200010004001082080', '0x0101011080400100200180800204014001080108', '0x0000400110020200080080804004040008108040', '0x0201400804010102042010000808100102204002', '0x2004010404010201010201020804014010800040'), value: 0x0
Caller: [SOMEGUY], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000010101010101010801010101000102010000000000000000000000000000000000000000000000000000000000000000000000000101012001201001028001202001080180040108100101100110014001018040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: restake(uint256,uint256,bool)
PC address: 33589
Estimated Gas Usage: 29790 - 196369
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3890

validatorState.amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000000010100000000000000000000000000008000000000200001000000080108000880000004000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001040201040104000004002000100040010820800000000000000000000000000101011080400100200180800204014001080108000000000000000000000000000040011002020008008080400404000810804000000000000000000000000002014008040101020420100008081001022040020000000000000000000000002004010404010201010201020804014010800040, decoded_data: ('0x0000000000000000000000000000000001010000', '0x8000000000200001000000080108000880000004', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0104020104010400000400200010004001082080', '0x0101011080400100200180800204014001080108', '0x0000400110020200080080804004040008108040', '0x0201400804010102042010000808100102204002', '0x2004010404010201010201020804014010800040'), value: 0x0
Caller: [SOMEGUY], function: restake(uint256,uint256,bool), txdata: 0x28cc4e41000000000000000000000000010101010101010801010101000102010000000000000000000000000000000000000000000000000000000000000000000000000101012001201001028001202001080180040108100101100110014001018040, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: StakeManager
Function name: topUpForFee(address,uint256)
PC address: 35212
Estimated Gas Usage: 13185 - 103493
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3262

token.transferFrom(msg.sender, address(this), fee.add(additionalAmount))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104010020000000000000000000000000020100100080280082080801080801001040440010000000000000000000000000801404010804004204004018002202040204020, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000001040100200', '0x2010010008028008208080108080100104044001', '0x0801404010804004204004018002202040204020'), value: 0x0
Caller: [SOMEGUY], function: topUpForFee(address,uint256), txdata: 0x6365679800000000000000000000002008010100800801408080010120010000800020041004042008800000000000000000000000000000000000000120800802400404, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: topUpForFee(address,uint256)
PC address: 35391
Estimated Gas Usage: 13185 - 103493
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3263

totalHeimdallFee

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000008021080020000000000000000000000000280000102001020000402000080040880408080000000000000000000000000100220000020400800100401020200080200012000000000000000000000000080204040004020081008408000200240010101010000000000000000000000000040800104000800088002200010001001000110, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000802108002', '0x0280000102001020000402000080040880408080', '0x1002200000204008001004010202000802000120', '0x8020404000402008100840800020024001010101', '0x0040800104000800088002200010001001000110'), value: 0x0
Caller: [CREATOR], function: topUpForFee(address,uint256), txdata: 0x6365679800000000000000802000080000100080402040010000040800018010000000808002000110808000000000000000000000000000000000000040018004041002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: topUpForFee(address,uint256)
PC address: 35410
Estimated Gas Usage: 13185 - 103493
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3263

totalHeimdallFee = totalHeimdallFee.add(fee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000008021080020000000000000000000000000280000102001020000402000080040880408080000000000000000000000000100220000020400800100401020200080200012000000000000000000000000080204040004020081008408000200240010101010000000000000000000000000040800104000800088002200010001001000110, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000802108002', '0x0280000102001020000402000080040880408080', '0x1002200000204008001004010202000802000120', '0x8020404000402008100840800020024001010101', '0x0040800104000800088002200010001001000110'), value: 0x0
Caller: [CREATOR], function: topUpForFee(address,uint256), txdata: 0x6365679800000000000000802000080000100080402040010000040800018010000000808002000110808000000000000000000000000000000000000040018004041002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: topUpForFee(address,uint256)
PC address: 35417
Estimated Gas Usage: 13185 - 103493
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3264

logger

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000008021080020000000000000000000000000280000102001020000402000080040880408080000000000000000000000000100220000020400800100401020200080200012000000000000000000000000080204040004020081008408000200240010101010000000000000000000000000040800104000800088002200010001001000110, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000802108002', '0x0280000102001020000402000080040880408080', '0x1002200000204008001004010202000802000120', '0x8020404000402008100840800020024001010101', '0x0040800104000800088002200010001001000110'), value: 0x0
Caller: [CREATOR], function: topUpForFee(address,uint256), txdata: 0x6365679800000000000000802000080000100080402040010000040800018010000000808002000110808000000000000000000000000000000000000040018004041002, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: StakeManager
Function name: topUpForFee(address,uint256)
PC address: 35611
Estimated Gas Usage: 13185 - 103493
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3264

logger.logTopUpFee(user, fee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de0000000000000000000000000000000000000000010101010001200101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000001000400, decoded_data: ('0x0000000000000000010101010001200101000000', '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0x0000000000000000000000000100000001000400'), value: 0x0
Caller: [CREATOR], function: topUpForFee(address,uint256), txdata: 0x6365679800000000000000020102000000200001042040010001100404400840020001801000000000000000000000000000000000000000000000000210100240400802, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StakeManager
Function name: topUpForFee(address,uint256)
PC address: 35611
Estimated Gas Usage: 13185 - 103493
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3264

logger.logTopUpFee(user, fee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000100000180000010088000200101404000000480800080000080080000000000000000000000000000000000200040018020020004100010808002000000000000000000000000801001408040800004208040804040101040082000000000000000000000000001204002014040020420200004802080400410100000000000000000000000001000040040000180804000802080200110200280000000000000000000000000800000000000404000004000000080000000008000000000000000000000000001010101010101010101010101010101010101800000000000000000000000000040808080808000000001010200008000400001, value: 0x0
Caller: [SOMEGUY], function: topUpForFee(address,uint256), txdata: 0x6365679800000000000000000000000000000000000000000000000000000000000000000800040801010201000801048080000000000000000000000402200201014010, decoded_data: ('0x0000000000000000000000000000000000000000', 3618530611436818494408705747951219506927627375147914577101874324166284492816), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: topUpForFee(address,uint256)
PC address: 35611
Estimated Gas Usage: 13185 - 103493
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3264

logger.logTopUpFee(user, fee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000008021080020000000000000000000000000280000102001020000402000080040880408080000000000000000000000000100220000020400800100401020200080200012000000000000000000000000080204040004020081008408000200240010101010000000000000000000000000040800104000800088002200010001001000110, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000000000000000802108002', '0x0280000102001020000402000080040880408080', '0x1002200000204008001004010202000802000120', '0x8020404000402008100840800020024001010101', '0x0040800104000800088002200010001001000110'), value: 0x0
Caller: [CREATOR], function: topUpForFee(address,uint256), txdata: 0x6365679800000000000000802000080000100080402040010000040800018010000000808002000110808000000000000000000000000000000000000040018004041002, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: StakeManager
Function name: withdrawRewards(uint256)
PC address: 39403
Estimated Gas Usage: 21654 - 167424
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3533

token.transfer(validatorUser, reward)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de00000000000000000000000000010100000804800200000000000000000000000000000000000000000000000820800001020010001002010110021001400401000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000001000000010080800401800000000000000000000000008080000080200420100001800000000080201001000000000000000000000000028001008000808040402080008040000000010800000000000000000000000080800000802004400040000880800008021002010000000000000000000000000204402040002040400040802001000010018008, decoded_data: ('0x0001010000080480020000000000000000000000', '0x0820800001020010001002010110021001400401', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0000000000000000000100000001008080040180', '0x8080000080200420100001800000000080201001', '0x0280010080008080404020800080400000000108', '0x8080000080200440004000088080000802100201', '0x0204402040002040400040802001000010018008'), value: 0x0
Caller: [CREATOR], function: withdrawRewards(uint256), txdata: 0x9342c8f40000000140040004000840018080020040011020020010040001018080021008, decoded_data: (33701578863604818086131012982934258679737657476112648340257565184008,), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StakeManager
Function name: withdrawRewards(uint256)
PC address: 39403
Estimated Gas Usage: 21654 - 167424
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3533

token.transfer(validatorUser, reward)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2dedecoded_data: ('0x0400000101100004200000000000000000000000', '0x2080040102010104020108108001021001010808', '0x0101101008020120028020020001020200200201', '0x0201200401800102404001010804800220080401', '0x8000801080100400010080008002040001040040', '0x0102000101018004000810200000408080100008', '0x2010040080804020800040400801808020400801', '0x0404082002808080800108040104014080084020'), value: 0x0
Caller: [CREATOR], function: withdrawRewards(uint256), txdata: 0x9342c8f40000000080002040affeaffeaffeaffeaffeaffeaffeaffe0810affe80808010, decoded_data: (13480025161642628978405149972807475786450646570708267928612440670224,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: withdrawRewards(uint256)
PC address: 39581
Estimated Gas Usage: 21654 - 167424
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3534

logger

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000001000001000000000000000000020202081000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000080802014080010208010000204001400880100000000000000000000000000204000400400880402000020104081002808001000000000000000000000000044020200801200000200000012000800110000200000000000000000000000080208000204000048004004010204080024020010000000000000000000000000208404020048080101080101080400408202001, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe', '0x0001000001000000000000000000020202081000', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0008080201408001020801000020400140088010', '0x0204000400400880402000020104081002808001', '0x0440202008012000002000000120008001100002', '0x8020800020400004800400401020408002402001', '0x0208404020048080101080101080400408202001'), value: 0x0
Caller: [CREATOR], function: withdrawRewards(uint256), txdata: 0x9342c8f40000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: withdrawRewards(uint256)
PC address: 39642
Estimated Gas Usage: 21654 - 167424
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3534

totalRewardsLiquidated

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000001000001000000000000000000020202081000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000080802014080010208010000204001400880100000000000000000000000000204000400400880402000020104081002808001000000000000000000000000044020200801200000200000012000800110000200000000000000000000000080208000204000048004004010204080024020010000000000000000000000000208404020048080101080101080400408202001, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe', '0x0001000001000000000000000000020202081000', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0008080201408001020801000020400140088010', '0x0204000400400880402000020104081002808001', '0x0440202008012000002000000120008001100002', '0x8020800020400004800400401020408002402001', '0x0208404020048080101080101080400408202001'), value: 0x0
Caller: [CREATOR], function: withdrawRewards(uint256), txdata: 0x9342c8f40000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: StakeManager
Function name: withdrawRewards(uint256)
PC address: 39741
Estimated Gas Usage: 21654 - 167424
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3534

logger.logClaimRewards(validatorId, reward, totalRewardsLiquidated)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de0000000000000000000000001001010002020408000000000000000000000000000000000000000000000000000000040100000000000000010000010000010800000000000000000000000000004000001001002001040800010100044000400000000000000000000000000000000000000000000104080000000100000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000408010002010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000202200401008000101002801010010880202040, decoded_data: ('0x1001010002020408000000000000000000000000', '0x0000000401000000000000000100000100000108', '0x0000400000100100200104080001010004400040', '0x0000000000000000000104080000000100000000', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0004080100020100000000000000000000000000', '0x0000000000000000000000000000000000000001', '0x0202200401008000101002801010010880202040'), value: 0x0
Caller: [ATTACKER], function: withdrawRewards(uint256), txdata: 0x9342c8f40000000000000000000000000140008008200100000010084000004000022008, decoded_data: (7136282030472763033576873988260448057579151368,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakeManager
Function name: withdrawRewards(uint256)
PC address: 39741
Estimated Gas Usage: 21654 - 167424
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:3534

logger.logClaimRewards(validatorId, reward, totalRewardsLiquidated)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,address,address,address,address,address), txdata: 0x8a29e2de000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000001000001000000000000000000020202081000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000080802014080010208010000204001400880100000000000000000000000000204000400400880402000020104081002808001000000000000000000000000044020200801200000200000012000800110000200000000000000000000000080208000204000048004004010204080024020010000000000000000000000000208404020048080101080101080400408202001, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe', '0x0001000001000000000000000000020202081000', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', '0x0008080201408001020801000020400140088010', '0x0204000400400880402000020104081002808001', '0x0440202008012000002000000120008001100002', '0x8020800020400004800400401020408002402001', '0x0208404020048080101080101080400408202001'), value: 0x0
Caller: [CREATOR], function: withdrawRewards(uint256), txdata: 0x9342c8f40000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0


time_used: 36066.30721902847 seconds
#@contract_info_time
0x9a6bc66ce2e008d59654bc0053ce2d01f09c8b90.sol:0.5.2:StakeManager:36066.30721902847:36100:60:36000
