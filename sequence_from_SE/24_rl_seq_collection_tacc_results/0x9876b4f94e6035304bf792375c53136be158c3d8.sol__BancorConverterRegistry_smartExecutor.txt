++++ 0x9876b4f94e6035304bf792375c53136be158c3d8.sol  :  0.4.26  :  BancorConverterRegistry ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 6185
['constructor']:writes at the last depth:['0', '2', '3']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 94.89% coverage.
dynamic svars:[]
static svars:['3', '0', '1', '2']
Ending preprocessing.
preprocessing time(s): 102.7817018032074
contract coverage: 88.25%
getConvertibleTokenSmartTokens(address) is not reachable
getSmartTokens() is not reachable
getConvertibleTokens() is not reachable
getLiquidityPools() is not reachable
isConverterValid(address) is not reachable
addConverter(address) is not reachable
Function Reads: State variables read in conditions
	restrictRegistryUpdate(bool):['0']
	getSmartTokens():[]
	isConvertibleToken(address):[]
	isSmartToken(address):[]
	updateRegistry():['3', '0']
	getConvertibleTokens():[]
	prevRegistry():[]
	getConvertibleTokenCount():[]
	addConverter(address):[]
	isConvertibleTokenSmartToken(address,address):[]
	acceptOwnership():['1']
	getLiquidityPoolCount():[]
	registry():[]
	getLiquidityPools():[]
	getConvertibleToken(uint256):[]
	owner():[]
	isConverterValid(address):[]
	removeConverter(address):['0']
	getSmartToken(uint256):[]
	getConvertibleTokenSmartTokenCount(address):[]
	getLiquidityPool(uint256):[]
	restoreRegistry():['0']
	adminOnly():[]
	newOwner():[]
	getConvertibleTokenSmartToken(address,uint256):[]
	getSmartTokenCount():[]
	isLiquidityPool(address):[]
	transferOwnership(address):['0']
	getConvertibleTokenSmartTokens(address):[]
Function Writes: State variables written
	restrictRegistryUpdate(bool):['3']
	acceptOwnership():['0', '1']
	restoreRegistry():['2']
	transferOwnership(address):['1']
	updateRegistry():['3', '2']
============================
iteration:3
targets:['acceptOwnership()', 'getConvertibleTokenSmartTokens(address)', 'getSmartTokens()', 'getConvertibleTokens()', 'getLiquidityPools()', 'isConverterValid(address)', 'addConverter(address)', 'removeConverter(address)', 'updateRegistry()']
['restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['restoreRegistry()']:writes at the last depth:['2']
['transferOwnership(address)']:writes at the last depth:['1']
['getConvertibleTokenCount()']:writes at the last depth:[]
['isConvertibleToken(address)']:writes at the last depth:[]
['getLiquidityPoolCount()']:writes at the last depth:[]
['isSmartToken(address)']:writes at the last depth:[]
['isConverterValid(address)']:writes at the last depth:[]
['getConvertibleToken(uint256)']:writes at the last depth:[]
['isConvertibleTokenSmartToken(address,address)']:writes at the last depth:[]
['getSmartTokenCount()']:writes at the last depth:[]
['getSmartToken(uint256)']:writes at the last depth:[]
['getConvertibleTokenSmartTokenCount(address)']:writes at the last depth:[]
['getLiquidityPool(uint256)']:writes at the last depth:[]
['updateRegistry()']:writes at the last depth:['3', '2']
['isLiquidityPool(address)']:writes at the last depth:[]
['isConverterValid(address)']:writes at the last depth:[]
['getConvertibleTokenSmartToken(address,uint256)']:writes at the last depth:[]
['isConverterValid(address)']:writes at the last depth:[]
['removeConverter(address)']:writes at the last depth:[]
['isConverterValid(address)']:writes at the last depth:[]
['isConverterValid(address)']:writes at the last depth:[]
['removeConverter(address)']:writes at the last depth:[]
['removeConverter(address)']:writes at the last depth:[]
['isConverterValid(address)']:writes at the last depth:[]
['removeConverter(address)']:writes at the last depth:[]
['addConverter(address)']:writes at the last depth:[]
['removeConverter(address)']:writes at the last depth:[]
['removeConverter(address)']:writes at the last depth:[]
['removeConverter(address)']:writes at the last depth:[]
['addConverter(address)']:writes at the last depth:[]
['addConverter(address)']:writes at the last depth:[]
['removeConverter(address)']:writes at the last depth:[]
['removeConverter(address)']:writes at the last depth:[]
['removeConverter(address)']:writes at the last depth:[]
['addConverter(address)']:writes at the last depth:[]
['addConverter(address)']:writes at the last depth:[]
['addConverter(address)']:writes at the last depth:[]
['removeConverter(address)']:writes at the last depth:[]
['addConverter(address)']:writes at the last depth:[]
['addConverter(address)']:writes at the last depth:[]
['removeConverter(address)']:writes at the last depth:[]
['addConverter(address)']:writes at the last depth:[]
contract coverage: 88.25%
============================
iteration:4
['addConverter(address)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['addConverter(address)', 'restoreRegistry()']:writes at the last depth:['2']
['addConverter(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['addConverter(address)', 'getConvertibleTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'isConvertibleToken(address)']:writes at the last depth:[]
['addConverter(address)', 'getLiquidityPoolCount()']:writes at the last depth:[]
['addConverter(address)', 'isSmartToken(address)']:writes at the last depth:[]
['addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'getConvertibleToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'isConvertibleTokenSmartToken(address,address)']:writes at the last depth:[]
['addConverter(address)', 'getSmartTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'getSmartToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'getConvertibleTokenSmartTokenCount(address)']:writes at the last depth:[]
['addConverter(address)', 'getLiquidityPool(uint256)']:writes at the last depth:[]
['addConverter(address)', 'updateRegistry()']:writes at the last depth:['3', '2']
['addConverter(address)', 'isLiquidityPool(address)']:writes at the last depth:[]
['addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'getConvertibleTokenSmartToken(address,uint256)']:writes at the last depth:[]
['addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
contract coverage: 88.25%
============================
iteration:5
['addConverter(address)', 'addConverter(address)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['addConverter(address)', 'addConverter(address)', 'restoreRegistry()']:writes at the last depth:['2']
['addConverter(address)', 'addConverter(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['addConverter(address)', 'addConverter(address)', 'getConvertibleTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'isConvertibleToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'getLiquidityPoolCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'isSmartToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'getConvertibleToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'isConvertibleTokenSmartToken(address,address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'getSmartTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'getSmartToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'getConvertibleTokenSmartTokenCount(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'getLiquidityPool(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'updateRegistry()']:writes at the last depth:['3', '2']
['addConverter(address)', 'addConverter(address)', 'isLiquidityPool(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'getConvertibleTokenSmartToken(address,uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
contract coverage: 88.25%
============================
iteration:6
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'restoreRegistry()']:writes at the last depth:['2']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConvertibleToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getLiquidityPoolCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isSmartToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConvertibleTokenSmartToken(address,address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getSmartTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getSmartToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenSmartTokenCount(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getLiquidityPool(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'updateRegistry()']:writes at the last depth:['3', '2']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isLiquidityPool(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenSmartToken(address,uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
contract coverage: 88.25%
============================
iteration:7
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'restoreRegistry()']:writes at the last depth:['2']
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'getConvertibleTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isConvertibleToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'getLiquidityPoolCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isSmartToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'getConvertibleToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isConvertibleTokenSmartToken(address,address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'getSmartTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'getSmartToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'getConvertibleTokenSmartTokenCount(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'getLiquidityPool(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'updateRegistry()']:writes at the last depth:['3', '2']
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isLiquidityPool(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'getConvertibleTokenSmartToken(address,uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
contract coverage: 88.25%
============================
iteration:8
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'restoreRegistry()']:writes at the last depth:['2']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConvertibleToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getLiquidityPoolCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isSmartToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConvertibleTokenSmartToken(address,address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getSmartTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getSmartToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenSmartTokenCount(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getLiquidityPool(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'updateRegistry()']:writes at the last depth:['3', '2']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isLiquidityPool(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenSmartToken(address,uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
contract coverage: 88.25%
============================
iteration:9
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'restoreRegistry()']:writes at the last depth:['2']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConvertibleToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getLiquidityPoolCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isSmartToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConvertibleTokenSmartToken(address,address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getSmartTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getSmartToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenSmartTokenCount(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getLiquidityPool(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'updateRegistry()']:writes at the last depth:['3', '2']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isLiquidityPool(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenSmartToken(address,uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
contract coverage: 88.25%
============================
iteration:10
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'restoreRegistry()']:writes at the last depth:['2']
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'getConvertibleTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isConvertibleToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'getLiquidityPoolCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isSmartToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'getConvertibleToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isConvertibleTokenSmartToken(address,address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'getSmartTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'getSmartToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'getConvertibleTokenSmartTokenCount(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'getLiquidityPool(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'updateRegistry()']:writes at the last depth:['3', '2']
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isLiquidityPool(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'getConvertibleTokenSmartToken(address,uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'removeConverter(address)', 'addConverter(address)']:writes at the last depth:[]
contract coverage: 88.25%
============================
iteration:11
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'restoreRegistry()']:writes at the last depth:['2']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConvertibleToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getLiquidityPoolCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isSmartToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConvertibleTokenSmartToken(address,address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getSmartTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getSmartToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenSmartTokenCount(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getLiquidityPool(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'updateRegistry()']:writes at the last depth:['3', '2']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isLiquidityPool(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenSmartToken(address,uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
contract coverage: 88.25%
============================
iteration:12
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'restoreRegistry()']:writes at the last depth:['2']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConvertibleToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getLiquidityPoolCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isSmartToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConvertibleTokenSmartToken(address,address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getSmartTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getSmartToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenSmartTokenCount(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getLiquidityPool(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'updateRegistry()']:writes at the last depth:['3', '2']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isLiquidityPool(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenSmartToken(address,uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
contract coverage: 88.25%
============================
iteration:13
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'restoreRegistry()']:writes at the last depth:['2']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConvertibleToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getLiquidityPoolCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isSmartToken(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConvertibleTokenSmartToken(address,address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getSmartTokenCount()']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getSmartToken(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenSmartTokenCount(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getLiquidityPool(uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'updateRegistry()']:writes at the last depth:['3', '2']
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isLiquidityPool(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'getConvertibleTokenSmartToken(address,uint256)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'isConverterValid(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'addConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
['addConverter(address)', 'addConverter(address)', 'addConverter(address)', 'removeConverter(address)']:writes at the last depth:[]
contract coverage: 88.25%
============================
iteration:14
contract coverage: 88.25%
============================
iteration:15
contract coverage: 88.25%
============================
iteration:16
contract coverage: 88.25%
============================
iteration:17
contract coverage: 88.25%
============================
iteration:18
contract coverage: 88.25%
============================
iteration:19
contract coverage: 88.25%
============================
iteration:20
contract coverage: 88.25%
============================
iteration:21
contract coverage: 88.25%
============================
iteration:22
contract coverage: 88.25%
============================
iteration:23
contract coverage: 88.25%
============================
iteration:24
contract coverage: 88.25%
============================
iteration:25
contract coverage: 88.25%
============================
iteration:26
contract coverage: 88.25%
============================
iteration:27
contract coverage: 88.25%
============================
iteration:28
contract coverage: 88.25%
============================
iteration:29
contract coverage: 88.25%
============================
iteration:30
contract coverage: 88.25%
============================
iteration:31
contract coverage: 88.25%
============================
iteration:32
contract coverage: 88.25%
============================
iteration:33
contract coverage: 88.25%
============================
iteration:34
contract coverage: 88.25%
============================
iteration:35
contract coverage: 88.25%
============================
iteration:36
contract coverage: 88.25%
============================
iteration:37
contract coverage: 88.25%
============================
iteration:38
contract coverage: 88.25%
============================
iteration:39
contract coverage: 88.25%
============================
iteration:40
contract coverage: 88.25%
============================
iteration:41
contract coverage: 88.25%
============================
iteration:42
contract coverage: 88.25%
============================
iteration:43
contract coverage: 88.25%
============================
iteration:44
contract coverage: 88.25%
============================
iteration:45
contract coverage: 88.25%
============================
iteration:46
contract coverage: 88.25%
============================
iteration:47
contract coverage: 88.25%
============================
iteration:48
contract coverage: 88.25%
============================
iteration:49
contract coverage: 88.25%
============================
iteration:50
contract coverage: 88.25%
============================
iteration:51
contract coverage: 88.25%
============================
iteration:52
contract coverage: 88.25%
============================
iteration:53
contract coverage: 88.25%
============================
iteration:54
contract coverage: 88.25%
============================
iteration:55
contract coverage: 88.25%
============================
iteration:56
contract coverage: 88.25%
============================
iteration:57
contract coverage: 88.25%
============================
iteration:58
contract coverage: 88.25%
============================
iteration:59
contract coverage: 88.25%
============================
iteration:60
contract coverage: 88.25%
============================
iteration:61
contract coverage: 88.25%
============================
iteration:62
contract coverage: 88.25%
============================
iteration:63
contract coverage: 88.25%
============================
iteration:64
contract coverage: 88.25%
============================
iteration:65
contract coverage: 88.25%
============================
iteration:66
contract coverage: 88.25%
============================
iteration:67
contract coverage: 88.25%
============================
iteration:68
contract coverage: 88.25%
============================
iteration:69
contract coverage: 88.25%
============================
iteration:70
contract coverage: 88.25%
============================
iteration:71
contract coverage: 88.25%
============================
iteration:72
contract coverage: 88.25%
============================
iteration:73
contract coverage: 88.25%
============================
iteration:74
contract coverage: 88.25%
============================
iteration:75
contract coverage: 88.25%
============================
iteration:76
contract coverage: 88.25%
============================
iteration:77
contract coverage: 88.25%
============================
iteration:78
contract coverage: 88.25%
============================
iteration:79
contract coverage: 88.25%
============================
iteration:80
contract coverage: 88.25%
============================
iteration:81
contract coverage: 88.25%
============================
iteration:82
contract coverage: 88.25%
============================
iteration:83
contract coverage: 88.25%
============================
iteration:84
contract coverage: 88.25%
============================
iteration:85
contract coverage: 88.25%
============================
iteration:86
contract coverage: 88.25%
============================
iteration:87
contract coverage: 88.25%
============================
iteration:88
contract coverage: 88.25%
============================
iteration:89
contract coverage: 88.25%
============================
iteration:90
contract coverage: 88.25%
============================
iteration:91
contract coverage: 88.25%
============================
iteration:92
contract coverage: 88.25%
============================
iteration:93
contract coverage: 88.25%
============================
iteration:94
contract coverage: 88.25%
============================
iteration:95
contract coverage: 88.25%
============================
iteration:96
contract coverage: 88.25%
============================
iteration:97
contract coverage: 88.25%
============================
iteration:98
contract coverage: 88.25%
============================
iteration:99
contract coverage: 88.25%
============================
iteration:100
contract coverage: 88.25%
============================
iteration:101
contract coverage: 88.25%
============================
iteration:102
contract coverage: 88.25%
============================
iteration:103
contract coverage: 88.25%
============================
iteration:104
contract coverage: 88.25%
============================
iteration:105
contract coverage: 88.25%
============================
iteration:106
contract coverage: 88.25%
============================
iteration:107
contract coverage: 88.25%
============================
iteration:108
contract coverage: 88.25%
============================
iteration:109
contract coverage: 88.25%
============================
iteration:110
contract coverage: 88.25%
============================
iteration:111
contract coverage: 88.25%
============================
iteration:112
contract coverage: 88.25%
============================
iteration:113
contract coverage: 88.25%
============================
iteration:114
contract coverage: 88.25%
============================
iteration:115
contract coverage: 88.25%
============================
iteration:116
contract coverage: 88.25%
============================
iteration:117
contract coverage: 88.25%
============================
iteration:118
contract coverage: 88.25%
============================
iteration:119
contract coverage: 88.25%
============================
iteration:120
contract coverage: 88.25%
============================
iteration:121
contract coverage: 88.25%
============================
iteration:122
contract coverage: 88.25%
============================
iteration:123
contract coverage: 88.25%
============================
iteration:124
contract coverage: 88.25%
============================
iteration:125
contract coverage: 88.25%
============================
iteration:126
contract coverage: 88.25%
============================
iteration:127
contract coverage: 88.25%
============================
iteration:128
contract coverage: 88.25%
============================
iteration:129
contract coverage: 88.25%
============================
iteration:130
contract coverage: 88.25%
============================
iteration:131
contract coverage: 88.25%
============================
iteration:132
contract coverage: 88.25%
#@statespace
13017 nodes, 13016 edges, 204478 total states
#@coverage
Achieved 2.09% coverage for code: 
#@coverage
Achieved 88.25% coverage for code: 608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063024c7ec71461017a57806304ceaf41146101a95780633ab8857c146102155780634123ef601461027057806349d10b64146102cb5780635f1b50fe146102e257806361cd756e1461034e57806369be4784146103a55780636ce1c4dc146103d0578063725b87861461041357806379ba50971461048e5780637a5f0ffd146104a55780637b103999146104d05780637f45c4c314610527578063865cf194146105935780638da5cb5b14610600578063954254f5146106575780639e76a007146106b2578063a109d214146106f5578063a43d5e9414610762578063a74498aa146107b9578063b4a176d314610826578063c976a3591461083d578063d4ee1d901461086c578063d6c4b5b2146108c3578063e571049b14610950578063e85455d71461097b578063f2fde38b146109d6578063f4fb86c014610a19575b600080fd5b34801561018657600080fd5b506101a7600480360381019080803515159060200190929190505050610ab1565b005b3480156101b557600080fd5b506101be610b00565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102015780820151818401526020810190506101e6565b505050509050019250505060405180910390f35b34801561022157600080fd5b50610256600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c24565b604051808215151515815260200191505060405180910390f35b34801561027c57600080fd5b506102b1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d2b565b604051808215151515815260200191505060405180910390f35b3480156102d757600080fd5b506102e0610e32565b005b3480156102ee57600080fd5b506102f76110d4565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561033a57808201518184015260208101905061031f565b505050509050019250505060405180910390f35b34801561035a57600080fd5b506103636111f8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103b157600080fd5b506103ba61121e565b6040518082815260200191505060405180910390f35b3480156103dc57600080fd5b50610411600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112ec565b005b34801561041f57600080fd5b50610474600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061157a565b604051808215151515815260200191505060405180910390f35b34801561049a57600080fd5b506104a36116b6565b005b3480156104b157600080fd5b506104ba611855565b6040518082815260200191505060405180910390f35b3480156104dc57600080fd5b506104e5611923565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053357600080fd5b5061053c611949565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561057f578082015181840152602081019050610564565b505050509050019250505060405180910390f35b34801561059f57600080fd5b506105be60048036038101908080359060200190929190505050611a6d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561060c57600080fd5b50610615611b48565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561066357600080fd5b50610698600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b6d565b604051808215151515815260200191505060405180910390f35b3480156106be57600080fd5b506106f3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ffb565b005b34801561070157600080fd5b50610720600480360381019080803590602001909291905050506122e1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561076e57600080fd5b506107a3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123bc565b6040518082815260200191505060405180910390f35b3480156107c557600080fd5b506107e4600480360381019080803590602001909291905050506124c3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561083257600080fd5b5061083b61259e565b005b34801561084957600080fd5b50610852612616565b604051808215151515815260200191505060405180910390f35b34801561087857600080fd5b50610881612629565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108cf57600080fd5b5061090e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061264f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561095c57600080fd5b5061096561275f565b6040518082815260200191505060405180910390f35b34801561098757600080fd5b506109bc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061282d565b604051808215151515815260200191505060405180910390f35b3480156109e257600080fd5b50610a17600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612934565b005b348015610a2557600080fd5b50610a5a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a2f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610a9d578082015181840152602081019050610a82565b505050509050019250505060405180910390f35b801515600360149054906101000a900460ff16151514158015610ad85750610ad7612b8c565b5b1515610ae357600080fd5b80600360146101000a81548160ff02191690831515021790555050565b6060610b2b7f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b73ffffffffffffffffffffffffffffffffffffffff166304ceaf416040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015610b8e57600080fd5b505af1158015610ba2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610bcc57600080fd5b810190808051640100000000811115610be457600080fd5b82810190506020810184811115610bfa57600080fd5b8151856020820283011164010000000082111715610c1757600080fd5b5050929190505050905090565b6000610c4f7f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b73ffffffffffffffffffffffffffffffffffffffff16633ab8857c836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610ce957600080fd5b505af1158015610cfd573d6000803e3d6000fd5b505050506040513d6020811015610d1357600080fd5b81019080805190602001909291905050509050919050565b6000610d567f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b73ffffffffffffffffffffffffffffffffffffffff16634123ef60836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610df057600080fd5b505af1158015610e04573d6000803e3d6000fd5b505050506040513d6020811015610e1a57600080fd5b81019080805190602001909291905050509050919050565b6000600360149054906101000a900460ff161580610e545750610e53612b8c565b5b1515610e5f57600080fd5b610e887f436f6e7472616374526567697374727900000000000000000000000000000000612be3565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610f155750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b1515610f2057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663bb34534c7f436f6e74726163745265676973747279000000000000000000000000000000006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015610fcf57600080fd5b505af1158015610fe3573d6000803e3d6000fd5b505050506040513d6020811015610ff957600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161415151561102d57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606110ff7f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b73ffffffffffffffffffffffffffffffffffffffff16635f1b50fe6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561116257600080fd5b505af1158015611176573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156111a057600080fd5b8101908080516401000000008111156111b857600080fd5b828101905060208101848111156111ce57600080fd5b81518560208202830111640100000000821117156111eb57600080fd5b5050929190505050905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006112497f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b73ffffffffffffffffffffffffffffffffffffffff166369be47846040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156112ac57600080fd5b505af11580156112c0573d6000803e3d6000fd5b505050506040513d60208110156112d657600080fd5b8101908080519060200190929190505050905090565b6000806000806112fb85611b6d565b151561130657600080fd5b61132f7f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b93508473ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561139557600080fd5b505af11580156113a9573d6000803e3d6000fd5b505050506040513d60208110156113bf57600080fd5b810190808051906020019092919050505092508473ffffffffffffffffffffffffffffffffffffffff166371f52bf36040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561143657600080fd5b505af115801561144a573d6000803e3d6000fd5b505050506040513d602081101561146057600080fd5b810190808051906020019092919050505061ffff1691506114818484612cc0565b6001821115611499576114948484612dba565b6114a5565b6114a4848485612eb4565b5b600090505b8181101561157357611566848673ffffffffffffffffffffffffffffffffffffffff166319b64015846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561152557600080fd5b505af1158015611539573d6000803e3d6000fd5b505050506040513d602081101561154f57600080fd5b810190808051906020019092919050505085612eb4565b80806001019150506114aa565b5050505050565b60006115a57f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b73ffffffffffffffffffffffffffffffffffffffff1663725b878684846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561167357600080fd5b505af1158015611687573d6000803e3d6000fd5b505050506040513d602081101561169d57600080fd5b8101908080519060200190929190505050905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561171257600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a60405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006118807f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b73ffffffffffffffffffffffffffffffffffffffff16637a5f0ffd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156118e357600080fd5b505af11580156118f7573d6000803e3d6000fd5b505050506040513d602081101561190d57600080fd5b8101908080519060200190929190505050905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606119747f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b73ffffffffffffffffffffffffffffffffffffffff16637f45c4c36040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156119d757600080fd5b505af11580156119eb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611a1557600080fd5b810190808051640100000000811115611a2d57600080fd5b82810190506020810184811115611a4357600080fd5b8151856020820283011164010000000082111715611a6057600080fd5b5050929190505050905090565b6000611a987f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b73ffffffffffffffffffffffffffffffffffffffff1663865cf194836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611b0657600080fd5b505af1158015611b1a573d6000803e3d6000fd5b505050506040513d6020811015611b3057600080fd5b81019080805190602001909291905050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060008573ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611bd957600080fd5b505af1158015611bed573d6000803e3d6000fd5b505050506040513d6020811015611c0357600080fd5b8101908080519060200190929190505050935060008473ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611c7c57600080fd5b505af1158015611c90573d6000803e3d6000fd5b505050506040513d6020811015611ca657600080fd5b81019080805190602001909291905050501480611d8d57508573ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611d3957600080fd5b505af1158015611d4d573d6000803e3d6000fd5b505050506040513d6020811015611d6357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614155b15611d9b5760009450611ff2565b8573ffffffffffffffffffffffffffffffffffffffff166371f52bf36040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611dff57600080fd5b505af1158015611e13573d6000803e3d6000fd5b505050506040513d6020811015611e2957600080fd5b810190808051906020019092919050505061ffff169250600091505b82821015611fed578573ffffffffffffffffffffffffffffffffffffffff166319b64015836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611ebc57600080fd5b505af1158015611ed0573d6000803e3d6000fd5b505050506040513d6020811015611ee657600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611f9657600080fd5b505af1158015611faa573d6000803e3d6000fd5b505050506040513d6020811015611fc057600080fd5b81019080805190602001909291905050501415611fe05760009450611ff2565b8180600101925050611e45565b600194505b50505050919050565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612062575061206085611b6d565b155b151561206d57600080fd5b6120967f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b93508473ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156120fc57600080fd5b505af1158015612110573d6000803e3d6000fd5b505050506040513d602081101561212657600080fd5b810190808051906020019092919050505092508473ffffffffffffffffffffffffffffffffffffffff166371f52bf36040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561219d57600080fd5b505af11580156121b1573d6000803e3d6000fd5b505050506040513d60208110156121c757600080fd5b810190808051906020019092919050505061ffff1691506121e88484612ffa565b6001821115612200576121fb84846130f4565b61220c565b61220b8484856131ee565b5b600090505b818110156122da576122cd848673ffffffffffffffffffffffffffffffffffffffff166319b64015846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561228c57600080fd5b505af11580156122a0573d6000803e3d6000fd5b505050506040513d60208110156122b657600080fd5b8101908080519060200190929190505050856131ee565b8080600101915050612211565b5050505050565b600061230c7f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b73ffffffffffffffffffffffffffffffffffffffff1663a109d214836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561237a57600080fd5b505af115801561238e573d6000803e3d6000fd5b505050506040513d60208110156123a457600080fd5b81019080805190602001909291905050509050919050565b60006123e77f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b73ffffffffffffffffffffffffffffffffffffffff1663a43d5e94836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561248157600080fd5b505af1158015612495573d6000803e3d6000fd5b505050506040513d60208110156124ab57600080fd5b81019080805190602001909291905050509050919050565b60006124ee7f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b73ffffffffffffffffffffffffffffffffffffffff1663a74498aa836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561255c57600080fd5b505af1158015612570573d6000803e3d6000fd5b505050506040513d602081101561258657600080fd5b81019080805190602001909291905050509050919050565b6125a6612b8c565b15156125b157600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600360149054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061267a7f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b73ffffffffffffffffffffffffffffffffffffffff1663d6c4b5b284846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561271c57600080fd5b505af1158015612730573d6000803e3d6000fd5b505050506040513d602081101561274657600080fd5b8101908080519060200190929190505050905092915050565b600061278a7f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b73ffffffffffffffffffffffffffffffffffffffff1663e571049b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156127ed57600080fd5b505af1158015612801573d6000803e3d6000fd5b505050506040513d602081101561281757600080fd5b8101908080519060200190929190505050905090565b60006128587f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b73ffffffffffffffffffffffffffffffffffffffff1663e85455d7836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156128f257600080fd5b505af1158015612906573d6000803e3d6000fd5b505050506040513d602081101561291c57600080fd5b81019080805190602001909291905050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561298f57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156129eb57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060612a5a7f42616e636f72436f6e7665727465725265676973747279446174610000000000612be3565b73ffffffffffffffffffffffffffffffffffffffff1663f4fb86c0836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015612af457600080fd5b505af1158015612b08573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015612b3257600080fd5b810190808051640100000000811115612b4a57600080fd5b82810190506020810184811115612b6057600080fd5b8151856020820283011164010000000082111715612b7d57600080fd5b50509291905050509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb34534c836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015612c7e57600080fd5b505af1158015612c92573d6000803e3d6000fd5b505050506040513d6020811015612ca857600080fd5b81019080805190602001909291905050509050919050565b8173ffffffffffffffffffffffffffffffffffffffff16638de6c3eb826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015612d5b57600080fd5b505af1158015612d6f573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff167f88881feecdf61136ac4bdb1f681f2f3746a82910263d21ffea94750d2a78c0ab60405160405180910390a25050565b8173ffffffffffffffffffffffffffffffffffffffff1663ee6a934c826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015612e5557600080fd5b505af1158015612e69573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff167fb893f883ef734b712208a877459424ee509832c57e0461fb1ac99ed4d42f2d8960405160405180910390a25050565b8273ffffffffffffffffffffffffffffffffffffffff166336900c1183836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015612f8357600080fd5b505af1158015612f97573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167ff2e7cf6d6ed3f77039511409a43d4fa5108f09ab71d72b014380364c910233a560405160405180910390a3505050565b8173ffffffffffffffffffffffffffffffffffffffff1663ceb9838c826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561309557600080fd5b505af11580156130a9573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff167f2aff63790c7da80d1c50ede92d23bc841c384837735c92c184331f3d7b91e5bf60405160405180910390a25050565b8173ffffffffffffffffffffffffffffffffffffffff1663ae22107f826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561318f57600080fd5b505af11580156131a3573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff167f59c3fbcae88f30e9b0e35c132a7f68c53231dffa4722f197c7ecb0ee013eee6060405160405180910390a25050565b8273ffffffffffffffffffffffffffffffffffffffff1663fba8f03183836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156132bd57600080fd5b505af11580156132d1573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f9430ad6ff45d6c3e126c7711bf0036bd9bc6b202fa19628abd88e59cf43ced4360405160405180910390a35050505600a165627a7a72305820537734e2a1bffbb0f84fa2cd624e0c1734589849e87e80e72b1178202dcd80820029
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: isConvertibleToken(address)
PC address: 3308
Estimated Gas Usage: 4515 - 74345
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:447

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).isConvertibleToken(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isConvertibleToken(address), txdata: 0x3ab8857c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: isConvertibleToken(address)
PC address: 3308
Estimated Gas Usage: 4515 - 74345
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:447

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).isConvertibleToken(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isConvertibleToken(address), txdata: 0x3ab8857c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: isSmartToken(address)
PC address: 3571
Estimated Gas Usage: 4537 - 74367
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:407

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).isSmartToken(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isSmartToken(address), txdata: 0x4123ef60, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: isSmartToken(address)
PC address: 3571
Estimated Gas Usage: 4537 - 74367
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:407

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).isSmartToken(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isSmartToken(address), txdata: 0x4123ef60, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: updateRegistry()
PC address: 3728
Estimated Gas Usage: 18855 - 130054
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:141

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: updateRegistry()
PC address: 4050
Estimated Gas Usage: 18855 - 130054
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:144

IContractRegistry(newRegistry).addressOf(CONTRACT_REGISTRY)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: updateRegistry()
PC address: 4050
Estimated Gas Usage: 18855 - 130054
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:144

IContractRegistry(newRegistry).addressOf(CONTRACT_REGISTRY)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: updateRegistry()
PC address: 4050
Estimated Gas Usage: 18855 - 130054
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:144

IContractRegistry(newRegistry).addressOf(CONTRACT_REGISTRY)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: updateRegistry()
PC address: 4147
Estimated Gas Usage: 18855 - 130054
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:147

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: updateRegistry()
PC address: 4186
Estimated Gas Usage: 18855 - 130054
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:147

prevRegistry = registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: updateRegistry()
PC address: 4239
Estimated Gas Usage: 18855 - 130054
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:147

prevRegistry = registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: updateRegistry()
PC address: 4251
Estimated Gas Usage: 18855 - 130054
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:150

registry = IContractRegistry(newRegistry)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: updateRegistry()
PC address: 4304
Estimated Gas Usage: 18855 - 130054
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:150

registry = IContractRegistry(newRegistry)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: getConvertibleTokenCount()
PC address: 4783
Estimated Gas Usage: 4506 - 74241
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:432

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).getConvertibleTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getConvertibleTokenCount(), txdata: 0x69be4784, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: getConvertibleTokenCount()
PC address: 4783
Estimated Gas Usage: 4506 - 74241
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:432

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).getConvertibleTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getConvertibleTokenCount(), txdata: 0x69be4784, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 5016
Estimated Gas Usage: 34994 - 623617
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:354

ISmartTokenController(_converter).token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dcefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 5016
Estimated Gas Usage: 28234 - 478609
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:354

ISmartTokenController(_converter).token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 5016
Estimated Gas Usage: 34994 - 623617
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:354

ISmartTokenController(_converter).token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dcefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 5177
Estimated Gas Usage: 34994 - 623617
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:355

_converter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dcefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 5177
Estimated Gas Usage: 28234 - 478609
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:355

_converter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 5177
Estimated Gas Usage: 34994 - 623617
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:355

_converter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dcefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 5416
Estimated Gas Usage: 34994 - 623617
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:366

_converter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dcefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 5416
Estimated Gas Usage: 30519 - 549762
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:366

_converter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 5416
Estimated Gas Usage: 34994 - 623617
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:366

_converter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dcefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: isConvertibleTokenSmartToken(address,address)
PC address: 5750
Estimated Gas Usage: 4739 - 74664
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:467

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).isConvertibleTokenSmartToken(_convertibleToken, _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isConvertibleTokenSmartToken(address,address), txdata: 0x725b8786, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: isConvertibleTokenSmartToken(address,address)
PC address: 5750
Estimated Gas Usage: 4739 - 74664
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:467

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).isConvertibleTokenSmartToken(_convertibleToken, _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isConvertibleTokenSmartToken(address,address), txdata: 0x725b8786, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: getLiquidityPoolCount()
PC address: 6374
Estimated Gas Usage: 4594 - 74329
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:412

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).getLiquidityPoolCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getLiquidityPoolCount(), txdata: 0x7a5f0ffd, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: getLiquidityPoolCount()
PC address: 6374
Estimated Gas Usage: 4594 - 74329
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:412

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).getLiquidityPoolCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getLiquidityPoolCount(), txdata: 0x7a5f0ffd, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: getConvertibleToken(uint256)
PC address: 6921
Estimated Gas Usage: 4761 - 74591
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:442

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).getConvertibleToken(_index)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getConvertibleToken(uint256), txdata: 0x865cf194, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: getConvertibleToken(uint256)
PC address: 6921
Estimated Gas Usage: 4761 - 74591
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:442

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).getConvertibleToken(_index)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getConvertibleToken(uint256), txdata: 0x865cf194, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: isConverterValid(address)
PC address: 7132
Estimated Gas Usage: 13987 - 290479
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:472

ISmartTokenController(_converter).token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 80808080808080808080808001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isConverterValid(address), txdata: 0x954254f5efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 7132
Estimated Gas Usage: 32643 - 552472
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:472

ISmartTokenController(_converter).token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 7132
Estimated Gas Usage: 34994 - 623617
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:472

ISmartTokenController(_converter).token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dcefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: isConverterValid(address)
PC address: 7295
Estimated Gas Usage: 13987 - 290479
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:475

token.totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isConverterValid(address), txdata: 0x954254f5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 7295
Estimated Gas Usage: 32643 - 552472
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:475

token.totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 7295
Estimated Gas Usage: 34994 - 623617
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:475

token.totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: isConverterValid(address)
PC address: 7295
Estimated Gas Usage: 13987 - 290479
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:475

token.totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isConverterValid(address), txdata: 0x954254f5, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 7295
Estimated Gas Usage: 32643 - 552472
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:475

token.totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 7295
Estimated Gas Usage: 34994 - 623617
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:475

token.totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: isConverterValid(address)
PC address: 7484
Estimated Gas Usage: 13987 - 290479
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:475

token.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isConverterValid(address), txdata: 0x954254f5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 7484
Estimated Gas Usage: 34994 - 623617
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:475

token.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: isConverterValid(address)
PC address: 7484
Estimated Gas Usage: 13987 - 290479
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:475

token.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [CREATOR], function: isConverterValid(address), txdata: 0x954254f5, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 7484
Estimated Gas Usage: 32643 - 552472
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:475

token.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 7484
Estimated Gas Usage: 34994 - 623617
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:475

token.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: isConverterValid(address)
PC address: 7682
Estimated Gas Usage: 13987 - 290479
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:479

_converter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 80808080808080808080808001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isConverterValid(address), txdata: 0x954254f5efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 7682
Estimated Gas Usage: 34994 - 623617
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:479

_converter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dcefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: isConverterValid(address)
PC address: 7682
Estimated Gas Usage: 13987 - 290479
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:479

_converter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000010, decoded_data: , value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: isConverterValid(address), txdata: 0x954254f5, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 7682
Estimated Gas Usage: 34994 - 623617
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:479

_converter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 7682
Estimated Gas Usage: 32643 - 552472
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:479

_converter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 7871
Estimated Gas Usage: 32643 - 552472
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:481

_converter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: isConverterValid(address)
PC address: 7871
Estimated Gas Usage: 13987 - 290479
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:481

_converter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 80808080808080808080808001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isConverterValid(address), txdata: 0x954254f5efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 7871
Estimated Gas Usage: 34994 - 623617
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:481

_converter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dcefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: isConverterValid(address)
PC address: 7871
Estimated Gas Usage: 13987 - 290479
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:481

_converter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [CREATOR], function: isConverterValid(address), txdata: 0x954254f5, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 7871
Estimated Gas Usage: 34994 - 623617
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:481

_converter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 7871
Estimated Gas Usage: 32643 - 552472
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:481

_converter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 8089
Estimated Gas Usage: 32643 - 552472
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:482

reserveToken.balanceOf(_converter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: isConverterValid(address)
PC address: 8089
Estimated Gas Usage: 13987 - 290479
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:482

reserveToken.balanceOf(_converter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: isConverterValid(address), txdata: 0x954254f5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 8089
Estimated Gas Usage: 34994 - 623617
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:482

reserveToken.balanceOf(_converter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: isConverterValid(address)
PC address: 8089
Estimated Gas Usage: 13987 - 290479
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:482

reserveToken.balanceOf(_converter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0
Caller: [CREATOR], function: isConverterValid(address), txdata: 0x954254f5, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 8089
Estimated Gas Usage: 34994 - 623617
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:482

reserveToken.balanceOf(_converter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 8089
Estimated Gas Usage: 32643 - 552472
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:482

reserveToken.balanceOf(_converter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0
Caller: [ATTACKER], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 8447
Estimated Gas Usage: 32643 - 552472
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:375

ISmartTokenController(_converter).token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 8447
Estimated Gas Usage: 22668 - 335505
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:375

ISmartTokenController(_converter).token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 8447
Estimated Gas Usage: 32643 - 552472
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:375

ISmartTokenController(_converter).token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 8608
Estimated Gas Usage: 32643 - 552472
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:376

_converter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 8608
Estimated Gas Usage: 22668 - 335505
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:376

_converter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [CREATOR], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 8608
Estimated Gas Usage: 32643 - 552472
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:376

_converter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 8847
Estimated Gas Usage: 32643 - 552472
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:387

_converter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 8847
Estimated Gas Usage: 27660 - 443898
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:387

_converter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 8847
Estimated Gas Usage: 32643 - 552472
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:387

_converter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: getSmartToken(uint256)
PC address: 9085
Estimated Gas Usage: 4849 - 74679
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:402

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).getSmartToken(_index)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getSmartToken(uint256), txdata: 0xa109d214, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: getSmartToken(uint256)
PC address: 9085
Estimated Gas Usage: 4849 - 74679
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:402

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).getSmartToken(_index)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getSmartToken(uint256), txdata: 0xa109d214, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: getConvertibleTokenSmartTokenCount(address)
PC address: 9348
Estimated Gas Usage: 4877 - 74707
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:452

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).getConvertibleTokenSmartTokenCount(_convertibleToken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getConvertibleTokenSmartTokenCount(address), txdata: 0xa43d5e94, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: getConvertibleTokenSmartTokenCount(address)
PC address: 9348
Estimated Gas Usage: 4877 - 74707
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:452

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).getConvertibleTokenSmartTokenCount(_convertibleToken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getConvertibleTokenSmartTokenCount(address), txdata: 0xa43d5e94, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: getLiquidityPool(uint256)
PC address: 9567
Estimated Gas Usage: 4893 - 74723
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:422

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).getLiquidityPool(_index)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getLiquidityPool(uint256), txdata: 0xa74498aa, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: getLiquidityPool(uint256)
PC address: 9567
Estimated Gas Usage: 4893 - 74723
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:422

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).getLiquidityPool(_index)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getLiquidityPool(uint256), txdata: 0xa74498aa, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: getConvertibleTokenSmartToken(address,uint256)
PC address: 10015
Estimated Gas Usage: 5051 - 74976
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:462

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).getConvertibleTokenSmartToken(_convertibleToken, _index)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getConvertibleTokenSmartToken(address,uint256), txdata: 0xd6c4b5b2, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: getConvertibleTokenSmartToken(address,uint256)
PC address: 10015
Estimated Gas Usage: 5051 - 74976
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:462

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).getConvertibleTokenSmartToken(_convertibleToken, _index)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getConvertibleTokenSmartToken(address,uint256), txdata: 0xd6c4b5b2, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: getSmartTokenCount()
PC address: 10224
Estimated Gas Usage: 4902 - 74637
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:392

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).getSmartTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getSmartTokenCount(), txdata: 0xe571049b, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: getSmartTokenCount()
PC address: 10224
Estimated Gas Usage: 4902 - 74637
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:392

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).getSmartTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getSmartTokenCount(), txdata: 0xe571049b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: isLiquidityPool(address)
PC address: 10485
Estimated Gas Usage: 5043 - 74873
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:427

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).isLiquidityPool(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isLiquidityPool(address), txdata: 0xe85455d7, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: isLiquidityPool(address)
PC address: 10485
Estimated Gas Usage: 5043 - 74873
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:427

IBancorConverterRegistryData(addressOf(BANCOR_CONVERTER_REGISTRY_DATA)).isLiquidityPool(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: isLiquidityPool(address), txdata: 0xe85455d7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 11243
Estimated Gas Usage: 32643 - 552472
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 11243
Estimated Gas Usage: 34994 - 623617
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dcefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: getConvertibleTokenCount()
PC address: 11393
Estimated Gas Usage: 4506 - 74241
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: getConvertibleTokenCount(), txdata: 0x69be4784, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: isConvertibleToken(address)
PC address: 11393
Estimated Gas Usage: 4515 - 74345
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: isConvertibleToken(address), txdata: 0x3ab8857c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: getLiquidityPoolCount()
PC address: 11393
Estimated Gas Usage: 4594 - 74329
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: getLiquidityPoolCount(), txdata: 0x7a5f0ffd, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: isSmartToken(address)
PC address: 11393
Estimated Gas Usage: 4537 - 74367
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: isSmartToken(address), txdata: 0x4123ef60, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: getConvertibleToken(uint256)
PC address: 11393
Estimated Gas Usage: 4761 - 74591
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: getConvertibleToken(uint256), txdata: 0x865cf194, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: isConvertibleTokenSmartToken(address,address)
PC address: 11393
Estimated Gas Usage: 4739 - 74664
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: isConvertibleTokenSmartToken(address,address), txdata: 0x725b8786, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: getSmartTokenCount()
PC address: 11393
Estimated Gas Usage: 4902 - 74637
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: getSmartTokenCount(), txdata: 0xe571049b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: getSmartToken(uint256)
PC address: 11393
Estimated Gas Usage: 4849 - 74679
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: getSmartToken(uint256), txdata: 0xa109d214, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: getConvertibleTokenSmartTokenCount(address)
PC address: 11393
Estimated Gas Usage: 4877 - 74707
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: getConvertibleTokenSmartTokenCount(address), txdata: 0xa43d5e94, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: getLiquidityPool(uint256)
PC address: 11393
Estimated Gas Usage: 4893 - 74723
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: getLiquidityPool(uint256), txdata: 0xa74498aa, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: updateRegistry()
PC address: 11393
Estimated Gas Usage: 18855 - 130054
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: isLiquidityPool(address)
PC address: 11393
Estimated Gas Usage: 5043 - 74873
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: isLiquidityPool(address), txdata: 0xe85455d7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: getConvertibleTokenSmartToken(address,uint256)
PC address: 11393
Estimated Gas Usage: 5051 - 74976
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: getConvertibleTokenSmartToken(address,uint256), txdata: 0xd6c4b5b2, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 11393
Estimated Gas Usage: 32643 - 552472
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 11393
Estimated Gas Usage: 26023 - 407794
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 11393
Estimated Gas Usage: 32643 - 552472
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 11393
Estimated Gas Usage: 34994 - 623617
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:178

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dcefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 11614
Estimated Gas Usage: 34994 - 623617
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:491

_converterRegistryData.addSmartToken(_smartToken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 11614
Estimated Gas Usage: 28234 - 478609
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:491

_converterRegistryData.addSmartToken(_smartToken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 11614
Estimated Gas Usage: 34994 - 623617
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:491

_converterRegistryData.addSmartToken(_smartToken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dcefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 11864
Estimated Gas Usage: 34994 - 623617
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:503

_converterRegistryData.addLiquidityPool(_liquidityPool)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 11864
Estimated Gas Usage: 34994 - 623617
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:503

_converterRegistryData.addLiquidityPool(_liquidityPool)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 80808080808080808080808001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 11864
Estimated Gas Usage: 34994 - 623617
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:503

_converterRegistryData.addLiquidityPool(_liquidityPool)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dcefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 12166
Estimated Gas Usage: 34994 - 623617
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:515

_converterRegistryData.addConvertibleToken(_convertibleToken, _smartToken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 12166
Estimated Gas Usage: 27139 - 477258
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:515

_converterRegistryData.addConvertibleToken(_convertibleToken, _smartToken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: addConverter(address)
PC address: 12166
Estimated Gas Usage: 34994 - 623617
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:515

_converterRegistryData.addConvertibleToken(_convertibleToken, _smartToken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dcefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 12440
Estimated Gas Usage: 32643 - 552472
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:497

_converterRegistryData.removeSmartToken(_smartToken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 12440
Estimated Gas Usage: 27660 - 443898
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:497

_converterRegistryData.removeSmartToken(_smartToken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 12440
Estimated Gas Usage: 32643 - 552472
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:497

_converterRegistryData.removeSmartToken(_smartToken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 12690
Estimated Gas Usage: 32643 - 552472
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:509

_converterRegistryData.removeLiquidityPool(_liquidityPool)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 12690
Estimated Gas Usage: 22668 - 335505
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:509

_converterRegistryData.removeLiquidityPool(_liquidityPool)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [CREATOR], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 12690
Estimated Gas Usage: 32643 - 552472
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:509

_converterRegistryData.removeLiquidityPool(_liquidityPool)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 12992
Estimated Gas Usage: 32643 - 552472
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:521

_converterRegistryData.removeConvertibleToken(_convertibleToken, _smartToken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 12992
Estimated Gas Usage: 18193 - 261650
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:521

_converterRegistryData.removeConvertibleToken(_convertibleToken, _smartToken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [ATTACKER], function: addConverter(address), txdata: 0x6ce1c4dc, value: 0x0
Caller: [CREATOR], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BancorConverterRegistry
Function name: removeConverter(address)
PC address: 12992
Estimated Gas Usage: 32643 - 552472
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9876b4f94e6035304bf792375c53136be158c3d8.sol:521

_converterRegistryData.removeConvertibleToken(_convertibleToken, _smartToken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: removeConverter(address), txdata: 0x9e76a007, value: 0x0


time_used: 36113.12805724144 seconds
#@contract_info_time
0x9876b4f94e6035304bf792375c53136be158c3d8.sol:0.4.26:BancorConverterRegistry:36113.12805724144:36100:60:36000
