++++ 0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol  :  0.5.16  :  ShareholderVomer ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 8540
['constructor']:writes at the last depth:[]
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 61.74% coverage.
dynamic svars:['56', '60', '59', '68', '58', '57', '65', '69', '64']
static svars:['51', '0', '54', '55', '53', '61', '70', '71', '52', '67', '63', '66']
Ending preprocessing.
preprocessing time(s): 101.79647183418274
contract coverage: 36.91%
updatePaymentMode(address,uint256,uint256) is not reachable
transferTokens(address,address,uint256) is not reachable
withdraw(uint256) is not reachable
fallback is not reachable
takeEth(address,uint256) is not reachable
acceptOwner() is not reachable
setPartnerContract(address,int256) is not reachable
lockFunds(uint256) is not reachable
setAdmin(address,bool) is not reachable
setDepositTokens(address[],uint256[]) is not reachable
setUserLimitVMR(address[],uint256[]) is not reachable
changeIndividualVMRCup(address,uint256) is not reachable
setSupportAddress(address) is not reachable
changeOwnerCandidate(address) is not reachable
updateTokenRate(address,uint256) is not reachable
giveBackEth() is not reachable
changeMinBalance(uint256) is not reachable
initialize() is not reachable
Function Reads: State variables read in conditions
	acceptOwner():[]
	changeIndividualVMRCup(address,uint256):[]
	dateUntilFundsLocked():[]
	getInfo(address):[]
	newOwnerCandidate():[]
	updatePaymentMode(address,uint256,uint256):[]
	getUserProfitByToken(address,address):[]
	owner():[]
	transferTokens(address,address,uint256):[]
	setSupportAddress(address):[]
	giveBackEth():[]
	initialize():[]
	fundsLockedtoWithdraw():[]
	lockFunds(uint256):[]
	getPartnerInfo(address):[]
	changeOwnerCandidate(address):[]
	setDepositTokens(address[],uint256[]):[]
	takeEth(address,uint256):[]
	setPartnerContract(address,int256):[]
	setAdmin(address,bool):[]
	changeMinBalance(uint256):[]
	getPaymentInfo():[]
	supportAddress():[]
	updateTokenRate(address,uint256):[]
	setUserLimitVMR(address[],uint256[]):[]
	withdraw(uint256):[]
	admins(address):[]
Function Writes: State variables written
	acceptOwner():['51']
	giveBackEth():['60']
	initialize():['0', '54', '55', '53', '56', '51', '61']
	changeMinBalance(uint256):['53']
	lockFunds(uint256):['70', '71']
	changeOwnerCandidate(address):['52']
	setSupportAddress(address):['67']
	changeIndividualVMRCup(address,uint256):['59']
	setPartnerContract(address,int256):['60']
	updateTokenRate(address,uint256):['68']
	setAdmin(address,bool):['58']
	takeEth(address,uint256):['60']
	updatePaymentMode(address,uint256,uint256):['61', '63', '66']
	fallback:['56']
============================
iteration:3
targets:['updatePaymentMode(address,uint256,uint256)', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'fallback', 'takeEth(address,uint256)', 'acceptOwner()', 'setPartnerContract(address,int256)', 'lockFunds(uint256)', 'setAdmin(address,bool)', 'setDepositTokens(address[],uint256[])', 'setUserLimitVMR(address[],uint256[])', 'changeIndividualVMRCup(address,uint256)', 'setSupportAddress(address)', 'changeOwnerCandidate(address)', 'updateTokenRate(address,uint256)', 'giveBackEth()', 'changeMinBalance(uint256)', 'initialize()']
['giveBackEth()']:writes at the last depth:[]
['initialize()']:writes at the last depth:['55', '53', '61', '0', '56', '51', '54']
contract coverage: 55.73%
============================
iteration:4
['initialize()', 'fallback']:writes at the last depth:[]
['initialize()', 'fallback']:writes at the last depth:[]
['initialize()', 'fallback']:writes at the last depth:[]
['initialize()', 'fallback']:writes at the last depth:[]
['initialize()', 'fallback']:writes at the last depth:[]
['initialize()', 'fallback']:writes at the last depth:[]
['initialize()', 'fallback']:writes at the last depth:[]
['initialize()', 'fallback']:writes at the last depth:[]
['initialize()', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'setSupportAddress(address)']:writes at the last depth:['67']
['initialize()', 'lockFunds(uint256)']:writes at the last depth:['70', '71']
['initialize()', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 55.73%
============================
iteration:5
['initialize()', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'setSupportAddress(address)']:writes at the last depth:['67']
['initialize()', 'transferTokens(address,address,uint256)', 'lockFunds(uint256)']:writes at the last depth:['70', '71']
['initialize()', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 55.73%
============================
iteration:6
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setSupportAddress(address)']:writes at the last depth:['67']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'lockFunds(uint256)']:writes at the last depth:['70', '71']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 55.73%
============================
iteration:7
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setSupportAddress(address)']:writes at the last depth:['67']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'lockFunds(uint256)']:writes at the last depth:['70', '71']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 55.73%
============================
iteration:8
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setSupportAddress(address)']:writes at the last depth:['67']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'lockFunds(uint256)']:writes at the last depth:['70', '71']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 55.73%
============================
iteration:9
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setSupportAddress(address)']:writes at the last depth:['67']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'lockFunds(uint256)']:writes at the last depth:['70', '71']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 55.73%
============================
iteration:10
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'setSupportAddress(address)']:writes at the last depth:['67']
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'lockFunds(uint256)']:writes at the last depth:['70', '71']
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'withdraw(uint256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 69.41%
============================
iteration:11
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'setSupportAddress(address)']:writes at the last depth:['67']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'lockFunds(uint256)']:writes at the last depth:['70', '71']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'updateTokenRate(address,uint256)']:writes at the last depth:['68']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'setUserLimitVMR(address[],uint256[])']:writes at the last depth:['']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'setUserLimitVMR(address[],uint256[])']:writes at the last depth:['']
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setAdmin(address,bool)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
contract coverage: 71.45%
============================
iteration:12
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'fallback']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'giveBackEth()']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'changeMinBalance(uint256)']:writes at the last depth:['53']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'changeOwnerCandidate(address)']:writes at the last depth:['52']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'giveBackEth()']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'setSupportAddress(address)']:writes at the last depth:['67']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'lockFunds(uint256)']:writes at the last depth:['70', '71']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'changeIndividualVMRCup(address,uint256)']:writes at the last depth:['59']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'setPartnerContract(address,int256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'setAdmin(address,bool)']:writes at the last depth:['58']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'withdraw(uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'transferTokens(address,address,uint256)']:writes at the last depth:[]
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'takeEth(address,uint256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'takeEth(address,uint256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'takeEth(address,uint256)']:writes at the last depth:['60']
['initialize()', 'transferTokens(address,address,uint256)', 'setPartnerContract(address,int256)', 'takeEth(address,uint256)']:writes at the last depth:['60']
contract coverage: 71.45%
============================
iteration:13
contract coverage: 71.45%
============================
iteration:14
contract coverage: 71.45%
============================
iteration:15
contract coverage: 71.45%
============================
iteration:16
contract coverage: 71.45%
============================
iteration:17
contract coverage: 71.45%
============================
iteration:18
contract coverage: 71.45%
============================
iteration:19
contract coverage: 71.45%
============================
iteration:20
contract coverage: 71.45%
============================
iteration:21
contract coverage: 71.45%
============================
iteration:22
contract coverage: 71.45%
============================
iteration:23
contract coverage: 71.45%
============================
iteration:24
contract coverage: 71.45%
============================
iteration:25
contract coverage: 71.45%
============================
iteration:26
contract coverage: 71.45%
============================
iteration:27
contract coverage: 71.45%
============================
iteration:28
contract coverage: 71.45%
============================
iteration:29
contract coverage: 71.45%
============================
iteration:30
contract coverage: 71.45%
============================
iteration:31
contract coverage: 71.45%
============================
iteration:32
contract coverage: 71.45%
============================
iteration:33
contract coverage: 71.45%
============================
iteration:34
contract coverage: 71.45%
============================
iteration:35
contract coverage: 71.45%
============================
iteration:36
contract coverage: 71.45%
============================
iteration:37
contract coverage: 71.45%
============================
iteration:38
contract coverage: 71.45%
============================
iteration:39
contract coverage: 71.45%
============================
iteration:40
contract coverage: 71.45%
============================
iteration:41
contract coverage: 71.45%
============================
iteration:42
contract coverage: 71.45%
============================
iteration:43
contract coverage: 71.45%
============================
iteration:44
contract coverage: 71.45%
============================
iteration:45
contract coverage: 71.45%
============================
iteration:46
contract coverage: 71.45%
============================
iteration:47
contract coverage: 71.45%
#@statespace
5051 nodes, 5050 edges, 69814 total states
#@coverage
Achieved 0.23% coverage for code: 608060405234801561001057600080fd5b50614809806100206000396000f3fe60806040526004361061019c5760003560e01c80638129fc1c116100ec578063d091b5501161008a578063ebbc496511610064578063ebbc496514611119578063eef793d914611130578063f8800fae1461118b578063ffdd5cf1146111b65761019c565b8063d091b55014610fd1578063d6c633e814611028578063e9889b811461108d5761019c565b80638da5cb5b116100c65780638da5cb5b14610ea4578063a64b6e5f14610efb578063a91c64e214610f76578063ab7c63f114610fc75761019c565b80638129fc1c14610e2757806389c3ef6c14610e3e5780638c8f95fb14610e695761019c565b8063446d5b4e1161015957806354f79cf31161013357806354f79cf314610c34578063561a01b814610ca05780635b14319c14610cf15780636d89ffb014610dcc5761019c565b8063446d5b4e14610b415780634b0bddd214610b9c5780634ea18fab14610bf95761019c565b806304da3f19146108ab5780630f6d37d614610910578063226ac3211461096757806325cad82c146109c25780632e1a7d4d14610a9d578063429b62e514610ad8575b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101d457600080fd5b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561022f576108a9565b600034146102a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f455448206465706f73697473206e6f7420616c6c6f776564000000000000000081525060200191505060405180910390fd5b6102af3333611243565b6000603960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000603b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114156103455760355490505b80826003015410156103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4e6f7420656e6f75676820564d52206465706f7369740000000000000000000081525060200191505060405180910390fd5b600082600101541161041c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061474c6031913960400191505060405180910390fd5b6104246115bc565b6000826000015414158015610440575081600001548260020154105b1561057357600061049f62278d0061049185600101544203610483606461047560148a600001546119e690919063ffffffff16565b611a6c90919063ffffffff16565b6119e690919063ffffffff16565b611a6c90919063ffffffff16565b905082600001546104bd846002015483611afb90919063ffffffff16565b11156104fb578260020154836000015411156104f5576104ee83600201548460000154611b8390919063ffffffff16565b90506104fa565b600090505b5b60008111156105715761051b818460020154611afb90919063ffffffff16565b836002018190555060003390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561056e573d6000803e3d6000fd5b50505b505b6000604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506105c03382611c0c565b60006105db603f548360020154611afb90919063ffffffff16565b9050600084600301549050818111156105f2578190505b6000604254118015610605575060425481115b156106105760425490505b600061066662278d006106588860010154420361064a606461063c6014896119e690919063ffffffff16565b611a6c90919063ffffffff16565b6119e690919063ffffffff16565b611a6c90919063ffffffff16565b905060008073ffffffffffffffffffffffffffffffffffffffff168560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106eb578460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661070f565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90506000604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116107c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f546f6b656e2072617465206e6f7420736574000000000000000000000000000081525060200191505060405180910390fd5b6000670de0b6b3a7640000604460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484028161081a57fe5b04905061084833828473ffffffffffffffffffffffffffffffffffffffff16611ea79092919063ffffffff16565b808660000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555042886001018190555050505050505050505b005b3480156108b757600080fd5b506108c0611eba565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b34801561091c57600080fd5b50610925611ef3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561097357600080fd5b506109c06004803603604081101561098a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f19565b005b3480156109ce57600080fd5b50610a9b600480360360408110156109e557600080fd5b8101908080359060200190640100000000811115610a0257600080fd5b820183602082011115610a1457600080fd5b80359060200191846020830284011164010000000083111715610a3657600080fd5b909192939192939080359060200190640100000000811115610a5757600080fd5b820183602082011115610a6957600080fd5b80359060200191846020830284011164010000000083111715610a8b57600080fd5b9091929391929390505050611fb4565b005b348015610aa957600080fd5b50610ad660048036036020811015610ac057600080fd5b81019080803590602001909291905050506120ce565b005b348015610ae457600080fd5b50610b2760048036036020811015610afb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121bc565b604051808215151515815260200191505060405180910390f35b348015610b4d57600080fd5b50610b9a60048036036040811015610b6457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506121dc565b005b348015610ba857600080fd5b50610bf760048036036040811015610bbf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050612292565b005b348015610c0557600080fd5b50610c3260048036036020811015610c1c57600080fd5b8101908080359060200190929190505050612344565b005b348015610c4057600080fd5b50610c8360048036036020811015610c5757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123af565b604051808381526020018281526020019250505060405180910390f35b348015610cac57600080fd5b50610cef60048036036020811015610cc357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612441565b005b348015610cfd57600080fd5b50610dca60048036036040811015610d1457600080fd5b8101908080359060200190640100000000811115610d3157600080fd5b820183602082011115610d4357600080fd5b80359060200191846020830284011164010000000083111715610d6557600080fd5b909192939192939080359060200190640100000000811115610d8657600080fd5b820183602082011115610d9857600080fd5b80359060200191846020830284011164010000000083111715610dba57600080fd5b90919293919293905050506124dc565b005b348015610dd857600080fd5b50610e2560048036036040811015610def57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612766565b005b348015610e3357600080fd5b50610e3c612896565b005b348015610e4a57600080fd5b50610e53612baa565b6040518082815260200191505060405180910390f35b348015610e7557600080fd5b50610ea260048036036020811015610e8c57600080fd5b8101908080359060200190929190505050612bb0565b005b348015610eb057600080fd5b50610eb9612c36565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610f0757600080fd5b50610f7460048036036060811015610f1e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612c5c565b005b348015610f8257600080fd5b50610fc560048036036020811015610f9957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ce3565b005b610fcf612d7e565b005b348015610fdd57600080fd5b50610fe6612e32565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561103457600080fd5b5061108b6004803603606081101561104b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050612e58565b005b34801561109957600080fd5b506110fc600480360360408110156110b057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061304d565b604051808381526020018281526020019250505060405180910390f35b34801561112557600080fd5b5061112e61315b565b005b34801561113c57600080fd5b506111896004803603604081101561115357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061321a565b005b34801561119757600080fd5b506111a06132c3565b6040518082815260200191505060405180910390f35b3480156111c257600080fd5b50611205600480360360208110156111d957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132c9565b6040518082601260200280838360005b83811015611230578082015181840152602081019050611215565b5050505090500191505060405180910390f35b603860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166115b8576000806000603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffdd5cf1866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060806040518083038186803b15801561133857600080fd5b505afa15801561134c573d6000803e3d6000fd5b505050506040513d608081101561136257600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291905050505080935081945082955050505060008311156114d05760006113f7846113e960146113db60646113cd62278d008a6119e690919063ffffffff16565b6119e690919063ffffffff16565b611a6c90919063ffffffff16565b611a6c90919063ffffffff16565b420390506000603960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050604051806080016040528086815260200183815260200184815260200182815250603960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505050505b6001603860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146115b4576001603860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050505b5050565b600073ffffffffffffffffffffffffffffffffffffffff16604160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156119e45760146000369050146116ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f526566657272616c20616464726573732072657175697265640000000000000081525060200191505060405180910390fd5b600061171a6000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050613ba7565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f596f752063616e27742072656620796f757273656c660000000000000000000081525060200191505060405180910390fd5b80604160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301541415611918576001603960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015401604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055506119e2565b6119e1336119dc60466119ce60646119c0604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301546001603960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015401611b8390919063ffffffff16565b6119e690919063ffffffff16565b611a6c90919063ffffffff16565b613bb5565b5b505b565b6000808314156119f95760009050611a66565b6000828402905082848281611a0a57fe5b0414611a61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061472b6021913960400191505060405180910390fd5b809150505b92915050565b6000808211611ae3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b6000828481611aee57fe5b0490508091505092915050565b600080828401905083811015611b79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600082821115611bfb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b600082840390508091505092915050565b6000604560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541415611c625750611ea3565b60008073ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ce5578260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611d09565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90506000604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611dc0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f546f6b656e2072617465206e6f7420736574000000000000000000000000000081525060200191505060405180910390fd5b6000670de0b6b3a7640000604460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484600001540281611e1857fe5b04905060008360000181905550611e5085828473ffffffffffffffffffffffffffffffffffffffff16611ea79092919063ffffffff16565b808360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050505b5050565b611eb48383836000613fff565b50505050565b6000806000603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250603f5491506042549050909192565b604360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611f6c57fe5b80604460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661200757fe5b600084849050905082829050811461201e57600080fd5b60008090505b818161ffff1610156120c65783838261ffff1681811061204057fe5b905060200201356040600088888561ffff1681811061205b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055508080600101915050612024565b505050505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461212557fe5b426047541115612150576046546121458247611b8390919063ffffffff16565b1161214f57600080fd5b5b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156121b8573d6000803e3d6000fd5b5050565b603a6020528060005260406000206000915054906101000a900460ff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461223357fe5b600081121561224157600080fd5b6000603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160000181905550505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146122e957fe5b80603a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461239b57fe5b670de0b6b3a7640000810260358190555050565b600080603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549150603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050915091565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461249857fe5b80603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661252f57fe5b600084849050905082829050811461254657600080fd5b60008090505b818161ffff16101561275e5760006039600088888561ffff1681811061256e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006040600089898661ffff168181106125dd57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160030154141561265457600182600301540181600301819055505b60008260010154141561266b574282600101819055505b816003015486868561ffff1681811061268057fe5b90506020020135111561272f576000826003015487878661ffff168181106126a457fe5b905060200201350390506126e489898661ffff168181106126c157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1682613bb5565b61272161270e60646127006046856119e690919063ffffffff16565b611a6c90919063ffffffff16565b8460030154611afb90919063ffffffff16565b83600301819055505061274f565b85858461ffff1681811061273f57fe5b9050602002013582600301819055505b5050808060010191505061254c565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561279f573391505b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160010154826000015401136127f957600080fd5b818160010154826000015401101561281057600080fd5b81816001016000828254039250508190555061282c838361415b565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f14ab110831c9d210715b0adedbc67b2f0b80c10ad2853488332d1e4fbd85f81d846040518082815260200191505060405180910390a3505050565b600060019054906101000a900460ff16806128b557506128b46141d9565b5b806128cc57506000809054906101000a900460ff16155b612921576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061477d602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612971576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b73063b98a414eaa1d4a5d4fc235a22db1427199024603660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550739c235ac2c33077a30593a3fd27a0087c687a80a3603760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550683635c9adc5dea000006035819055506001603860007312a09763ec6e5b7cbc4feb7178db8c91a79e456a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016038600073b7722517f410914fff62df357a0c14b88efb936973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555033603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000603d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015612ba75760008060016101000a81548160ff0219169083151502179055505b50565b60465481565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612c0757fe5b426047541115612c20576046548111612c1f57600080fd5b5b8060468190555062278d00420160478190555050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612cb357fe5b612cde82828573ffffffffffffffffffffffffffffffffffffffff16611ea79092919063ffffffff16565b505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612d3a57fe5b80604360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541315612de1573481600101600082825401925050819055505b3373ffffffffffffffffffffffffffffffffffffffff167fac51d2759ef9a0c22072ba515685b302d83fa6ff1d5ec2948396ac46e82d864c346040518082815260200191505060405180910390a250565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612eaf57fe5b6000604460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411612f64576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f546f6b656e2072617465206e6f7420736574000000000000000000000000000081525060200191505060405180910390fd5b6000612f8f308573ffffffffffffffffffffffffffffffffffffffff166141f090919063ffffffff16565b11612fe5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806147026029913960400191505060405180910390fd5b82603d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a76400008202603f81905550670de0b6b3a76400008102604281905550505050565b600080604060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150604560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509250929050565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146131b557600080fd5b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461327157fe5b670de0b6b3a76400008102603b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60475481565b6132d161467f565b47816003601281106132df57fe5b602002018181525050603b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548160056012811061333557fe5b60200201818152505060008160056012811061334d57fe5b60200201511415613372576035548160056012811061336857fe5b6020020181815250505b61337a6146a2565b603960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050603860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166135bd576000603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffdd5cf1856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060806040518083038186803b1580156134e057600080fd5b505afa1580156134f4573d6000803e3d6000fd5b505050506040513d608081101561350a57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505050846000018560400182815250829450838152505050506000826000015111156135bb576135af82600001516135a16014613593606461358562278d00886119e690919063ffffffff16565b6119e690919063ffffffff16565b611a6c90919063ffffffff16565b611a6c90919063ffffffff16565b42038260200181815250505b505b8060000151826000601281106135cf57fe5b6020020181815250506000816000015111156136545761363d62278d0061362f836020015142036136216064613613601488600001516119e690919063ffffffff16565b611a6c90919063ffffffff16565b6119e690919063ffffffff16565b611a6c90919063ffffffff16565b8260016012811061364a57fe5b6020020181815250505b80604001518260026012811061366657fe5b60200201818152505080606001518260046012811061368157fe5b6020020181815250506136926146ca565b604060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815250509050806020015183600b6012811061375a57fe5b602002018181525050806040015183600c6012811061377557fe5b6020020181815250506137a4603f5484600b6012811061379157fe5b6020020151611afb90919063ffffffff16565b83600d601281106137b157fe5b602002018181525050816060015183600e601281106137cc57fe5b60200201818152505082600d601281106137e257fe5b602002015183600e601281106137f457fe5b602002015111156138285782600d6012811061380c57fe5b602002015183600e6012811061381e57fe5b6020020181815250505b600060425411801561384c575060425483600e6012811061384557fe5b6020020151115b1561386b5760425483600e6012811061386157fe5b6020020181815250505b6000826020015111156138f4576138dd62278d006138cf846020015142036138c160646138b360148a600e601281106138a057fe5b60200201516119e690919063ffffffff16565b611a6c90919063ffffffff16565b6119e690919063ffffffff16565b611a6c90919063ffffffff16565b836006601281106138ea57fe5b6020020181815250505b60008073ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161461393757816000015161395b565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90508073ffffffffffffffffffffffffffffffffffffffff1684600a6012811061398157fe5b602002018181525050670de0b6b3a7640000604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054856006601281106139e057fe5b602002015102816139ed57fe5b04846007601281106139fb57fe5b6020020181815250506000604560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806000015485600f60128110613a5957fe5b6020020181815250508060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485601060128110613ab157fe5b602002018181525050670de0b6b3a7640000604460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600001540281613b1057fe5b0485601160128110613b1e57fe5b602002018181525050604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485600960128110613b7457fe5b602002018181525050613b87868361304d565b5085600860128110613b9557fe5b60200201818152505050505050919050565b600060148201519050919050565b6000604160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613c545750613ffb565b613ccf613c7e6064613c706019866119e690919063ffffffff16565b611a6c90919063ffffffff16565b604560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154611afb90919063ffffffff16565b604560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060008073ffffffffffffffffffffffffffffffffffffffff16604360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613d9457604360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613db8565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b9050613e35613de46064613dd66005876119e690919063ffffffff16565b611a6c90919063ffffffff16565b604560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154611afb90919063ffffffff16565b604560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060008090505b60038160ff161015613ff757613f08613eb76064613ea96046886119e690919063ffffffff16565b611a6c90919063ffffffff16565b604060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154611afb90919063ffffffff16565b604060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550604160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613fea57613ff7565b8080600101915050613e81565b5050505b5050565b6000808314156140125760019050614153565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061408c575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b156141235781156140d3578373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050509050614153565b8373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015614119573d6000803e3d6000fd5b5060019050614153565b61414e84848773ffffffffffffffffffffffffffffffffffffffff166143509092919063ffffffff16565b600190505b949350505050565b600082905060008173ffffffffffffffffffffffffffffffffffffffff168360405180600001905060006040518083038185875af1925050503d80600081146141c0576040519150601f19603f3d011682016040523d82523d6000602084013e6141c5565b606091505b50509050806141d357600080fd5b50505050565b6000803090506000813b9050600081149250505090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061426b575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b1561428f578173ffffffffffffffffffffffffffffffffffffffff1631905061434a565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561430c57600080fd5b505afa158015614320573d6000803e3d6000fd5b505050506040513d602081101561433657600080fd5b810190808051906020019092919050505090505b92915050565b61441c838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614421565b505050565b6144408273ffffffffffffffffffffffffffffffffffffffff1661466c565b6144b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e74726163740081525060200191505060405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b6020831061450157805182526020820191506020810190506020830392506144de565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614563576040519150601f19603f3d011682016040523d82523d6000602084013e614568565b606091505b5091509150816145e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656481525060200191505060405180910390fd5b600081511115614666578080602001905160208110156145ff57600080fd5b8101908080519060200190929190505050614665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806147ab602a913960400191505060405180910390fd5b5b50505050565b600080823b905060008111915050919050565b604051806102400160405280601290602082028038833980820191505090505090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152509056fe436f6e74726163742062616c616e636520666f722074617267657420746f6b656e206973207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77496e76616c696420757365722073746174652c20796f752073686f756c64206465706f73697420564d5220746f6b656e73436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a265627a7a723158200b49e22b85a9c167bf170c33d4fbdec209b7a3206ff48181a2ff834a10c8812964736f6c63430005100032
#@coverage
Achieved 71.45% coverage for code: 60806040526004361061019c5760003560e01c80638129fc1c116100ec578063d091b5501161008a578063ebbc496511610064578063ebbc496514611119578063eef793d914611130578063f8800fae1461118b578063ffdd5cf1146111b65761019c565b8063d091b55014610fd1578063d6c633e814611028578063e9889b811461108d5761019c565b80638da5cb5b116100c65780638da5cb5b14610ea4578063a64b6e5f14610efb578063a91c64e214610f76578063ab7c63f114610fc75761019c565b80638129fc1c14610e2757806389c3ef6c14610e3e5780638c8f95fb14610e695761019c565b8063446d5b4e1161015957806354f79cf31161013357806354f79cf314610c34578063561a01b814610ca05780635b14319c14610cf15780636d89ffb014610dcc5761019c565b8063446d5b4e14610b415780634b0bddd214610b9c5780634ea18fab14610bf95761019c565b806304da3f19146108ab5780630f6d37d614610910578063226ac3211461096757806325cad82c146109c25780632e1a7d4d14610a9d578063429b62e514610ad8575b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101d457600080fd5b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561022f576108a9565b600034146102a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f455448206465706f73697473206e6f7420616c6c6f776564000000000000000081525060200191505060405180910390fd5b6102af3333611243565b6000603960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000603b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114156103455760355490505b80826003015410156103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4e6f7420656e6f75676820564d52206465706f7369740000000000000000000081525060200191505060405180910390fd5b600082600101541161041c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061474c6031913960400191505060405180910390fd5b6104246115bc565b6000826000015414158015610440575081600001548260020154105b1561057357600061049f62278d0061049185600101544203610483606461047560148a600001546119e690919063ffffffff16565b611a6c90919063ffffffff16565b6119e690919063ffffffff16565b611a6c90919063ffffffff16565b905082600001546104bd846002015483611afb90919063ffffffff16565b11156104fb578260020154836000015411156104f5576104ee83600201548460000154611b8390919063ffffffff16565b90506104fa565b600090505b5b60008111156105715761051b818460020154611afb90919063ffffffff16565b836002018190555060003390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561056e573d6000803e3d6000fd5b50505b505b6000604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506105c03382611c0c565b60006105db603f548360020154611afb90919063ffffffff16565b9050600084600301549050818111156105f2578190505b6000604254118015610605575060425481115b156106105760425490505b600061066662278d006106588860010154420361064a606461063c6014896119e690919063ffffffff16565b611a6c90919063ffffffff16565b6119e690919063ffffffff16565b611a6c90919063ffffffff16565b905060008073ffffffffffffffffffffffffffffffffffffffff168560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106eb578460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661070f565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90506000604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116107c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f546f6b656e2072617465206e6f7420736574000000000000000000000000000081525060200191505060405180910390fd5b6000670de0b6b3a7640000604460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484028161081a57fe5b04905061084833828473ffffffffffffffffffffffffffffffffffffffff16611ea79092919063ffffffff16565b808660000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555042886001018190555050505050505050505b005b3480156108b757600080fd5b506108c0611eba565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b34801561091c57600080fd5b50610925611ef3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561097357600080fd5b506109c06004803603604081101561098a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f19565b005b3480156109ce57600080fd5b50610a9b600480360360408110156109e557600080fd5b8101908080359060200190640100000000811115610a0257600080fd5b820183602082011115610a1457600080fd5b80359060200191846020830284011164010000000083111715610a3657600080fd5b909192939192939080359060200190640100000000811115610a5757600080fd5b820183602082011115610a6957600080fd5b80359060200191846020830284011164010000000083111715610a8b57600080fd5b9091929391929390505050611fb4565b005b348015610aa957600080fd5b50610ad660048036036020811015610ac057600080fd5b81019080803590602001909291905050506120ce565b005b348015610ae457600080fd5b50610b2760048036036020811015610afb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121bc565b604051808215151515815260200191505060405180910390f35b348015610b4d57600080fd5b50610b9a60048036036040811015610b6457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506121dc565b005b348015610ba857600080fd5b50610bf760048036036040811015610bbf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050612292565b005b348015610c0557600080fd5b50610c3260048036036020811015610c1c57600080fd5b8101908080359060200190929190505050612344565b005b348015610c4057600080fd5b50610c8360048036036020811015610c5757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123af565b604051808381526020018281526020019250505060405180910390f35b348015610cac57600080fd5b50610cef60048036036020811015610cc357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612441565b005b348015610cfd57600080fd5b50610dca60048036036040811015610d1457600080fd5b8101908080359060200190640100000000811115610d3157600080fd5b820183602082011115610d4357600080fd5b80359060200191846020830284011164010000000083111715610d6557600080fd5b909192939192939080359060200190640100000000811115610d8657600080fd5b820183602082011115610d9857600080fd5b80359060200191846020830284011164010000000083111715610dba57600080fd5b90919293919293905050506124dc565b005b348015610dd857600080fd5b50610e2560048036036040811015610def57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612766565b005b348015610e3357600080fd5b50610e3c612896565b005b348015610e4a57600080fd5b50610e53612baa565b6040518082815260200191505060405180910390f35b348015610e7557600080fd5b50610ea260048036036020811015610e8c57600080fd5b8101908080359060200190929190505050612bb0565b005b348015610eb057600080fd5b50610eb9612c36565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610f0757600080fd5b50610f7460048036036060811015610f1e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612c5c565b005b348015610f8257600080fd5b50610fc560048036036020811015610f9957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ce3565b005b610fcf612d7e565b005b348015610fdd57600080fd5b50610fe6612e32565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561103457600080fd5b5061108b6004803603606081101561104b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050612e58565b005b34801561109957600080fd5b506110fc600480360360408110156110b057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061304d565b604051808381526020018281526020019250505060405180910390f35b34801561112557600080fd5b5061112e61315b565b005b34801561113c57600080fd5b506111896004803603604081101561115357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061321a565b005b34801561119757600080fd5b506111a06132c3565b6040518082815260200191505060405180910390f35b3480156111c257600080fd5b50611205600480360360208110156111d957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132c9565b6040518082601260200280838360005b83811015611230578082015181840152602081019050611215565b5050505090500191505060405180910390f35b603860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166115b8576000806000603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffdd5cf1866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060806040518083038186803b15801561133857600080fd5b505afa15801561134c573d6000803e3d6000fd5b505050506040513d608081101561136257600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291905050505080935081945082955050505060008311156114d05760006113f7846113e960146113db60646113cd62278d008a6119e690919063ffffffff16565b6119e690919063ffffffff16565b611a6c90919063ffffffff16565b611a6c90919063ffffffff16565b420390506000603960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050604051806080016040528086815260200183815260200184815260200182815250603960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505050505b6001603860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146115b4576001603860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050505b5050565b600073ffffffffffffffffffffffffffffffffffffffff16604160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156119e45760146000369050146116ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f526566657272616c20616464726573732072657175697265640000000000000081525060200191505060405180910390fd5b600061171a6000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050613ba7565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f596f752063616e27742072656620796f757273656c660000000000000000000081525060200191505060405180910390fd5b80604160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301541415611918576001603960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015401604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055506119e2565b6119e1336119dc60466119ce60646119c0604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301546001603960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015401611b8390919063ffffffff16565b6119e690919063ffffffff16565b611a6c90919063ffffffff16565b613bb5565b5b505b565b6000808314156119f95760009050611a66565b6000828402905082848281611a0a57fe5b0414611a61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061472b6021913960400191505060405180910390fd5b809150505b92915050565b6000808211611ae3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b6000828481611aee57fe5b0490508091505092915050565b600080828401905083811015611b79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600082821115611bfb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b600082840390508091505092915050565b6000604560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541415611c625750611ea3565b60008073ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ce5578260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611d09565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90506000604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611dc0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f546f6b656e2072617465206e6f7420736574000000000000000000000000000081525060200191505060405180910390fd5b6000670de0b6b3a7640000604460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484600001540281611e1857fe5b04905060008360000181905550611e5085828473ffffffffffffffffffffffffffffffffffffffff16611ea79092919063ffffffff16565b808360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050505b5050565b611eb48383836000613fff565b50505050565b6000806000603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250603f5491506042549050909192565b604360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611f6c57fe5b80604460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661200757fe5b600084849050905082829050811461201e57600080fd5b60008090505b818161ffff1610156120c65783838261ffff1681811061204057fe5b905060200201356040600088888561ffff1681811061205b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055508080600101915050612024565b505050505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461212557fe5b426047541115612150576046546121458247611b8390919063ffffffff16565b1161214f57600080fd5b5b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156121b8573d6000803e3d6000fd5b5050565b603a6020528060005260406000206000915054906101000a900460ff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461223357fe5b600081121561224157600080fd5b6000603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160000181905550505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146122e957fe5b80603a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461239b57fe5b670de0b6b3a7640000810260358190555050565b600080603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549150603c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050915091565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461249857fe5b80603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661252f57fe5b600084849050905082829050811461254657600080fd5b60008090505b818161ffff16101561275e5760006039600088888561ffff1681811061256e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006040600089898661ffff168181106125dd57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160030154141561265457600182600301540181600301819055505b60008260010154141561266b574282600101819055505b816003015486868561ffff1681811061268057fe5b90506020020135111561272f576000826003015487878661ffff168181106126a457fe5b905060200201350390506126e489898661ffff168181106126c157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1682613bb5565b61272161270e60646127006046856119e690919063ffffffff16565b611a6c90919063ffffffff16565b8460030154611afb90919063ffffffff16565b83600301819055505061274f565b85858461ffff1681811061273f57fe5b9050602002013582600301819055505b5050808060010191505061254c565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561279f573391505b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160010154826000015401136127f957600080fd5b818160010154826000015401101561281057600080fd5b81816001016000828254039250508190555061282c838361415b565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f14ab110831c9d210715b0adedbc67b2f0b80c10ad2853488332d1e4fbd85f81d846040518082815260200191505060405180910390a3505050565b600060019054906101000a900460ff16806128b557506128b46141d9565b5b806128cc57506000809054906101000a900460ff16155b612921576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061477d602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612971576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b73063b98a414eaa1d4a5d4fc235a22db1427199024603660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550739c235ac2c33077a30593a3fd27a0087c687a80a3603760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550683635c9adc5dea000006035819055506001603860007312a09763ec6e5b7cbc4feb7178db8c91a79e456a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016038600073b7722517f410914fff62df357a0c14b88efb936973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555033603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000603d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015612ba75760008060016101000a81548160ff0219169083151502179055505b50565b60465481565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612c0757fe5b426047541115612c20576046548111612c1f57600080fd5b5b8060468190555062278d00420160478190555050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612cb357fe5b612cde82828573ffffffffffffffffffffffffffffffffffffffff16611ea79092919063ffffffff16565b505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612d3a57fe5b80604360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541315612de1573481600101600082825401925050819055505b3373ffffffffffffffffffffffffffffffffffffffff167fac51d2759ef9a0c22072ba515685b302d83fa6ff1d5ec2948396ac46e82d864c346040518082815260200191505060405180910390a250565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612eaf57fe5b6000604460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411612f64576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f546f6b656e2072617465206e6f7420736574000000000000000000000000000081525060200191505060405180910390fd5b6000612f8f308573ffffffffffffffffffffffffffffffffffffffff166141f090919063ffffffff16565b11612fe5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806147026029913960400191505060405180910390fd5b82603d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a76400008202603f81905550670de0b6b3a76400008102604281905550505050565b600080604060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150604560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509250929050565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146131b557600080fd5b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461327157fe5b670de0b6b3a76400008102603b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60475481565b6132d161467f565b47816003601281106132df57fe5b602002018181525050603b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548160056012811061333557fe5b60200201818152505060008160056012811061334d57fe5b60200201511415613372576035548160056012811061336857fe5b6020020181815250505b61337a6146a2565b603960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050603860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166135bd576000603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffdd5cf1856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060806040518083038186803b1580156134e057600080fd5b505afa1580156134f4573d6000803e3d6000fd5b505050506040513d608081101561350a57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505050846000018560400182815250829450838152505050506000826000015111156135bb576135af82600001516135a16014613593606461358562278d00886119e690919063ffffffff16565b6119e690919063ffffffff16565b611a6c90919063ffffffff16565b611a6c90919063ffffffff16565b42038260200181815250505b505b8060000151826000601281106135cf57fe5b6020020181815250506000816000015111156136545761363d62278d0061362f836020015142036136216064613613601488600001516119e690919063ffffffff16565b611a6c90919063ffffffff16565b6119e690919063ffffffff16565b611a6c90919063ffffffff16565b8260016012811061364a57fe5b6020020181815250505b80604001518260026012811061366657fe5b60200201818152505080606001518260046012811061368157fe5b6020020181815250506136926146ca565b604060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815250509050806020015183600b6012811061375a57fe5b602002018181525050806040015183600c6012811061377557fe5b6020020181815250506137a4603f5484600b6012811061379157fe5b6020020151611afb90919063ffffffff16565b83600d601281106137b157fe5b602002018181525050816060015183600e601281106137cc57fe5b60200201818152505082600d601281106137e257fe5b602002015183600e601281106137f457fe5b602002015111156138285782600d6012811061380c57fe5b602002015183600e6012811061381e57fe5b6020020181815250505b600060425411801561384c575060425483600e6012811061384557fe5b6020020151115b1561386b5760425483600e6012811061386157fe5b6020020181815250505b6000826020015111156138f4576138dd62278d006138cf846020015142036138c160646138b360148a600e601281106138a057fe5b60200201516119e690919063ffffffff16565b611a6c90919063ffffffff16565b6119e690919063ffffffff16565b611a6c90919063ffffffff16565b836006601281106138ea57fe5b6020020181815250505b60008073ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161461393757816000015161395b565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90508073ffffffffffffffffffffffffffffffffffffffff1684600a6012811061398157fe5b602002018181525050670de0b6b3a7640000604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054856006601281106139e057fe5b602002015102816139ed57fe5b04846007601281106139fb57fe5b6020020181815250506000604560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806000015485600f60128110613a5957fe5b6020020181815250508060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485601060128110613ab157fe5b602002018181525050670de0b6b3a7640000604460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600001540281613b1057fe5b0485601160128110613b1e57fe5b602002018181525050604460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485600960128110613b7457fe5b602002018181525050613b87868361304d565b5085600860128110613b9557fe5b60200201818152505050505050919050565b600060148201519050919050565b6000604160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613c545750613ffb565b613ccf613c7e6064613c706019866119e690919063ffffffff16565b611a6c90919063ffffffff16565b604560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154611afb90919063ffffffff16565b604560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060008073ffffffffffffffffffffffffffffffffffffffff16604360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613d9457604360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613db8565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b9050613e35613de46064613dd66005876119e690919063ffffffff16565b611a6c90919063ffffffff16565b604560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154611afb90919063ffffffff16565b604560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060008090505b60038160ff161015613ff757613f08613eb76064613ea96046886119e690919063ffffffff16565b611a6c90919063ffffffff16565b604060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154611afb90919063ffffffff16565b604060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550604160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613fea57613ff7565b8080600101915050613e81565b5050505b5050565b6000808314156140125760019050614153565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061408c575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b156141235781156140d3578373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050509050614153565b8373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015614119573d6000803e3d6000fd5b5060019050614153565b61414e84848773ffffffffffffffffffffffffffffffffffffffff166143509092919063ffffffff16565b600190505b949350505050565b600082905060008173ffffffffffffffffffffffffffffffffffffffff168360405180600001905060006040518083038185875af1925050503d80600081146141c0576040519150601f19603f3d011682016040523d82523d6000602084013e6141c5565b606091505b50509050806141d357600080fd5b50505050565b6000803090506000813b9050600081149250505090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061426b575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b1561428f578173ffffffffffffffffffffffffffffffffffffffff1631905061434a565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561430c57600080fd5b505afa158015614320573d6000803e3d6000fd5b505050506040513d602081101561433657600080fd5b810190808051906020019092919050505090505b92915050565b61441c838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614421565b505050565b6144408273ffffffffffffffffffffffffffffffffffffffff1661466c565b6144b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e74726163740081525060200191505060405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b6020831061450157805182526020820191506020810190506020830392506144de565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614563576040519150601f19603f3d011682016040523d82523d6000602084013e614568565b606091505b5091509150816145e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656481525060200191505060405180910390fd5b600081511115614666578080602001905160208110156145ff57600080fd5b8101908080519060200190929190505050614665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806147ab602a913960400191505060405180910390fd5b5b50505050565b600080823b905060008111915050919050565b604051806102400160405280601290602082028038833980820191505090505090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152509056fe436f6e74726163742062616c616e636520666f722074617267657420746f6b656e206973207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77496e76616c696420757365722073746174652c20796f752073686f756c64206465706f73697420564d5220746f6b656e73436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a265627a7a723158200b49e22b85a9c167bf170c33d4fbdec209b7a3206ff48181a2ff834a10c8812964736f6c63430005100032
==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: fallback
PC address: 463
Estimated Gas Usage: 62 - 157
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:659

require(msg.sender == tx.origin)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: fallback
PC address: 554
Estimated Gas Usage: 935 - 1360
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:661

if (msg.sender == owner) return;

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x28000000010800, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: updateTokenRate(address,uint256)
PC address: 8043
Estimated Gas Usage: 1259 - 1874
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:374

function updateTokenRate(address tokenAddress, uint256 rateInWei) public onlyAdmin {
        tokenRates[tokenAddress] = rateInWei;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateTokenRate(address,uint256), txdata: 0x226ac32100000000000000000000000000800040040804008020014010010000000400000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0080004004080400802001401001000000040000', 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: setUserLimitVMR(address[],uint256[])
PC address: 8198
Estimated Gas Usage: 1573 - 2188
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:566

function setUserLimitVMR(address[] calldata userAddress, uint256[] calldata newLimitsInWei) onlyAdmin external {
        uint256 len = userAddress.length;
        require(len == newLimitsInWei.length);

        for(uint16 i = 0;i < len; i++) {
            investorsExt[userAddress[i]].limitVMR = newLimitsInWei[i];
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setUserLimitVMR(address[],uint256[]), txdata: 0x25cad82c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, decoded_data: ([], []), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: withdraw(uint256)
PC address: 8483
Estimated Gas Usage: 1188 - 1613
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:348

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000808100200100000041020040000000001040208, decoded_data: (45851726605401679935814700961676417048890311176,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: withdraw(uint256)
PC address: 8484
Estimated Gas Usage: 1198 - 1623
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:438

function withdraw(uint256 amount)  public onlyOwner {
        if (dateUntilFundsLocked > now) require(address(this).balance.sub(amount) > fundsLockedtoWithdraw);
        owner.transfer(amount);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000480000880000400100000008080080101801002, decoded_data: (25690461361107477821616261661857702147807776770,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ShareholderVomer
Function name: withdraw(uint256)
PC address: 8495
Estimated Gas Usage: 2013 - 2438
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:439

if (dateUntilFundsLocked > now) require(address(this).balance.sub(amount) > fundsLockedtoWithdraw)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [SOMEGUY], function: withdraw(uint256), txdata: 0x2e1a7d4daaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: (77194726158210796949047323339125271902179989777093709359638389338608753093290,), value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ShareholderVomer
Function name: withdraw(uint256)
PC address: 8610
Estimated Gas Usage: 3678 - 38619
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:440

owner.transfer(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2fffa8b0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [ATTACKER], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000010100010140018010014004080204400201014008080102020201010808001001011000, decoded_data: ('0x0000000000000000200000000000000000000000', '0x0000000000000000000000000000000001010001', 565401415034114083488173739271776083941824531246733036072915761682383441920), value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d0220000480004010000040008000000000000000000000000000000008008000, decoded_data: (961164924559304021939677203943819319323893185270852333219154701262327414784,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: setPartnerContract(address,int256)
PC address: 8753
Estimated Gas Usage: 1155 - 1580
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:348

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setPartnerContract(address,int256), txdata: 0x446d5b4e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: setPartnerContract(address,int256)
PC address: 8754
Estimated Gas Usage: 1165 - 1590
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:420

function setPartnerContract(address addr, int256 maxCredit) onlyOwner public {
        require(maxCredit >= 0);
        Partner storage data = partners[addr];
        data.maxCredit = maxCredit;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setPartnerContract(address,int256), txdata: 0x446d5b4e02020202020202020202020208048000100200020001404080100880020280100202020202020202020202020202020202020202020202020202020202020202, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: setAdmin(address,bool)
PC address: 8935
Estimated Gas Usage: 1183 - 1608
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:348

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setAdmin(address,bool), txdata: 0x4b0bddd200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000001', False), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: setAdmin(address,bool)
PC address: 8936
Estimated Gas Usage: 1193 - 1618
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:426

function setAdmin(address newAdmin, bool activate) onlyOwner public {
        admins[newAdmin] = activate;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setAdmin(address,bool), txdata: 0x4b0bddd201010101010101010101010108080001012000100401204020020140808010800101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: changeMinBalance(uint256)
PC address: 9113
Estimated Gas Usage: 1166 - 1591
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:348

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeMinBalance(uint256), txdata: 0x4ea18fab4040404040404040404040400100004040011020048040012001004010084020, decoded_data: (29061543965444064733758992315544885474673584107413146659637984501936744316960,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: changeMinBalance(uint256)
PC address: 9114
Estimated Gas Usage: 1176 - 1601
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:461

function changeMinBalance(uint256 newMinBalanceInInteger) public onlyOwner {
        MinBalanceVMR = newMinBalanceInInteger * 10**18;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeMinBalance(uint256), txdata: 0x4ea18fab0000000000000000000000000000000004800002200402000001000240808000, decoded_data: (5981526149396811918890554898180505600,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ShareholderVomer
Function name: changeMinBalance(uint256)
PC address: 9126
Estimated Gas Usage: 6210 - 26635
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:462

newMinBalanceInInteger * 10**18

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [ATTACKER], function: changeMinBalance(uint256), txdata: 0x4ea18fab000006c2ba41000020003009e4a765cf92aaaaaaaaaaaaaaaaaa9aaaa8d80000, decoded_data: (46660322559870799606788248224285103254103284408588035250167730499223552,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: changeOwnerCandidate(address)
PC address: 9366
Estimated Gas Usage: 1149 - 1574
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:348

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeOwnerCandidate(address), txdata: 0x561a01b80000000000000000000000000001201000800000000010010220100110000004, decoded_data: ('0x0001201000800000000010010220100110000004',), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: changeOwnerCandidate(address)
PC address: 9367
Estimated Gas Usage: 1159 - 1584
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:452

function changeOwnerCandidate(address payable newOwner) public onlyOwner {
        newOwnerCandidate = newOwner;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeOwnerCandidate(address), txdata: 0x561a01b80808080808080808080808080002080220200880020408400040200104080100, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: setDepositTokens(address[],uint256[])
PC address: 9518
Estimated Gas Usage: 1572 - 2187
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:575

function setDepositTokens(address[] calldata userAddress, uint256[] calldata amountTokens) onlyAdmin external {
        uint256 len = userAddress.length;
        require(len == amountTokens.length);

        for(uint16 i = 0;i < len; i++) {
            InvestorData storage data = investors[userAddress[i]];

            InvestorDataExt storage dataExt = investorsExt[userAddress[i]];
            if (dataExt.oldDepositAmount == 0) {
                dataExt.oldDepositAmount = data.totalVMR + 1;
            }

            if (data.lastDatetime == 0) data.lastDatetime = block.timestamp;

            if (amountTokens[i] > data.totalVMR)
            {
                uint256 amount = amountTokens[i] - data.totalVMR;
                updateRefStructure(userAddress[i], amount);
                data.totalVMR = data.totalVMR.add(amount.mul(70).div(100));
            } else {
                data.totalVMR = amountTokens[i];
            }
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setDepositTokens(address[],uint256[]), txdata: 0x5b14319c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, decoded_data: ([], []), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: lockFunds(uint256)
PC address: 11269
Estimated Gas Usage: 1166 - 1591
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:348

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: lockFunds(uint256), txdata: 0x8c8f95fb0202020202020202020202020204048000018002400840024000080180022010, decoded_data: (908173248920127022929968509872106840966474179144031946380887314046692499472,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: lockFunds(uint256)
PC address: 11270
Estimated Gas Usage: 1176 - 1601
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:443

function lockFunds(uint256 amount) public onlyOwner {
        // funds lock is active
        if (dateUntilFundsLocked > now) {
            require(amount > fundsLockedtoWithdraw);
        }
        fundsLockedtoWithdraw = amount;
        dateUntilFundsLocked = now + 30 days;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: lockFunds(uint256), txdata: 0x8c8f95fb8080808080808080808080804040800080008004800104010201000440008000, decoded_data: (58123087930888129467517984631445166731647400082441998439763524453138381701120,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ShareholderVomer
Function name: lockFunds(uint256)
PC address: 11281
Estimated Gas Usage: 1991 - 2416
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:445

if (dateUntilFundsLocked > now) {
            require(amount > fundsLockedtoWithdraw);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [SOMEGUY], function: lockFunds(uint256), txdata: 0x8c8f95fbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: (77194726158210796949047323339125271902179989777093709359638389338608753093290,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ShareholderVomer
Function name: lockFunds(uint256)
PC address: 11309
Estimated Gas Usage: 12046 - 52471
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:449

now + 30 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [SOMEGUY], function: lockFunds(uint256), txdata: 0x8c8f95fb0000000000000000000000000000000000000000000000000080000000000000, decoded_data: (36028797018963968,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: transferTokens(address,address,uint256)
PC address: 11441
Estimated Gas Usage: 1209 - 1634
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:348

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: transferTokens(address,address,uint256)
PC address: 11442
Estimated Gas Usage: 1219 - 1644
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:471

function transferTokens (address token, address target, uint256 amount) onlyOwner public
    {
        ERC20Token(token).universalTransfer(target, amount);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: setSupportAddress(address)
PC address: 11576
Estimated Gas Usage: 1171 - 1596
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:348

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setSupportAddress(address), txdata: 0xa91c64e20000000000000000000000000000000801100204040000020402080080400110, decoded_data: ('0x0000000801100204040000020402080080400110',), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: setSupportAddress(address)
PC address: 11577
Estimated Gas Usage: 1181 - 1606
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:614

function setSupportAddress(address newSupportAddress) public onlyOwner {
        supportAddress = newSupportAddress;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: setSupportAddress(address), txdata: 0xa91c64e28080808080808080808080800001088000808020800408102008804080800402, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: updatePaymentMode(address,uint256,uint256)
PC address: 11949
Estimated Gas Usage: 1203 - 1628
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:348

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updatePaymentMode(address,uint256,uint256), txdata: 0xd6c633e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, 0), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: updatePaymentMode(address,uint256,uint256)
PC address: 11950
Estimated Gas Usage: 1213 - 1638
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:378

function updatePaymentMode(address _newPaymantMode, uint256 _newMinLimitVMRInInteger, uint256 _newMaxLimitVMRInInteger) onlyOwner public {
        require(tokenRates[_newPaymantMode] > 0, "Token rate not set");
        require(ERC20Token(_newPaymantMode).universalBalanceOf(address(this)) > 0, "Contract balance for target token is zero");

        paymentToken = _newPaymantMode;
        globalLimitVMR = _newMinLimitVMRInInteger * 10**18;
        maxLimitVMR = _newMaxLimitVMRInInteger * 10**18;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updatePaymentMode(address,uint256,uint256), txdata: 0xd6c633e8000000000000000000000000000000000000000000000000000000020804804000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000208048040', 0, 0), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: acceptOwner()
PC address: 12720
Estimated Gas Usage: 1038 - 1463
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:457

require(msg.sender == newOwnerCandidate)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: acceptOwner(), txdata: 0xebbc4965, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ShareholderVomer
Function name: changeIndividualVMRCup(address,uint256)
PC address: 12911
Estimated Gas Usage: 1175 - 1600
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:348

assert(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: changeIndividualVMRCup(address,uint256), txdata: 0xeef793d9aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShareholderVomer
Function name: changeIndividualVMRCup(address,uint256)
PC address: 12912
Estimated Gas Usage: 1185 - 1610
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:431

function changeIndividualVMRCup(address userAddress, uint256 minAmountInInteger) onlyOwner public {
        individualVMRCup[userAddress] = minAmountInInteger * 10**18;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeIndividualVMRCup(address,uint256), txdata: 0xeef793d980808080808080808080808002002004800180081002201004082080800040808080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ShareholderVomer
Function name: changeIndividualVMRCup(address,uint256)
PC address: 12924
Estimated Gas Usage: 6311 - 26926
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:432

minAmountInInteger * 10**18

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [CREATOR], function: changeIndividualVMRCup(address,uint256), txdata: 0xeef793d90000000000000000000000000000000080000000000000000000000000000000000010280b1841811a692e92abbff000000e0e880161029a05a1d002a76fb5a2, decoded_data: ('0x0000000080000000000000000000000000000000', 111507507828832110840303944336985988155148124290799514933297694683149730), value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ShareholderVomer
Function name: transferTokens(address,address,uint256)
PC address: 16643
Estimated Gas Usage: 2303 - 36914
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:214

address(uint160(to)).transfer(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [ATTACKER], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5ffcfcfcfcfcfcfcfcfcfcfcfceeeeeeeeee6eeeeeeeeeeaafeeeeeeee6eafeeeefcfcfcfcfcfcfcfcfcfcfcfc00000000000000000020000400000000000000000102010104024001080101014002010180080840010101010404010180080108, value: 0x0
Caller: [ATTACKER], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f4b4b4b4b4b4b4b4b4b4b4b4b01808020010101010201010108800140014040804b4b4b4b4b4b4b4b4b4b4b4b04808080000400400240014002000100000104020101010104010802010208400101020108401008012008080104800401012002, value: 0x0
Caller: [ATTACKER], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f4b4b4b4b4b4b4b4b4b4b4b4beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee4b4b4b4b4b4b4b4b4b4b4b4bdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ShareholderVomer
Function name: transferTokens(address,address,uint256)
PC address: 17716
Estimated Gas Usage: 3918 - 40925
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:182

address(token).call(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [CREATOR], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01010101010101010101010100040000080000004000100208080220002080200101010401040401010204020104010101018001080102010101018001020801, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ShareholderVomer
Function name: transferTokens(address,address,uint256)
PC address: 17741
Estimated Gas Usage: 3918 - 40925
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [SOMEGUY], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f000000000000000000000000020000000000000010080000020000000000040100000000000000000000000000000000000000000000000000001000000000000801010180021001018004100480040102400102010101401001040210010101, decoded_data: ('0x0200000000000000100800000200000000000401', '0x0000000000000000000000000000100000000000', 3620276577918024752207175600998966830306717939061130520655896396520262533377), value: 0x0


time_used: 36042.02859592438 seconds
#@contract_info_time
0x907cfab561d4963016a77e8b72b74b400e36c4e4.sol:0.5.16:ShareholderVomer:36042.02859592438:36100:60:36000
