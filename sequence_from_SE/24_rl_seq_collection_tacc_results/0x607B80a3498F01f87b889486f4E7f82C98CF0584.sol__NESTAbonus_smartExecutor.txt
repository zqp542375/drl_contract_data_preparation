++++ 0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol  :  0.5.8  :  NESTAbonus ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 5017
['constructor']:writes at the last depth:['5', '6', '7', '8', '9', '10', '11', '12', '13', '1', '0', '2', '3', '4']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 96.35% coverage.
dynamic svars:['14', '32759026642424215044975110766642718088292889419722312074380657715959416050611', '104513464218712855467029158844991719757099254475393801857726014260308378355740']
static svars:['11', '12', '13', '7', '1', '0', '2', '3', '4', '5', '6', '10', '8', '9']
Ending preprocessing.
preprocessing time(s): 101.41557884216309
contract coverage: 97.11%
getInfo() is not reachable
changeMapping(address) is not reachable
getETH() is not reachable
takeOut(uint256) is not reachable
getNextTime() is not reachable
Function Reads: State variables read in conditions
	takeOut(uint256):[]
	changeLevelingProportion(uint256):[]
	changeGetAbonusTimeLimit(uint256):[]
	checkGetAbonusTimeLimit():[]
	checkMinimumAbonus():[]
	getNextTime():[]
	allValue():[]
	changeMapping(address):[]
	changeExpectedIncrement(uint256):[]
	checkTimeLimit():[]
	getInfo():[]
	changeTimeLimit(uint256):[]
	changeExpectedMinimum(uint256):[]
	getETH():[]
	depositIn(uint256):[]
Function Writes: State variables written
	changeExpectedIncrement(uint256):['11']
	changeExpectedMinimum(uint256):['12']
	changeLevelingProportion(uint256):['13']
	changeGetAbonusTimeLimit(uint256):['7']
	changeMapping(address):['1', '0', '2', '3', '4']
	changeTimeLimit(uint256):['5']
	getETH():['32759026642424215044975110766642718088292889419722312074380657715959416050611']
============================
iteration:3
targets:['getInfo()', 'changeMapping(address)', 'getETH()', 'takeOut(uint256)', 'getNextTime()']
['changeExpectedIncrement(uint256)']:writes at the last depth:['11']
['changeExpectedMinimum(uint256)']:writes at the last depth:['12']
['changeLevelingProportion(uint256)']:writes at the last depth:['13']
['changeGetAbonusTimeLimit(uint256)']:writes at the last depth:['7']
['depositIn(uint256)']:writes at the last depth:[]
['changeTimeLimit(uint256)']:writes at the last depth:['5']
['takeOut(uint256)']:writes at the last depth:[]
['depositIn(uint256)']:writes at the last depth:[]
['allValue()']:writes at the last depth:[]
['checkMinimumAbonus()']:writes at the last depth:[]
['depositIn(uint256)']:writes at the last depth:[]
['depositIn(uint256)']:writes at the last depth:[]
['checkMinimumAbonus()']:writes at the last depth:[]
['checkMinimumAbonus()']:writes at the last depth:[]
['changeMapping(address)']:writes at the last depth:['3', '4', '2', '0', '1']
['getInfo()']:writes at the last depth:[]
['getInfo()']:writes at the last depth:[]
['getInfo()']:writes at the last depth:[]
contract coverage: 97.11%
============================
iteration:4
['getInfo()', 'changeExpectedIncrement(uint256)']:writes at the last depth:['11']
['getInfo()', 'changeExpectedMinimum(uint256)']:writes at the last depth:['12']
['getInfo()', 'changeLevelingProportion(uint256)']:writes at the last depth:['13']
['getInfo()', 'changeGetAbonusTimeLimit(uint256)']:writes at the last depth:['7']
['getInfo()', 'depositIn(uint256)']:writes at the last depth:[]
['getInfo()', 'changeTimeLimit(uint256)']:writes at the last depth:['5']
['getInfo()', 'takeOut(uint256)']:writes at the last depth:[]
['getInfo()', 'depositIn(uint256)']:writes at the last depth:[]
['getInfo()', 'allValue()']:writes at the last depth:[]
['getInfo()', 'checkMinimumAbonus()']:writes at the last depth:[]
['getInfo()', 'depositIn(uint256)']:writes at the last depth:[]
['getInfo()', 'checkMinimumAbonus()']:writes at the last depth:[]
['getInfo()', 'checkMinimumAbonus()']:writes at the last depth:[]
['getInfo()', 'changeMapping(address)']:writes at the last depth:['3', '4', '2', '0', '1']
contract coverage: 97.11%
============================
iteration:5
contract coverage: 97.11%
============================
iteration:6
contract coverage: 97.11%
============================
iteration:7
contract coverage: 97.11%
============================
iteration:8
contract coverage: 97.11%
============================
iteration:9
contract coverage: 97.11%
============================
iteration:10
contract coverage: 97.11%
============================
iteration:11
contract coverage: 97.11%
============================
iteration:12
contract coverage: 97.11%
============================
iteration:13
contract coverage: 97.11%
============================
iteration:14
contract coverage: 97.11%
============================
iteration:15
contract coverage: 97.11%
============================
iteration:16
contract coverage: 97.11%
============================
iteration:17
contract coverage: 97.11%
============================
iteration:18
contract coverage: 97.11%
============================
iteration:19
contract coverage: 97.11%
============================
iteration:20
contract coverage: 97.11%
============================
iteration:21
contract coverage: 97.11%
============================
iteration:22
contract coverage: 97.11%
============================
iteration:23
contract coverage: 97.11%
============================
iteration:24
contract coverage: 97.11%
============================
iteration:25
contract coverage: 97.11%
============================
iteration:26
contract coverage: 97.11%
============================
iteration:27
contract coverage: 97.11%
============================
iteration:28
contract coverage: 97.11%
============================
iteration:29
contract coverage: 97.11%
============================
iteration:30
contract coverage: 97.11%
============================
iteration:31
contract coverage: 97.11%
============================
iteration:32
contract coverage: 97.11%
============================
iteration:33
contract coverage: 97.11%
============================
iteration:34
contract coverage: 97.11%
============================
iteration:35
contract coverage: 97.11%
#@statespace
4662 nodes, 4661 edges, 57955 total states
#@coverage
Achieved 11.89% coverage for code: 608060405262093a80600555635ea2644060065562034bc0600755600060085560006009556000600a556003600b5568056bc75e2d63100000600c55600a600d553480156200004d57600080fd5b5060405160208062002a5d833981018060405260208110156200006f57600080fd5b810190808051906020019092919050505080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff1660e01b81526004018080602001828103825260048152602001807f6e6573740000000000000000000000000000000000000000000000000000000081525060200191505060206040518083038186803b1580156200016657600080fd5b505afa1580156200017b573d6000803e3d6000fd5b505050506040513d60208110156200019257600080fd5b81019080805190602001909291905050506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff1660e01b81526004018080602001828103825260088152602001807f6e6573745361766500000000000000000000000000000000000000000000000081525060200191505060206040518083038186803b1580156200028757600080fd5b505afa1580156200029c573d6000803e3d6000fd5b505050506040513d6020811015620002b357600080fd5b8101908080519060200190929190505050600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600062000413600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff1660e01b81526004018080602001828103825260068152602001807f61626f6e7573000000000000000000000000000000000000000000000000000081525060200191505060206040518083038186803b158015620003af57600080fd5b505afa158015620003c4573d6000803e3d6000fd5b505050506040513d6020811015620003db57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16620005b160201b6200207e1760201c565b905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600062000565600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff1660e01b815260040180806020018281038252600c8152602001807f6e6573744c6576656c696e67000000000000000000000000000000000000000081525060200191505060206040518083038186803b1580156200050157600080fd5b505afa15801562000516573d6000803e3d6000fd5b505050506040513d60208110156200052d57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16620005b160201b6200207e1760201c565b905080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620005bb565b6000819050919050565b61249280620005cb6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806365aea7de11610097578063caffbec711610066578063caffbec7146102d2578063d2e2852d14610300578063e945a4d21461032e578063ea5e9f2c1461035c576100f5565b806365aea7de146102345780637711e85714610252578063a456d81214610270578063a781e7f81461028e576100f5565b8063202b9482116100d3578063202b9482146101605780632cc3eb531461018e5780635a9b0b89146101ac578063659cf23514610206576100f5565b806314525163146100fa57806314f6c3be146101285780631f4ad75a14610132575b600080fd5b6101266004803603602081101561011057600080fd5b810190808035906020019092919050505061037a565b005b61013061047b565b005b61015e6004803603602081101561014857600080fd5b8101908080359060200190929190505050610815565b005b61018c6004803603602081101561017657600080fd5b8101908080359060200190929190505050610a0f565b005b610196610b10565b6040518082815260200191505060405180910390f35b6101b4610b1a565b604051808a815260200189815260200188815260200187815260200186815260200185815260200184815260200183815260200182151515158152602001995050505050505050505060405180910390f35b6102326004803603602081101561021c57600080fd5b810190808035906020019092919050505061107e565b005b61023c611193565b6040518082815260200191505060405180910390f35b61025a611224565b6040518082815260200191505060405180910390f35b6102786112b0565b6040518082815260200191505060405180910390f35b6102d0600480360360208110156102a457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611497565b005b6102fe600480360360208110156102e857600080fd5b8101908080359060200190929190505050611a88565b005b61032c6004803603602081101561031657600080fd5b8101908080359060200190929190505050611c44565b005b61035a6004803603602081101561034457600080fd5b8101908080359060200190929190505050611d45565b005b610364611e46565b6040518082815260200191505060405180910390f35b60011515600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3bf06f1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561041d57600080fd5b505afa158015610431573d6000803e3d6000fd5b505050506040513d602081101561044757600080fd5b810190808051906020019092919050505015151461046457600080fd5b6000811161047157600080fd5b80600c8190555050565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16146104b357600080fd5b6104bb611e50565b60004290506104d7600554600654611fd790919063ffffffff16565b8110158015610510575061050c6007546104fe600554600654611fd790919063ffffffff16565b611fee90919063ffffffff16565b8111155b61051957600080fd5b60011515600e60006105376001600a54611fd790919063ffffffff16565b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141561059d57600080fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce21f4b1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561063e57600080fd5b505afa158015610652573d6000803e3d6000fd5b505050506040513d602081101561066857600080fd5b810190808051906020019092919050505090506000811161068857600080fd5b60006009541161069757600080fd5b60006106c26009546106b46008548561200890919063ffffffff16565b61203c90919063ffffffff16565b9050600081116106d157600080fd5b6001600e60006106ed6001600a54611fd790919063ffffffff16565b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663985dea2382336040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156107f857600080fd5b505af115801561080c573d6000803e3d6000fd5b50505050505050565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161461084d57600080fd5b60004290506006548110156108bb57610873600554600654611fd790919063ffffffff16565b81101580156108ac57506108a860075461089a600554600654611fd790919063ffffffff16565b611fee90919063ffffffff16565b8111155b156108b657600080fd5b61097e565b60065481101580156108e357506108df600754600654611fee90919063ffffffff16565b8111155b156108ed57600080fd5b600061091860055461090a60065485611fd790919063ffffffff16565b61203c90919063ffffffff16565b905060006109456109346005548461200890919063ffffffff16565b600654611fee90919063ffffffff16565b9050600061095e60075483611fee90919063ffffffff16565b90508184101580156109705750808411155b1561097a57600080fd5b5050505b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f4ad75a836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156109f357600080fd5b505af1158015610a07573d6000803e3d6000fd5b505050505050565b60011515600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3bf06f1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610ab257600080fd5b505afa158015610ac6573d6000803e3d6000fd5b505050506040513d6020811015610adc57600080fd5b8101908080519060200190929190505050151514610af957600080fd5b60008111610b0657600080fd5b80600b8190555050565b6000600554905090565b600080600080600080600080600080429050610b43600554600654611fd790919063ffffffff16565b8110158015610b7c5750610b78600754610b6a600554600654611fd790919063ffffffff16565b611fee90919063ffffffff16565b8111155b15610c0557600e6000610b9b6001600a54611fd790919063ffffffff16565b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16915060085497506009549650610d17565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cebe26976040518163ffffffff1660e01b815260040160206040518083038186803b158015610c6d57600080fd5b505afa158015610c81573d6000803e3d6000fd5b505050506040513d6020811015610c9757600080fd5b81019080805190602001909291905050509750610cb26112b0565b9650600e6000600a54815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce21f4b1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610db657600080fd5b505afa158015610dca573d6000803e3d6000fd5b505050506040513d6020811015610de057600080fd5b81019080805190602001909291905050509550600115158215151415610e095760009450610e31565b610e2e87610e208a8961200890919063ffffffff16565b61203c90919063ffffffff16565b94505b610e39611224565b9950610e64600754610e566005548d611fd790919063ffffffff16565b611fee90919063ffffffff16565b98506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015610f5a57600080fd5b505afa158015610f6e573d6000803e3d6000fd5b505050506040513d6020811015610f8457600080fd5b810190808051906020019092919050505093506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561103557600080fd5b505afa158015611049573d6000803e3d6000fd5b505050506040513d602081101561105f57600080fd5b8101908080519060200190929190505050925050909192939495969798565b60011515600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3bf06f1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561112157600080fd5b505afa158015611135573d6000803e3d6000fd5b505050506040513d602081101561114b57600080fd5b810190808051906020019092919050505015151461116857600080fd5b6000811161117557600080fd5b61118a610e108261200890919063ffffffff16565b60058190555050565b6000806111bb6a52b7d2dcc80cd2e40000006111ad6112b0565b61203c90919063ffffffff16565b90506000600c54905060008090505b8281101561121b5761120c6111fd60646111ef600b548661200890919063ffffffff16565b61203c90919063ffffffff16565b83611fee90919063ffffffff16565b915080806001019150506111ca565b50809250505090565b60008042905080600654111561123f576006549150506112ad565b600061126a60055461125c60065485611fd790919063ffffffff16565b61203c90919063ffffffff16565b90506112a8611297611286600184611fee90919063ffffffff16565b60055461200890919063ffffffff16565b600654611fee90919063ffffffff16565b925050505b90565b6000806b204fce5e3e250261100000009050600061148d6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff1660e01b815260040180806020018281038252600a8152602001807f6d696e696e67536176650000000000000000000000000000000000000000000081525060200191505060206040518083038186803b1580156113a857600080fd5b505afa1580156113bc573d6000803e3d6000fd5b505050506040513d60208110156113d257600080fd5b81019080805190602001909291905050506040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561144357600080fd5b505afa158015611457573d6000803e3d6000fd5b505050506040513d602081101561146d57600080fd5b810190808051906020019092919050505083611fd790919063ffffffff16565b9050809250505090565b60011515600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3bf06f1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561153a57600080fd5b505afa15801561154e573d6000803e3d6000fd5b505050506040513d602081101561156457600080fd5b810190808051906020019092919050505015151461158157600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff1660e01b81526004018080602001828103825260048152602001807f6e6573740000000000000000000000000000000000000000000000000000000081525060200191505060206040518083038186803b15801561166657600080fd5b505afa15801561167a573d6000803e3d6000fd5b505050506040513d602081101561169057600080fd5b81019080805190602001909291905050506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff1660e01b81526004018080602001828103825260088152602001807f6e6573745361766500000000000000000000000000000000000000000000000081525060200191505060206040518083038186803b15801561178457600080fd5b505afa158015611798573d6000803e3d6000fd5b505050506040513d60208110156117ae57600080fd5b8101908080519060200190929190505050600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006118fe600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff1660e01b81526004018080602001828103825260068152602001807f61626f6e7573000000000000000000000000000000000000000000000000000081525060200191505060206040518083038186803b1580156118a857600080fd5b505afa1580156118bc573d6000803e3d6000fd5b505050506040513d60208110156118d257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1661207e565b905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000611a40600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff1660e01b815260040180806020018281038252600c8152602001807f6e6573744c6576656c696e67000000000000000000000000000000000000000081525060200191505060206040518083038186803b1580156119ea57600080fd5b505afa1580156119fe573d6000803e3d6000fd5b505050506040513d6020811015611a1457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1661207e565b905080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614611ac057600080fd5b6000811415611ace57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce21f4b1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611b6d57600080fd5b505afa158015611b81573d6000803e3d6000fd5b505050506040513d6020811015611b9757600080fd5b8101908080519060200190929190505050811115611bb457600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663caffbec7826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611c2957600080fd5b505af1158015611c3d573d6000803e3d6000fd5b5050505050565b60011515600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3bf06f1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611ce757600080fd5b505afa158015611cfb573d6000803e3d6000fd5b505050506040513d6020811015611d1157600080fd5b8101908080519060200190929190505050151514611d2e57600080fd5b60008111611d3b57600080fd5b80600d8190555050565b60011515600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3bf06f1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611de857600080fd5b505afa158015611dfc573d6000803e3d6000fd5b505050506040513d6020811015611e1257600080fd5b8101908080519060200190929190505050151514611e2f57600080fd5b60008111611e3c57600080fd5b8060078190555050565b6000600754905090565b60004290506006548110611fd457611e66612088565b6000611e91600554611e8360065485611fd790919063ffffffff16565b61203c90919063ffffffff16565b90506000611ebe611ead6005548461200890919063ffffffff16565b600654611fee90919063ffffffff16565b90506000611ed760075483611fee90919063ffffffff16565b9050818410158015611ee95750808411155b15611fd057611ef6611224565b600681905550611f126001600a54611fee90919063ffffffff16565b600a81905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cebe26976040518163ffffffff1660e01b815260040160206040518083038186803b158015611f8057600080fd5b505afa158015611f94573d6000803e3d6000fd5b505050506040513d6020811015611faa57600080fd5b8101908080519060200190929190505050600881905550611fc96112b0565b6009819055505b5050505b50565b600082821115611fe357fe5b818303905092915050565b6000818301905082811015611fff57fe5b80905092915050565b60008083141561201b5760009050612036565b81830290508183828161202a57fe5b041461203257fe5b8090505b92915050565b600080821161204757fe5b600082848161205257fe5b04905082848161205e57fe5b0681840201841461206b57fe5b82848161207457fe5b0491505092915050565b6000819050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663985dea236121906064612182600d54600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cebe26976040518163ffffffff1660e01b815260040160206040518083038186803b15801561213957600080fd5b505afa15801561214d573d6000803e3d6000fd5b505050506040513d602081101561216357600080fd5b810190808051906020019092919050505061200890919063ffffffff16565b61203c90919063ffffffff16565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561221c57600080fd5b505af1158015612230573d6000803e3d6000fd5b50505050600061225b6a52b7d2dcc80cd2e400000061224d6112b0565b61203c90919063ffffffff16565b90506000600c54905060008090505b828110156122bb576122ac61229d606461228f600b548661200890919063ffffffff16565b61203c90919063ffffffff16565b83611fee90919063ffffffff16565b9150808060010191505061226a565b506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cebe26976040518163ffffffff1660e01b815260040160206040518083038186803b15801561232657600080fd5b505afa15801561233a573d6000803e3d6000fd5b505050506040513d602081101561235057600080fd5b810190808051906020019092919050505090508181101561246157600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e100b146123bc8385611fd790919063ffffffff16565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561244857600080fd5b505af115801561245c573d6000803e3d6000fd5b505050505b50505056fea165627a7a7230582047b8341bd535027493b15a64431ff50164850e16016f25437c610dbc69f2d94b0029
#@coverage
Achieved 97.11% coverage for code: 608060405234801561001057600080fd5b50600436106100f55760003560e01c806365aea7de11610097578063caffbec711610066578063caffbec7146102d2578063d2e2852d14610300578063e945a4d21461032e578063ea5e9f2c1461035c576100f5565b806365aea7de146102345780637711e85714610252578063a456d81214610270578063a781e7f81461028e576100f5565b8063202b9482116100d3578063202b9482146101605780632cc3eb531461018e5780635a9b0b89146101ac578063659cf23514610206576100f5565b806314525163146100fa57806314f6c3be146101285780631f4ad75a14610132575b600080fd5b6101266004803603602081101561011057600080fd5b810190808035906020019092919050505061037a565b005b61013061047b565b005b61015e6004803603602081101561014857600080fd5b8101908080359060200190929190505050610815565b005b61018c6004803603602081101561017657600080fd5b8101908080359060200190929190505050610a0f565b005b610196610b10565b6040518082815260200191505060405180910390f35b6101b4610b1a565b604051808a815260200189815260200188815260200187815260200186815260200185815260200184815260200183815260200182151515158152602001995050505050505050505060405180910390f35b6102326004803603602081101561021c57600080fd5b810190808035906020019092919050505061107e565b005b61023c611193565b6040518082815260200191505060405180910390f35b61025a611224565b6040518082815260200191505060405180910390f35b6102786112b0565b6040518082815260200191505060405180910390f35b6102d0600480360360208110156102a457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611497565b005b6102fe600480360360208110156102e857600080fd5b8101908080359060200190929190505050611a88565b005b61032c6004803603602081101561031657600080fd5b8101908080359060200190929190505050611c44565b005b61035a6004803603602081101561034457600080fd5b8101908080359060200190929190505050611d45565b005b610364611e46565b6040518082815260200191505060405180910390f35b60011515600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3bf06f1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561041d57600080fd5b505afa158015610431573d6000803e3d6000fd5b505050506040513d602081101561044757600080fd5b810190808051906020019092919050505015151461046457600080fd5b6000811161047157600080fd5b80600c8190555050565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16146104b357600080fd5b6104bb611e50565b60004290506104d7600554600654611fd790919063ffffffff16565b8110158015610510575061050c6007546104fe600554600654611fd790919063ffffffff16565b611fee90919063ffffffff16565b8111155b61051957600080fd5b60011515600e60006105376001600a54611fd790919063ffffffff16565b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141561059d57600080fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce21f4b1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561063e57600080fd5b505afa158015610652573d6000803e3d6000fd5b505050506040513d602081101561066857600080fd5b810190808051906020019092919050505090506000811161068857600080fd5b60006009541161069757600080fd5b60006106c26009546106b46008548561200890919063ffffffff16565b61203c90919063ffffffff16565b9050600081116106d157600080fd5b6001600e60006106ed6001600a54611fd790919063ffffffff16565b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663985dea2382336040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156107f857600080fd5b505af115801561080c573d6000803e3d6000fd5b50505050505050565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161461084d57600080fd5b60004290506006548110156108bb57610873600554600654611fd790919063ffffffff16565b81101580156108ac57506108a860075461089a600554600654611fd790919063ffffffff16565b611fee90919063ffffffff16565b8111155b156108b657600080fd5b61097e565b60065481101580156108e357506108df600754600654611fee90919063ffffffff16565b8111155b156108ed57600080fd5b600061091860055461090a60065485611fd790919063ffffffff16565b61203c90919063ffffffff16565b905060006109456109346005548461200890919063ffffffff16565b600654611fee90919063ffffffff16565b9050600061095e60075483611fee90919063ffffffff16565b90508184101580156109705750808411155b1561097a57600080fd5b5050505b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f4ad75a836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156109f357600080fd5b505af1158015610a07573d6000803e3d6000fd5b505050505050565b60011515600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3bf06f1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610ab257600080fd5b505afa158015610ac6573d6000803e3d6000fd5b505050506040513d6020811015610adc57600080fd5b8101908080519060200190929190505050151514610af957600080fd5b60008111610b0657600080fd5b80600b8190555050565b6000600554905090565b600080600080600080600080600080429050610b43600554600654611fd790919063ffffffff16565b8110158015610b7c5750610b78600754610b6a600554600654611fd790919063ffffffff16565b611fee90919063ffffffff16565b8111155b15610c0557600e6000610b9b6001600a54611fd790919063ffffffff16565b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16915060085497506009549650610d17565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cebe26976040518163ffffffff1660e01b815260040160206040518083038186803b158015610c6d57600080fd5b505afa158015610c81573d6000803e3d6000fd5b505050506040513d6020811015610c9757600080fd5b81019080805190602001909291905050509750610cb26112b0565b9650600e6000600a54815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce21f4b1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610db657600080fd5b505afa158015610dca573d6000803e3d6000fd5b505050506040513d6020811015610de057600080fd5b81019080805190602001909291905050509550600115158215151415610e095760009450610e31565b610e2e87610e208a8961200890919063ffffffff16565b61203c90919063ffffffff16565b94505b610e39611224565b9950610e64600754610e566005548d611fd790919063ffffffff16565b611fee90919063ffffffff16565b98506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015610f5a57600080fd5b505afa158015610f6e573d6000803e3d6000fd5b505050506040513d6020811015610f8457600080fd5b810190808051906020019092919050505093506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561103557600080fd5b505afa158015611049573d6000803e3d6000fd5b505050506040513d602081101561105f57600080fd5b8101908080519060200190929190505050925050909192939495969798565b60011515600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3bf06f1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561112157600080fd5b505afa158015611135573d6000803e3d6000fd5b505050506040513d602081101561114b57600080fd5b810190808051906020019092919050505015151461116857600080fd5b6000811161117557600080fd5b61118a610e108261200890919063ffffffff16565b60058190555050565b6000806111bb6a52b7d2dcc80cd2e40000006111ad6112b0565b61203c90919063ffffffff16565b90506000600c54905060008090505b8281101561121b5761120c6111fd60646111ef600b548661200890919063ffffffff16565b61203c90919063ffffffff16565b83611fee90919063ffffffff16565b915080806001019150506111ca565b50809250505090565b60008042905080600654111561123f576006549150506112ad565b600061126a60055461125c60065485611fd790919063ffffffff16565b61203c90919063ffffffff16565b90506112a8611297611286600184611fee90919063ffffffff16565b60055461200890919063ffffffff16565b600654611fee90919063ffffffff16565b925050505b90565b6000806b204fce5e3e250261100000009050600061148d6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff1660e01b815260040180806020018281038252600a8152602001807f6d696e696e67536176650000000000000000000000000000000000000000000081525060200191505060206040518083038186803b1580156113a857600080fd5b505afa1580156113bc573d6000803e3d6000fd5b505050506040513d60208110156113d257600080fd5b81019080805190602001909291905050506040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561144357600080fd5b505afa158015611457573d6000803e3d6000fd5b505050506040513d602081101561146d57600080fd5b810190808051906020019092919050505083611fd790919063ffffffff16565b9050809250505090565b60011515600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3bf06f1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561153a57600080fd5b505afa15801561154e573d6000803e3d6000fd5b505050506040513d602081101561156457600080fd5b810190808051906020019092919050505015151461158157600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff1660e01b81526004018080602001828103825260048152602001807f6e6573740000000000000000000000000000000000000000000000000000000081525060200191505060206040518083038186803b15801561166657600080fd5b505afa15801561167a573d6000803e3d6000fd5b505050506040513d602081101561169057600080fd5b81019080805190602001909291905050506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff1660e01b81526004018080602001828103825260088152602001807f6e6573745361766500000000000000000000000000000000000000000000000081525060200191505060206040518083038186803b15801561178457600080fd5b505afa158015611798573d6000803e3d6000fd5b505050506040513d60208110156117ae57600080fd5b8101908080519060200190929190505050600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006118fe600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff1660e01b81526004018080602001828103825260068152602001807f61626f6e7573000000000000000000000000000000000000000000000000000081525060200191505060206040518083038186803b1580156118a857600080fd5b505afa1580156118bc573d6000803e3d6000fd5b505050506040513d60208110156118d257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1661207e565b905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000611a40600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff1660e01b815260040180806020018281038252600c8152602001807f6e6573744c6576656c696e67000000000000000000000000000000000000000081525060200191505060206040518083038186803b1580156119ea57600080fd5b505afa1580156119fe573d6000803e3d6000fd5b505050506040513d6020811015611a1457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1661207e565b905080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614611ac057600080fd5b6000811415611ace57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce21f4b1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611b6d57600080fd5b505afa158015611b81573d6000803e3d6000fd5b505050506040513d6020811015611b9757600080fd5b8101908080519060200190929190505050811115611bb457600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663caffbec7826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611c2957600080fd5b505af1158015611c3d573d6000803e3d6000fd5b5050505050565b60011515600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3bf06f1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611ce757600080fd5b505afa158015611cfb573d6000803e3d6000fd5b505050506040513d6020811015611d1157600080fd5b8101908080519060200190929190505050151514611d2e57600080fd5b60008111611d3b57600080fd5b80600d8190555050565b60011515600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3bf06f1336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611de857600080fd5b505afa158015611dfc573d6000803e3d6000fd5b505050506040513d6020811015611e1257600080fd5b8101908080519060200190929190505050151514611e2f57600080fd5b60008111611e3c57600080fd5b8060078190555050565b6000600754905090565b60004290506006548110611fd457611e66612088565b6000611e91600554611e8360065485611fd790919063ffffffff16565b61203c90919063ffffffff16565b90506000611ebe611ead6005548461200890919063ffffffff16565b600654611fee90919063ffffffff16565b90506000611ed760075483611fee90919063ffffffff16565b9050818410158015611ee95750808411155b15611fd057611ef6611224565b600681905550611f126001600a54611fee90919063ffffffff16565b600a81905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cebe26976040518163ffffffff1660e01b815260040160206040518083038186803b158015611f8057600080fd5b505afa158015611f94573d6000803e3d6000fd5b505050506040513d6020811015611faa57600080fd5b8101908080519060200190929190505050600881905550611fc96112b0565b6009819055505b5050505b50565b600082821115611fe357fe5b818303905092915050565b6000818301905082811015611fff57fe5b80905092915050565b60008083141561201b5760009050612036565b81830290508183828161202a57fe5b041461203257fe5b8090505b92915050565b600080821161204757fe5b600082848161205257fe5b04905082848161205e57fe5b0681840201841461206b57fe5b82848161207457fe5b0491505092915050565b6000819050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663985dea236121906064612182600d54600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cebe26976040518163ffffffff1660e01b815260040160206040518083038186803b15801561213957600080fd5b505afa15801561214d573d6000803e3d6000fd5b505050506040513d602081101561216357600080fd5b810190808051906020019092919050505061200890919063ffffffff16565b61203c90919063ffffffff16565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561221c57600080fd5b505af1158015612230573d6000803e3d6000fd5b50505050600061225b6a52b7d2dcc80cd2e400000061224d6112b0565b61203c90919063ffffffff16565b90506000600c54905060008090505b828110156122bb576122ac61229d606461228f600b548661200890919063ffffffff16565b61203c90919063ffffffff16565b83611fee90919063ffffffff16565b9150808060010191505061226a565b506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cebe26976040518163ffffffff1660e01b815260040160206040518083038186803b15801561232657600080fd5b505afa15801561233a573d6000803e3d6000fd5b505050506040513d602081101561235057600080fd5b810190808051906020019092919050505090508181101561246157600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e100b146123bc8385611fd790919063ffffffff16565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561244857600080fd5b505af115801561245c573d6000803e3d6000fd5b505050505b50505056fea165627a7a7230582047b8341bd535027493b15a64431ff50164850e16016f25437c610dbc69f2d94b0029
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NESTAbonus
Function name: constructor
PC address: 650
Estimated Gas Usage: 85809 - 512771
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:236

mappingContract.checkAddress("nestSave")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: NESTAbonus
Function name: changeExpectedMinimum(uint256)
PC address: 1119
Estimated Gas Usage: 2755 - 37742
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:405

require(mappingContract.checkOwners(msg.sender) == true)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeExpectedMinimum(uint256), txdata: 0x145251636363636363636363636363636363636363636363636363636363636363636363, decoded_data: (44954575821546287635033441238667070107740111693719277803554120850130979742563,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: NESTAbonus
Function name: getETH()
PC address: 1198
Estimated Gas Usage: 203 - 298
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:280

require(address(tx.origin) == address(msg.sender))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getETH(), txdata: 0x14f6c3be, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: getETH()
PC address: 1248
Estimated Gas Usage: 2799 - 2894
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:283

nowTime >= nextTime.sub(timeLimit) && nowTime <= nextTime.sub(timeLimit).add(getAbonusTimeLimit)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getETH(), txdata: 0x14f6c3be, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: getETH()
PC address: 1300
Estimated Gas Usage: 2813 - 2908
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:283

require(nowTime >= nextTime.sub(timeLimit) && nowTime <= nextTime.sub(timeLimit).add(getAbonusTimeLimit))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getETH(), txdata: 0x14f6c3be, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: NESTAbonus
Function name: getETH()
PC address: 1667
Estimated Gas Usage: 63457 - 458624
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:286

require(nestAmount > 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getETH(), txdata: 0x14f6c3be, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: NESTAbonus
Function name: depositIn(uint256)
PC address: 2120
Estimated Gas Usage: 307 - 402
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:256

require(address(tx.origin) == address(msg.sender))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: depositIn(uint256), txdata: 0x1f4ad75a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a, decoded_data: (40867796201405716031848582944242791007036465176108434366867382591028163402330,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: depositIn(uint256)
PC address: 2140
Estimated Gas Usage: 1143 - 1238
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:258

if (nowTime < nextTime) {
            require(!(nowTime >= nextTime.sub(timeLimit) && nowTime <= nextTime.sub(timeLimit).add(getAbonusTimeLimit)));
        } else {
            require(!(nowTime >= nextTime && nowTime <= nextTime.add(getAbonusTimeLimit)));
            uint256 time = (nowTime.sub(nextTime)).div(timeLimit);
            uint256 startTime = nextTime.add((time).mul(timeLimit));        
            uint256 endTime = startTime.add(getAbonusTimeLimit);        
            require(!(nowTime >= startTime && nowTime <= endTime));
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: depositIn(uint256), txdata: 0x1f4ad75a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a, decoded_data: (40867796201405716031848582944242791007036465176108434366867382591028163402330,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: depositIn(uint256)
PC address: 2172
Estimated Gas Usage: 2869 - 2964
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:259

nowTime >= nextTime.sub(timeLimit) && nowTime <= nextTime.sub(timeLimit).add(getAbonusTimeLimit)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: depositIn(uint256), txdata: 0x1f4ad75a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a, decoded_data: (40867796201405716031848582944242791007036465176108434366867382591028163402330,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: depositIn(uint256)
PC address: 2225
Estimated Gas Usage: 2886 - 2981
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:259

require(!(nowTime >= nextTime.sub(timeLimit) && nowTime <= nextTime.sub(timeLimit).add(getAbonusTimeLimit)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: depositIn(uint256), txdata: 0x1f4ad75a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a, decoded_data: (40867796201405716031848582944242791007036465176108434366867382591028163402330,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: depositIn(uint256)
PC address: 2247
Estimated Gas Usage: 1975 - 2070
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:261

nowTime >= nextTime && nowTime <= nextTime.add(getAbonusTimeLimit)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: depositIn(uint256), txdata: 0x1f4ad75a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a, decoded_data: (40867796201405716031848582944242791007036465176108434366867382591028163402330,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: depositIn(uint256)
PC address: 2280
Estimated Gas Usage: 3709 - 3804
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:261

require(!(nowTime >= nextTime && nowTime <= nextTime.add(getAbonusTimeLimit)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: depositIn(uint256), txdata: 0x1f4ad75a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a, decoded_data: (40867796201405716031848582944242791007036465176108434366867382591028163402330,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: depositIn(uint256)
PC address: 2410
Estimated Gas Usage: 8386 - 8481
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:265

nowTime >= startTime && nowTime <= endTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: depositIn(uint256), txdata: 0x1f4ad75a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a, decoded_data: (40867796201405716031848582944242791007036465176108434366867382591028163402330,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: depositIn(uint256)
PC address: 2421
Estimated Gas Usage: 8417 - 8512
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:265

require(!(nowTime >= startTime && nowTime <= endTime))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: depositIn(uint256), txdata: 0x1f4ad75a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a, decoded_data: (40867796201405716031848582944242791007036465176108434366867382591028163402330,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: NESTAbonus
Function name: depositIn(uint256)
PC address: 2550
Estimated Gas Usage: 10908 - 45709
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:267

baseMapping.depositIn(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: depositIn(uint256), txdata: 0x1f4ad75a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a, decoded_data: (40867796201405716031848582944242791007036465176108434366867382591028163402330,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: NESTAbonus
Function name: changeExpectedIncrement(uint256)
PC address: 2804
Estimated Gas Usage: 2754 - 37741
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:405

require(mappingContract.checkOwners(msg.sender) == true)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: changeExpectedIncrement(uint256), txdata: 0x202b94828282828282828282828282828282828282828282828282828282828282828282, decoded_data: (59031261179808256490447953141684031454608227476601071863252885964818458247810,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: getInfo()
PC address: 2892
Estimated Gas Usage: 1955 - 2050
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:325

nowTime >= nextTime.sub(timeLimit) && nowTime <= nextTime.sub(timeLimit).add(getAbonusTimeLimit)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getInfo(), txdata: 0x5a9b0b89, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: getInfo()
PC address: 2945
Estimated Gas Usage: 1972 - 2067
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:325

if (nowTime >= nextTime.sub(timeLimit) && nowTime <= nextTime.sub(timeLimit).add(getAbonusTimeLimit)) {
            allowAbonus = getMapping[times.sub(1)][address(msg.sender)];
            _ethNum = ethNum;
            _nestValue = nestAllValue;
        } else {
            _ethNum = abonusContract.getETHNum();
            _nestValue = allValue();
            allowAbonus = getMapping[times][address(msg.sender)];
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getInfo(), txdata: 0x5a9b0b89, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: NESTAbonus
Function name: changeTimeLimit(uint256)
PC address: 4451
Estimated Gas Usage: 2820 - 37807
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:405

require(mappingContract.checkOwners(msg.sender) == true)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: changeTimeLimit(uint256), txdata: 0x659cf2353535353535353535353535353535353535353535353535353535353535353535, decoded_data: (24066591096383366107644165511609643593032585048152744682710791970272140670261,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: getNextTime()
PC address: 4660
Estimated Gas Usage: 1008 - 1103
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:348

if (nextTime > nowTime) { 
            return nextTime; 
        } else {
            uint256 time = (nowTime.sub(nextTime)).div(timeLimit);
            return nextTime.add(timeLimit.mul(time.add(1)));
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getNextTime(), txdata: 0x7711e857, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NESTAbonus
Function name: getInfo()
PC address: 5035
Estimated Gas Usage: 26470 - 238188
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:358

mappingContract.checkAddress("miningSave")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getInfo(), txdata: 0x5a9b0b89, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NESTAbonus
Function name: allValue()
PC address: 5190
Estimated Gas Usage: 5403 - 75753
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:358

nestContract.balanceOf(address(mappingContract.checkAddress("miningSave")))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: allValue(), txdata: 0xa456d812, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NESTAbonus
Function name: checkMinimumAbonus()
PC address: 5190
Estimated Gas Usage: 9135 - 79485
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:358

nestContract.balanceOf(address(mappingContract.checkAddress("miningSave")))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: checkMinimumAbonus(), txdata: 0x65aea7de, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: NESTAbonus
Function name: changeMapping(address)
PC address: 5500
Estimated Gas Usage: 2826 - 37813
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:405

require(mappingContract.checkOwners(msg.sender) == true)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeMapping(address), txdata: 0xa781e7f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NESTAbonus
Function name: changeMapping(address)
PC address: 5737
Estimated Gas Usage: 42357 - 319322
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:246

mappingContract.checkAddress("nest")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeMapping(address), txdata: 0xa781e7f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: NESTAbonus
Function name: takeOut(uint256)
PC address: 6843
Estimated Gas Usage: 261 - 356
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:272

require(address(tx.origin) == address(msg.sender))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: takeOut(uint256), txdata: 0xcaffbec7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7, decoded_data: (90363238267552638781531866732270171226669517444950871544517879284606716856263,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: NESTAbonus
Function name: takeOut(uint256)
PC address: 7087
Estimated Gas Usage: 2803 - 37790
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:274

require(amount <= baseMapping.checkAmount(address(msg.sender)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: takeOut(uint256), txdata: 0xcaffbec70101010101010101010101010101010101010101010101010101010101010101, decoded_data: (454086624460063511464984254936031011189294057512315937409637584344757371137,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: NESTAbonus
Function name: takeOut(uint256)
PC address: 7212
Estimated Gas Usage: 5222 - 74915
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:275

baseMapping.takeOut(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: takeOut(uint256), txdata: 0xcaffbec70000008000002080020220002002000010800480408080208040200020040001, decoded_data: (3450873225620817575526616348252790887415415421743162258732392374337537,), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NESTAbonus
Function name: takeOut(uint256)
PC address: 7212
Estimated Gas Usage: 5222 - 74915
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:275

baseMapping.takeOut(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: takeOut(uint256), txdata: 0xcaffbec70ac2d4b181008080808080808080808000000000000000000004000000000001, decoded_data: (4867364772121242248792004415944049075928555455696954727887933467733929230337,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: NESTAbonus
Function name: changeLevelingProportion(uint256)
PC address: 7465
Estimated Gas Usage: 2775 - 37762
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:405

require(mappingContract.checkOwners(msg.sender) == true)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: changeLevelingProportion(uint256), txdata: 0xd2e2852d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d, decoded_data: (20433898100702858015924291472121395503518232588054217183433691295514081701165,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: NESTAbonus
Function name: changeGetAbonusTimeLimit(uint256)
PC address: 7722
Estimated Gas Usage: 2797 - 37784
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:405

require(mappingContract.checkOwners(msg.sender) == true)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: changeGetAbonusTimeLimit(uint256), txdata: 0xe945a4d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2, decoded_data: (95358191136613337407646693536566512349751752077586346856023892712399047938770,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: getETH()
PC address: 7774
Estimated Gas Usage: 1051 - 1146
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:309

if (nowTime >= nextTime) {                                          
            levelingResult();
            uint256 time = (nowTime.sub(nextTime)).div(timeLimit);
            uint256 startTime = nextTime.add((time).mul(timeLimit));      
            uint256 endTime = startTime.add(getAbonusTimeLimit);           
            if (nowTime >= startTime && nowTime <= endTime) {
                nextTime = getNextTime();                                   
                times = times.add(1);                                   
                ethNum = abonusContract.getETHNum();                    
                nestAllValue = allValue();                              
            }
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getETH(), txdata: 0x14f6c3be, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: getETH()
PC address: 7907
Estimated Gas Usage: 21291 - 196085
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:314

nowTime >= startTime && nowTime <= endTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getETH(), txdata: 0x14f6c3be, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: getETH()
PC address: 7918
Estimated Gas Usage: 21322 - 196116
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:314

if (nowTime >= startTime && nowTime <= endTime) {
                nextTime = getNextTime();                                   
                times = times.add(1);                                   
                ethNum = abonusContract.getETHNum();                    
                nestAllValue = allValue();                              
            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getETH(), txdata: 0x14f6c3be, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: getNextTime()
PC address: 8161
Estimated Gas Usage: 2682 - 2777
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:47

assert(_b <= _a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getNextTime(), txdata: 0x7711e857, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NESTAbonus
Function name: getInfo()
PC address: 8162
Estimated Gas Usage: 5464 - 5559
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:326

times.sub(1)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getInfo(), txdata: 0x5a9b0b89, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NESTAbonus
Function name: getETH()
PC address: 8162
Estimated Gas Usage: 6315 - 6410
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:284

times.sub(1)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getETH(), txdata: 0x14f6c3be, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NESTAbonus
Function name: checkMinimumAbonus()
PC address: 8162
Estimated Gas Usage: 5274 - 75343
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:358

all.sub(nestContract.balanceOf(address(mappingContract.checkAddress("miningSave"))))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: checkMinimumAbonus(), txdata: 0x65aea7de, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: getNextTime()
PC address: 8189
Estimated Gas Usage: 3010 - 3105
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:54

assert(c >= _a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getNextTime(), txdata: 0x7711e857, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NESTAbonus
Function name: getNextTime()
PC address: 8190
Estimated Gas Usage: 4871 - 4966
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:352

nextTime.add(timeLimit.mul(time.add(1)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getNextTime(), txdata: 0x7711e857, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: depositIn(uint256)
PC address: 8210
Estimated Gas Usage: 6497 - 6592
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:28

if (_a == 0) {
      return 0;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: depositIn(uint256), txdata: 0x1f4ad75a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a, decoded_data: (40867796201405716031848582944242791007036465176108434366867382591028163402330,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: NESTAbonus
Function name: getInfo()
PC address: 8210
Estimated Gas Usage: 14004 - 154472
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:28

if (_a == 0) {
      return 0;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getInfo(), txdata: 0x5a9b0b89, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: depositIn(uint256)
PC address: 8232
Estimated Gas Usage: 6539 - 6634
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:33

c / _a

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: depositIn(uint256), txdata: 0x1f4ad75a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a, decoded_data: (40867796201405716031848582944242791007036465176108434366867382591028163402330,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: NESTAbonus
Function name: getInfo()
PC address: 8232
Estimated Gas Usage: 14046 - 154514
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:33

c / _a

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getInfo(), txdata: 0x5a9b0b89, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: getNextTime()
PC address: 8240
Estimated Gas Usage: 3960 - 4055
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:33

assert(c / _a == _b)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getNextTime(), txdata: 0x7711e857, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: NESTAbonus
Function name: getInfo()
PC address: 8240
Estimated Gas Usage: 14068 - 154536
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:33

assert(c / _a == _b)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getInfo(), txdata: 0x5a9b0b89, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NESTAbonus
Function name: getETH()
PC address: 8241
Estimated Gas Usage: 66028 - 461195
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:288

nestAmount.mul(ethNum)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getETH(), txdata: 0x14f6c3be, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NESTAbonus
Function name: changeTimeLimit(uint256)
PC address: 8241
Estimated Gas Usage: 2982 - 37969
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:381

hour.mul(1 hours)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: changeTimeLimit(uint256), txdata: 0x659cf23510201c17530eca8642000adc407b06449000104004989040000c009080000148, decoded_data: (7293738561128658911446378462994928273055057650197632553829057383413229551944,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NESTAbonus
Function name: getInfo()
PC address: 8241
Estimated Gas Usage: 16690 - 157158
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:338

_myJoinNest.mul(_ethNum)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getInfo(), txdata: 0x5a9b0b89, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NESTAbonus
Function name: getInfo()
PC address: 8262
Estimated Gas Usage: 14105 - 154573
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:338

_myJoinNest.mul(_ethNum).div(_nestValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getInfo(), txdata: 0x5a9b0b89, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NESTAbonus
Function name: getNextTime()
PC address: 8297
Estimated Gas Usage: 2866 - 2961
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:41

assert(_a == _b * c + _a % _b)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getNextTime(), txdata: 0x7711e857, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: NESTAbonus
Function name: getInfo()
PC address: 8297
Estimated Gas Usage: 14247 - 154715
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:41

assert(_a == _b * c + _a % _b)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getInfo(), txdata: 0x5a9b0b89, value: 0x0


time_used: 36035.71906995773 seconds
#@contract_info_time
0x607B80a3498F01f87b889486f4E7f82C98CF0584.sol:0.5.8:NESTAbonus:36035.71906995773:36100:60:36000
