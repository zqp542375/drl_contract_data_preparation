++++ 0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol  :  0.4.16  :  CIT_Token_Start ++++
3454600284437428052925339095163088668976646922 is added into actors.
1461501637330902918203684832716283019655932542976 is added into actors.
2466254742821198181448497779282231217833675501566 is added into actors.
Starting preprocessing.
number of genesis states: 1
total instructions: 5680
['constructor']:writes at the last depth:['1', '2', '9', '14', '15', '16', '17', '0', '3', '10', '10', '10', '5', '6', '13', '11', '11']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 94.15% coverage.
dynamic svars:['14', '15', '16', '11', '13', '10', '12']
static svars:['2', '9', '3', '6', '8', '5', '1', '7', '0', '17']
Ending preprocessing.
preprocessing time(s): 102.02020645141602
contract coverage: 95.92%
name() is not reachable
standard() is not reachable
symbol() is not reachable
Function Reads: State variables read in conditions
	ToDo():['0']
	contract_balance():[]
	name():[]
	totalSupply():[]
	holders(address):[]
	transferFromContract(address,uint256):['0', '10', '11']
	decimals():[]
	totalHolders():[]
	getHolderInfo(address):['10', '11']
	standard():[]
	changeTokensPerOneEther(uint256):['0']
	totalToken():[]
	balanceOf(address):[]
	reward_info(address):['10']
	withdraw_all_from_Contract():['0', '10']
	owner():[]
	symbol():[]
	ChangeProcentReward(uint256):['0']
	refList(address):[]
	addressSupportProject():[]
	referals(address):[]
	withdraw_a_little_bit_eth():['0']
	transfer(address,uint256):['10', '11']
	addinvest(address):['0']
	mintNewToken(uint256):['0']
	setaddressSupportProject(address):['0']
	withdraw_a_little_bit_eth(uint256):['0']
	punish(address):['0', '10']
Function Writes: State variables written
	changeTokensPerOneEther(uint256):['2']
	ChangeProcentReward(uint256):['9']
	mintNewToken(uint256):['3', '10']
	withdraw_all_from_Contract():['10']
	fallback:['11', '6', '13', '12', '10', '8', '5']
	setaddressSupportProject(address):['1']
	transferFromContract(address,uint256):['6', '11', '13', '12', '10', '7']
	punish(address):['6', '11', '13']
	transfer(address,uint256):['6', '11', '13', '12', '10']
============================
iteration:3
targets:['name()', 'standard()', 'symbol()', 'reward_info(address)']
['changeTokensPerOneEther(uint256)']:writes at the last depth:['2']
['fallback']:writes at the last depth:[]
['ChangeProcentReward(uint256)']:writes at the last depth:['9']
['withdraw_a_little_bit_eth()']:writes at the last depth:[]
['addinvest(address)']:writes at the last depth:[]
['setaddressSupportProject(address)']:writes at the last depth:['1']
['mintNewToken(uint256)']:writes at the last depth:['10', '3']
['withdraw_a_little_bit_eth(uint256)']:writes at the last depth:[]
['withdraw_all_from_Contract()']:writes at the last depth:['10']
['fallback']:writes at the last depth:[]
['withdraw_all_from_Contract()']:writes at the last depth:['10']
['punish(address)']:writes at the last depth:['11', '13', '6']
['transferFromContract(address,uint256)']:writes at the last depth:['11', '12', '10', '13', '6']
['fallback']:writes at the last depth:['11', '5', '10', '6', '13', '8', '12']
['transferFromContract(address,uint256)']:writes at the last depth:['11', '10', '7']
['transfer(address,uint256)']:writes at the last depth:['11', '10', '8']
['transfer(address,uint256)']:writes at the last depth:['11', '10', '8']
['fallback']:writes at the last depth:['11', '5', '10', '6', '13', '8', '12']
['transfer(address,uint256)']:writes at the last depth:['11', '10', '6', '13', '8', '12']
['transfer(address,uint256)']:writes at the last depth:['10', '8', '7']
contract coverage: 95.92%
============================
iteration:4
contract coverage: 95.92%
============================
iteration:5
contract coverage: 95.92%
============================
iteration:6
contract coverage: 95.92%
============================
iteration:7
contract coverage: 95.92%
============================
iteration:8
contract coverage: 95.92%
============================
iteration:9
contract coverage: 95.97%
============================
iteration:10
['fallback', 'changeTokensPerOneEther(uint256)']:writes at the last depth:['2']
['fallback', 'fallback']:writes at the last depth:[]
['fallback', 'ChangeProcentReward(uint256)']:writes at the last depth:['9']
['fallback', 'withdraw_all_from_Contract()']:writes at the last depth:[]
['fallback', 'setaddressSupportProject(address)']:writes at the last depth:['1']
['fallback', 'mintNewToken(uint256)']:writes at the last depth:['10', '3']
['fallback', 'withdraw_all_from_Contract()']:writes at the last depth:['', '10']
['fallback', 'punish(address)']:writes at the last depth:['11', '13', '6']
['fallback', 'transferFromContract(address,uint256)']:writes at the last depth:['10', '7']
contract coverage: 95.97%
============================
iteration:11
contract coverage: 95.97%
============================
iteration:12
['fallback', 'punish(address)', 'fallback']:writes at the last depth:[]
contract coverage: 95.97%
============================
iteration:13
contract coverage: 95.97%
============================
iteration:14
contract coverage: 95.97%
============================
iteration:15
['fallback', 'mintNewToken(uint256)', 'changeTokensPerOneEther(uint256)']:writes at the last depth:['2']
['fallback', 'mintNewToken(uint256)', 'withdraw_a_little_bit_eth()']:writes at the last depth:[]
['fallback', 'mintNewToken(uint256)', 'mintNewToken(uint256)']:writes at the last depth:['10', '3']
contract coverage: 95.97%
============================
iteration:16
contract coverage: 95.97%
============================
iteration:17
contract coverage: 95.97%
============================
iteration:18
contract coverage: 95.97%
============================
iteration:19
['fallback', 'setaddressSupportProject(address)', 'changeTokensPerOneEther(uint256)']:writes at the last depth:['2']
['fallback', 'setaddressSupportProject(address)', 'punish(address)']:writes at the last depth:['11', '13', '6']
contract coverage: 95.97%
============================
iteration:20
contract coverage: 95.97%
============================
iteration:21
contract coverage: 95.97%
============================
iteration:22
contract coverage: 95.97%
============================
iteration:23
contract coverage: 95.97%
============================
iteration:24
contract coverage: 95.97%
============================
iteration:25
contract coverage: 97.94%
============================
iteration:26
['transferFromContract(address,uint256)', 'changeTokensPerOneEther(uint256)']:writes at the last depth:['2']
['transferFromContract(address,uint256)', 'fallback']:writes at the last depth:[]
['transferFromContract(address,uint256)', 'ChangeProcentReward(uint256)']:writes at the last depth:['9']
['transferFromContract(address,uint256)', 'withdraw_a_little_bit_eth()']:writes at the last depth:[]
['transferFromContract(address,uint256)', 'addinvest(address)']:writes at the last depth:[]
['transferFromContract(address,uint256)', 'withdraw_all_from_Contract()']:writes at the last depth:[]
['transferFromContract(address,uint256)', 'setaddressSupportProject(address)']:writes at the last depth:['1']
['transferFromContract(address,uint256)', 'mintNewToken(uint256)']:writes at the last depth:['10', '3']
['transferFromContract(address,uint256)', 'withdraw_a_little_bit_eth(uint256)']:writes at the last depth:[]
['transferFromContract(address,uint256)', 'withdraw_all_from_Contract()']:writes at the last depth:['', '10']
['transferFromContract(address,uint256)', 'fallback']:writes at the last depth:[]
['transferFromContract(address,uint256)', 'withdraw_all_from_Contract()']:writes at the last depth:['', '10']
['transferFromContract(address,uint256)', 'punish(address)']:writes at the last depth:['11', '13', '6']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)']:writes at the last depth:['11', '12', '10', '13', '6']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)']:writes at the last depth:['10', '7']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)']:writes at the last depth:['11', '10', '7']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)']:writes at the last depth:['11', '10', '7']
['transferFromContract(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['11', '10', '8']
['transferFromContract(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['11', '10', '8']
['transferFromContract(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['11', '10', '6', '13', '8', '12']
['transferFromContract(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['11', '10', '6', '13', '8', '12']
['transferFromContract(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['11', '10', '6', '13', '8', '12']
['transferFromContract(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['11', '10', '8', '7']
contract coverage: 97.94%
============================
iteration:27
contract coverage: 97.94%
============================
iteration:28
contract coverage: 97.94%
============================
iteration:29
contract coverage: 97.94%
============================
iteration:30
contract coverage: 97.94%
============================
iteration:31
contract coverage: 97.94%
============================
iteration:32
contract coverage: 97.94%
============================
iteration:33
contract coverage: 97.94%
============================
iteration:34
contract coverage: 97.94%
============================
iteration:35
contract coverage: 97.94%
============================
iteration:36
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'changeTokensPerOneEther(uint256)']:writes at the last depth:['2']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'fallback']:writes at the last depth:[]
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'ChangeProcentReward(uint256)']:writes at the last depth:['9']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'withdraw_a_little_bit_eth()']:writes at the last depth:[]
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'addinvest(address)']:writes at the last depth:[]
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'withdraw_all_from_Contract()']:writes at the last depth:[]
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'setaddressSupportProject(address)']:writes at the last depth:['1']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'mintNewToken(uint256)']:writes at the last depth:['10', '3']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'withdraw_a_little_bit_eth(uint256)']:writes at the last depth:[]
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'withdraw_all_from_Contract()']:writes at the last depth:['', '10']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'fallback']:writes at the last depth:[]
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'withdraw_all_from_Contract()']:writes at the last depth:['', '10']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'punish(address)']:writes at the last depth:['11', '13', '6']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'transferFromContract(address,uint256)']:writes at the last depth:['11', '12', '10', '13', '6']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'transferFromContract(address,uint256)']:writes at the last depth:['11', '10', '7']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'transferFromContract(address,uint256)']:writes at the last depth:['11', '10', '7']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['11', '10', '6', '13', '8', '12']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['11', '10', '6', '13', '8', '12']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['11', '10', '6', '13', '8', '12']
contract coverage: 97.94%
============================
iteration:37
contract coverage: 97.94%
============================
iteration:38
contract coverage: 97.94%
============================
iteration:39
contract coverage: 97.94%
============================
iteration:40
contract coverage: 97.94%
============================
iteration:41
contract coverage: 97.94%
============================
iteration:42
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'changeTokensPerOneEther(uint256)']:writes at the last depth:['2']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'ChangeProcentReward(uint256)']:writes at the last depth:['9']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'setaddressSupportProject(address)']:writes at the last depth:['1']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'mintNewToken(uint256)']:writes at the last depth:['10', '3']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'withdraw_all_from_Contract()']:writes at the last depth:['', '10']
contract coverage: 97.94%
============================
iteration:43
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'punish(address)', 'changeTokensPerOneEther(uint256)']:writes at the last depth:['2']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'punish(address)', 'fallback']:writes at the last depth:[]
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'punish(address)', 'ChangeProcentReward(uint256)']:writes at the last depth:['9']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'punish(address)', 'setaddressSupportProject(address)']:writes at the last depth:['1']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'punish(address)', 'mintNewToken(uint256)']:writes at the last depth:['10', '3']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'punish(address)', 'withdraw_all_from_Contract()']:writes at the last depth:['', '10']
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'punish(address)', 'fallback']:writes at the last depth:[]
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'punish(address)', 'withdraw_all_from_Contract()']:writes at the last depth:['', '10']
contract coverage: 97.94%
============================
iteration:44
contract coverage: 97.94%
============================
iteration:45
contract coverage: 97.94%
============================
iteration:46
contract coverage: 97.94%
============================
iteration:47
contract coverage: 97.94%
============================
iteration:48
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'mintNewToken(uint256)', 'ChangeProcentReward(uint256)']:writes at the last depth:['9']
contract coverage: 97.94%
============================
iteration:49
contract coverage: 97.94%
============================
iteration:50
contract coverage: 97.94%
============================
iteration:51
contract coverage: 97.94%
============================
iteration:52
contract coverage: 97.94%
============================
iteration:53
['transferFromContract(address,uint256)', 'transferFromContract(address,uint256)', 'ChangeProcentReward(uint256)', 'fallback']:writes at the last depth:[]
contract coverage: 97.94%
============================
iteration:54
contract coverage: 97.94%
============================
iteration:55
contract coverage: 97.94%
============================
iteration:56
contract coverage: 97.94%
============================
iteration:57
contract coverage: 97.94%
============================
iteration:58
contract coverage: 97.94%
============================
iteration:59
contract coverage: 97.94%
============================
iteration:60
contract coverage: 97.94%
============================
iteration:61
contract coverage: 97.94%
============================
iteration:62
contract coverage: 97.94%
============================
iteration:63
contract coverage: 97.94%
============================
iteration:64
contract coverage: 97.94%
============================
iteration:65
contract coverage: 97.94%
============================
iteration:66
contract coverage: 97.94%
============================
iteration:67
contract coverage: 97.94%
============================
iteration:68
contract coverage: 97.94%
============================
iteration:69
contract coverage: 97.94%
============================
iteration:70
contract coverage: 97.94%
============================
iteration:71
contract coverage: 97.94%
============================
iteration:72
contract coverage: 97.94%
============================
iteration:73
contract coverage: 97.94%
============================
iteration:74
contract coverage: 97.94%
============================
iteration:75
contract coverage: 97.94%
============================
iteration:76
contract coverage: 97.94%
============================
iteration:77
contract coverage: 97.94%
============================
iteration:78
contract coverage: 97.94%
============================
iteration:79
contract coverage: 97.94%
============================
iteration:80
contract coverage: 97.94%
#@statespace
2677 nodes, 2676 edges, 43111 total states
#@coverage
Achieved 11.29% coverage for code: 
#@coverage
Achieved 97.94% coverage for code: 60606040523615610168576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063044e8fc614610a91578063057440d314610aa657806306fdde0314610add57806318160ddd14610b6c57806318a5bbdc14610b955780631a88f30614610c31578063313ce56714610c7357806353d74fdf14610ca257806354e4067a14610ccb5780635a3b7e4214610d46578063617834b114610dd5578063626be56714610df857806370a0823114610e2157806376f7024914610e6e57806379bb9cbc14610ebb5780638da5cb5b14610ed057806395d89b4114610f2557806397803b5014610fb457806399d3b03c14610fd75780639cd3debd14611050578063a128fcf2146110a5578063a8c0ccfa1461112b578063a9059cbb14611135578063aecfd17114611177578063d0c4e7fb146111a5578063d15ffaef146111c8578063e72e810614611201578063ea7221a114611224575b5b6000806000806000803273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101a957fe5b6000600a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115156101f757600080fd5b60003411151561020657600080fd5b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209550600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209450600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002093503373ffffffffffffffffffffffffffffffffffffffff168660050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561032657610a89565b670de0b6b3a7640000346002540281151561033d57fe5b049250600a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111561042657600a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250600254670de0b6b3a764000084028115156103e057fe5b0491503373ffffffffffffffffffffffffffffffffffffffff166108fc8334039081150290604051600060405180830381858888f19350505050151561042557600080fd5b5b670de0b6b3a76400003481151561043957fe5b04866000016000828254019250508190555060008311151561045a57600080fd5b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156107d15760066000815480929190600101919050555060065486600401819055504286600101819055506000866003018190555060008036905014156105e6576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061078d565b601460003690501415156105f957600080fd5b6106356000368080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061125d565b8460000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506106b36000368080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061125d565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561078c57fe5b5b83600001601481819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff160217905550506006548660040181905550610905565b6107da3361126c565b6008819055506000600854111561090457600854600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600754600a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550428560010181905550600086600301819055503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008546040518082815260200191505060405180910390a35b5b82600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550826005600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a36064600f3402811515610a2357fe5b049050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610a8857600080fd5b5b505050505050005b3415610a9c57600080fd5b610aa461139b565b005b3415610ab157600080fd5b610ab9611433565b60405180848152602001838152602001828152602001935050505060405180910390f35b3415610ae857600080fd5b610af061149f565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b315780820151818401525b602081019050610b15565b50505050905090810190601f168015610b5e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610b7757600080fd5b610b7f61153d565b6040518082815260200191505060405180910390f35b3415610ba057600080fd5b610bcc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611543565b604051808781526020018681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001965050505050505060405180910390f35b3415610c3c57600080fd5b610c71600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061159f565b005b3415610c7e57600080fd5b610c86611b4c565b604051808260ff1660ff16815260200191505060405180910390f35b3415610cad57600080fd5b610cb5611b5f565b6040518082815260200191505060405180910390f35b3415610cd657600080fd5b610d02600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b65565b604051808881526020018781526020018681526020018581526020018481526020018381526020018215151515815260200197505050505050505060405180910390f35b3415610d5157600080fd5b610d59611d00565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d9a5780820151818401525b602081019050610d7e565b50505050905090810190601f168015610dc75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610de057600080fd5b610df66004808035906020019091905050611d9e565b005b3415610e0357600080fd5b610e0b611e05565b6040518082815260200191505060405180910390f35b3415610e2c57600080fd5b610e58600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e0b565b6040518082815260200191505060405180910390f35b3415610e7957600080fd5b610ea5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061126c565b6040518082815260200191505060405180910390f35b3415610ec657600080fd5b610ece611e23565b005b3415610edb57600080fd5b610ee36120ad565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610f3057600080fd5b610f386120d2565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610f795780820151818401525b602081019050610f5d565b50505050905090810190601f168015610fa65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610fbf57600080fd5b610fd56004808035906020019091905050612170565b005b3415610fe257600080fd5b61100e600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506121d7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561105b57600080fd5b61106361220a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156110b057600080fd5b6110dc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612230565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260ff1660ff1681526020019250505060405180910390f35b611133612281565b005b341561114057600080fd5b611175600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612341565b005b6111a3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612b6d565b005b34156111b057600080fd5b6111c66004808035906020019091905050612c0d565b005b34156111d357600080fd5b6111ff600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612cca565b005b341561120c57600080fd5b6112226004808035906020019091905050612d91565b005b341561122f57600080fd5b61125b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612e62565b005b6000601482015190505b919050565b6000806000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115156112bd57600080fd5b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061139262278d00611384836001015442036113766064611368600954600a60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461312290919063ffffffff16565b61314790919063ffffffff16565b61312290919063ffffffff16565b61314790919063ffffffff16565b91505b50919050565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156113f657600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b60008060003073ffffffffffffffffffffffffffffffffffffffff16319250600a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915060025490505b909192565b600f8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115355780601f1061150a57610100808354040283529160200191611535565b820191906000526020600020905b81548152906001019060200180831161151857829003601f168201915b505050505081565b60035481565b600b6020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b60008060003373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156115ff57600080fd5b60008411151561160e57600080fd5b83600a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561165c57600080fd5b600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508473ffffffffffffffffffffffffffffffffffffffff16600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561177957611b44565b6000600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156119105760066000815480929190600101919050555060065483600401819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050808260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600001601481819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff160217905550506006548360040181905550428360010181905550611a44565b6119198561126c565b60078190555060006007541115611a4357600754600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600754600a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550428360010181905550600083600301819055508473ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6007546040518082815260200191505060405180910390a35b5b83600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555083600a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508473ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a35b5b5050505050565b601160009054906101000a900460ff1681565b60065481565b600080600080600080600080600b60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600b60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549750600a60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549650611c428961126c565b93506009549250600b60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015494508873ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611cec57600091505b806002015495505b50919395979092949650565b600e8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d965780601f10611d6b57610100808354040283529160200191611d96565b820191906000526020600020905b815481529060010190602001808311611d7957829003601f168201915b505050505081565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611df957600080fd5b806002819055505b5b50565b60055481565b600a6020528060005260406000206000915090505481565b60003373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611e8057600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff1631141515611f1a576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515611f1957600080fd5b5b600a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415156120a85780600a60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5b5b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60108054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121685780601f1061213d57610100808354040283529160200191612168565b820191906000526020600020905b81548152906001019060200180831161214b57829003601f168201915b505050505081565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156121cb57600080fd5b806009819055505b5b50565b600c6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d6020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156122dc57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050151561233d57600080fd5b5b5b565b6000806000806000808611151561235757600080fd5b85600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156123a557600080fd5b600b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209450600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209350600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002092508673ffffffffffffffffffffffffffffffffffffffff16600b60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561250357612b64565b6000600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561266c576006600081548092919060010191905055506006548560040181905550339150818360000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600001601481819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff1602179055505060065485600401819055505b3090508073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156126f45785600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600082825401925050819055505b3073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415801561277057506000600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156128a95761277e8761126c565b600781905550600060075411156128a857600754600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600754600a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550428560010181905550600085600301819055508673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6007546040518082815260200191505060405180910390a35b5b6000600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156128fb574285600101819055505b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612a64576129393361126c565b60088190555060006008541115612a6357600854600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600754600a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550428460010181905550600085600301819055503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008546040518082815260200191505060405180910390a35b5b85600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555085600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef886040518082815260200191505060405180910390a35b50505050505050565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612bc857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501515612c0857600080fd5b5b5b50565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612c6857600080fd5b8060036000828254019250508190555080600a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b5b50565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612d2557600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff1614151515612d4b57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b60003373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612dee57600080fd5b670de0b6b3a7640000820290506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515612e5c57600080fd5b5b5b5050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612ec357600080fd5b6000600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515612f1157600080fd5b600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209350600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060066000815480929190600190039190505550848460050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600001601481819054906101000a900460ff16809291906001900391906101000a81548160ff021916908360ff160217905550503073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3428360010181905550600084600301819055505b5b5050505050565b60008060008414156131375760009150613140565b82840290508091505b5092915050565b600080828481151561315557fe5b0490508091505b50929150505600a165627a7a7230582063a020e76397a67c3aee8e2e313bdba1738070bbd6c04e29e8feab3cb606cc120029
==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CIT_Token_Start
Function name: fallback
PC address: 423
Estimated Gas Usage: 84 - 179
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:189

assert(msg.sender == tx.origin)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CIT_Token_Start
Function name: fallback
PC address: 801
Estimated Gas Usage: 2200 - 3385
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:197

if (data.blackList == msg.sender) return ;

--------------------
Initial State:

Account: [CREATOR], balance: 0x14082, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x1

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CIT_Token_Start
Function name: fallback
PC address: 1930
Estimated Gas Usage: 46286 - 194391
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:227

assert(data_ref.ref != msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x17e602, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200111ae4ea656dc0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x0000000000000000000000000000000000000000, decoded_data: (0,), value: 0x38d7ea4c6800

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CIT_Token_Start
Function name: fallback
PC address: 1931
Estimated Gas Usage: 46296 - 194401
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:155

{
          addr := mload(add(bys,20))
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x12800200000200001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: , value: 0x38d7ea4c6800

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CIT_Token_Start
Function name: reward_info(address)
PC address: 4879
Estimated Gas Usage: 4484 - 5430
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:278

block.timestamp - data.lastDatetime

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: reward_info(address), txdata: 0x76f70249000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe',), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CIT_Token_Start
Function name: getHolderInfo(address)
PC address: 4879
Estimated Gas Usage: 9908 - 12514
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:278

block.timestamp - data.lastDatetime

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getHolderInfo(address), txdata: 0x54e4067a000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CIT_Token_Start
Function name: ToDo()
PC address: 5105
Estimated Gas Usage: 981 - 1406
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:81

require(owner == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: ToDo(), txdata: 0x044e8fc6, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CIT_Token_Start
Function name: transferFromContract(address,uint256)
PC address: 5626
Estimated Gas Usage: 1164 - 1589
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:81

require(owner == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFromContract(address,uint256), txdata: 0x1a88f306, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CIT_Token_Start
Function name: changeTokensPerOneEther(uint256)
PC address: 7668
Estimated Gas Usage: 1235 - 1660
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:81

require(owner == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: changeTokensPerOneEther(uint256), txdata: 0x617834b1, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CIT_Token_Start
Function name: withdraw_all_from_Contract()
PC address: 7803
Estimated Gas Usage: 1292 - 1717
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:81

require(owner == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: withdraw_all_from_Contract(), txdata: 0x79bb9cbc, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CIT_Token_Start
Function name: ChangeProcentReward(uint256)
PC address: 8646
Estimated Gas Usage: 1389 - 1814
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:81

require(owner == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: ChangeProcentReward(uint256), txdata: 0x97803b50, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CIT_Token_Start
Function name: withdraw_a_little_bit_eth()
PC address: 8919
Estimated Gas Usage: 1424 - 1849
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:81

require(owner == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdraw_a_little_bit_eth(), txdata: 0xa8c0ccfa, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CIT_Token_Start
Function name: transfer(address,uint256)
PC address: 10544
Estimated Gas Usage: 10785 - 32730
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:351

if (msg.sender != address(this) ) {
               reward_sender = reward_info (msg.sender);
            if (reward_sender > 0) { 
                balanceOf[msg.sender] += reward_sender;
                balanceOf[this] -= reward_to;
                data2.lastDatetime = now;
                data.reward = 0;
                Transfer(this, msg.sender, reward_sender);
            }
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0x0901d12ebe1b195e5aa8748e62bd7734ae19b51f', 65536), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CIT_Token_Start
Function name: addinvest(address)
PC address: 11203
Estimated Gas Usage: 1508 - 1933
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:81

require(owner == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: addinvest(address), txdata: 0xaecfd171, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CIT_Token_Start
Function name: mintNewToken(uint256)
PC address: 11363
Estimated Gas Usage: 1543 - 1968
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:81

require(owner == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: mintNewToken(uint256), txdata: 0xd0c4e7fb, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CIT_Token_Start
Function name: mintNewToken(uint256)
PC address: 11377
Estimated Gas Usage: 13322 - 53937
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:502

totalSupply += _amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: mintNewToken(uint256), txdata: 0xd0c4e7fbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa5, decoded_data: (115792089237316195423570985008687907853269984665640564039457584007913123676160,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CIT_Token_Start
Function name: mintNewToken(uint256)
PC address: 11454
Estimated Gas Usage: 13322 - 53937
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:503

balanceOf[this] += _amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: mintNewToken(uint256), txdata: 0xd0c4e7fbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3, decoded_data: (115792089237316195423570985008687907853269984665640564039457584007913126690816,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CIT_Token_Start
Function name: setaddressSupportProject(address)
PC address: 11552
Estimated Gas Usage: 1571 - 1996
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:81

require(owner == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setaddressSupportProject(address), txdata: 0xd15ffaef, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CIT_Token_Start
Function name: withdraw_a_little_bit_eth(uint256)
PC address: 11753
Estimated Gas Usage: 1590 - 2015
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:81

require(owner == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: withdraw_a_little_bit_eth(uint256), txdata: 0xe72e8106, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CIT_Token_Start
Function name: withdraw_a_little_bit_eth(uint256)
PC address: 11769
Estimated Gas Usage: 3267 - 38208
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:492

amount * 10**18

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: withdraw_a_little_bit_eth(uint256), txdata: 0xe72e810601, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CIT_Token_Start
Function name: punish(address)
PC address: 11966
Estimated Gas Usage: 1627 - 2052
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:81

require(owner == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: punish(address), txdata: 0xea7221a1, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CIT_Token_Start
Function name: punish(address)
PC address: 12424
Estimated Gas Usage: 33835 - 136737
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:452

data_ref.refUserCount--

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: punish(address), txdata: 0xea7221a1000000000000000000000000009ae8ddcbf8aba5b04d49d034146a6b8e3a8b0a, decoded_data: ('0x009ae8ddcbf8aba5b04d49d034146a6b8e3a8b0a',), value: 0x0


time_used: 36033.16355443001 seconds
#@contract_info_time
0x85c6835c9907c8e37e922269fb4fe96afeaaa5a5.sol:0.4.16:CIT_Token_Start:36033.16355443001:36100:60:36000
