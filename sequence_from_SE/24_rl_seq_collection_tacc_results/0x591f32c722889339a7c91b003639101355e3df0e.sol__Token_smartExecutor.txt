++++ 0x591f32c722889339a7c91b003639101355e3df0e.sol  :  0.6.8  :  Token ++++
1127659818185435576679867482525062626847330572729 is added into actors.
Starting preprocessing.
number of genesis states: 1
total instructions: 4530
['constructor']:writes at the last depth:['8', '3', '4', '5', '6', '7']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 93.07% coverage.
dynamic svars:['3', '4', '9', '0', '10', '1']
static svars:['7', '49791959467252497455735130940088646708311117250336157395101362029847983278000', '2', '8', '5', '6']
Ending preprocessing.
preprocessing time(s): 102.20990514755249
contract coverage: 71.55%
increaseAllowance(address,uint256) is not reachable
symbol() is not reachable
name() is not reachable
approve(address,uint256) is not reachable
Function Reads: State variables read in conditions
	transfer(address,uint256):['10', '0', '6']
	rewards(address,uint256):['10']
	buy(uint256):['0', '6']
	allowance(address,address):[]
	transferOwnership(address):['7']
	availableRewards(address):['0', '10']
	balanceOf(address):[]
	renounceOwnership():['7']
	owner():[]
	symbol():[]
	decreaseAllowance(address,uint256):['1']
	repayments(uint256):['9']
	reward():['10', '0', '9']
	transferFrom(address,address,uint256):['10', '0', '6']
	decimals():[]
	cap():[]
	increaseAllowance(address,uint256):[]
	repayment(uint256):['7']
	orgon_token():[]
	name():[]
	approve(address,uint256):[]
	totalSupply():[]
	withdrawOrgon(uint256):['7']
Function Writes: State variables written
	renounceOwnership():['7']
	approve(address,uint256):['1']
	transferOwnership(address):['7']
	reward():['10']
	increaseAllowance(address,uint256):['1']
	repayment(uint256):['9', '49791959467252497455735130940088646708311117250336157395101362029847983278000']
	decreaseAllowance(address,uint256):['1']
	transfer(address,uint256):['10', '0']
	transferFrom(address,address,uint256):['10', '0']
	buy(uint256):['2']
============================
iteration:3
targets:['reward()', 'repayments(uint256)', 'buy(uint256)', 'rewards(address,uint256)', 'repayment(uint256)', 'transferFrom(address,address,uint256)', 'availableRewards(address)', 'transfer(address,uint256)', 'withdrawOrgon(uint256)', 'increaseAllowance(address,uint256)', 'symbol()', 'name()', 'approve(address,uint256)', 'decreaseAllowance(address,uint256)']
['renounceOwnership()']:writes at the last depth:['7']
['transferOwnership(address)']:writes at the last depth:['7']
['approve(address,uint256)']:writes at the last depth:['1']
['increaseAllowance(address,uint256)']:writes at the last depth:['1']
['decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)']:writes at the last depth:['1', '0']
contract coverage: 81.81%
============================
iteration:4
['transferFrom(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'withdrawOrgon(uint256)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'repayment(uint256)']:writes at the last depth:['', '9']
['transferFrom(address,address,uint256)', 'buy(uint256)']:writes at the last depth:['0', '2']
['transferFrom(address,address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['1', '0']
contract coverage: 81.81%
============================
iteration:5
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'withdrawOrgon(uint256)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'repayment(uint256)']:writes at the last depth:['', '9']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['1', '0']
contract coverage: 81.81%
============================
iteration:6
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
contract coverage: 81.81%
============================
iteration:7
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'renounceOwnership()']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'withdrawOrgon(uint256)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'repayment(uint256)']:writes at the last depth:['', '9']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
contract coverage: 83.38%
============================
iteration:8
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'repayment(uint256)', 'renounceOwnership()']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'repayment(uint256)', 'transferOwnership(address)']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'repayment(uint256)', 'withdrawOrgon(uint256)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'repayment(uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'repayment(uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'repayment(uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'repayment(uint256)', 'repayment(uint256)']:writes at the last depth:['', '9']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'repayment(uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
contract coverage: 83.38%
============================
iteration:9
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'renounceOwnership()']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'withdrawOrgon(uint256)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'repayment(uint256)']:writes at the last depth:['', '9']
contract coverage: 83.38%
============================
iteration:10
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)', 'renounceOwnership()']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)', 'withdrawOrgon(uint256)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
contract coverage: 84.22%
============================
iteration:11
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'renounceOwnership()']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'withdrawOrgon(uint256)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
contract coverage: 84.22%
============================
iteration:12
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'withdrawOrgon(uint256)', 'renounceOwnership()']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'withdrawOrgon(uint256)', 'transferOwnership(address)']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'withdrawOrgon(uint256)', 'withdrawOrgon(uint256)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'withdrawOrgon(uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'withdrawOrgon(uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'withdrawOrgon(uint256)', 'repayment(uint256)']:writes at the last depth:['', '9']
contract coverage: 84.22%
============================
iteration:13
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'renounceOwnership()']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'withdrawOrgon(uint256)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'repayment(uint256)']:writes at the last depth:['', '9']
contract coverage: 84.22%
============================
iteration:14
contract coverage: 84.22%
============================
iteration:15
['transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'renounceOwnership()']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'withdrawOrgon(uint256)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
contract coverage: 84.22%
============================
iteration:16
contract coverage: 84.22%
============================
iteration:17
['transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'withdrawOrgon(uint256)', 'renounceOwnership()']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'withdrawOrgon(uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
contract coverage: 84.22%
============================
iteration:18
contract coverage: 84.22%
============================
iteration:19
contract coverage: 84.22%
============================
iteration:20
['transferFrom(address,address,uint256)', 'repayment(uint256)', 'renounceOwnership()']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'repayment(uint256)', 'transferOwnership(address)']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'repayment(uint256)', 'withdrawOrgon(uint256)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'repayment(uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'repayment(uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'repayment(uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'repayment(uint256)', 'repayment(uint256)']:writes at the last depth:['', '9']
['transferFrom(address,address,uint256)', 'repayment(uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
contract coverage: 84.22%
============================
iteration:21
contract coverage: 84.22%
============================
iteration:22
['transferFrom(address,address,uint256)', 'repayment(uint256)', 'repayment(uint256)', 'renounceOwnership()']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'repayment(uint256)', 'repayment(uint256)', 'transferOwnership(address)']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'repayment(uint256)', 'repayment(uint256)', 'withdrawOrgon(uint256)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'repayment(uint256)', 'repayment(uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'repayment(uint256)', 'repayment(uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'repayment(uint256)', 'repayment(uint256)', 'repayment(uint256)']:writes at the last depth:['', '9']
['transferFrom(address,address,uint256)', 'repayment(uint256)', 'repayment(uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
contract coverage: 84.22%
============================
iteration:23
['transferFrom(address,address,uint256)', 'repayment(uint256)', 'decreaseAllowance(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['7']
['transferFrom(address,address,uint256)', 'repayment(uint256)', 'decreaseAllowance(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
contract coverage: 84.22%
============================
iteration:24
contract coverage: 84.22%
============================
iteration:25
contract coverage: 84.22%
============================
iteration:26
contract coverage: 84.22%
============================
iteration:27
contract coverage: 84.22%
============================
iteration:28
contract coverage: 84.22%
============================
iteration:29
contract coverage: 84.22%
============================
iteration:30
contract coverage: 84.22%
============================
iteration:31
contract coverage: 84.22%
============================
iteration:32
contract coverage: 84.22%
============================
iteration:33
contract coverage: 84.22%
============================
iteration:34
contract coverage: 84.22%
============================
iteration:35
contract coverage: 84.22%
============================
iteration:36
contract coverage: 84.22%
============================
iteration:37
contract coverage: 84.22%
============================
iteration:38
contract coverage: 84.22%
============================
iteration:39
contract coverage: 84.22%
============================
iteration:40
contract coverage: 84.22%
#@statespace
4652 nodes, 4651 edges, 68781 total states
#@coverage
Achieved 6.56% coverage for code: 608060405273c58603dcd0cfa4b257409dfff6402ab638de99b9600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200006657600080fd5b506040518060400160405280600981526020017f4f524953205445535400000000000000000000000000000000000000000000008152506040518060400160405280600581526020017f4f524953540000000000000000000000000000000000000000000000000000008152506004637d2b750083838160039080519060200190620000f49291906200029c565b5080600490805190602001906200010d9291906200029c565b506012600560006101000a81548160ff021916908360ff160217905550505060008111620001a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f45524332304361707065643a206361702069732030000000000000000000000081525060200191505060405180910390fd5b8060068190555050620001bc816200027660201b60201c565b5050506000620001d16200029460201b60201c565b905080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506200034b565b80600560006101000a81548160ff021916908360ff16021790555050565b600033905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002df57805160ff191683800117855562000310565b8280016001018555821562000310579182015b828111156200030f578251825591602001919060010190620002f2565b5b5090506200031f919062000323565b5090565b6200034891905b80821115620003445760008160009055506001016200032a565b5090565b90565b612587806200035b6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806370a08231116100c3578063a9059cbb1161007c578063a9059cbb1461063b578063b933ceac146106a1578063d96a094a14610718578063dd62ed3e14610746578063f2fde38b146107be578063f854a27f146108025761014d565b806370a082311461044f578063715018a6146104a75780638da5cb5b146104b157806395d89b41146104fb578063a457c2d71461057e578063a85f3761146105e45761014d565b8063228cb73311610115578063228cb733146102d157806323b872dd146102f3578063313ce56714610379578063355274ea1461039d57806339509351146103bb5780636737b31e146104215761014d565b806305509b1f1461015257806306fdde031461019c578063095ea7b31461021f57806318160ddd146102855780632002b3ca146102a3575b600080fd5b61015a61085a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101a4610880565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e45780820151818401526020810190506101c9565b50505050905090810190601f1680156102115780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61026b6004803603604081101561023557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610922565b604051808215151515815260200191505060405180910390f35b61028d610940565b6040518082815260200191505060405180910390f35b6102cf600480360360208110156102b957600080fd5b810190808035906020019092919050505061094a565b005b6102d9610afc565b604051808215151515815260200191505060405180910390f35b61035f6004803603606081101561030957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b0c565b604051808215151515815260200191505060405180910390f35b610381610be5565b604051808260ff1660ff16815260200191505060405180910390f35b6103a5610bfc565b6040518082815260200191505060405180910390f35b610407600480360360408110156103d157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c06565b604051808215151515815260200191505060405180910390f35b61044d6004803603602081101561043757600080fd5b8101908080359060200190929190505050610cb9565b005b6104916004803603602081101561046557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f69565b6040518082815260200191505060405180910390f35b6104af610fb1565b005b6104b961113c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610503611166565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610543578082015181840152602081019050610528565b50505050905090810190601f1680156105705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6105ca6004803603604081101561059457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611208565b604051808215151515815260200191505060405180910390f35b610610600480360360208110156105fa57600080fd5b81019080803590602001909291905050506112d5565b604051808364ffffffffff1664ffffffffff1681526020018281526020019250505060405180910390f35b6106876004803603604081101561065157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611317565b604051808215151515815260200191505060405180910390f35b6106ed600480360360408110156106b757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611335565b604051808364ffffffffff1664ffffffffff1681526020018281526020019250505060405180910390f35b6107446004803603602081101561072e57600080fd5b8101908080359060200190929190505050611384565b005b6107a86004803603604081101561075c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114c1565b6040518082815260200191505060405180910390f35b610800600480360360208110156107d457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611548565b005b6108446004803603602081101561081857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611758565b6040518082815260200191505060405180910390f35b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109185780601f106108ed57610100808354040283529160200191610918565b820191906000526020600020905b8154815290600101906020018083116108fb57829003601f168201915b5050505050905090565b600061093661092f61180e565b8484611816565b6001905092915050565b6000600254905090565b61095261180e565b73ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a14576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610abd57600080fd5b505af1158015610ad1573d6000803e3d6000fd5b505050506040513d6020811015610ae757600080fd5b81019080805190602001909291905050505050565b6000610b0733611a0d565b905090565b6000610b19848484611d25565b610bda84610b2561180e565b610bd5856040518060600160405280602881526020016124bc60289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610b8b61180e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fe69092919063ffffffff16565b611816565b600190509392505050565b6000600560009054906101000a900460ff16905090565b6000600654905090565b6000610caf610c1361180e565b84610caa8560016000610c2461180e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120a690919063ffffffff16565b611816565b6001905092915050565b610cc161180e565b73ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d83576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610e6057600080fd5b505af1158015610e74573d6000803e3d6000fd5b505050506040513d6020811015610e8a57600080fd5b810190808051906020019092919050505050600960405180604001604052804264ffffffffff16815260200183815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548164ffffffffff021916908364ffffffffff1602179055506020820151816001015550503373ffffffffffffffffffffffffffffffffffffffff167fbb284f7f8cb8b1b8c98ee9a7d765413efc44bbb17352a0302ada1d737cdaef1b826040518082815260200191505060405180910390a250565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610fb961180e565b73ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461107b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111fe5780601f106111d3576101008083540402835291602001916111fe565b820191906000526020600020905b8154815290600101906020018083116111e157829003601f168201915b5050505050905090565b60006112cb61121561180e565b846112c68560405180606001604052806025815260200161252d602591396001600061123f61180e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fe69092919063ffffffff16565b611816565b6001905092915050565b600981815481106112e257fe5b90600052602060002090600202016000915090508060000160009054906101000a900464ffffffffff16908060010154905082565b600061132b61132461180e565b8484611d25565b6001905092915050565b600a602052816000526040600020818154811061134e57fe5b9060005260206000209060020201600091509150508060000160009054906101000a900464ffffffffff16908060010154905082565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd336113cb61113c565b846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561146857600080fd5b505af115801561147c573d6000803e3d6000fd5b505050506040513d602081101561149257600080fd5b8101908080519060200190929190505050506114be3366b1a2bc2ec5000083816114b857fe5b0461212e565b50565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61155061180e565b73ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611612576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061244e6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008061176483610f69565b90506000811115611808576000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090505b600980549050811015611806576117cc610940565b82600983815481106117da57fe5b90600052602060002090600202016001015402816117f457fe5b048301925080806001019150506117b7565b505b50919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561189c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806125096024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611922576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806124746022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600080611a1983610f69565b9050600980549050600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050108015611a715750600081115b15611d1a5760008090506000600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090505b600980549050811015611bd1576000611ada610940565b8460098481548110611ae857fe5b9060005260206000209060020201600101540281611b0257fe5b049050600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052804264ffffffffff16815260200183815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548164ffffffffff021916908364ffffffffff1602179055506020820151816001015550508083019250508080600101915050611ac3565b506000811115611d0f57600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611c8457600080fd5b505af1158015611c98573d6000803e3d6000fd5b505050506040513d6020811015611cae57600080fd5b8101908080519060200190929190505050508373ffffffffffffffffffffffffffffffffffffffff167f619caafabdd75649b302ba8419e48cccf64f37f1983ac4727cfb38b57703ffc9826040518082815260200191505060405180910390a25b600192505050611d20565b60009150505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611dab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806124e46025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061242b6023913960400191505060405180910390fd5b611e3c8383836122f5565b611ea781604051806060016040528060268152602001612496602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fe69092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f3a816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120a690919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290612093576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561205857808201518184015260208101905061203d565b50505050905090810190601f1680156120855780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905083811015612124576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156121d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b6121dd600083836122f5565b6121f2816002546120a690919063ffffffff16565b600281905550612249816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120a690919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146123345761233283611a0d565b505b61233d82611a0d565b5061234983838361234e565b505050565b612359838383612425565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612420576006546123ab8261239d610940565b6120a690919063ffffffff16565b111561241f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f45524332304361707065643a206361702065786365656465640000000000000081525060200191505060405180910390fd5b5b505050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220deba4dd9eade399ffa8d03c019c8a59c4948de63c77a530f359b7553833e95fe64736f6c63430006080033
#@coverage
Achieved 84.22% coverage for code: 608060405234801561001057600080fd5b506004361061014d5760003560e01c806370a08231116100c3578063a9059cbb1161007c578063a9059cbb1461063b578063b933ceac146106a1578063d96a094a14610718578063dd62ed3e14610746578063f2fde38b146107be578063f854a27f146108025761014d565b806370a082311461044f578063715018a6146104a75780638da5cb5b146104b157806395d89b41146104fb578063a457c2d71461057e578063a85f3761146105e45761014d565b8063228cb73311610115578063228cb733146102d157806323b872dd146102f3578063313ce56714610379578063355274ea1461039d57806339509351146103bb5780636737b31e146104215761014d565b806305509b1f1461015257806306fdde031461019c578063095ea7b31461021f57806318160ddd146102855780632002b3ca146102a3575b600080fd5b61015a61085a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101a4610880565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e45780820151818401526020810190506101c9565b50505050905090810190601f1680156102115780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61026b6004803603604081101561023557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610922565b604051808215151515815260200191505060405180910390f35b61028d610940565b6040518082815260200191505060405180910390f35b6102cf600480360360208110156102b957600080fd5b810190808035906020019092919050505061094a565b005b6102d9610afc565b604051808215151515815260200191505060405180910390f35b61035f6004803603606081101561030957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b0c565b604051808215151515815260200191505060405180910390f35b610381610be5565b604051808260ff1660ff16815260200191505060405180910390f35b6103a5610bfc565b6040518082815260200191505060405180910390f35b610407600480360360408110156103d157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c06565b604051808215151515815260200191505060405180910390f35b61044d6004803603602081101561043757600080fd5b8101908080359060200190929190505050610cb9565b005b6104916004803603602081101561046557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f69565b6040518082815260200191505060405180910390f35b6104af610fb1565b005b6104b961113c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610503611166565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610543578082015181840152602081019050610528565b50505050905090810190601f1680156105705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6105ca6004803603604081101561059457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611208565b604051808215151515815260200191505060405180910390f35b610610600480360360208110156105fa57600080fd5b81019080803590602001909291905050506112d5565b604051808364ffffffffff1664ffffffffff1681526020018281526020019250505060405180910390f35b6106876004803603604081101561065157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611317565b604051808215151515815260200191505060405180910390f35b6106ed600480360360408110156106b757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611335565b604051808364ffffffffff1664ffffffffff1681526020018281526020019250505060405180910390f35b6107446004803603602081101561072e57600080fd5b8101908080359060200190929190505050611384565b005b6107a86004803603604081101561075c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114c1565b6040518082815260200191505060405180910390f35b610800600480360360208110156107d457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611548565b005b6108446004803603602081101561081857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611758565b6040518082815260200191505060405180910390f35b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109185780601f106108ed57610100808354040283529160200191610918565b820191906000526020600020905b8154815290600101906020018083116108fb57829003601f168201915b5050505050905090565b600061093661092f61180e565b8484611816565b6001905092915050565b6000600254905090565b61095261180e565b73ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a14576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610abd57600080fd5b505af1158015610ad1573d6000803e3d6000fd5b505050506040513d6020811015610ae757600080fd5b81019080805190602001909291905050505050565b6000610b0733611a0d565b905090565b6000610b19848484611d25565b610bda84610b2561180e565b610bd5856040518060600160405280602881526020016124bc60289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610b8b61180e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fe69092919063ffffffff16565b611816565b600190509392505050565b6000600560009054906101000a900460ff16905090565b6000600654905090565b6000610caf610c1361180e565b84610caa8560016000610c2461180e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120a690919063ffffffff16565b611816565b6001905092915050565b610cc161180e565b73ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d83576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610e6057600080fd5b505af1158015610e74573d6000803e3d6000fd5b505050506040513d6020811015610e8a57600080fd5b810190808051906020019092919050505050600960405180604001604052804264ffffffffff16815260200183815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548164ffffffffff021916908364ffffffffff1602179055506020820151816001015550503373ffffffffffffffffffffffffffffffffffffffff167fbb284f7f8cb8b1b8c98ee9a7d765413efc44bbb17352a0302ada1d737cdaef1b826040518082815260200191505060405180910390a250565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610fb961180e565b73ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461107b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111fe5780601f106111d3576101008083540402835291602001916111fe565b820191906000526020600020905b8154815290600101906020018083116111e157829003601f168201915b5050505050905090565b60006112cb61121561180e565b846112c68560405180606001604052806025815260200161252d602591396001600061123f61180e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fe69092919063ffffffff16565b611816565b6001905092915050565b600981815481106112e257fe5b90600052602060002090600202016000915090508060000160009054906101000a900464ffffffffff16908060010154905082565b600061132b61132461180e565b8484611d25565b6001905092915050565b600a602052816000526040600020818154811061134e57fe5b9060005260206000209060020201600091509150508060000160009054906101000a900464ffffffffff16908060010154905082565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd336113cb61113c565b846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561146857600080fd5b505af115801561147c573d6000803e3d6000fd5b505050506040513d602081101561149257600080fd5b8101908080519060200190929190505050506114be3366b1a2bc2ec5000083816114b857fe5b0461212e565b50565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61155061180e565b73ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611612576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061244e6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008061176483610f69565b90506000811115611808576000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090505b600980549050811015611806576117cc610940565b82600983815481106117da57fe5b90600052602060002090600202016001015402816117f457fe5b048301925080806001019150506117b7565b505b50919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561189c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806125096024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611922576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806124746022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600080611a1983610f69565b9050600980549050600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050108015611a715750600081115b15611d1a5760008090506000600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090505b600980549050811015611bd1576000611ada610940565b8460098481548110611ae857fe5b9060005260206000209060020201600101540281611b0257fe5b049050600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052804264ffffffffff16815260200183815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548164ffffffffff021916908364ffffffffff1602179055506020820151816001015550508083019250508080600101915050611ac3565b506000811115611d0f57600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611c8457600080fd5b505af1158015611c98573d6000803e3d6000fd5b505050506040513d6020811015611cae57600080fd5b8101908080519060200190929190505050508373ffffffffffffffffffffffffffffffffffffffff167f619caafabdd75649b302ba8419e48cccf64f37f1983ac4727cfb38b57703ffc9826040518082815260200191505060405180910390a25b600192505050611d20565b60009150505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611dab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806124e46025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061242b6023913960400191505060405180910390fd5b611e3c8383836122f5565b611ea781604051806060016040528060268152602001612496602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fe69092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f3a816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120a690919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290612093576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561205857808201518184015260208101905061203d565b50505050905090810190601f1680156120855780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905083811015612124576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156121d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b6121dd600083836122f5565b6121f2816002546120a690919063ffffffff16565b600281905550612249816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120a690919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146123345761233283611a0d565b505b61233d82611a0d565b5061234983838361234e565b505050565b612359838383612425565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612420576006546123ab8261239d610940565b6120a690919063ffffffff16565b111561241f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f45524332304361707065643a206361702065786365656465640000000000000081525060200191505060405180910390fd5b5b505050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220deba4dd9eade399ffa8d03c019c8a59c4948de63c77a530f359b7553833e95fe64736f6c63430006080033
==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Token
Function name: buy(uint256)
PC address: 2373
Estimated Gas Usage: 22120 - 98924
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x591f32c722889339a7c91b003639101355e3df0e.sol:115

_totalSupply

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000800400880808000080800200001202000800080000000000000000000000000008e3108080020800080080800001040400808030000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0800400880808000080800200001202000800080', '0x008e310808002080008008080000104040080803', 0), value: 0x0
Caller: [ATTACKER], function: buy(uint256), txdata: 0xd96a094a000000000000000000000000000000000000000000163f71b29ba00000060010, decoded_data: (26895974472079240673493008,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Token
Function name: repayment(uint256)
PC address: 3776
Estimated Gas Usage: 21902 - 118935
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe', '0x0000080000000000000000000000000000000000', 0), value: 0x0
Caller: [CREATOR], function: repayment(uint256), txdata: 0x6737b31eb8b8b8b8b8b8b8b8b8b8b8b80000080000000000000000000000000000000000, decoded_data: (83551938900651686109557102907175133025262173891448191894718252419631196143616,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Token
Function name: repayment(uint256)
PC address: 3780
Estimated Gas Usage: 21902 - 118935
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe', '0x0000080000000000000000000000000000000000', 0), value: 0x0
Caller: [CREATOR], function: repayment(uint256), txdata: 0x6737b31eb8b8b8b8b8b8b8b8b8b8b8b80000080000000000000000000000000000000000, decoded_data: (83551938900651686109557102907175133025262173891448191894718252419631196143616,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Token
Function name: repayment(uint256)
PC address: 3828
Estimated Gas Usage: 21902 - 118935
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x591f32c722889339a7c91b003639101355e3df0e.sol:436

repayments.push(Payment({
            time : uint40(block.timestamp),
            amount : _amount
        }))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe', '0x0000080000000000000000000000000000000000', 0), value: 0x0
Caller: [CREATOR], function: repayment(uint256), txdata: 0x6737b31eb8b8b8b8b8b8b8b8b8b8b8b80000080000000000000000000000000000000000, decoded_data: (83551938900651686109557102907175133025262173891448191894718252419631196143616,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Token
Function name: repayment(uint256)
PC address: 3851
Estimated Gas Usage: 21902 - 118935
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x591f32c722889339a7c91b003639101355e3df0e.sol:436

repayments.push(Payment({
            time : uint40(block.timestamp),
            amount : _amount
        }))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe', '0x0000080000000000000000000000000000000000', 0), value: 0x0
Caller: [CREATOR], function: repayment(uint256), txdata: 0x6737b31eb8b8b8b8b8b8b8b8b8b8b8b80000080000000000000000000000000000000000, decoded_data: (83551938900651686109557102907175133025262173891448191894718252419631196143616,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Token
Function name: repayment(uint256)
PC address: 3862
Estimated Gas Usage: 21902 - 118935
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x591f32c722889339a7c91b003639101355e3df0e.sol:436

repayments.push(Payment({
            time : uint40(block.timestamp),
            amount : _amount
        }))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe', '0x0000080000000000000000000000000000000000', 0), value: 0x0
Caller: [CREATOR], function: repayment(uint256), txdata: 0x6737b31eb8b8b8b8b8b8b8b8b8b8b8b80000080000000000000000000000000000000000, decoded_data: (83551938900651686109557102907175133025262173891448191894718252419631196143616,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Token
Function name: buy(uint256)
PC address: 4010
Estimated Gas Usage: 22120 - 98924
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x591f32c722889339a7c91b003639101355e3df0e.sol:120

_balances[account]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000800400880808000080800200001202000800080000000000000000000000000008e3108080020800080080800001040400808030000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0800400880808000080800200001202000800080', '0x008e310808002080008008080000104040080803', 0), value: 0x0
Caller: [ATTACKER], function: buy(uint256), txdata: 0xd96a094a000000000000000000000000000000000000000000163f71b29ba00000060010, decoded_data: (26895974472079240673493008,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Token
Function name: repayments(uint256)
PC address: 4833
Estimated Gas Usage: 1178 - 1273
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x591f32c722889339a7c91b003639101355e3df0e.sol:381

Payment[] public repayments

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: repayments(uint256), txdata: 0xa85f37618080808080808080808080802000048080101020020880008010200800808080, decoded_data: (58123087930888129467517984631261041020921099492694282127114649945910701752448,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Token
Function name: rewards(address,uint256)
PC address: 4941
Estimated Gas Usage: 1185 - 1470
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x591f32c722889339a7c91b003639101355e3df0e.sol:382

mapping(address => Payment[]) public rewards

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: rewards(address,uint256), txdata: 0xb933ceac00000000000000000000000080208000800410800440001080800800081004808080040002200000000480010820000480100400408040000040100020200140, decoded_data: ('0x8020800080041080044000108080080008100480', 58122228650158906688023419361074328133707133453216927299620903100955318288704), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Token
Function name: buy(uint256)
PC address: 6687
Estimated Gas Usage: 22120 - 98924
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x591f32c722889339a7c91b003639101355e3df0e.sol:397

repayments.length

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000800400880808000080800200001202000800080000000000000000000000000008e3108080020800080080800001040400808030000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0800400880808000080800200001202000800080', '0x008e310808002080008008080000104040080803', 0), value: 0x0
Caller: [ATTACKER], function: buy(uint256), txdata: 0xd96a094a000000000000000000000000000000000000000000163f71b29ba00000060010, decoded_data: (26895974472079240673493008,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Token
Function name: buy(uint256)
PC address: 6754
Estimated Gas Usage: 22120 - 98924
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x591f32c722889339a7c91b003639101355e3df0e.sol:397

rewards[_to].length

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000800400880808000080800200001202000800080000000000000000000000000008e3108080020800080080800001040400808030000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0800400880808000080800200001202000800080', '0x008e310808002080008008080000104040080803', 0), value: 0x0
Caller: [ATTACKER], function: buy(uint256), txdata: 0xd96a094a000000000000000000000000000000000000000000163f71b29ba00000060010, decoded_data: (26895974472079240673493008,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Token
Function name: buy(uint256)
PC address: 8676
Estimated Gas Usage: 22120 - 98924
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x591f32c722889339a7c91b003639101355e3df0e.sol:177

_totalSupply

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000800400880808000080800200001202000800080000000000000000000000000008e3108080020800080080800001040400808030000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0800400880808000080800200001202000800080', '0x008e310808002080008008080000104040080803', 0), value: 0x0
Caller: [ATTACKER], function: buy(uint256), txdata: 0xd96a094a000000000000000000000000000000000000000000163f71b29ba00000060010, decoded_data: (26895974472079240673493008,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Token
Function name: buy(uint256)
PC address: 8695
Estimated Gas Usage: 22120 - 98924
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x591f32c722889339a7c91b003639101355e3df0e.sol:177

_totalSupply = _totalSupply.add(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000800400880808000080800200001202000800080000000000000000000000000008e3108080020800080080800001040400808030000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0800400880808000080800200001202000800080', '0x008e310808002080008008080000104040080803', 0), value: 0x0
Caller: [ATTACKER], function: buy(uint256), txdata: 0xd96a094a000000000000000000000000000000000000000000163f71b29ba00000060010, decoded_data: (26895974472079240673493008,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Token
Function name: buy(uint256)
PC address: 8763
Estimated Gas Usage: 22120 - 98924
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x591f32c722889339a7c91b003639101355e3df0e.sol:178

_balances[account]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000800400880808000080800200001202000800080000000000000000000000000008e3108080020800080080800001040400808030000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0800400880808000080800200001202000800080', '0x008e310808002080008008080000104040080803', 0), value: 0x0
Caller: [ATTACKER], function: buy(uint256), txdata: 0xd96a094a000000000000000000000000000000000000000000163f71b29ba00000060010, decoded_data: (26895974472079240673493008,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Token
Function name: buy(uint256)
PC address: 9105
Estimated Gas Usage: 22120 - 98924
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x591f32c722889339a7c91b003639101355e3df0e.sol:367

_cap

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000800400880808000080800200001202000800080000000000000000000000000008e3108080020800080080800001040400808030000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0800400880808000080800200001202000800080', '0x008e310808002080008008080000104040080803', 0), value: 0x0
Caller: [ATTACKER], function: buy(uint256), txdata: 0xd96a094a000000000000000000000000000000000000000000163f71b29ba00000060010, decoded_data: (26895974472079240673493008,), value: 0x0


time_used: 36050.9641289711 seconds
#@contract_info_time
0x591f32c722889339a7c91b003639101355e3df0e.sol:0.6.8:Token:36050.9641289711:36100:60:36000
