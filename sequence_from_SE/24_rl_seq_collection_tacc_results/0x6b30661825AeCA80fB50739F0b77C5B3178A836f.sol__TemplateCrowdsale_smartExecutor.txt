++++ 0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol  :  0.4.23  :  TemplateCrowdsale ++++
227283021113343123092888039111031382089576223800 is added into actors.
51421440056055728346017419001665401074216449311 is added into actors.
655251735853922694967911662580490717076041977877 is added into actors.
Starting preprocessing.
number of genesis states: 2
total instructions: 4653
['constructor']:writes at the last depth:['6', '11', '2', '1', '0', '4', '5', '7', '9', '8']
['constructor']:writes at the last depth:['6', '11', '2', '1', '0', '4', '5', '7', '9', '8']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 99.94% coverage.
dynamic svars:['10']
static svars:['4', '5', '6', '11', '3', '7', '2', '0', '9', '8', '1']
Ending preprocessing.
preprocessing time(s): 100.64996695518494
contract coverage: 81.32%
fallback is not reachable
Function Reads: State variables read in conditions
	CONTINUE_MINTING():[]
	hasClosed():['5']
	initialized():[]
	TOKEN_NAME():[]
	setTimes(uint256,uint256):['6', '4', '5']
	removeAddressesFromWhitelist(address[]):['6']
	removeAddressFromWhitelist(address):['6']
	TOKEN_SYMBOL():[]
	rate():[]
	endTime():[]
	cap():[]
	isWhitelisted(address):[]
	setStartTime(uint256):['6', '4', '5']
	goal():[]
	weiRaised():[]
	hasStarted():[]
	closingTime():[]
	finalize():['6', '5']
	capReached():[]
	wallet():[]
	TOKEN_DECIMAL_MULTIPLIER():[]
	TOKEN_DECIMALS():[]
	renounceOwnership():['6']
	TARGET_USER():[]
	startTime():[]
	addAddressToWhitelist(address):['6']
	goalReached():[]
	isFinalized():[]
	owner():[]
	PAUSED():[]
	claimRefund():['6']
	openingTime():[]
	setEndTime(uint256):['6', '5', '4']
	TOKEN_DECIMALS_UINT8():[]
	START_TIME():[]
	init():['6', '11']
	addAddressesToWhitelist(address[]):['6']
	buyTokens(address):['10', '4', '5', '3', '7', '2']
	hasEnded():['5']
	transferOwnership(address):['6']
	vault():[]
	token():[]
	close():[]
	enableRefunds():[]
	state():[]
	deposited(address):[]
	deposit(address):[]
	refund(address):[]
Function Writes: State variables written
	removeAddressFromWhitelist(address):['10']
	setTimes(uint256,uint256):['4', '5']
	renounceOwnership():['6']
	setStartTime(uint256):['4']
	addAddressToWhitelist(address):['10']
	init():['11', '6']
	setEndTime(uint256):['5']
	fallback:['3']
	transferOwnership(address):['6']
	finalize():['6']
	buyTokens(address):['3']
============================
iteration:3
targets:['buyTokens(address)', 'claimRefund()', 'fallback', 'init()', 'finalize()']
['removeAddressFromWhitelist(address)']:writes at the last depth:['10']
['removeAddressFromWhitelist(address)']:writes at the last depth:['10']
['renounceOwnership()']:writes at the last depth:['6']
['renounceOwnership()']:writes at the last depth:['6']
['setStartTime(uint256)']:writes at the last depth:['4']
['setStartTime(uint256)']:writes at the last depth:['4']
['setTimes(uint256,uint256)']:writes at the last depth:['5']
['setTimes(uint256,uint256)']:writes at the last depth:['5']
['removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['addAddressToWhitelist(address)']:writes at the last depth:['10']
['setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['addAddressToWhitelist(address)']:writes at the last depth:['10']
['setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['setEndTime(uint256)']:writes at the last depth:['5']
['setEndTime(uint256)']:writes at the last depth:['5']
['removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['transferOwnership(address)']:writes at the last depth:['6']
['transferOwnership(address)']:writes at the last depth:['6']
['init()']:writes at the last depth:['6', '11']
['init()']:writes at the last depth:['6', '11']
['addAddressesToWhitelist(address[])']:writes at the last depth:['']
['addAddressesToWhitelist(address[])']:writes at the last depth:['']
['addAddressesToWhitelist(address[])']:writes at the last depth:['']
['addAddressesToWhitelist(address[])']:writes at the last depth:['']
['finalize()']:writes at the last depth:['6']
['finalize()']:writes at the last depth:['6']
contract coverage: 83.17%
============================
iteration:4
['finalize()', 'removeAddressFromWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'renounceOwnership()']:writes at the last depth:['6']
['finalize()', 'setStartTime(uint256)']:writes at the last depth:['4']
['finalize()', 'setTimes(uint256,uint256)']:writes at the last depth:['5']
['finalize()', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'addAddressToWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'claimRefund()']:writes at the last depth:[]
['finalize()', 'setEndTime(uint256)']:writes at the last depth:['5']
['finalize()', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'transferOwnership(address)']:writes at the last depth:['6']
['finalize()', 'init()']:writes at the last depth:['6', '11']
['finalize()', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
contract coverage: 90.31%
============================
iteration:5
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressFromWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'renounceOwnership()']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'setStartTime(uint256)']:writes at the last depth:['4']
['finalize()', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressToWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'addAddressesToWhitelist(address[])', 'claimRefund()']:writes at the last depth:[]
['finalize()', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'init()']:writes at the last depth:['6', '11']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
contract coverage: 91.02%
============================
iteration:6
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'removeAddressFromWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'renounceOwnership()']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'setStartTime(uint256)']:writes at the last depth:['4']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'addAddressToWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'claimRefund()']:writes at the last depth:[]
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'init()']:writes at the last depth:['6', '11']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
contract coverage: 91.02%
============================
iteration:7
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'removeAddressFromWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'renounceOwnership()']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'setStartTime(uint256)']:writes at the last depth:['4']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'addAddressToWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'claimRefund()']:writes at the last depth:[]
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'init()']:writes at the last depth:['6', '11']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
contract coverage: 91.08%
============================
iteration:8
['finalize()', 'addAddressesToWhitelist(address[])', 'init()', 'removeAddressFromWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'init()', 'renounceOwnership()']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'init()', 'setStartTime(uint256)']:writes at the last depth:['4']
['finalize()', 'addAddressesToWhitelist(address[])', 'init()', 'setTimes(uint256,uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'init()', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'init()', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'addAddressesToWhitelist(address[])', 'init()', 'addAddressToWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'init()', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'addAddressesToWhitelist(address[])', 'init()', 'claimRefund()']:writes at the last depth:[]
['finalize()', 'addAddressesToWhitelist(address[])', 'init()', 'setEndTime(uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'init()', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'init()', 'transferOwnership(address)']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'init()', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'init()', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
contract coverage: 91.08%
============================
iteration:9
['finalize()', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)', 'removeAddressFromWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)', 'renounceOwnership()']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)', 'setStartTime(uint256)']:writes at the last depth:['4']
['finalize()', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)', 'setTimes(uint256,uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)', 'addAddressToWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)', 'claimRefund()']:writes at the last depth:[]
['finalize()', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)', 'setEndTime(uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)', 'init()']:writes at the last depth:['6', '11']
['finalize()', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'transferOwnership(address)', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
contract coverage: 91.08%
============================
iteration:10
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'removeAddressFromWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'renounceOwnership()']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'setStartTime(uint256)']:writes at the last depth:['4']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'setTimes(uint256,uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'addAddressToWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'setEndTime(uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'transferOwnership(address)']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'init()']:writes at the last depth:['6', '11']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
contract coverage: 91.08%
============================
iteration:11
['finalize()', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)', 'removeAddressFromWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)', 'renounceOwnership()']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)', 'setStartTime(uint256)']:writes at the last depth:['4']
['finalize()', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)', 'setTimes(uint256,uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)', 'addAddressToWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)', 'claimRefund()']:writes at the last depth:[]
['finalize()', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)', 'setEndTime(uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)', 'transferOwnership(address)']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)', 'init()']:writes at the last depth:['6', '11']
['finalize()', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'setEndTime(uint256)', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
contract coverage: 91.08%
============================
iteration:12
['finalize()', 'addAddressesToWhitelist(address[])', 'claimRefund()', 'removeAddressFromWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'claimRefund()', 'renounceOwnership()']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'claimRefund()', 'setStartTime(uint256)']:writes at the last depth:['4']
['finalize()', 'addAddressesToWhitelist(address[])', 'claimRefund()', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'claimRefund()', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'addAddressesToWhitelist(address[])', 'claimRefund()', 'addAddressToWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'claimRefund()', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
['finalize()', 'addAddressesToWhitelist(address[])', 'claimRefund()', 'claimRefund()']:writes at the last depth:[]
['finalize()', 'addAddressesToWhitelist(address[])', 'claimRefund()', 'setEndTime(uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'claimRefund()', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'claimRefund()', 'transferOwnership(address)']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'claimRefund()', 'init()']:writes at the last depth:['6', '11']
['finalize()', 'addAddressesToWhitelist(address[])', 'claimRefund()', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'claimRefund()', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
contract coverage: 91.08%
============================
iteration:13
['finalize()', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)', 'removeAddressFromWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)', 'renounceOwnership()']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)', 'setStartTime(uint256)']:writes at the last depth:['4']
['finalize()', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)', 'addAddressToWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)', 'claimRefund()']:writes at the last depth:[]
['finalize()', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)', 'setEndTime(uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)', 'transferOwnership(address)']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)', 'init()']:writes at the last depth:['6', '11']
['finalize()', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
contract coverage: 91.08%
============================
iteration:14
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressToWhitelist(address)', 'removeAddressFromWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressToWhitelist(address)', 'setStartTime(uint256)']:writes at the last depth:['4']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressToWhitelist(address)', 'setTimes(uint256,uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressToWhitelist(address)', 'setTimes(uint256,uint256)']:writes at the last depth:['4']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressToWhitelist(address)', 'claimRefund()']:writes at the last depth:[]
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressToWhitelist(address)', 'transferOwnership(address)']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressToWhitelist(address)', 'init()']:writes at the last depth:['6', '11']
['finalize()', 'addAddressesToWhitelist(address[])', 'addAddressToWhitelist(address)', 'addAddressesToWhitelist(address[])']:writes at the last depth:['']
contract coverage: 91.08%
============================
iteration:15
['finalize()', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)', 'removeAddressFromWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'setTimes(uint256,uint256)', 'setTimes(uint256,uint256)']:writes at the last depth:['5']
contract coverage: 91.08%
============================
iteration:16
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'removeAddressFromWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'renounceOwnership()']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'addAddressToWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'removeAddressesFromWhitelist(address[])']:writes at the last depth:['']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'transferOwnership(address)']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressesFromWhitelist(address[])', 'init()']:writes at the last depth:['6', '11']
contract coverage: 91.08%
============================
iteration:17
contract coverage: 91.08%
============================
iteration:18
['finalize()', 'addAddressesToWhitelist(address[])', 'setStartTime(uint256)', 'removeAddressFromWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'setStartTime(uint256)', 'setTimes(uint256,uint256)']:writes at the last depth:['5', '4']
contract coverage: 91.08%
============================
iteration:19
contract coverage: 91.08%
============================
iteration:20
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressFromWhitelist(address)', 'removeAddressFromWhitelist(address)']:writes at the last depth:['10']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressFromWhitelist(address)', 'renounceOwnership()']:writes at the last depth:['6']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressFromWhitelist(address)', 'setTimes(uint256,uint256)']:writes at the last depth:['5']
['finalize()', 'addAddressesToWhitelist(address[])', 'removeAddressFromWhitelist(address)', 'transferOwnership(address)']:writes at the last depth:['6']
contract coverage: 91.08%
============================
iteration:21
contract coverage: 91.08%
============================
iteration:22
contract coverage: 91.08%
============================
iteration:23
contract coverage: 91.08%
============================
iteration:24
contract coverage: 91.08%
============================
iteration:25
contract coverage: 91.08%
============================
iteration:26
contract coverage: 91.08%
============================
iteration:27
contract coverage: 91.08%
============================
iteration:28
contract coverage: 91.08%
============================
iteration:29
contract coverage: 91.08%
============================
iteration:30
contract coverage: 91.08%
============================
iteration:31
contract coverage: 91.08%
============================
iteration:32
contract coverage: 91.08%
============================
iteration:33
contract coverage: 91.08%
============================
iteration:34
contract coverage: 91.08%
============================
iteration:35
contract coverage: 91.08%
============================
iteration:36
contract coverage: 91.08%
============================
iteration:37
contract coverage: 91.08%
============================
iteration:38
contract coverage: 91.08%
============================
iteration:39
contract coverage: 91.08%
============================
iteration:40
contract coverage: 91.08%
============================
iteration:41
contract coverage: 91.08%
============================
iteration:42
contract coverage: 91.08%
============================
iteration:43
contract coverage: 91.08%
============================
iteration:44
contract coverage: 91.08%
============================
iteration:45
contract coverage: 91.08%
============================
iteration:46
contract coverage: 91.08%
============================
iteration:47
contract coverage: 91.08%
============================
iteration:48
contract coverage: 91.08%
============================
iteration:49
contract coverage: 91.08%
============================
iteration:50
contract coverage: 91.08%
============================
iteration:51
contract coverage: 91.08%
============================
iteration:52
contract coverage: 91.08%
============================
iteration:53
contract coverage: 91.08%
============================
iteration:54
contract coverage: 91.08%
============================
iteration:55
contract coverage: 91.08%
============================
iteration:56
contract coverage: 91.08%
============================
iteration:57
contract coverage: 91.08%
============================
iteration:58
contract coverage: 91.08%
============================
iteration:59
contract coverage: 91.08%
============================
iteration:60
contract coverage: 91.08%
============================
iteration:61
contract coverage: 91.08%
============================
iteration:62
contract coverage: 91.08%
============================
iteration:63
contract coverage: 91.08%
#@statespace
7564 nodes, 7563 edges, 79986 total states
#@coverage
Achieved 5.74% coverage for code: 60806040526000600660146101000a81548160ff0219169083151502179055506000600b60006101000a81548160ff0219169083151502179055503480156200004757600080fd5b50604051602080620033ab833981018060405281019080805190602001909291905050506806c6b935b8bbd40000683635c9adc5dea0000042635f490de01162000092574262000098565b635f490de05b635f4a5f606012600a0a610fa0027327cfb92064326327e88be61ff960a18f343c143886600083111515620000cc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200010957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200014657600080fd5b8260028190555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050428210151515620001e157600080fd5b818110151515620001f157600080fd5b8160048190555080600581905550505033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000811115156200025257600080fd5b80600781905550506000811115156200026a57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16620002976200033a565b808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f080158015620002ea573d6000803e3d6000fd5b50600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060088190555050506200034b565b604051610beb80620027c083390190565b612465806200035b6000396000f300608060405260043610610203576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680623fd35a1461020e5780631515bc2b1461023d578063158ef93e1461026c578063188214001461029b578063224348361461032b57806324953eaa14610362578063286dd3f51461039d5780632a905318146103e05780632c4e722e146104705780633197cbb61461049b578063355274ea146104c65780633af32abf146104f15780633e0a322d1461054c57806340193883146105795780634042b66f146105a457806344691f7e146105cf5780634b6753bc146105fe5780634bb278f3146106295780634f93594514610640578063521eb2731461066f57806356780085146106c65780635b7f415c146106f1578063715018a61461071c578063726a431a1461073357806378e979251461078a5780637b9417c8146107b55780637d3d6522146107f85780638d4e4083146108275780638da5cb5b14610856578063a9aad58c146108ad578063b5545a3c146108dc578063b7a8807c146108f3578063ccb98ffc1461091e578063cf3b19671461094b578063ddaa26ad1461097c578063e1c7392a146109a7578063e2ec6ec3146109be578063ec8ac4d8146109f9578063ecb70fb714610a2f578063f2fde38b14610a5e578063fbfa77cf14610aa1578063fc0c546a14610af8575b61020c33610b4f565b005b34801561021a57600080fd5b50610223610c1d565b604051808215151515815260200191505060405180910390f35b34801561024957600080fd5b50610252610c22565b604051808215151515815260200191505060405180910390f35b34801561027857600080fd5b50610281610c5e565b604051808215151515815260200191505060405180910390f35b3480156102a757600080fd5b506102b0610c71565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102f05780820151818401526020810190506102d5565b50505050905090810190601f16801561031d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561033757600080fd5b506103606004803603810190808035906020019092919080359060200190929190505050610caa565b005b34801561036e57600080fd5b5061039b600480360381019080803590602001908201803590602001919091929391929390505050610dfa565b005b3480156103a957600080fd5b506103de600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f60565b005b3480156103ec57600080fd5b506103f5611051565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561043557808201518184015260208101905061041a565b50505050905090810190601f1680156104625780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561047c57600080fd5b5061048561108a565b6040518082815260200191505060405180910390f35b3480156104a757600080fd5b506104b0611090565b6040518082815260200191505060405180910390f35b3480156104d257600080fd5b506104db61109a565b6040518082815260200191505060405180910390f35b3480156104fd57600080fd5b50610532600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110a0565b604051808215151515815260200191505060405180910390f35b34801561055857600080fd5b50610577600480360381019080803590602001909291905050506110f6565b005b34801561058557600080fd5b5061058e6111e1565b6040518082815260200191505060405180910390f35b3480156105b057600080fd5b506105b96111e7565b6040518082815260200191505060405180910390f35b3480156105db57600080fd5b506105e46111ed565b604051808215151515815260200191505060405180910390f35b34801561060a57600080fd5b506106136111fa565b6040518082815260200191505060405180910390f35b34801561063557600080fd5b5061063e611200565b005b34801561064c57600080fd5b506106556112dc565b604051808215151515815260200191505060405180910390f35b34801561067b57600080fd5b506106846112eb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106d257600080fd5b506106db611311565b6040518082815260200191505060405180910390f35b3480156106fd57600080fd5b50610706611319565b6040518082815260200191505060405180910390f35b34801561072857600080fd5b5061073161131e565b005b34801561073f57600080fd5b50610748611423565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561079657600080fd5b5061079f61143b565b6040518082815260200191505060405180910390f35b3480156107c157600080fd5b506107f6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611445565b005b34801561080457600080fd5b5061080d61153f565b604051808215151515815260200191505060405180910390f35b34801561083357600080fd5b5061083c61154e565b604051808215151515815260200191505060405180910390f35b34801561086257600080fd5b5061086b611561565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108b957600080fd5b506108c2611587565b604051808215151515815260200191505060405180910390f35b3480156108e857600080fd5b506108f161158c565b005b3480156108ff57600080fd5b50610908611692565b6040518082815260200191505060405180910390f35b34801561092a57600080fd5b5061094960048036038101908080359060200190929190505050611698565b005b34801561095757600080fd5b50610960611781565b604051808260ff1660ff16815260200191505060405180910390f35b34801561098857600080fd5b50610991611786565b6040518082815260200191505060405180910390f35b3480156109b357600080fd5b506109bc61178e565b005b3480156109ca57600080fd5b506109f7600480360381019080803590602001908201803590602001919091929391929390505050611911565b005b610a2d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b4f565b005b348015610a3b57600080fd5b50610a44611a80565b604051808215151515815260200191505060405180910390f35b348015610a6a57600080fd5b50610a9f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a8f565b005b348015610aad57600080fd5b50610ab6611af7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b0457600080fd5b50610b0d611b1d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600080349150610b5f8383611b42565b610b6882611b7e565b9050610b7f82600354611bb690919063ffffffff16565b600381905550610b8f8382611bd2565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a3610c068383611be0565b610c0e611be4565b610c188383611cbc565b505050565b600081565b6000806702c68af0bb140000610c45600354600754611cc090919063ffffffff16565b109050610c50611cd9565b80610c585750805b91505090565b600b60009054906101000a900460ff1681565b6040805190810160405280601181526020017f446546694c656e642050726f746f636f6c00000000000000000000000000000081525081565b6000806000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d0b57600080fd5b8484111515610d1957600080fd5b60045492506005549150600090508285141515610d66574285111515610d3e57600080fd5b8242101515610d4c57600080fd5b8285111515610d5a57600080fd5b84600481905550600190505b8184141515610d97578142101515610d7d57600080fd5b8342101515610d8b57600080fd5b83600581905550600190505b8015610df3577ff6b7151023ee87a6a0cc1f6cea30e02351728911b7b848aa8abde4d1f09172b7600454856004546005546040518085815260200184815260200183815260200182815260200194505050505060405180910390a15b5050505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e5857600080fd5b600090505b82829050811015610f5b57600a60008484848181101515610e7a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558282828181101515610eef57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a60405160405180910390a28080600101915050610e5d565b505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fbc57600080fd5b600a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558073ffffffffffffffffffffffffffffffffffffffff167ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a60405160405180910390a250565b6040805190810160405280600381526020017f44464e000000000000000000000000000000000000000000000000000000000081525081565b60025481565b6000600554905090565b60075481565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561115257600080fd5b6004544210151561116257600080fd5b6004548111151561117257600080fd5b6005548110151561118257600080fd5b7ff6b7151023ee87a6a0cc1f6cea30e02351728911b7b848aa8abde4d1f09172b7816005546004546005546040518085815260200184815260200183815260200182815260200194505050505060405180910390a18060048190555050565b60085481565b60035481565b6000600454421015905090565b60055481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561125c57600080fd5b600660149054906101000a900460ff1615151561127857600080fd5b611280610c22565b151561128b57600080fd5b611293611cf7565b7f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768160405160405180910390a16001600660146101000a81548160ff021916908315150217905550565b60006007546003541015905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6012600a0a81565b601281565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561137a57600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7327cfb92064326327e88be61ff960a18f343c143881565b6000600454905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114a157600080fd5b6001600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f60405160405180910390a250565b60006008546003541015905090565b600660149054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081565b600660149054906101000a900460ff1615156115a757600080fd5b6115af61153f565b1515156115bb57600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa89401a336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561167857600080fd5b505af115801561168c573d6000803e3d6000fd5b50505050565b60045481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116f457600080fd5b6005544210151561170457600080fd5b804210151561171257600080fd5b6004548111151561172257600080fd5b7ff6b7151023ee87a6a0cc1f6cea30e02351728911b7b848aa8abde4d1f09172b7600454826004546005546040518085815260200184815260200183815260200182815260200194505050505060405180910390a18060058190555050565b601281565b635f490de081565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117ea57600080fd5b600b60009054906101000a900460ff1615151561180657600080fd5b6001600b60006101000a81548160ff0219169083151502179055506000156118c6576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638456cb596040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156118ad57600080fd5b505af11580156118c1573d6000803e3d6000fd5b505050505b6118e37327cfb92064326327e88be61ff960a18f343c1438611a8f565b7f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a1565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561196f57600080fd5b600090505b82829050811015611a7b576001600a6000858585818110151561199357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508282828181101515611a0f57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f60405160405180910390a28080600101915050611974565b505050565b6000611a8a610c22565b905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611aeb57600080fd5b611af481611e50565b50565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6702c68af0bb1400003410151515611b5957600080fd5b678ac7230489e800003411151515611b7057600080fd5b611b7a8282611f4c565b5050565b6000611baf670de0b6b3a7640000611ba160025485611fb490919063ffffffff16565b611fec90919063ffffffff16565b9050919050565b60008183019050828110151515611bc957fe5b80905092915050565b611bdc8282612002565b5050565b5050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f340fa0134336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303818588803b158015611ca157600080fd5b505af1158015611cb5573d6000803e3d6000fd5b5050505050565b5050565b6000828211151515611cce57fe5b818303905092915050565b6000611ce3612110565b80611cf25750611cf16112dc565b5b905090565b611cff61153f565b15611da757600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343d726d66040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015611d8a57600080fd5b505af1158015611d9e573d6000803e3d6000fd5b50505050611e46565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c52dc416040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015611e2d57600080fd5b505af1158015611e41573d6000803e3d6000fd5b505050505b611e4e61211c565b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611e8c57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b81600a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611fa557600080fd5b611faf8383612387565b505050565b600080831415611fc75760009050611fe6565b8183029050818382811515611fd857fe5b04141515611fe257fe5b8090505b92915050565b60008183811515611ff957fe5b04905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156120c657600080fd5b505af11580156120da573d6000803e3d6000fd5b505050506040513d60208110156120f057600080fd5b8101908080519060200190929190505050151561210c57600080fd5b5050565b60006005544211905090565b6121246123ba565b6000156121c9576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f4ba83a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156121b057600080fd5b505af11580156121c4573d6000803e3d6000fd5b505050505b6000151561229d576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637d64bcb46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561225657600080fd5b505af115801561226a573d6000803e3d6000fd5b505050506040513d602081101561228057600080fd5b8101908080519060200190929190505050151561229c57600080fd5b5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b7327cfb92064326327e88be61ff960a18f343c14386040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561236d57600080fd5b505af1158015612381573d6000803e3d6000fd5b50505050565b61239182826123bc565b6007546123a982600354611bb690919063ffffffff16565b111515156123b657600080fd5b5050565b565b60045442101580156123d057506005544211155b15156123db57600080fd5b6123e582826123e9565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561242557600080fd5b6000811415151561243557600080fd5b50505600a165627a7a72305820c0a3ae5a99761dbc5f64197cb0702090ee21b654d8f1f85fb4c8a2cbbc78720a0029608060405234801561001057600080fd5b50604051602080610beb83398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156100af57600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff0219169083600281111561010f57fe5b021790555050610ac7806101246000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806343d726d6146100a9578063521eb273146100c0578063715018a6146101175780638c52dc411461012e5780638da5cb5b14610145578063c19d93fb1461019c578063cb13cddb146101d5578063f2fde38b1461022c578063f340fa011461026f578063fa89401a146102a5575b600080fd5b3480156100b557600080fd5b506100be6102e8565b005b3480156100cc57600080fd5b506100d5610448565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561012357600080fd5b5061012c61046e565b005b34801561013a57600080fd5b50610143610570565b005b34801561015157600080fd5b5061015a610651565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101a857600080fd5b506101b1610676565b604051808260028111156101c157fe5b60ff16815260200191505060405180910390f35b3480156101e157600080fd5b50610216600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610689565b6040518082815260200191505060405180910390f35b34801561023857600080fd5b5061026d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106a1565b005b6102a3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610708565b005b3480156102b157600080fd5b506102e6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061082f565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561034357600080fd5b6000600281111561035057fe5b600260149054906101000a900460ff16600281111561036b57fe5b14151561037757600080fd5b60028060146101000a81548160ff0219169083600281111561039557fe5b02179055507f1cdde67b72a90f19919ac732a437ac2f7a10fc128d28c2a6e525d89ce5cd9d3a60405160405180910390a1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610445573d6000803e3d6000fd5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104c957600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105cb57600080fd5b600060028111156105d857fe5b600260149054906101000a900460ff1660028111156105f357fe5b1415156105ff57600080fd5b6001600260146101000a81548160ff0219169083600281111561061e57fe5b02179055507f599d8e5a83cffb867d051598c4d70e805d59802d8081c1c7d6dffc5b6aca2b8960405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260149054906101000a900460ff1681565b60016020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106fc57600080fd5b61070581610985565b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561076357600080fd5b6000600281111561077057fe5b600260149054906101000a900460ff16600281111561078b57fe5b14151561079757600080fd5b6107e934600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a7f90919063ffffffff16565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60006001600281111561083e57fe5b600260149054906101000a900460ff16600281111561085957fe5b14151561086557600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610932573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff167fd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d0651826040518082815260200191505060405180910390a25050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156109c157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008183019050828110151515610a9257fe5b809050929150505600a165627a7a723058201e4e6e5aad8351e52ef7fe5d6387ec46a59b497c3fa404cbc683d642050e29230029
#@coverage
Achieved 8.54% coverage for code: 608060405234801561001057600080fd5b50604051602080610beb83398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156100af57600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff0219169083600281111561010f57fe5b021790555050610ac7806101246000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806343d726d6146100a9578063521eb273146100c0578063715018a6146101175780638c52dc411461012e5780638da5cb5b14610145578063c19d93fb1461019c578063cb13cddb146101d5578063f2fde38b1461022c578063f340fa011461026f578063fa89401a146102a5575b600080fd5b3480156100b557600080fd5b506100be6102e8565b005b3480156100cc57600080fd5b506100d5610448565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561012357600080fd5b5061012c61046e565b005b34801561013a57600080fd5b50610143610570565b005b34801561015157600080fd5b5061015a610651565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101a857600080fd5b506101b1610676565b604051808260028111156101c157fe5b60ff16815260200191505060405180910390f35b3480156101e157600080fd5b50610216600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610689565b6040518082815260200191505060405180910390f35b34801561023857600080fd5b5061026d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106a1565b005b6102a3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610708565b005b3480156102b157600080fd5b506102e6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061082f565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561034357600080fd5b6000600281111561035057fe5b600260149054906101000a900460ff16600281111561036b57fe5b14151561037757600080fd5b60028060146101000a81548160ff0219169083600281111561039557fe5b02179055507f1cdde67b72a90f19919ac732a437ac2f7a10fc128d28c2a6e525d89ce5cd9d3a60405160405180910390a1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610445573d6000803e3d6000fd5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104c957600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105cb57600080fd5b600060028111156105d857fe5b600260149054906101000a900460ff1660028111156105f357fe5b1415156105ff57600080fd5b6001600260146101000a81548160ff0219169083600281111561061e57fe5b02179055507f599d8e5a83cffb867d051598c4d70e805d59802d8081c1c7d6dffc5b6aca2b8960405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260149054906101000a900460ff1681565b60016020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106fc57600080fd5b61070581610985565b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561076357600080fd5b6000600281111561077057fe5b600260149054906101000a900460ff16600281111561078b57fe5b14151561079757600080fd5b6107e934600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a7f90919063ffffffff16565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60006001600281111561083e57fe5b600260149054906101000a900460ff16600281111561085957fe5b14151561086557600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610932573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff167fd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d0651826040518082815260200191505060405180910390a25050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156109c157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008183019050828110151515610a9257fe5b809050929150505600a165627a7a723058201e4e6e5aad8351e52ef7fe5d6387ec46a59b497c3fa404cbc683d642050e2923002900000000000000000000000027cfb92064326327e88be61ff960a18f343c143800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
#@coverage
Achieved 91.08% coverage for code: 608060405260043610610203576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680623fd35a1461020e5780631515bc2b1461023d578063158ef93e1461026c578063188214001461029b578063224348361461032b57806324953eaa14610362578063286dd3f51461039d5780632a905318146103e05780632c4e722e146104705780633197cbb61461049b578063355274ea146104c65780633af32abf146104f15780633e0a322d1461054c57806340193883146105795780634042b66f146105a457806344691f7e146105cf5780634b6753bc146105fe5780634bb278f3146106295780634f93594514610640578063521eb2731461066f57806356780085146106c65780635b7f415c146106f1578063715018a61461071c578063726a431a1461073357806378e979251461078a5780637b9417c8146107b55780637d3d6522146107f85780638d4e4083146108275780638da5cb5b14610856578063a9aad58c146108ad578063b5545a3c146108dc578063b7a8807c146108f3578063ccb98ffc1461091e578063cf3b19671461094b578063ddaa26ad1461097c578063e1c7392a146109a7578063e2ec6ec3146109be578063ec8ac4d8146109f9578063ecb70fb714610a2f578063f2fde38b14610a5e578063fbfa77cf14610aa1578063fc0c546a14610af8575b61020c33610b4f565b005b34801561021a57600080fd5b50610223610c1d565b604051808215151515815260200191505060405180910390f35b34801561024957600080fd5b50610252610c22565b604051808215151515815260200191505060405180910390f35b34801561027857600080fd5b50610281610c5e565b604051808215151515815260200191505060405180910390f35b3480156102a757600080fd5b506102b0610c71565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102f05780820151818401526020810190506102d5565b50505050905090810190601f16801561031d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561033757600080fd5b506103606004803603810190808035906020019092919080359060200190929190505050610caa565b005b34801561036e57600080fd5b5061039b600480360381019080803590602001908201803590602001919091929391929390505050610dfa565b005b3480156103a957600080fd5b506103de600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f60565b005b3480156103ec57600080fd5b506103f5611051565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561043557808201518184015260208101905061041a565b50505050905090810190601f1680156104625780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561047c57600080fd5b5061048561108a565b6040518082815260200191505060405180910390f35b3480156104a757600080fd5b506104b0611090565b6040518082815260200191505060405180910390f35b3480156104d257600080fd5b506104db61109a565b6040518082815260200191505060405180910390f35b3480156104fd57600080fd5b50610532600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110a0565b604051808215151515815260200191505060405180910390f35b34801561055857600080fd5b50610577600480360381019080803590602001909291905050506110f6565b005b34801561058557600080fd5b5061058e6111e1565b6040518082815260200191505060405180910390f35b3480156105b057600080fd5b506105b96111e7565b6040518082815260200191505060405180910390f35b3480156105db57600080fd5b506105e46111ed565b604051808215151515815260200191505060405180910390f35b34801561060a57600080fd5b506106136111fa565b6040518082815260200191505060405180910390f35b34801561063557600080fd5b5061063e611200565b005b34801561064c57600080fd5b506106556112dc565b604051808215151515815260200191505060405180910390f35b34801561067b57600080fd5b506106846112eb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106d257600080fd5b506106db611311565b6040518082815260200191505060405180910390f35b3480156106fd57600080fd5b50610706611319565b6040518082815260200191505060405180910390f35b34801561072857600080fd5b5061073161131e565b005b34801561073f57600080fd5b50610748611423565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561079657600080fd5b5061079f61143b565b6040518082815260200191505060405180910390f35b3480156107c157600080fd5b506107f6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611445565b005b34801561080457600080fd5b5061080d61153f565b604051808215151515815260200191505060405180910390f35b34801561083357600080fd5b5061083c61154e565b604051808215151515815260200191505060405180910390f35b34801561086257600080fd5b5061086b611561565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108b957600080fd5b506108c2611587565b604051808215151515815260200191505060405180910390f35b3480156108e857600080fd5b506108f161158c565b005b3480156108ff57600080fd5b50610908611692565b6040518082815260200191505060405180910390f35b34801561092a57600080fd5b5061094960048036038101908080359060200190929190505050611698565b005b34801561095757600080fd5b50610960611781565b604051808260ff1660ff16815260200191505060405180910390f35b34801561098857600080fd5b50610991611786565b6040518082815260200191505060405180910390f35b3480156109b357600080fd5b506109bc61178e565b005b3480156109ca57600080fd5b506109f7600480360381019080803590602001908201803590602001919091929391929390505050611911565b005b610a2d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b4f565b005b348015610a3b57600080fd5b50610a44611a80565b604051808215151515815260200191505060405180910390f35b348015610a6a57600080fd5b50610a9f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a8f565b005b348015610aad57600080fd5b50610ab6611af7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b0457600080fd5b50610b0d611b1d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600080349150610b5f8383611b42565b610b6882611b7e565b9050610b7f82600354611bb690919063ffffffff16565b600381905550610b8f8382611bd2565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a3610c068383611be0565b610c0e611be4565b610c188383611cbc565b505050565b600081565b6000806702c68af0bb140000610c45600354600754611cc090919063ffffffff16565b109050610c50611cd9565b80610c585750805b91505090565b600b60009054906101000a900460ff1681565b6040805190810160405280601181526020017f446546694c656e642050726f746f636f6c00000000000000000000000000000081525081565b6000806000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d0b57600080fd5b8484111515610d1957600080fd5b60045492506005549150600090508285141515610d66574285111515610d3e57600080fd5b8242101515610d4c57600080fd5b8285111515610d5a57600080fd5b84600481905550600190505b8184141515610d97578142101515610d7d57600080fd5b8342101515610d8b57600080fd5b83600581905550600190505b8015610df3577ff6b7151023ee87a6a0cc1f6cea30e02351728911b7b848aa8abde4d1f09172b7600454856004546005546040518085815260200184815260200183815260200182815260200194505050505060405180910390a15b5050505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e5857600080fd5b600090505b82829050811015610f5b57600a60008484848181101515610e7a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558282828181101515610eef57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a60405160405180910390a28080600101915050610e5d565b505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fbc57600080fd5b600a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558073ffffffffffffffffffffffffffffffffffffffff167ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a60405160405180910390a250565b6040805190810160405280600381526020017f44464e000000000000000000000000000000000000000000000000000000000081525081565b60025481565b6000600554905090565b60075481565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561115257600080fd5b6004544210151561116257600080fd5b6004548111151561117257600080fd5b6005548110151561118257600080fd5b7ff6b7151023ee87a6a0cc1f6cea30e02351728911b7b848aa8abde4d1f09172b7816005546004546005546040518085815260200184815260200183815260200182815260200194505050505060405180910390a18060048190555050565b60085481565b60035481565b6000600454421015905090565b60055481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561125c57600080fd5b600660149054906101000a900460ff1615151561127857600080fd5b611280610c22565b151561128b57600080fd5b611293611cf7565b7f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768160405160405180910390a16001600660146101000a81548160ff021916908315150217905550565b60006007546003541015905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6012600a0a81565b601281565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561137a57600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7327cfb92064326327e88be61ff960a18f343c143881565b6000600454905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114a157600080fd5b6001600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f60405160405180910390a250565b60006008546003541015905090565b600660149054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081565b600660149054906101000a900460ff1615156115a757600080fd5b6115af61153f565b1515156115bb57600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa89401a336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561167857600080fd5b505af115801561168c573d6000803e3d6000fd5b50505050565b60045481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116f457600080fd5b6005544210151561170457600080fd5b804210151561171257600080fd5b6004548111151561172257600080fd5b7ff6b7151023ee87a6a0cc1f6cea30e02351728911b7b848aa8abde4d1f09172b7600454826004546005546040518085815260200184815260200183815260200182815260200194505050505060405180910390a18060058190555050565b601281565b635f490de081565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117ea57600080fd5b600b60009054906101000a900460ff1615151561180657600080fd5b6001600b60006101000a81548160ff0219169083151502179055506000156118c6576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638456cb596040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156118ad57600080fd5b505af11580156118c1573d6000803e3d6000fd5b505050505b6118e37327cfb92064326327e88be61ff960a18f343c1438611a8f565b7f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a1565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561196f57600080fd5b600090505b82829050811015611a7b576001600a6000858585818110151561199357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508282828181101515611a0f57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f60405160405180910390a28080600101915050611974565b505050565b6000611a8a610c22565b905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611aeb57600080fd5b611af481611e50565b50565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6702c68af0bb1400003410151515611b5957600080fd5b678ac7230489e800003411151515611b7057600080fd5b611b7a8282611f4c565b5050565b6000611baf670de0b6b3a7640000611ba160025485611fb490919063ffffffff16565b611fec90919063ffffffff16565b9050919050565b60008183019050828110151515611bc957fe5b80905092915050565b611bdc8282612002565b5050565b5050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f340fa0134336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303818588803b158015611ca157600080fd5b505af1158015611cb5573d6000803e3d6000fd5b5050505050565b5050565b6000828211151515611cce57fe5b818303905092915050565b6000611ce3612110565b80611cf25750611cf16112dc565b5b905090565b611cff61153f565b15611da757600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343d726d66040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015611d8a57600080fd5b505af1158015611d9e573d6000803e3d6000fd5b50505050611e46565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c52dc416040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015611e2d57600080fd5b505af1158015611e41573d6000803e3d6000fd5b505050505b611e4e61211c565b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611e8c57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b81600a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611fa557600080fd5b611faf8383612387565b505050565b600080831415611fc75760009050611fe6565b8183029050818382811515611fd857fe5b04141515611fe257fe5b8090505b92915050565b60008183811515611ff957fe5b04905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156120c657600080fd5b505af11580156120da573d6000803e3d6000fd5b505050506040513d60208110156120f057600080fd5b8101908080519060200190929190505050151561210c57600080fd5b5050565b60006005544211905090565b6121246123ba565b6000156121c9576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f4ba83a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156121b057600080fd5b505af11580156121c4573d6000803e3d6000fd5b505050505b6000151561229d576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637d64bcb46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561225657600080fd5b505af115801561226a573d6000803e3d6000fd5b505050506040513d602081101561228057600080fd5b8101908080519060200190929190505050151561229c57600080fd5b5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b7327cfb92064326327e88be61ff960a18f343c14386040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561236d57600080fd5b505af1158015612381573d6000803e3d6000fd5b50505050565b61239182826123bc565b6007546123a982600354611bb690919063ffffffff16565b111515156123b657600080fd5b5050565b565b60045442101580156123d057506005544211155b15156123db57600080fd5b6123e582826123e9565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561242557600080fd5b6000811415151561243557600080fd5b50505600a165627a7a72305820c0a3ae5a99761dbc5f64197cb0702090ee21b654d8f1f85fb4c8a2cbbc78720a0029
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TemplateCrowdsale
Function name: constructor
PC address: 139
Estimated Gas Usage: 11879 - 55219
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:1020

START_TIME > now ? START_TIME : now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TemplateCrowdsale
Function name: constructor
PC address: 476
Estimated Gas Usage: 28818 - 133148
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:274

require(_openingTime >= block.timestamp)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TemplateCrowdsale
Function name: constructor
PC address: 492
Estimated Gas Usage: 28859 - 133189
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:275

require(_closingTime >= _openingTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TemplateCrowdsale
Function name: hasClosed()
PC address: 3157
Estimated Gas Usage: 2768 - 2863
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:1047

super.hasClosed() || remainValue

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: hasClosed(), txdata: 0x1515bc2b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TemplateCrowdsale
Function name: setTimes(uint256,uint256)
PC address: 3385
Estimated Gas Usage: 2878 - 3303
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:1082

require(_startTime > now)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: setTimes(uint256,uint256), txdata: 0x22434836100200102000000101010180010000040480200000800001004002000800010011, decoded_data: (7240539706190958996738137853284275186880400066567765502802177001746721669376, 7689318425915528602346510723233181380881209919202693705745230188025481265152), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TemplateCrowdsale
Function name: setTimes(uint256,uint256)
PC address: 3399
Estimated Gas Usage: 2906 - 3331
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:1084

require(now < oldStartTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: setTimes(uint256,uint256), txdata: 0x224348360000000080000000104080000000000000000080000000000001c0008000100203, decoded_data: (13479973333973816628444290705709809272363455847998982202474092302338, 1356938545749799165119972480570561420155507632800475359837393562592731987968), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TemplateCrowdsale
Function name: setTimes(uint256,uint256)
PC address: 3448
Estimated Gas Usage: 2907 - 3332
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:1093

require(now < oldEndTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: setTimes(uint256,uint256), txdata: 0x22434836000000000000000000000000000000000000000000000000000000005f490de081, decoded_data: (1598623200, 58348357467241364100158816664534141066686828210420440473007923191487475482624), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TemplateCrowdsale
Function name: setTimes(uint256,uint256)
PC address: 3462
Estimated Gas Usage: 2935 - 3360
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:1095

require(now < _endTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: setTimes(uint256,uint256), txdata: 0x22434836000000000000000000000000000000000000000000000000000000005f490de001, decoded_data: (1598623200, 452312848583266388373324160190187140051835877600158453279131187530910662656), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TemplateCrowdsale
Function name: setStartTime(uint256)
PC address: 4445
Estimated Gas Usage: 2137 - 2562
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:1054

require(now < openingTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: setStartTime(uint256), txdata: 0x3e0a322d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TemplateCrowdsale
Function name: finalize()
PC address: 4742
Estimated Gas Usage: 4912 - 5667
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:312

require(hasClosed())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TemplateCrowdsale
Function name: finalize()
PC address: 4811
Estimated Gas Usage: 20617 - 146258
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:317

isFinalized = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TemplateCrowdsale
Function name: finalize()
PC address: 4825
Estimated Gas Usage: 20617 - 146258
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:317

isFinalized = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TemplateCrowdsale
Function name: setEndTime(uint256)
PC address: 5887
Estimated Gas Usage: 2577 - 3002
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:1066

require(now < closingTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: setEndTime(uint256), txdata: 0xccb98ffc, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TemplateCrowdsale
Function name: setEndTime(uint256)
PC address: 5901
Estimated Gas Usage: 2605 - 3030
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:1068

require(now < _endTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: setEndTime(uint256), txdata: 0xccb98ffc, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TemplateCrowdsale
Function name: hasClosed()
PC address: 7400
Estimated Gas Usage: 2734 - 2829
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:915

super.hasClosed() || capReached()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: hasClosed(), txdata: 0x1515bc2b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TemplateCrowdsale
Function name: finalize()
PC address: 8662
Estimated Gas Usage: 20617 - 146258
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:930

token

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TemplateCrowdsale
Function name: finalize()
PC address: 8793
Estimated Gas Usage: 20617 - 146258
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:930

MintableToken(token).finishMinting()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TemplateCrowdsale
Function name: finalize()
PC address: 8793
Estimated Gas Usage: 20617 - 146258
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:930

MintableToken(token).finishMinting()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TemplateCrowdsale
Function name: finalize()
PC address: 8793
Estimated Gas Usage: 20617 - 146258
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:930

MintableToken(token).finishMinting()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TemplateCrowdsale
Function name: finalize()
PC address: 8866
Estimated Gas Usage: 20617 - 146258
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:933

token

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TemplateCrowdsale
Function name: finalize()
PC address: 9072
Estimated Gas Usage: 20617 - 146258
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:933

Ownable(token).transferOwnership(TARGET_USER)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TemplateCrowdsale
Function name: finalize()
PC address: 9072
Estimated Gas Usage: 20617 - 146258
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:933

Ownable(token).transferOwnership(TARGET_USER)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0


time_used: 36056.530482530594 seconds
#@contract_info_time
0x6b30661825AeCA80fB50739F0b77C5B3178A836f.sol:0.4.23:TemplateCrowdsale:36056.530482530594:36100:60:36000
