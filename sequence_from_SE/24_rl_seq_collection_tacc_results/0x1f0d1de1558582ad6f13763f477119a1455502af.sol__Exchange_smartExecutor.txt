++++ 0x1f0d1de1558582ad6f13763f477119a1455502af.sol  :  0.4.24  :  Exchange ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 5534
['constructor']:writes at the last depth:['3', '4', '7', '8', '9', '10', '11', '5']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 64.60% coverage.
dynamic svars:['1', '0']
static svars:['10', '11', '6', '2', '8', '7', '5', '9', '3', '4']
Ending preprocessing.
preprocessing time(s): 102.02006244659424
contract coverage: 56.29%
withdrawTradeMining() is not reachable
buyOrderWithEth(uint256) is not reachable
cancelOrder(uint256) is not reachable
calcFees(uint256,uint256) is not reachable
getBuyTokenAmount(uint256,uint256) is not reachable
tradeMiningAmount(uint256,uint256) is not reachable
tokenFallback(address,uint256,bytes) is not reachable
buyOrderWithERC20Token(uint256,address,uint256) is not reachable
Function Reads: State variables read in conditions
	sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address):[]
	orderCount():[]
	changeTradeMiningPrice(uint256,uint256):[]
	cancelOrder(uint256):[]
	feeMul():[]
	treasury():[]
	tradeMiningMul():[]
	calcFees(uint256,uint256):[]
	remainingAmount(uint256):[]
	feeDiv():[]
	buyOrderWithEth(uint256):[]
	tokenFallback(address,uint256,bytes):[]
	tradeMiningAmount(uint256,uint256):[]
	tradeMiningBalance():[]
	sellEther(address,uint256,uint256):[]
	buyOrderWithERC20Token(uint256,address,uint256):[]
	getBalance(address,address):[]
	isOrderActive(uint256):[]
	sellEtherWithRing(address,uint256,uint256,address):[]
	sellERC20Token(address,address,uint256,uint256,uint256):[]
	withdrawTradeMining():[]
	tradeMiningDiv():[]
	getBuyTokenAmount(uint256,uint256):[]
Function Writes: State variables written
	changeTradeMiningPrice(uint256,uint256):['10', '11']
	withdrawTradeMining():['6']
	sellEther(address,uint256,uint256):['2']
	tokenFallback(address,uint256,bytes):['6']
	sellEtherWithRing(address,uint256,uint256,address):['2']
	sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address):['2']
============================
iteration:3
targets:['withdrawTradeMining()', 'buyOrderWithEth(uint256)', 'cancelOrder(uint256)', 'calcFees(uint256,uint256)', 'getBuyTokenAmount(uint256,uint256)', 'tradeMiningAmount(uint256,uint256)', 'tokenFallback(address,uint256,bytes)', 'buyOrderWithERC20Token(uint256,address,uint256)']
['changeTradeMiningPrice(uint256,uint256)']:writes at the last depth:['11', '10']
['tokenFallback(address,uint256,bytes)']:writes at the last depth:['6']
['sellEther(address,uint256,uint256)']:writes at the last depth:['2', '0', '1']
['sellEtherWithRing(address,uint256,uint256,address)']:writes at the last depth:['2', '0', '1']
['sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)']:writes at the last depth:['2', '0', '1']
['tokenFallback(address,uint256,bytes)']:writes at the last depth:['2', '0', '1']
['sellERC20Token(address,address,uint256,uint256,uint256)']:writes at the last depth:['2', '0', '1']
['tokenFallback(address,uint256,bytes)']:writes at the last depth:['2', '0', '1']
contract coverage: 75.35%
============================
iteration:4
['tokenFallback(address,uint256,bytes)', 'changeTradeMiningPrice(uint256,uint256)']:writes at the last depth:['11', '10']
['tokenFallback(address,uint256,bytes)', 'tokenFallback(address,uint256,bytes)']:writes at the last depth:['6']
['tokenFallback(address,uint256,bytes)', 'cancelOrder(uint256)']:writes at the last depth:['', '1']
['tokenFallback(address,uint256,bytes)', 'sellEther(address,uint256,uint256)']:writes at the last depth:['', '2']
['tokenFallback(address,uint256,bytes)', 'sellEtherWithRing(address,uint256,uint256,address)']:writes at the last depth:['', '2']
['tokenFallback(address,uint256,bytes)', 'sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)']:writes at the last depth:['', '2', '0']
['tokenFallback(address,uint256,bytes)', 'tokenFallback(address,uint256,bytes)']:writes at the last depth:['', '2', '0']
['tokenFallback(address,uint256,bytes)', 'sellERC20Token(address,address,uint256,uint256,uint256)']:writes at the last depth:['', '2', '0']
['tokenFallback(address,uint256,bytes)', 'tokenFallback(address,uint256,bytes)']:writes at the last depth:['', '2', '0']
contract coverage: 75.35%
============================
iteration:5
['tokenFallback(address,uint256,bytes)', 'tokenFallback(address,uint256,bytes)', 'changeTradeMiningPrice(uint256,uint256)']:writes at the last depth:['11', '10']
contract coverage: 75.35%
============================
iteration:6
contract coverage: 75.35%
============================
iteration:7
contract coverage: 75.35%
============================
iteration:8
contract coverage: 75.35%
============================
iteration:9
contract coverage: 75.35%
============================
iteration:10
contract coverage: 75.35%
============================
iteration:11
contract coverage: 75.35%
============================
iteration:12
contract coverage: 75.35%
============================
iteration:13
contract coverage: 75.35%
============================
iteration:14
['tokenFallback(address,uint256,bytes)', 'changeTradeMiningPrice(uint256,uint256)', 'changeTradeMiningPrice(uint256,uint256)']:writes at the last depth:['11', '10']
contract coverage: 75.84%
============================
iteration:15
['tokenFallback(address,uint256,bytes)', 'changeTradeMiningPrice(uint256,uint256)', 'changeTradeMiningPrice(uint256,uint256)', 'changeTradeMiningPrice(uint256,uint256)']:writes at the last depth:['11', '10']
['tokenFallback(address,uint256,bytes)', 'changeTradeMiningPrice(uint256,uint256)', 'changeTradeMiningPrice(uint256,uint256)', 'sellEther(address,uint256,uint256)']:writes at the last depth:['', '2']
['tokenFallback(address,uint256,bytes)', 'changeTradeMiningPrice(uint256,uint256)', 'changeTradeMiningPrice(uint256,uint256)', 'sellEtherWithRing(address,uint256,uint256,address)']:writes at the last depth:['', '2']
contract coverage: 75.84%
============================
iteration:16
contract coverage: 75.84%
============================
iteration:17
contract coverage: 75.84%
============================
iteration:18
contract coverage: 75.84%
============================
iteration:19
contract coverage: 75.84%
============================
iteration:20
contract coverage: 76.69%
============================
iteration:21
['tokenFallback(address,uint256,bytes)', 'changeTradeMiningPrice(uint256,uint256)']:writes at the last depth:['11', '10']
['tokenFallback(address,uint256,bytes)', 'tokenFallback(address,uint256,bytes)']:writes at the last depth:['6']
['tokenFallback(address,uint256,bytes)', 'withdrawTradeMining()']:writes at the last depth:['6']
contract coverage: 76.69%
============================
iteration:22
['tokenFallback(address,uint256,bytes)', 'withdrawTradeMining()', 'changeTradeMiningPrice(uint256,uint256)']:writes at the last depth:['11', '10']
['tokenFallback(address,uint256,bytes)', 'withdrawTradeMining()', 'tokenFallback(address,uint256,bytes)']:writes at the last depth:['6']
contract coverage: 76.69%
============================
iteration:23
['tokenFallback(address,uint256,bytes)', 'withdrawTradeMining()', 'tokenFallback(address,uint256,bytes)', 'changeTradeMiningPrice(uint256,uint256)']:writes at the last depth:['11', '10']
['tokenFallback(address,uint256,bytes)', 'withdrawTradeMining()', 'tokenFallback(address,uint256,bytes)', 'withdrawTradeMining()']:writes at the last depth:['6']
contract coverage: 76.69%
============================
iteration:24
contract coverage: 76.69%
============================
iteration:25
contract coverage: 76.69%
============================
iteration:26
contract coverage: 76.69%
============================
iteration:27
['changeTradeMiningPrice(uint256,uint256)', 'changeTradeMiningPrice(uint256,uint256)']:writes at the last depth:['11', '10']
contract coverage: 76.69%
============================
iteration:28
contract coverage: 76.69%
#@statespace
2713 nodes, 2712 edges, 43081 total states
#@coverage
Achieved 3.61% coverage for code: 60806040526000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005257600080fd5b5060405160c080612ccb83398101806040528101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505085600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836008819055508260098190555081600a8190555080600b8190555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050612b308061019b6000396000f300608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806322fdd3ea146101385780632453ffa8146101ed57806341f9377f14610218578063514fcac71461024f57806353e1a7a01461027c57806361d027b3146102a75780636fb768e8146102fe57806378d067dd1461032957806387bda8f21461037457806389a447e0146103b5578063a4ff9c34146103e0578063c0ee0b8a14610400578063c49063e714610493578063c655de64146104de578063cb2bb26414610509578063cf6ff17314610567578063d4fac45d146105be578063d6e4358514610635578063e3319e821461067a578063eeb3377a146106f8578063f2037fec1461078d578063fc5f4241146107a4578063ff700e52146107cf575b600080fd5b34801561014457600080fd5b506101d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061081a565b6040518082815260200191505060405180910390f35b3480156101f957600080fd5b5061020261085a565b6040518082815260200191505060405180910390f35b34801561022457600080fd5b5061024d6004803603810190808035906020019092919080359060200190929190505050610860565b005b34801561025b57600080fd5b5061027a600480360381019080803590602001909291905050506108de565b005b34801561028857600080fd5b50610291610c5f565b6040518082815260200191505060405180910390f35b3480156102b357600080fd5b506102bc610c65565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030a57600080fd5b50610313610c8b565b6040518082815260200191505060405180910390f35b34801561033557600080fd5b5061035e6004803603810190808035906020019092919080359060200190929190505050610c91565b6040518082815260200191505060405180910390f35b34801561038057600080fd5b5061039f60048036038101908080359060200190929190505050610e3f565b6040518082815260200191505060405180910390f35b3480156103c157600080fd5b506103ca610e5f565b6040518082815260200191505060405180910390f35b6103fe60048036038101908080359060200190929190505050610e65565b005b34801561040c57600080fd5b50610491600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610ea5565b005b34801561049f57600080fd5b506104c86004803603810190808035906020019092919080359060200190929190505050611037565b6040518082815260200191505060405180910390f35b3480156104ea57600080fd5b506104f36110ce565b6040518082815260200191505060405180910390f35b610551600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506110d4565b6040518082815260200191505060405180910390f35b34801561057357600080fd5b506105bc60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611140565b005b3480156105ca57600080fd5b5061061f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611175565b6040518082815260200191505060405180910390f35b34801561064157600080fd5b50610660600480360381019080803590602001909291905050506111fb565b604051808215151515815260200191505060405180910390f35b6106e2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611228565b6040518082815260200191505060405180910390f35b34801561070457600080fd5b50610777600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050611273565b6040518082815260200191505060405180910390f35b34801561079957600080fd5b506107a26112d4565b005b3480156107b057600080fd5b506107b96113ad565b6040518082815260200191505060405180910390f35b3480156107db57600080fd5b5061080460048036038101908080359060200190929190803590602001909291905050506113b3565b6040518082815260200191505060405180910390f35b6000808511151561082a57600080fd5b610834878661158b565b151561083f57600080fd5b61084e338888888888886116a7565b90509695505050505050565b60025481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108bc57600080fd5b600081141515156108cc57600080fd5b81600a8190555080600b819055505050565b60006001600083815260200190815260200160002090506000816004015411151561090857600080fd5b8060000160149054906101000a900460ff16151561092557600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561098357600080fd5b610a3981600401546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b6890919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b338160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600401548360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b1515610b3e57600080fd5b60016000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560048201600090556005820160009055600682016000905550507faa2a006d186dc89a3d6851834c85d16226329ac40bcad6531a5756a38ed1c90f8242604051808381526020018281526020019250505060405180910390a15050565b60085481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b6000806000600160008581526020019081526020016000209150600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610d8457610d528260060154610d44846005015488611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b9050610d7d600954610d6f60085484611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b9250610e34565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e2e57610e27600954610e1960085488611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b9250610e33565b600092505b5b829250505092915050565b600060016000838152602001908152602001600020600401549050919050565b60095481565b600034111515610e7457600080fd5b610ea23382600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634611d68565b50565b60008151148015610f035750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15610f1757610f11826121d4565b50611032565b605481511415610f9157610f8b8333610f3a6040856121fa90919063ffffffff16565b85610f4f60008761223290919063ffffffff16565b610f6360208861223290919063ffffffff16565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166116a7565b50611031565b606881511415610ffc57610ff68333610fb46040856121fa90919063ffffffff16565b85610fc960008761223290919063ffffffff16565b610fdd60208861223290919063ffffffff16565b610ff16054896121fa90919063ffffffff16565b6116a7565b50611030565b60208151141561102a576110258361101e60008461223290919063ffffffff16565b3385611d68565b61102f565b600080fd5b5b5b5b505050565b60008060008085141561104d57600092506110c6565b6001600085815260200190815260200160002091508160000160149054906101000a900460ff16151561108357600092506110c6565b6110ac600b5461109e600a5488611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b90508060065410156110c25760065492506110c6565b8092505b505092915050565b60065481565b600080341115156110e457600080fd5b61113733600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686348787600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166116a7565b90509392505050565b60008111151561114f57600080fd5b611159828261158b565b151561116457600080fd5b61117033848484611d68565b505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006001600083815260200190815260200160002060000160149054906101000a900460ff169050919050565b6000803411151561123857600080fd5b61126933600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687348888886116a7565b9050949350505050565b6000808411151561128357600080fd5b61128d868561158b565b151561129857600080fd5b6112c9338787878787600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166116a7565b905095945050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561133257600080fd5b600060065411151561134357600080fd5b6006549050600060068190555061139f600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b15156113aa57600080fd5b50565b600b5481565b600080600080851115156113c657600080fd5b600160008581526020019081526020016000209150600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806114cc5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15611544576114e8600854600954611b6890919063ffffffff16565b905061153d8161152f846005015461152160095461151388600601548c611d1a90919063ffffffff16565b611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b611d4d90919063ffffffff16565b9250611574565b6115718260050154611563846006015488611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b92505b60008311151561158357600080fd5b505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561166457600080fd5b505af1158015611678573d6000803e3d6000fd5b505050506040513d602081101561168e57600080fd5b8101908080519060200190929190505050905092915050565b600080851115156116b757600080fd5b6000841115156116c657600080fd5b6000831115156116d557600080fd5b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415151561171057600080fd5b60026000815480929190600101919050559050610100604051908101604052808973ffffffffffffffffffffffffffffffffffffffff1681526020016001151581526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152506001600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816004015560c0820151816005015560e082015181600601559050506119b7856000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461225b90919063ffffffff16565b6000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f9684ab37f360879637d39ea3a41f58c0705a15f80d518ec92bd1c7383ef8a61a81898989868a8a8a42604051808a81526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001838152602001828152602001995050505050505050505060405180910390a1979650505050505050565b6000828211151515611b7657fe5b818303905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c25578373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015611c1f573d6000803e3d6000fd5b50611d0f565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611cc857600080fd5b505af1158015611cdc573d6000803e3d6000fd5b505050506040513d6020811015611cf257600080fd5b81019080805190602001909291905050501515611d0e57600080fd5b5b600190509392505050565b60008082840290506000841480611d3b5750828482811515611d3857fe5b04145b1515611d4357fe5b8091505092915050565b6000808284811515611d5b57fe5b0490508091505092915050565b60008060025485101515611d7b57600080fd5b600083111515611d8a57600080fd5b6001600086815260200190815260200160002091508160000160149054906101000a900460ff161515611dbc57600080fd5b8160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515611e1b57600080fd5b8160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515611e7957600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611f53573273ffffffffffffffffffffffffffffffffffffffff168260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611f5257600080fd5b5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611fdf57611fd8868685612279565b905061207a565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561206b576120648686856124db565b9050612079565b61207686868561274f565b90505b5b6120848187612962565b151561208f57600080fd5b6000600160008781526020019081526020016000206004015414156121cc5760016000868152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560048201600090556005820160009055600682016000905550507feb3b41be12efa25c0c65725eeff2e2ad0250e2e5de2aa939e18f36aa656e98808542604051808381526020018281526020019250505060405180910390a15b505050505050565b60006121eb8260065461225b90919063ffffffff16565b60068190555060019050919050565b6000806014830184511015151561221057600080fd5b6c01000000000000000000000000836020860101510490508091505092915050565b6000806020830184511015151561224857600080fd5b8260208501015190508091505092915050565b600080828401905083811015151561226f57fe5b8091505092915050565b6000806000806001600087815260200190815260200160002092506122c183600601546122b3856005015488611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b91506122ec6009546122de60085485611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b90506000821115156122fd57600080fd5b8260040154821115151561231057600080fd5b612327828460040154611b6890919063ffffffff16565b83600401819055506123828360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b151561238d57600080fd5b6123ce876123a48385611b6890919063ffffffff16565b8560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b15156123d957600080fd5b7f01f5d7c359dba416997ea6c723ea4663e9ad524f956ed8bb3b5234e6475a7285878460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16886124348587611b6890919063ffffffff16565b898642604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390a18093505050509392505050565b60008060008060016000878152602001908152602001600020925061251f60095461251160085488611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b915061256083600601546125528560050154612544868a611b6890919063ffffffff16565b611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b905060008111151561257157600080fd5b8260040154811115151561258457600080fd5b61259b818460040154611b6890919063ffffffff16565b83600401819055506126088360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166125de8488611b6890919063ffffffff16565b8560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b151561261357600080fd5b61264287828560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b151561264d57600080fd5b7f01f5d7c359dba416997ea6c723ea4663e9ad524f956ed8bb3b5234e6475a7285878460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688846126a9878b611b6890919063ffffffff16565b8742604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390a18193505050509392505050565b60008060006001600086815260200190815260200160002091506127968260060154612788846005015487611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b90506000811115156127a757600080fd5b816004015481111515156127ba57600080fd5b6127d1818360040154611b6890919063ffffffff16565b826004018190555061282c8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b151561283757600080fd5b61286686828460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b151561287157600080fd5b7f01f5d7c359dba416997ea6c723ea4663e9ad524f956ed8bb3b5234e6475a7285868360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878488600042604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390a16000925050509392505050565b60008060008414156129775760019150612afd565b6129c6600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b15156129d157600080fd5b600060065414156129e55760019150612afd565b612a0e600b54612a00600a5487611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b90506000811415612a225760019150612afd565b600654811115612a325760065490505b612a4781600654611b6890919063ffffffff16565b600681905550612a7a8382600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b1515612a8557600080fd5b7f5a9ec13c12ca9563a7b3108125f74c57ed388bb313394ea50f7e4a71b01497c2838242604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1600191505b50929150505600a165627a7a72305820fee38741fbdee758ec4752698cb1b303580dbfb43d9476a4054f452e3690c66d0029
#@coverage
Achieved 76.69% coverage for code: 608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806322fdd3ea146101385780632453ffa8146101ed57806341f9377f14610218578063514fcac71461024f57806353e1a7a01461027c57806361d027b3146102a75780636fb768e8146102fe57806378d067dd1461032957806387bda8f21461037457806389a447e0146103b5578063a4ff9c34146103e0578063c0ee0b8a14610400578063c49063e714610493578063c655de64146104de578063cb2bb26414610509578063cf6ff17314610567578063d4fac45d146105be578063d6e4358514610635578063e3319e821461067a578063eeb3377a146106f8578063f2037fec1461078d578063fc5f4241146107a4578063ff700e52146107cf575b600080fd5b34801561014457600080fd5b506101d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061081a565b6040518082815260200191505060405180910390f35b3480156101f957600080fd5b5061020261085a565b6040518082815260200191505060405180910390f35b34801561022457600080fd5b5061024d6004803603810190808035906020019092919080359060200190929190505050610860565b005b34801561025b57600080fd5b5061027a600480360381019080803590602001909291905050506108de565b005b34801561028857600080fd5b50610291610c5f565b6040518082815260200191505060405180910390f35b3480156102b357600080fd5b506102bc610c65565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030a57600080fd5b50610313610c8b565b6040518082815260200191505060405180910390f35b34801561033557600080fd5b5061035e6004803603810190808035906020019092919080359060200190929190505050610c91565b6040518082815260200191505060405180910390f35b34801561038057600080fd5b5061039f60048036038101908080359060200190929190505050610e3f565b6040518082815260200191505060405180910390f35b3480156103c157600080fd5b506103ca610e5f565b6040518082815260200191505060405180910390f35b6103fe60048036038101908080359060200190929190505050610e65565b005b34801561040c57600080fd5b50610491600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610ea5565b005b34801561049f57600080fd5b506104c86004803603810190808035906020019092919080359060200190929190505050611037565b6040518082815260200191505060405180910390f35b3480156104ea57600080fd5b506104f36110ce565b6040518082815260200191505060405180910390f35b610551600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506110d4565b6040518082815260200191505060405180910390f35b34801561057357600080fd5b506105bc60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611140565b005b3480156105ca57600080fd5b5061061f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611175565b6040518082815260200191505060405180910390f35b34801561064157600080fd5b50610660600480360381019080803590602001909291905050506111fb565b604051808215151515815260200191505060405180910390f35b6106e2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611228565b6040518082815260200191505060405180910390f35b34801561070457600080fd5b50610777600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050611273565b6040518082815260200191505060405180910390f35b34801561079957600080fd5b506107a26112d4565b005b3480156107b057600080fd5b506107b96113ad565b6040518082815260200191505060405180910390f35b3480156107db57600080fd5b5061080460048036038101908080359060200190929190803590602001909291905050506113b3565b6040518082815260200191505060405180910390f35b6000808511151561082a57600080fd5b610834878661158b565b151561083f57600080fd5b61084e338888888888886116a7565b90509695505050505050565b60025481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108bc57600080fd5b600081141515156108cc57600080fd5b81600a8190555080600b819055505050565b60006001600083815260200190815260200160002090506000816004015411151561090857600080fd5b8060000160149054906101000a900460ff16151561092557600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561098357600080fd5b610a3981600401546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b6890919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b338160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600401548360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b1515610b3e57600080fd5b60016000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560048201600090556005820160009055600682016000905550507faa2a006d186dc89a3d6851834c85d16226329ac40bcad6531a5756a38ed1c90f8242604051808381526020018281526020019250505060405180910390a15050565b60085481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b6000806000600160008581526020019081526020016000209150600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610d8457610d528260060154610d44846005015488611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b9050610d7d600954610d6f60085484611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b9250610e34565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e2e57610e27600954610e1960085488611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b9250610e33565b600092505b5b829250505092915050565b600060016000838152602001908152602001600020600401549050919050565b60095481565b600034111515610e7457600080fd5b610ea23382600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634611d68565b50565b60008151148015610f035750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15610f1757610f11826121d4565b50611032565b605481511415610f9157610f8b8333610f3a6040856121fa90919063ffffffff16565b85610f4f60008761223290919063ffffffff16565b610f6360208861223290919063ffffffff16565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166116a7565b50611031565b606881511415610ffc57610ff68333610fb46040856121fa90919063ffffffff16565b85610fc960008761223290919063ffffffff16565b610fdd60208861223290919063ffffffff16565b610ff16054896121fa90919063ffffffff16565b6116a7565b50611030565b60208151141561102a576110258361101e60008461223290919063ffffffff16565b3385611d68565b61102f565b600080fd5b5b5b5b505050565b60008060008085141561104d57600092506110c6565b6001600085815260200190815260200160002091508160000160149054906101000a900460ff16151561108357600092506110c6565b6110ac600b5461109e600a5488611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b90508060065410156110c25760065492506110c6565b8092505b505092915050565b60065481565b600080341115156110e457600080fd5b61113733600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686348787600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166116a7565b90509392505050565b60008111151561114f57600080fd5b611159828261158b565b151561116457600080fd5b61117033848484611d68565b505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006001600083815260200190815260200160002060000160149054906101000a900460ff169050919050565b6000803411151561123857600080fd5b61126933600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687348888886116a7565b9050949350505050565b6000808411151561128357600080fd5b61128d868561158b565b151561129857600080fd5b6112c9338787878787600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166116a7565b905095945050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561133257600080fd5b600060065411151561134357600080fd5b6006549050600060068190555061139f600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b15156113aa57600080fd5b50565b600b5481565b600080600080851115156113c657600080fd5b600160008581526020019081526020016000209150600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806114cc5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15611544576114e8600854600954611b6890919063ffffffff16565b905061153d8161152f846005015461152160095461151388600601548c611d1a90919063ffffffff16565b611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b611d4d90919063ffffffff16565b9250611574565b6115718260050154611563846006015488611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b92505b60008311151561158357600080fd5b505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561166457600080fd5b505af1158015611678573d6000803e3d6000fd5b505050506040513d602081101561168e57600080fd5b8101908080519060200190929190505050905092915050565b600080851115156116b757600080fd5b6000841115156116c657600080fd5b6000831115156116d557600080fd5b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415151561171057600080fd5b60026000815480929190600101919050559050610100604051908101604052808973ffffffffffffffffffffffffffffffffffffffff1681526020016001151581526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152506001600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816004015560c0820151816005015560e082015181600601559050506119b7856000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461225b90919063ffffffff16565b6000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f9684ab37f360879637d39ea3a41f58c0705a15f80d518ec92bd1c7383ef8a61a81898989868a8a8a42604051808a81526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001838152602001828152602001995050505050505050505060405180910390a1979650505050505050565b6000828211151515611b7657fe5b818303905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c25578373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015611c1f573d6000803e3d6000fd5b50611d0f565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611cc857600080fd5b505af1158015611cdc573d6000803e3d6000fd5b505050506040513d6020811015611cf257600080fd5b81019080805190602001909291905050501515611d0e57600080fd5b5b600190509392505050565b60008082840290506000841480611d3b5750828482811515611d3857fe5b04145b1515611d4357fe5b8091505092915050565b6000808284811515611d5b57fe5b0490508091505092915050565b60008060025485101515611d7b57600080fd5b600083111515611d8a57600080fd5b6001600086815260200190815260200160002091508160000160149054906101000a900460ff161515611dbc57600080fd5b8160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515611e1b57600080fd5b8160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515611e7957600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611f53573273ffffffffffffffffffffffffffffffffffffffff168260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611f5257600080fd5b5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611fdf57611fd8868685612279565b905061207a565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561206b576120648686856124db565b9050612079565b61207686868561274f565b90505b5b6120848187612962565b151561208f57600080fd5b6000600160008781526020019081526020016000206004015414156121cc5760016000868152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560048201600090556005820160009055600682016000905550507feb3b41be12efa25c0c65725eeff2e2ad0250e2e5de2aa939e18f36aa656e98808542604051808381526020018281526020019250505060405180910390a15b505050505050565b60006121eb8260065461225b90919063ffffffff16565b60068190555060019050919050565b6000806014830184511015151561221057600080fd5b6c01000000000000000000000000836020860101510490508091505092915050565b6000806020830184511015151561224857600080fd5b8260208501015190508091505092915050565b600080828401905083811015151561226f57fe5b8091505092915050565b6000806000806001600087815260200190815260200160002092506122c183600601546122b3856005015488611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b91506122ec6009546122de60085485611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b90506000821115156122fd57600080fd5b8260040154821115151561231057600080fd5b612327828460040154611b6890919063ffffffff16565b83600401819055506123828360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b151561238d57600080fd5b6123ce876123a48385611b6890919063ffffffff16565b8560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b15156123d957600080fd5b7f01f5d7c359dba416997ea6c723ea4663e9ad524f956ed8bb3b5234e6475a7285878460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16886124348587611b6890919063ffffffff16565b898642604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390a18093505050509392505050565b60008060008060016000878152602001908152602001600020925061251f60095461251160085488611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b915061256083600601546125528560050154612544868a611b6890919063ffffffff16565b611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b905060008111151561257157600080fd5b8260040154811115151561258457600080fd5b61259b818460040154611b6890919063ffffffff16565b83600401819055506126088360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166125de8488611b6890919063ffffffff16565b8560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b151561261357600080fd5b61264287828560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b151561264d57600080fd5b7f01f5d7c359dba416997ea6c723ea4663e9ad524f956ed8bb3b5234e6475a7285878460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688846126a9878b611b6890919063ffffffff16565b8742604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390a18193505050509392505050565b60008060006001600086815260200190815260200160002091506127968260060154612788846005015487611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b90506000811115156127a757600080fd5b816004015481111515156127ba57600080fd5b6127d1818360040154611b6890919063ffffffff16565b826004018190555061282c8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b151561283757600080fd5b61286686828460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b151561287157600080fd5b7f01f5d7c359dba416997ea6c723ea4663e9ad524f956ed8bb3b5234e6475a7285868360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878488600042604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390a16000925050509392505050565b60008060008414156129775760019150612afd565b6129c6600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b15156129d157600080fd5b600060065414156129e55760019150612afd565b612a0e600b54612a00600a5487611d1a90919063ffffffff16565b611d4d90919063ffffffff16565b90506000811415612a225760019150612afd565b600654811115612a325760065490505b612a4781600654611b6890919063ffffffff16565b600681905550612a7a8382600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b81565b1515612a8557600080fd5b7f5a9ec13c12ca9563a7b3108125f74c57ed388bb313394ea50f7e4a71b01497c2838242604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1600191505b50929150505600a165627a7a72305820fee38741fbdee758ec4752698cb1b303580dbfb43d9476a4054f452e3690c66d0029
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Exchange
Function name: tokenFallback(address,uint256,bytes)
PC address: 1106
Estimated Gas Usage: 59427 - 268721
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:257

function tokenFallback(address from, uint value, bytes data) public {
    
    
    
    
    if (data.length == 0 && msg.sender == saturnToken) {
      _topUpTradeMining(value);
    } else if (data.length == 84) {
      _newOrder(from, msg.sender, data.toAddress(64), value, data.toUint(0), data.toUint(32), etherAddress);
    } else if (data.length == 104) {
      _newOrder(from, msg.sender, data.toAddress(64), value, data.toUint(0), data.toUint(32), data.toAddress(84));
    } else if (data.length == 32) {
      _executeOrder(from, data.toUint(0), msg.sender, value);
    } else {
      
      revert();
    }
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a00000000000000000000000000000000000000000000000000000000000000010080408c004a0008001000000000010044203900000001011000000100420608ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 4775
Estimated Gas Usage: 61563 - 302610
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:309

etherAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 5735
Estimated Gas Usage: 60344 - 301061
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:506

ERC20(token).transferFrom(msg.sender, address(this), amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802701851880001405c950c00104253312040120020000020a0800b024060030800220010840400200000202400104000140010201080102020100000080010240, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 5735
Estimated Gas Usage: 61563 - 302610
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:506

ERC20(token).transferFrom(msg.sender, address(this), amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010100000100000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa955840304243900040306570018040911010a00b400768c01d89ab99941f07c9014040000102010404020001000000014001000200010202400202400101010180, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 5910
Estimated Gas Usage: 60344 - 301061
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:373

orderCount++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab110030000d0a0085385041371723a3c0190d5904d32420004583a40200260c22010102402001010108024001084040010010081002040810800101010210010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 5910
Estimated Gas Usage: 61563 - 302610
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:373

orderCount++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 5921
Estimated Gas Usage: 60344 - 301061
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:373

orderCount++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab110030000d0a0085385041371723a3c0190d5904d32420004583a40200260c22010102402001010108024001084040010010081002040810800101010210010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 5921
Estimated Gas Usage: 61563 - 302610
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:373

orderCount++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6109
Estimated Gas Usage: 60344 - 301061
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab110030000d0a0085385041371723a3c0190d5904d32420004583a40200260c22010102402001010108024001084040010010081002040810800101010210010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6109
Estimated Gas Usage: 61563 - 302610
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6162
Estimated Gas Usage: 60344 - 301061
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab110030000d0a0085385041371723a3c0190d5904d32420004583a40200260c22010102402001010108024001084040010010081002040810800101010210010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6162
Estimated Gas Usage: 61563 - 302610
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6180
Estimated Gas Usage: 60344 - 301061
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab110030000d0a0085385041371723a3c0190d5904d32420004583a40200260c22010102402001010108024001084040010010081002040810800101010210010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6180
Estimated Gas Usage: 61563 - 302610
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6194
Estimated Gas Usage: 60344 - 301061
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab110030000d0a0085385041371723a3c0190d5904d32420004583a40200260c22010102402001010108024001084040010010081002040810800101010210010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6194
Estimated Gas Usage: 61563 - 302610
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6212
Estimated Gas Usage: 60344 - 301061
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab110030000d0a0085385041371723a3c0190d5904d32420004583a40200260c22010102402001010108024001084040010010081002040810800101010210010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6212
Estimated Gas Usage: 61563 - 302610
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6265
Estimated Gas Usage: 60344 - 301061
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab110030000d0a0085385041371723a3c0190d5904d32420004583a40200260c22010102402001010108024001084040010010081002040810800101010210010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6265
Estimated Gas Usage: 61563 - 302610
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6283
Estimated Gas Usage: 60344 - 301061
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab110030000d0a0085385041371723a3c0190d5904d32420004583a40200260c22010102402001010108024001084040010010081002040810800101010210010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6283
Estimated Gas Usage: 61563 - 302610
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6336
Estimated Gas Usage: 60344 - 301061
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab110030000d0a0085385041371723a3c0190d5904d32420004583a40200260c22010102402001010108024001084040010010081002040810800101010210010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6336
Estimated Gas Usage: 61563 - 302610
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6354
Estimated Gas Usage: 60344 - 301061
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab110030000d0a0085385041371723a3c0190d5904d32420004583a40200260c22010102402001010108024001084040010010081002040810800101010210010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6354
Estimated Gas Usage: 61563 - 302610
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6407
Estimated Gas Usage: 60344 - 301061
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab110030000d0a0085385041371723a3c0190d5904d32420004583a40200260c22010102402001010108024001084040010010081002040810800101010210010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6407
Estimated Gas Usage: 61563 - 302610
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6418
Estimated Gas Usage: 60344 - 301061
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab110030000d0a0085385041371723a3c0190d5904d32420004583a40200260c22010102402001010108024001084040010010081002040810800101010210010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6418
Estimated Gas Usage: 61563 - 302610
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6428
Estimated Gas Usage: 60344 - 301061
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab110030000d0a0085385041371723a3c0190d5904d32420004583a40200260c22010102402001010108024001084040010010081002040810800101010210010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6428
Estimated Gas Usage: 61563 - 302610
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6438
Estimated Gas Usage: 60344 - 301061
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab110030000d0a0085385041371723a3c0190d5904d32420004583a40200260c22010102402001010108024001084040010010081002040810800101010210010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6438
Estimated Gas Usage: 61563 - 302610
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:374

orderBook[orderId] = Order(owner, true, sellToken, buyToken, ring, amount, priceMul, priceDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6569
Estimated Gas Usage: 60344 - 301061
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:375

balances[owner][sellToken]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab110030000d0a0085385041371723a3c0190d5904d32420004583a40200260c22010102402001010108024001084040010010081002040810800101010210010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6569
Estimated Gas Usage: 61563 - 302610
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:375

balances[owner][sellToken]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address)
PC address: 6709
Estimated Gas Usage: 60344 - 301061
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:375

balances[owner][sellToken] = balances[owner][sellToken].add(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20TokenWithRing(address,address,uint256,uint256,uint256,address), txdata: 0x22fdd3ea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab110030000d0a0085385041371723a3c0190d5904d32420004583a40200260c22010102402001010108024001084040010010081002040810800101010210010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: sellERC20Token(address,address,uint256,uint256,uint256)
PC address: 6709
Estimated Gas Usage: 61563 - 302610
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:375

balances[owner][sellToken] = balances[owner][sellToken].add(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sellERC20Token(address,address,uint256,uint256,uint256), txdata: 0xeeb3377a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa802101605b720808b888040908403c401c003214ac4b34243000b040c0a05b64002001108010800110000040010010080401010240000004080108020002010101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Exchange
Function name: getBuyTokenAmount(uint256,uint256)
PC address: 7029
Estimated Gas Usage: 4217 - 5162
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:201

feeDiv.sub(feeMul)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000080000220000000802080000000800020804001000000000000000000000000000000808080000000008080800080008001000041, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getBuyTokenAmount(uint256,uint256), txdata: 0xff700e5208, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Exchange
Function name: calcFees(uint256,uint256)
PC address: 7514
Estimated Gas Usage: 5687 - 7292
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:216

amount.mul(feeMul).div(feeDiv)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0420080880202483400103100202024010044008041002100120202010800840a7, value: 0x0
Caller: [CREATOR], function: calcFees(uint256,uint256), txdata: 0x78d067dd, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Exchange
Function name: buyOrderWithEth(uint256)
PC address: 8013
Estimated Gas Usage: 7438 - 10033
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./solidity_files/0x1f0d1de1558582ad6f13763f477119a1455502af.sol:447

require(order.ring == tx.origin)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a0000000000000000000000000000000000100000000000000000000000000000048020604004050806000110aaaa98080a2268321a0220024020040008404018d1, value: 0x0
Caller: [CREATOR], function: buyOrderWithEth(uint256), txdata: 0xa4ff9c34, value: 0x1


time_used: 31122.198738098145 seconds
#@contract_info_time
0x1f0d1de1558582ad6f13763f477119a1455502af.sol:0.4.24:Exchange:31122.198738098145:36100:60:36000
