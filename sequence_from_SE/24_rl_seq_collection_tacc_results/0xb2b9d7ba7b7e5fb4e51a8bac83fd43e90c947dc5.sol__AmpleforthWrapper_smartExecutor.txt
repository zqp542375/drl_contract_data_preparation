++++ 0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol  :  0.4.24  :  AmpleforthWrapper ++++
1260867650803133752520489846253688753118351546449 is added into actors.
855790095995045926075335861268145962193449995503 is added into actors.
Starting preprocessing.
number of genesis states: 1
total instructions: 4348
['constructor']:writes at the last depth:['3', '4', '2', '9', '6', '7', '8', '5']
preprocessing: Achieved 99.98% coverage.
dynamic svars:['6', '7', '5', '11', '10']
static svars:['2', '1', '9', '8', '3', '4']
Ending preprocessing.
preprocessing time(s): 90.43118739128113
contract coverage: 87.76%
name() is not reachable
symbol() is not reachable
isValidSignature(bytes32,uint8,bytes32,bytes32) is not reachable
Function Reads: State variables read in conditions
	name():[]
	withdrawBalanceDifference():['2']
	originalToken():[]
	totalSupply():[]
	withdraw(uint256,uint8,bytes32,bytes32,uint256):['10', '5']
	transferFrom(address,address,uint256):['5', '3', '4']
	balances(address):[]
	decimals():[]
	TRANSFER_PROXY_VEFX():[]
	balanceOf(address):[]
	keccak(address,address,uint256):[]
	isSigner(address):[]
	isValidSignature(bytes32,uint8,bytes32,bytes32):[]
	owner():[]
	symbol():[]
	transfer(address,uint256):[]
	TRANSFER_PROXY_V2():[]
	depositLock(address):[]
	withdrawDifferentToken(address):['2', '9']
	allowance(address,address):['3', '4']
	deposit(uint256,uint256):['10']
	addSigner(address):['5']
	transferOwnership(address):['2']
Function Writes: State variables written
	addSigner(address):['5']
	transferOwnership(address):['2']
	transferFrom(address,address,uint256):['11', '10']
	withdraw(uint256,uint8,bytes32,bytes32,uint256):['11', '1', '10']
	deposit(uint256,uint256):['11', '1', '10']
============================
iteration:3
targets:['deposit(uint256,uint256)', 'withdrawDifferentToken(address)', 'withdraw(uint256,uint8,bytes32,bytes32,uint256)', 'withdrawBalanceDifference()', 'name()', 'symbol()', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)']
['addSigner(address)']:writes at the last depth:['5']
['transferOwnership(address)']:writes at the last depth:['2']
['totalSupply()']:writes at the last depth:[]
['isValidSignature(bytes32,uint8,bytes32,bytes32)']:writes at the last depth:[]
['balanceOf(address)']:writes at the last depth:[]
['transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
contract coverage: 89.67%
============================
iteration:4
['transferFrom(address,address,uint256)', 'addSigner(address)']:writes at the last depth:['5']
['transferFrom(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['2']
['transferFrom(address,address,uint256)', 'totalSupply()']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'balanceOf(address)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
contract coverage: 89.70%
============================
iteration:5
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addSigner(address)']:writes at the last depth:['5']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['2']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'totalSupply()']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'balanceOf(address)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
contract coverage: 89.70%
============================
iteration:6
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addSigner(address)']:writes at the last depth:['5']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['2']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'totalSupply()']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'balanceOf(address)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
contract coverage: 89.70%
============================
iteration:7
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addSigner(address)']:writes at the last depth:['5']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['2']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'totalSupply()']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'balanceOf(address)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
contract coverage: 89.70%
============================
iteration:8
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addSigner(address)']:writes at the last depth:['5']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['2']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'totalSupply()']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'balanceOf(address)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
contract coverage: 89.70%
============================
iteration:9
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addSigner(address)']:writes at the last depth:['5']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['2']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'totalSupply()']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'balanceOf(address)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
contract coverage: 89.70%
============================
iteration:10
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addSigner(address)']:writes at the last depth:['5']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['2']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'totalSupply()']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'balanceOf(address)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
contract coverage: 89.70%
============================
iteration:11
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addSigner(address)']:writes at the last depth:['5']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['2']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'totalSupply()']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'balanceOf(address)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
contract coverage: 89.70%
============================
iteration:12
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'balanceOf(address)', 'transferOwnership(address)']:writes at the last depth:['2']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'balanceOf(address)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)']:writes at the last depth:[]
contract coverage: 89.70%
============================
iteration:13
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)', 'addSigner(address)']:writes at the last depth:['5']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)', 'transferOwnership(address)']:writes at the last depth:['2']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)', 'totalSupply()']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)', 'balanceOf(address)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
contract coverage: 89.70%
============================
iteration:14
contract coverage: 89.70%
============================
iteration:15
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'addSigner(address)']:writes at the last depth:['5']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['2']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'balanceOf(address)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
contract coverage: 89.70%
============================
iteration:16
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addSigner(address)', 'addSigner(address)']:writes at the last depth:['5']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addSigner(address)', 'transferOwnership(address)']:writes at the last depth:['2']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addSigner(address)', 'isValidSignature(bytes32,uint8,bytes32,bytes32)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addSigner(address)', 'balanceOf(address)']:writes at the last depth:[]
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addSigner(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addSigner(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addSigner(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addSigner(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addSigner(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '11']
contract coverage: 89.70%
============================
iteration:17
contract coverage: 89.70%
============================
iteration:18
contract coverage: 89.70%
============================
iteration:19
contract coverage: 89.70%
============================
iteration:20
contract coverage: 89.70%
============================
iteration:21
contract coverage: 89.70%
============================
iteration:22
contract coverage: 89.70%
============================
iteration:23
contract coverage: 89.70%
============================
iteration:24
contract coverage: 89.70%
============================
iteration:25
contract coverage: 89.70%
============================
iteration:26
contract coverage: 89.70%
============================
iteration:27
contract coverage: 89.70%
============================
iteration:28
contract coverage: 89.70%
============================
iteration:29
contract coverage: 89.70%
============================
iteration:30
contract coverage: 89.70%
============================
iteration:31
contract coverage: 89.70%
============================
iteration:32
contract coverage: 89.70%
============================
iteration:33
contract coverage: 89.70%
============================
iteration:34
contract coverage: 89.70%
#@statespace
5621 nodes, 5620 edges, 82338 total states
#@coverage
Achieved 7.10% coverage for code: 608060405273dcdb42c9a256690bd153a7b409751adfc8dd5851600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507395e6f48254609a6ee006f7d493c8e5fb97094cef600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550348015620000bb57600080fd5b506040516020806200267283398101806040528101908080519060200190929190505050806040805190810160405280601c81526020017f416d706c65666f7274682d4465766572736946692d57726170706572000000008152506040805190810160405280600581526020017f414d504c77000000000000000000000000000000000000000000000000000000815250600933600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260069080519060200190620001e89291906200026c565b508160079080519060200190620002019291906200026c565b50806008819055506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050506200031b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002af57805160ff1916838001178555620002e0565b82800160010185558215620002e0579182015b82811115620002df578251825591602001919060010190620002c2565b5b509050620002ef9190620002f3565b5090565b6200031891905b8082111562000314576000816000905550600101620002fa565b5090565b90565b612347806200032b6000396000f300608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101385780630b82d33d146101c85780630e7c1cb5146101f757806318160ddd1461024e5780631d6f757d1461027957806323b872dd146102f157806327e235e31461035e578063313ce567146103b557806345164b3e146103e057806370a082311461043757806374f1d6ce1461048e5780637df73e27146105175780638b257d3d146105725780638da5cb5b146105e457806395d89b411461063b578063a9059cbb146106cb578063ad93640f14610730578063cc89102314610787578063dc42f2ed146107de578063dd62ed3e14610839578063e2bbb158146108b0578063eb12d61e146108ff578063f2fde38b14610942575b600080fd5b34801561014457600080fd5b5061014d610985565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561018d578082015181840152602081019050610172565b50505050905090810190601f1680156101ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d457600080fd5b506101dd610a23565b604051808215151515815260200191505060405180910390f35b34801561020357600080fd5b5061020c610c12565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025a57600080fd5b50610263610c38565b6040518082815260200191505060405180910390f35b34801561028557600080fd5b506102d760048036038101908080359060200190929190803560ff1690602001909291908035600019169060200190929190803560001916906020019092919080359060200190929190505050610c4f565b604051808215151515815260200191505060405180910390f35b3480156102fd57600080fd5b5061035c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e19565b005b34801561036a57600080fd5b5061039f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e31565b6040518082815260200191505060405180910390f35b3480156103c157600080fd5b506103ca610e49565b6040518082815260200191505060405180910390f35b3480156103ec57600080fd5b506103f5610e4f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561044357600080fd5b50610478600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e75565b6040518082815260200191505060405180910390f35b34801561049a57600080fd5b506104f9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e8f565b60405180826000191660001916815260200191505060405180910390f35b34801561052357600080fd5b50610558600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f36565b604051808215151515815260200191505060405180910390f35b34801561057e57600080fd5b506105ca6004803603810190808035600019169060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190505050610f56565b604051808215151515815260200191505060405180910390f35b3480156105f057600080fd5b506105f9611074565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561064757600080fd5b5061065061109a565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610690578082015181840152602081019050610675565b50505050905090810190601f1680156106bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106d757600080fd5b50610716600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611138565b604051808215151515815260200191505060405180910390f35b34801561073c57600080fd5b50610745611143565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561079357600080fd5b506107c8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611169565b6040518082815260200191505060405180910390f35b3480156107ea57600080fd5b5061081f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611181565b604051808215151515815260200191505060405180910390f35b34801561084557600080fd5b5061089a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611429565b6040518082815260200191505060405180910390f35b3480156108bc57600080fd5b506108e56004803603810190808035906020019092919080359060200190929190505050611508565b604051808215151515815260200191505060405180910390f35b34801561090b57600080fd5b50610940600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061161a565b005b34801561094e57600080fd5b50610983600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116cd565b005b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a1b5780601f106109f057610100808354040283529160200191610a1b565b820191906000526020600020905b8154815290600101906020018083116109fe57829003601f168201915b505050505081565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a8257600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610b3f57600080fd5b505af1158015610b53573d6000803e3d6000fd5b505050506040513d6020811015610b6957600080fd5b810190808051906020019092919050505090506000610b98610b89610c38565b8361182590919063ffffffff16565b111515610ba457600080fd5b610c0a33610bc2610bb3610c38565b8461182590919063ffffffff16565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661183e9092919063ffffffff16565b600191505090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c4a610c45611912565b61191c565b905090565b600085610c5b33610e75565b10151515610c6857600080fd5b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442111515610d71578143101515610cbe57600080fd5b610d65333084604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182815260200193505050506040518091039020868686610f56565b1515610d7057600080fd5b5b610d7a8661193f565b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e0c3387600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661183e9092919063ffffffff16565b6001905095945050505050565b610e2c8383610e2784611953565b611976565b505050565b600b6020528060005260406000206000915090505481565b60085481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610e88610e8383611d3b565b61191c565b9050919050565b6000838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018281526020019350505050604051809103902090509392505050565b60056020528060005260406000206000915054906101000a900460ff1681565b60006005600060018760405180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c0182600019166000191681526020019150506040518091039020878787604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015611018573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050949350505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111305780601f1061110557610100808354040283529160200191611130565b820191906000526020600020905b81548152906001019060200180831161111357829003601f168201915b505050505081565b600080905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a6020528060005260406000206000915090505481565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111df57600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561123c57600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156112d957600080fd5b505af11580156112ed573d6000803e3d6000fd5b505050506040513d602081101561130357600080fd5b810190808051906020019092919050505011151561132057600080fd5b611420338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156113bf57600080fd5b505af11580156113d3573d6000803e3d6000fd5b505050506040513d60208110156113e957600080fd5b81019080805190602001909291905050508473ffffffffffffffffffffffffffffffffffffffff1661183e9092919063ffffffff16565b60019050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806114d45750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15611501577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050611502565b5b92915050565b60006001821015151561151a57600080fd5b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e10830242011015151561156e57600080fd5b6115bd333085600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611d84909392919063ffffffff16565b6115c683611e8d565b610e1082024201600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561167257600080fd5b6001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561172957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561176557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115151561183357fe5b818303905092915050565b61190d8363a9059cbb7c0100000000000000000000000000000000000000000000000000000000028484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ea1565b505050565b6000600154905090565b6000611938611929612039565b8361212e90919063ffffffff16565b9050919050565b61195061194b82611953565b612149565b50565b600061196f611960612039565b836121fc90919063ffffffff16565b9050919050565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680611a175750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515611a2257600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611acb5750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611ad357fe5b611b2581600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461223790919063ffffffff16565b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611bb857610e104201611bf9565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020545b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c8e81600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182590919063ffffffff16565b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611e87846323b872dd7c010000000000000000000000000000000000000000000000000000000002858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ea1565b50505050565b611e9e611e9982611953565b612255565b50565b6000611ec28373ffffffffffffffffffffffffffffffffffffffff16612308565b1515611f36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e74726163740081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168260405180828051906020019080838360005b83811015611f7b578082015181840152602081019050611f60565b50505050905090810190601f168015611fa85780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af19150509050801515612034576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656481525060200191505060405180910390fd5b505050565b6000612129600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156120c457600080fd5b505af11580156120d8573d6000803e3d6000fd5b505050506040513d60208110156120ee57600080fd5b81019080805190602001909291905050506009600a0a6302faf0800260001981151561211657fe5b066000190361212e90919063ffffffff16565b905090565b600080828481151561213c57fe5b0490508091505092915050565b61219b81600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182590919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506121f38160015461182590919063ffffffff16565b60018190555050565b60008060008414156122115760009150612230565b828402905082848281151561222257fe5b0414151561222c57fe5b8091505b5092915050565b600080828401905083811015151561224b57fe5b8091505092915050565b6122a781600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461223790919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122ff8160015461223790919063ffffffff16565b60018190555050565b600080823b9050600081119150509190505600a165627a7a7230582025d4abc3f302a3b835526e342a955f8cb3ea37d9bd2af04f6c2e5cc910357cfb0029
#@coverage
Achieved 89.70% coverage for code: 608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101385780630b82d33d146101c85780630e7c1cb5146101f757806318160ddd1461024e5780631d6f757d1461027957806323b872dd146102f157806327e235e31461035e578063313ce567146103b557806345164b3e146103e057806370a082311461043757806374f1d6ce1461048e5780637df73e27146105175780638b257d3d146105725780638da5cb5b146105e457806395d89b411461063b578063a9059cbb146106cb578063ad93640f14610730578063cc89102314610787578063dc42f2ed146107de578063dd62ed3e14610839578063e2bbb158146108b0578063eb12d61e146108ff578063f2fde38b14610942575b600080fd5b34801561014457600080fd5b5061014d610985565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561018d578082015181840152602081019050610172565b50505050905090810190601f1680156101ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d457600080fd5b506101dd610a23565b604051808215151515815260200191505060405180910390f35b34801561020357600080fd5b5061020c610c12565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025a57600080fd5b50610263610c38565b6040518082815260200191505060405180910390f35b34801561028557600080fd5b506102d760048036038101908080359060200190929190803560ff1690602001909291908035600019169060200190929190803560001916906020019092919080359060200190929190505050610c4f565b604051808215151515815260200191505060405180910390f35b3480156102fd57600080fd5b5061035c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e19565b005b34801561036a57600080fd5b5061039f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e31565b6040518082815260200191505060405180910390f35b3480156103c157600080fd5b506103ca610e49565b6040518082815260200191505060405180910390f35b3480156103ec57600080fd5b506103f5610e4f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561044357600080fd5b50610478600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e75565b6040518082815260200191505060405180910390f35b34801561049a57600080fd5b506104f9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e8f565b60405180826000191660001916815260200191505060405180910390f35b34801561052357600080fd5b50610558600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f36565b604051808215151515815260200191505060405180910390f35b34801561057e57600080fd5b506105ca6004803603810190808035600019169060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190505050610f56565b604051808215151515815260200191505060405180910390f35b3480156105f057600080fd5b506105f9611074565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561064757600080fd5b5061065061109a565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610690578082015181840152602081019050610675565b50505050905090810190601f1680156106bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106d757600080fd5b50610716600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611138565b604051808215151515815260200191505060405180910390f35b34801561073c57600080fd5b50610745611143565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561079357600080fd5b506107c8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611169565b6040518082815260200191505060405180910390f35b3480156107ea57600080fd5b5061081f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611181565b604051808215151515815260200191505060405180910390f35b34801561084557600080fd5b5061089a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611429565b6040518082815260200191505060405180910390f35b3480156108bc57600080fd5b506108e56004803603810190808035906020019092919080359060200190929190505050611508565b604051808215151515815260200191505060405180910390f35b34801561090b57600080fd5b50610940600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061161a565b005b34801561094e57600080fd5b50610983600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116cd565b005b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a1b5780601f106109f057610100808354040283529160200191610a1b565b820191906000526020600020905b8154815290600101906020018083116109fe57829003601f168201915b505050505081565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a8257600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610b3f57600080fd5b505af1158015610b53573d6000803e3d6000fd5b505050506040513d6020811015610b6957600080fd5b810190808051906020019092919050505090506000610b98610b89610c38565b8361182590919063ffffffff16565b111515610ba457600080fd5b610c0a33610bc2610bb3610c38565b8461182590919063ffffffff16565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661183e9092919063ffffffff16565b600191505090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c4a610c45611912565b61191c565b905090565b600085610c5b33610e75565b10151515610c6857600080fd5b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442111515610d71578143101515610cbe57600080fd5b610d65333084604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182815260200193505050506040518091039020868686610f56565b1515610d7057600080fd5b5b610d7a8661193f565b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e0c3387600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661183e9092919063ffffffff16565b6001905095945050505050565b610e2c8383610e2784611953565b611976565b505050565b600b6020528060005260406000206000915090505481565b60085481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610e88610e8383611d3b565b61191c565b9050919050565b6000838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018281526020019350505050604051809103902090509392505050565b60056020528060005260406000206000915054906101000a900460ff1681565b60006005600060018760405180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c0182600019166000191681526020019150506040518091039020878787604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015611018573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050949350505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111305780601f1061110557610100808354040283529160200191611130565b820191906000526020600020905b81548152906001019060200180831161111357829003601f168201915b505050505081565b600080905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a6020528060005260406000206000915090505481565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111df57600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561123c57600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156112d957600080fd5b505af11580156112ed573d6000803e3d6000fd5b505050506040513d602081101561130357600080fd5b810190808051906020019092919050505011151561132057600080fd5b611420338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156113bf57600080fd5b505af11580156113d3573d6000803e3d6000fd5b505050506040513d60208110156113e957600080fd5b81019080805190602001909291905050508473ffffffffffffffffffffffffffffffffffffffff1661183e9092919063ffffffff16565b60019050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806114d45750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15611501577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050611502565b5b92915050565b60006001821015151561151a57600080fd5b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e10830242011015151561156e57600080fd5b6115bd333085600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611d84909392919063ffffffff16565b6115c683611e8d565b610e1082024201600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561167257600080fd5b6001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561172957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561176557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115151561183357fe5b818303905092915050565b61190d8363a9059cbb7c0100000000000000000000000000000000000000000000000000000000028484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ea1565b505050565b6000600154905090565b6000611938611929612039565b8361212e90919063ffffffff16565b9050919050565b61195061194b82611953565b612149565b50565b600061196f611960612039565b836121fc90919063ffffffff16565b9050919050565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680611a175750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515611a2257600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611acb5750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611ad357fe5b611b2581600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461223790919063ffffffff16565b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611bb857610e104201611bf9565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020545b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c8e81600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182590919063ffffffff16565b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611e87846323b872dd7c010000000000000000000000000000000000000000000000000000000002858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ea1565b50505050565b611e9e611e9982611953565b612255565b50565b6000611ec28373ffffffffffffffffffffffffffffffffffffffff16612308565b1515611f36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e74726163740081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168260405180828051906020019080838360005b83811015611f7b578082015181840152602081019050611f60565b50505050905090810190601f168015611fa85780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af19150509050801515612034576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656481525060200191505060405180910390fd5b505050565b6000612129600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156120c457600080fd5b505af11580156120d8573d6000803e3d6000fd5b505050506040513d60208110156120ee57600080fd5b81019080805190602001909291905050506009600a0a6302faf0800260001981151561211657fe5b066000190361212e90919063ffffffff16565b905090565b600080828481151561213c57fe5b0490508091505092915050565b61219b81600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182590919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506121f38160015461182590919063ffffffff16565b60018190555050565b60008060008414156122115760009150612230565b828402905082848281151561222257fe5b0414151561222c57fe5b8091505b5092915050565b600080828401905083811015151561224b57fe5b8091505092915050565b6122a781600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461223790919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122ff8160015461223790919063ffffffff16565b60018190555050565b600080823b9050600081119150509190505600a165627a7a7230582025d4abc3f302a3b835526e342a955f8cb3ea37d9bd2af04f6c2e5cc910357cfb0029
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AmpleforthWrapper
Function name: deposit(uint256,uint256)
PC address: 5481
Estimated Gas Usage: 1605 - 1890
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:238

require(now + _forTime * 1 hours >= depositLock[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: deposit(uint256,uint256), txdata: 0xe2bbb158000000000000000000000080000000000000000000000000000000000000000082, decoded_data: (187072209578355573530071658587684226515959365500928, 58800670315824630488532140824724328206738664088020598926287054379018386145280), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AmpleforthWrapper
Function name: transferFrom(address,address,uint256)
PC address: 6585
Estimated Gas Usage: 26673 - 125272
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:296

isSigner[_to]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd020480100100800108021010affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AmpleforthWrapper
Function name: transferFrom(address,address,uint256)
PC address: 6668
Estimated Gas Usage: 26673 - 125272
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:296

isSigner[_from]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd020480100100800108021010affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AmpleforthWrapper
Function name: transferFrom(address,address,uint256)
PC address: 6696
Estimated Gas Usage: 26673 - 125272
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:297

TRANSFER_PROXY_VEFX

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd020480100100800108021010affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AmpleforthWrapper
Function name: transferFrom(address,address,uint256)
PC address: 6783
Estimated Gas Usage: 26673 - 125272
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:297

TRANSFER_PROXY_V2

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd020480100100800108021010affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AmpleforthWrapper
Function name: transferFrom(address,address,uint256)
PC address: 6866
Estimated Gas Usage: 5903 - 42305
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:366

super.transferFrom(_from, _to, toGon(_value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AmpleforthWrapper
Function name: transferFrom(address,address,uint256)
PC address: 6935
Estimated Gas Usage: 26673 - 125272
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:298

balances[_to]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd020480100100800108021010affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AmpleforthWrapper
Function name: transferFrom(address,address,uint256)
PC address: 7015
Estimated Gas Usage: 26673 - 125272
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:298

balances[_to] = balances[_to].add(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd020480100100800108021010affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AmpleforthWrapper
Function name: transferFrom(address,address,uint256)
PC address: 7081
Estimated Gas Usage: 26673 - 125272
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:299

depositLock[_to]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd020480100100800108021010affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AmpleforthWrapper
Function name: transferFrom(address,address,uint256)
PC address: 7086
Estimated Gas Usage: 12055 - 68697
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:299

depositLock[_to] > now ? depositLock[_to] : now + 1 hours

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000dcdb428080808080808080808080804080080180000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AmpleforthWrapper
Function name: transferFrom(address,address,uint256)
PC address: 7091
Estimated Gas Usage: 26673 - 125272
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:299

now + 1 hours

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd010800000210000200208001affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AmpleforthWrapper
Function name: transferFrom(address,address,uint256)
PC address: 7160
Estimated Gas Usage: 27548 - 126337
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:299

depositLock[_to]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 232323232323232323232323deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000010000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AmpleforthWrapper
Function name: transferFrom(address,address,uint256)
PC address: 7227
Estimated Gas Usage: 26673 - 125272
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:299

depositLock[_to] = depositLock[_to] > now ? depositLock[_to] : now + 1 hours

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd020480100100800108021010affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AmpleforthWrapper
Function name: transferFrom(address,address,uint256)
PC address: 7296
Estimated Gas Usage: 26673 - 125272
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:300

balances[_from]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd020480100100800108021010affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AmpleforthWrapper
Function name: transferFrom(address,address,uint256)
PC address: 7376
Estimated Gas Usage: 26673 - 125272
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:300

balances[_from] = balances[_from].sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd020480100100800108021010affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AmpleforthWrapper
Function name: totalSupply()
PC address: 8391
Estimated Gas Usage: 3906 - 39409
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:389

IERC20(originalToken).totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: totalSupply(), txdata: 0x18160ddd, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AmpleforthWrapper
Function name: balanceOf(address)
PC address: 8391
Estimated Gas Usage: 4203 - 39896
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:389

IERC20(originalToken).totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: balanceOf(address), txdata: 0x70a08231, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AmpleforthWrapper
Function name: transferFrom(address,address,uint256)
PC address: 8391
Estimated Gas Usage: 26673 - 125272
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:389

IERC20(originalToken).totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd800201041001408004100280affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AmpleforthWrapper
Function name: totalSupply()
PC address: 8507
Estimated Gas Usage: 3778 - 39000
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:397

value.div(gonsPerFragment())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: totalSupply(), txdata: 0x18160ddd, value: 0x0


time_used: 36053.09554171562 seconds
#@contract_info_time
0xb2b9d7ba7b7e5fb4e51a8bac83fd43e90c947dc5.sol:0.4.24:AmpleforthWrapper:36053.09554171562:36100:60:36000
