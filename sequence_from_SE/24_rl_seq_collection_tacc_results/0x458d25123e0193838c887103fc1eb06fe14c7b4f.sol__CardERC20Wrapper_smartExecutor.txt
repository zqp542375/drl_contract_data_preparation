++++ 0x458d25123e0193838c887103fc1eb06fe14c7b4f.sol  :  0.5.0  :  CardERC20Wrapper ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 4930
['constructor']:writes at the last depth:['3']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 99.96% coverage.
dynamic svars:['3', '7', '1', '0']
static svars:['2', '8', '6', '5', '4']
Ending preprocessing.
preprocessing time(s): 112.73595142364502
contract coverage: 86.33%
depositCardsAndMintTokens(uint256[],address) is not reachable
increaseAllowance(address,uint256) is not reachable
approve(address,uint256) is not reachable
Function Reads: State variables read in conditions
	name():[]
	approve(address,uint256):[]
	depositCardsAndMintTokens(uint256[],address):[]
	depositedCards(uint256):['7']
	totalSupply():[]
	transferFrom(address,address,uint256):['0']
	decimals():[]
	increaseAllowance(address,uint256):[]
	mint(address,uint256):['3', '2']
	burn(uint256):['0', '2']
	burnTokensAndWithdrawCards(uint256,address):['0', '2']
	proto():[]
	cards():[]
	uniswapExchange():[]
	balanceOf(address):[]
	burnFrom(address,uint256):['0']
	quality():[]
	symbol():[]
	addMinter(address):['3']
	renounceMinter():['3']
	decreaseAllowance(address,uint256):['1']
	transfer(address,uint256):['0']
	isMinter(address):[]
	init(address,uint16,uint8,address):['6']
	allowance(address,address):['5']
	withdrawnCardCount():[]
	cardWrapperFactory():[]
Function Writes: State variables written
	approve(address,uint256):['1']
	burn(uint256):['0', '2']
	transferFrom(address,address,uint256):['0', '1']
	burnTokensAndWithdrawCards(uint256,address):['0', '2', '8']
	init(address,uint16,uint8,address):['6', '5', '4', '7']
	renounceMinter():['3']
	mint(address,uint256):['2', '0']
	increaseAllowance(address,uint256):['1']
	burnFrom(address,uint256):['0', '2', '1']
	transfer(address,uint256):['0']
	depositCardsAndMintTokens(uint256[],address):['2', '0', '7']
	addMinter(address):['3']
	decreaseAllowance(address,uint256):['1']
============================
iteration:3
targets:['depositCardsAndMintTokens(uint256[],address)', 'depositedCards(uint256)', 'init(address,uint16,uint8,address)', 'increaseAllowance(address,uint256)', 'burnTokensAndWithdrawCards(uint256,address)', 'approve(address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'mint(address,uint256)', 'transfer(address,uint256)', 'burnFrom(address,uint256)']
['approve(address,uint256)']:writes at the last depth:['1']
['renounceMinter()']:writes at the last depth:['3']
['increaseAllowance(address,uint256)']:writes at the last depth:['1']
['burn(uint256)']:writes at the last depth:['2', '0']
['init(address,uint16,uint8,address)']:writes at the last depth:['5', '4', '6', '7']
['addMinter(address)']:writes at the last depth:['3']
['burnTokensAndWithdrawCards(uint256,address)']:writes at the last depth:['2', '0', '8']
['mint(address,uint256)']:writes at the last depth:['2', '0']
['decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transfer(address,uint256)']:writes at the last depth:['0']
['burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
['transferFrom(address,address,uint256)']:writes at the last depth:['0', '1']
contract coverage: 93.02%
============================
iteration:4
['transferFrom(address,address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '4', '6', '7']
['transferFrom(address,address,uint256)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'burnTokensAndWithdrawCards(uint256,address)']:writes at the last depth:['2', '0', '8']
['transferFrom(address,address,uint256)', 'mint(address,uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'depositCardsAndMintTokens(uint256[],address)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['0', '1']
contract coverage: 93.02%
============================
iteration:5
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '4', '6', '7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnTokensAndWithdrawCards(uint256,address)']:writes at the last depth:['2', '0', '8']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'mint(address,uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'depositCardsAndMintTokens(uint256[],address)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['0', '1']
contract coverage: 93.02%
============================
iteration:6
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '4', '6', '7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'mint(address,uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'depositCardsAndMintTokens(uint256[],address)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['0', '1']
contract coverage: 93.02%
============================
iteration:7
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '4', '6', '7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'mint(address,uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'depositCardsAndMintTokens(uint256[],address)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['0', '1']
contract coverage: 93.02%
============================
iteration:8
contract coverage: 93.02%
============================
iteration:9
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '4', '6', '7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'mint(address,uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'depositCardsAndMintTokens(uint256[],address)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['0', '1']
contract coverage: 93.02%
============================
iteration:10
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '4', '6', '7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'burnTokensAndWithdrawCards(uint256,address)']:writes at the last depth:['2', '0', '8']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'mint(address,uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'depositCardsAndMintTokens(uint256[],address)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'decreaseAllowance(address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['0', '1']
contract coverage: 93.02%
============================
iteration:11
contract coverage: 93.02%
============================
iteration:12
contract coverage: 93.02%
============================
iteration:13
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '4', '6', '7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'burnTokensAndWithdrawCards(uint256,address)']:writes at the last depth:['2', '0', '8']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'mint(address,uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'depositCardsAndMintTokens(uint256[],address)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'addMinter(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['0', '1']
contract coverage: 96.49%
============================
iteration:14
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)', 'burnTokensAndWithdrawCards(uint256,address)']:writes at the last depth:['2', '0', '8']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)', 'mint(address,uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)', 'depositCardsAndMintTokens(uint256[],address)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['0', '1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)', 'burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['0', '1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'init(address,uint16,uint8,address)', 'depositCardsAndMintTokens(uint256[],address)']:writes at the last depth:['', '2', '0']
contract coverage: 96.49%
============================
iteration:15
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'increaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '4', '6', '7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'mint(address,uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'depositCardsAndMintTokens(uint256[],address)']:writes at the last depth:['2', '0']
contract coverage: 97.26%
============================
iteration:16
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '4', '6', '7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)', 'addMinter(address)']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'increaseAllowance(address,uint256)', 'burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
contract coverage: 97.26%
============================
iteration:17
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'renounceMinter()', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'renounceMinter()', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '4', '6', '7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'renounceMinter()', 'decreaseAllowance(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'renounceMinter()', 'transfer(address,uint256)']:writes at the last depth:['0']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'renounceMinter()', 'burnFrom(address,uint256)']:writes at the last depth:['2', '0', '1']
contract coverage: 97.26%
============================
iteration:18
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '4', '6', '7']
['transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['0']
contract coverage: 97.26%
============================
iteration:19
['transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['1']
['transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'renounceMinter()']:writes at the last depth:['3']
['transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'burn(uint256)']:writes at the last depth:['2', '0']
['transferFrom(address,address,uint256)', 'burnFrom(address,uint256)', 'init(address,uint16,uint8,address)']:writes at the last depth:['5', '4', '6', '7']
contract coverage: 97.26%
============================
iteration:20
contract coverage: 97.26%
============================
iteration:21
contract coverage: 97.26%
============================
iteration:22
contract coverage: 97.26%
============================
iteration:23
contract coverage: 97.26%
============================
iteration:24
contract coverage: 97.26%
============================
iteration:25
contract coverage: 97.26%
============================
iteration:26
contract coverage: 97.26%
============================
iteration:27
contract coverage: 97.26%
============================
iteration:28
contract coverage: 97.26%
============================
iteration:29
contract coverage: 97.26%
============================
iteration:30
contract coverage: 97.26%
============================
iteration:31
contract coverage: 97.26%
============================
iteration:32
contract coverage: 97.26%
============================
iteration:33
contract coverage: 97.26%
============================
iteration:34
contract coverage: 97.26%
============================
iteration:35
contract coverage: 97.26%
============================
iteration:36
contract coverage: 97.26%
============================
iteration:37
contract coverage: 97.26%
============================
iteration:38
contract coverage: 97.26%
============================
iteration:39
contract coverage: 97.26%
============================
iteration:40
contract coverage: 97.26%
============================
iteration:41
contract coverage: 97.26%
============================
iteration:42
contract coverage: 97.26%
============================
iteration:43
contract coverage: 97.26%
============================
iteration:44
contract coverage: 97.26%
============================
iteration:45
contract coverage: 97.26%
#@statespace
6118 nodes, 6117 edges, 95616 total states
#@coverage
Achieved 3.52% coverage for code: 608060405262000036620000216200003c640100000000026401000000009004565b62000044640100000000026401000000009004565b620002c1565b600033905090565b62000068816003620000ae640100000000026200281c179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b620000c982826200019d640100000000026401000000009004565b1515156200013f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200026a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b612a7880620002d16000396000f3fe60806040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610164578063095ea7b3146101f45780630e4fae5f14610267578063176b5d021461030d57806318160ddd1461035c57806323b872dd14610387578063313ce5671461041a578063395093511461044557806340c10f19146104b857806342966c681461052b578063465776f71461056657806351c6ff67146105c157806358a4903f146105f457806362b856b51461064b57806370a08231146106a257806379cc67901461070757806388dd38861461076257806395d89b4114610793578063983b2d56146108235780639865027514610874578063a457c2d71461088b578063a9059cbb146108fe578063aa271e1a14610971578063d4eb30f8146109da578063dd62ed3e14610a66578063f6824b4414610aeb578063f8875a0114610b16575b600080fd5b34801561017057600080fd5b50610179610b6d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b957808201518184015260208101905061019e565b50505050905090810190601f1680156101e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020057600080fd5b5061024d6004803603604081101561021757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ba6565b604051808215151515815260200191505060405180910390f35b34801561027357600080fd5b5061030b6004803603604081101561028a57600080fd5b81019080803590602001906401000000008111156102a757600080fd5b8201836020820111156102b957600080fd5b803590602001918460208302840111640100000000831117156102db57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bc4565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610f4f565b6040518082815260200191505060405180910390f35b34801561036857600080fd5b50610371610f72565b6040518082815260200191505060405180910390f35b34801561039357600080fd5b50610400600480360360608110156103aa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f7c565b604051808215151515815260200191505060405180910390f35b34801561042657600080fd5b5061042f611026565b6040518082815260200191505060405180910390f35b34801561045157600080fd5b5061049e6004803603604081101561046857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061102b565b604051808215151515815260200191505060405180910390f35b3480156104c457600080fd5b50610511600480360360408110156104db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110de565b604051808215151515815260200191505060405180910390f35b34801561053757600080fd5b506105646004803603602081101561054e57600080fd5b810190808035906020019092919050505061119e565b005b34801561057257600080fd5b506105bf6004803603604081101561058957600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111b2565b005b3480156105cd57600080fd5b506105d661133f565b604051808261ffff1661ffff16815260200191505060405180910390f35b34801561060057600080fd5b50610609611353565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561065757600080fd5b50610660611379565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106ae57600080fd5b506106f1600480360360208110156106c557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061139f565b6040518082815260200191505060405180910390f35b34801561071357600080fd5b506107606004803603604081101561072a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113e7565b005b34801561076e57600080fd5b506107776113f5565b604051808260ff1660ff16815260200191505060405180910390f35b34801561079f57600080fd5b506107a8611408565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107e85780820151818401526020810190506107cd565b50505050905090810190601f1680156108155780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561082f57600080fd5b506108726004803603602081101561084657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611441565b005b34801561088057600080fd5b506108896114f7565b005b34801561089757600080fd5b506108e4600480360360408110156108ae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611509565b604051808215151515815260200191505060405180910390f35b34801561090a57600080fd5b506109576004803603604081101561092157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061161a565b604051808215151515815260200191505060405180910390f35b34801561097d57600080fd5b506109c06004803603602081101561099457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611638565b604051808215151515815260200191505060405180910390f35b3480156109e657600080fd5b50610a64600480360360808110156109fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff169060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611655565b005b348015610a7257600080fd5b50610ad560048036036040811015610a8957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061184b565b6040518082815260200191505060405180910390f35b348015610af757600080fd5b50610b006118de565b6040518082815260200191505060405180910390f35b348015610b2257600080fd5b50610b2b6118e4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6040805190810160405280601c81526020017f5772617070656420476f647320556e636861696e65642043617264730000000081525081565b6000610bba610bb361190a565b8484611912565b6001905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630bbe0ee3333086866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925060200280828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b158015610cec57600080fd5b505af1158015610d00573d6000803e3d6000fd5b505050506000806000610d11610f72565b90506000600854905060008090505b87879050811015610f3257600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b93a89f78989848181101515610d7757fe5b905060200201356040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604080518083038186803b158015610dcd57600080fd5b505afa158015610de1573d6000803e3d6000fd5b505050506040513d6040811015610df757600080fd5b8101908080519060200190929190805190602001909291905050508095508196505050600660149054906101000a900461ffff1661ffff168561ffff16148015610e555750600660169054906101000a900460ff1660ff168460ff16145b1515610eef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f43617264577261707065723a436172642068617320696e76616c69642070726f81526020017f746f206f72207175616c6974790000000000000000000000000000000000000081525060400191505060405180910390fd5b8787828181101515610efd57fe5b9050602002013560078284860101815481101515610f1757fe5b90600052602060002001819055508080600101915050610d20565b50610f46856012600a0a8989905002611b93565b50505050505050565b600781815481101515610f5e57fe5b906000526020600020016000915090505481565b6000600254905090565b6000610f89848484611d50565b61101b84610f9561190a565b61101685606060405190810160405280602881526020017f45524332303a207472616e7366657220616d6f756e742065786365656473206181526020017f6c6c6f77616e63650000000000000000000000000000000000000000000000008152506110078a61100261190a565b61184b565b6120d49092919063ffffffff16565b611912565b600190509392505050565b601281565b60006110d461103861190a565b846110cf856001600061104961190a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219690919063ffffffff16565b611912565b6001905092915050565b60006110f06110eb61190a565b611638565b151561118a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f4d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f20746865204d696e74657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b6111948383611b93565b6001905092915050565b6111af6111a961190a565b82612220565b50565b6111c2336012600a0a8402612220565b600060085490505b826008540181101561132a57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd308460078581548110151561122557fe5b90600052602060002001546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156112e857600080fd5b505af11580156112fc573d6000803e3d6000fd5b5050505060078181548110151561130f57fe5b906000526020600020016000905580806001019150506111ca565b50816008600082825401925050819055505050565b600660149054906101000a900461ffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6113f18282612461565b5050565b600660169054906101000a900460ff1681565b6040805190810160405280600381526020017f574755000000000000000000000000000000000000000000000000000000000081525081565b61145161144c61190a565b611638565b15156114eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f4d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f20746865204d696e74657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b6114f481612574565b50565b61150761150261190a565b6125ce565b565b600061161061151661190a565b8461160b85606060405190810160405280602581526020017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781526020017f207a65726f0000000000000000000000000000000000000000000000000000008152506001600061158461190a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120d49092919063ffffffff16565b611912565b6001905092915050565b600061162e61162761190a565b8484611d50565b6001905092915050565b600061164e82600361262890919063ffffffff16565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561171b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f43617264577261707065723a416c726561647920696e697469616c697a65640081525060200191505060405180910390fd5b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600660146101000a81548161ffff021916908361ffff16021790555081600660166101000a81548160ff021916908360ff1602179055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60078161184491906129fb565b5050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156118cb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90506118d8565b6118d5838361274b565b90505b92915050565b60085481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156119dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481526020017f726573730000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611aa8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f45524332303a20617070726f766520746f20746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611c38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b611c4d8160025461219690919063ffffffff16565b600281905550611ca4816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219690919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611e1b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f45524332303a207472616e736665722066726f6d20746865207a65726f20616481526020017f647265737300000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611ee6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f45524332303a207472616e7366657220746f20746865207a65726f206164647281526020017f657373000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611f9581606060405190810160405280602681526020017f45524332303a207472616e7366657220616d6f756e742065786365656473206281526020017f616c616e636500000000000000000000000000000000000000000000000000008152506000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120d49092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612028816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219690919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008383111582901515612183576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561214857808201518184015260208101905061212d565b50505050905090810190601f1680156121755780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6000808284019050838110151515612216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156122eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f45524332303a206275726e2066726f6d20746865207a65726f2061646472657381526020017f730000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61239a81606060405190810160405280602281526020017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e81526020017f63650000000000000000000000000000000000000000000000000000000000008152506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120d49092919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506123f1816002546127d290919063ffffffff16565b600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b61246b8282612220565b6125708261247761190a565b61256b84606060405190810160405280602481526020017f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f7781526020017f616e636500000000000000000000000000000000000000000000000000000000815250600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061252161190a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120d49092919063ffffffff16565b611912565b5050565b61258881600361281c90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b6125e28160036128f990919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156126f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600061281483836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506120d4565b905092915050565b6128268282612628565b15151561289b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6129038282612628565b151561299d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c81526020017f650000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b815481835581811115612a2257818360005260206000209182019101612a219190612a27565b5b505050565b612a4991905b80821115612a45576000816000905550600101612a2d565b5090565b9056fea165627a7a723058200c4bd95e3a2f80dd98889eeb4f1304a7e01830cfc0db35bafa5afb6c9d64275e0029
#@coverage
Achieved 97.26% coverage for code: 60806040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610164578063095ea7b3146101f45780630e4fae5f14610267578063176b5d021461030d57806318160ddd1461035c57806323b872dd14610387578063313ce5671461041a578063395093511461044557806340c10f19146104b857806342966c681461052b578063465776f71461056657806351c6ff67146105c157806358a4903f146105f457806362b856b51461064b57806370a08231146106a257806379cc67901461070757806388dd38861461076257806395d89b4114610793578063983b2d56146108235780639865027514610874578063a457c2d71461088b578063a9059cbb146108fe578063aa271e1a14610971578063d4eb30f8146109da578063dd62ed3e14610a66578063f6824b4414610aeb578063f8875a0114610b16575b600080fd5b34801561017057600080fd5b50610179610b6d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b957808201518184015260208101905061019e565b50505050905090810190601f1680156101e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020057600080fd5b5061024d6004803603604081101561021757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ba6565b604051808215151515815260200191505060405180910390f35b34801561027357600080fd5b5061030b6004803603604081101561028a57600080fd5b81019080803590602001906401000000008111156102a757600080fd5b8201836020820111156102b957600080fd5b803590602001918460208302840111640100000000831117156102db57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bc4565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610f4f565b6040518082815260200191505060405180910390f35b34801561036857600080fd5b50610371610f72565b6040518082815260200191505060405180910390f35b34801561039357600080fd5b50610400600480360360608110156103aa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f7c565b604051808215151515815260200191505060405180910390f35b34801561042657600080fd5b5061042f611026565b6040518082815260200191505060405180910390f35b34801561045157600080fd5b5061049e6004803603604081101561046857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061102b565b604051808215151515815260200191505060405180910390f35b3480156104c457600080fd5b50610511600480360360408110156104db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110de565b604051808215151515815260200191505060405180910390f35b34801561053757600080fd5b506105646004803603602081101561054e57600080fd5b810190808035906020019092919050505061119e565b005b34801561057257600080fd5b506105bf6004803603604081101561058957600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111b2565b005b3480156105cd57600080fd5b506105d661133f565b604051808261ffff1661ffff16815260200191505060405180910390f35b34801561060057600080fd5b50610609611353565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561065757600080fd5b50610660611379565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106ae57600080fd5b506106f1600480360360208110156106c557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061139f565b6040518082815260200191505060405180910390f35b34801561071357600080fd5b506107606004803603604081101561072a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113e7565b005b34801561076e57600080fd5b506107776113f5565b604051808260ff1660ff16815260200191505060405180910390f35b34801561079f57600080fd5b506107a8611408565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107e85780820151818401526020810190506107cd565b50505050905090810190601f1680156108155780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561082f57600080fd5b506108726004803603602081101561084657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611441565b005b34801561088057600080fd5b506108896114f7565b005b34801561089757600080fd5b506108e4600480360360408110156108ae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611509565b604051808215151515815260200191505060405180910390f35b34801561090a57600080fd5b506109576004803603604081101561092157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061161a565b604051808215151515815260200191505060405180910390f35b34801561097d57600080fd5b506109c06004803603602081101561099457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611638565b604051808215151515815260200191505060405180910390f35b3480156109e657600080fd5b50610a64600480360360808110156109fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff169060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611655565b005b348015610a7257600080fd5b50610ad560048036036040811015610a8957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061184b565b6040518082815260200191505060405180910390f35b348015610af757600080fd5b50610b006118de565b6040518082815260200191505060405180910390f35b348015610b2257600080fd5b50610b2b6118e4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6040805190810160405280601c81526020017f5772617070656420476f647320556e636861696e65642043617264730000000081525081565b6000610bba610bb361190a565b8484611912565b6001905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630bbe0ee3333086866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925060200280828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b158015610cec57600080fd5b505af1158015610d00573d6000803e3d6000fd5b505050506000806000610d11610f72565b90506000600854905060008090505b87879050811015610f3257600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b93a89f78989848181101515610d7757fe5b905060200201356040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604080518083038186803b158015610dcd57600080fd5b505afa158015610de1573d6000803e3d6000fd5b505050506040513d6040811015610df757600080fd5b8101908080519060200190929190805190602001909291905050508095508196505050600660149054906101000a900461ffff1661ffff168561ffff16148015610e555750600660169054906101000a900460ff1660ff168460ff16145b1515610eef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f43617264577261707065723a436172642068617320696e76616c69642070726f81526020017f746f206f72207175616c6974790000000000000000000000000000000000000081525060400191505060405180910390fd5b8787828181101515610efd57fe5b9050602002013560078284860101815481101515610f1757fe5b90600052602060002001819055508080600101915050610d20565b50610f46856012600a0a8989905002611b93565b50505050505050565b600781815481101515610f5e57fe5b906000526020600020016000915090505481565b6000600254905090565b6000610f89848484611d50565b61101b84610f9561190a565b61101685606060405190810160405280602881526020017f45524332303a207472616e7366657220616d6f756e742065786365656473206181526020017f6c6c6f77616e63650000000000000000000000000000000000000000000000008152506110078a61100261190a565b61184b565b6120d49092919063ffffffff16565b611912565b600190509392505050565b601281565b60006110d461103861190a565b846110cf856001600061104961190a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219690919063ffffffff16565b611912565b6001905092915050565b60006110f06110eb61190a565b611638565b151561118a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f4d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f20746865204d696e74657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b6111948383611b93565b6001905092915050565b6111af6111a961190a565b82612220565b50565b6111c2336012600a0a8402612220565b600060085490505b826008540181101561132a57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd308460078581548110151561122557fe5b90600052602060002001546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156112e857600080fd5b505af11580156112fc573d6000803e3d6000fd5b5050505060078181548110151561130f57fe5b906000526020600020016000905580806001019150506111ca565b50816008600082825401925050819055505050565b600660149054906101000a900461ffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6113f18282612461565b5050565b600660169054906101000a900460ff1681565b6040805190810160405280600381526020017f574755000000000000000000000000000000000000000000000000000000000081525081565b61145161144c61190a565b611638565b15156114eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f4d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f20746865204d696e74657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b6114f481612574565b50565b61150761150261190a565b6125ce565b565b600061161061151661190a565b8461160b85606060405190810160405280602581526020017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781526020017f207a65726f0000000000000000000000000000000000000000000000000000008152506001600061158461190a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120d49092919063ffffffff16565b611912565b6001905092915050565b600061162e61162761190a565b8484611d50565b6001905092915050565b600061164e82600361262890919063ffffffff16565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561171b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f43617264577261707065723a416c726561647920696e697469616c697a65640081525060200191505060405180910390fd5b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600660146101000a81548161ffff021916908361ffff16021790555081600660166101000a81548160ff021916908360ff1602179055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60078161184491906129fb565b5050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156118cb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90506118d8565b6118d5838361274b565b90505b92915050565b60085481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156119dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481526020017f726573730000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611aa8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f45524332303a20617070726f766520746f20746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611c38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b611c4d8160025461219690919063ffffffff16565b600281905550611ca4816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219690919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611e1b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f45524332303a207472616e736665722066726f6d20746865207a65726f20616481526020017f647265737300000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611ee6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f45524332303a207472616e7366657220746f20746865207a65726f206164647281526020017f657373000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611f9581606060405190810160405280602681526020017f45524332303a207472616e7366657220616d6f756e742065786365656473206281526020017f616c616e636500000000000000000000000000000000000000000000000000008152506000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120d49092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612028816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219690919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008383111582901515612183576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561214857808201518184015260208101905061212d565b50505050905090810190601f1680156121755780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6000808284019050838110151515612216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156122eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f45524332303a206275726e2066726f6d20746865207a65726f2061646472657381526020017f730000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61239a81606060405190810160405280602281526020017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e81526020017f63650000000000000000000000000000000000000000000000000000000000008152506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120d49092919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506123f1816002546127d290919063ffffffff16565b600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b61246b8282612220565b6125708261247761190a565b61256b84606060405190810160405280602481526020017f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f7781526020017f616e636500000000000000000000000000000000000000000000000000000000815250600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061252161190a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120d49092919063ffffffff16565b611912565b5050565b61258881600361281c90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b6125e28160036128f990919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156126f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600061281483836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506120d4565b905092915050565b6128268282612628565b15151561289b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6129038282612628565b151561299d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c81526020017f650000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b815481835581811115612a2257818360005260206000209182019101612a219190612a27565b5b505050565b612a4991905b80821115612a45576000816000905550600101612a2d565b5090565b9056fea165627a7a723058200c4bd95e3a2f80dd98889eeb4f1304a7e01830cfc0db35bafa5afb6c9d64275e0029
==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: depositCardsAndMintTokens(uint256[],address)
PC address: 3352
Estimated Gas Usage: 18511 - 97243
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x458d25123e0193838c887103fc1eb06fe14c7b4f.sol:569

withdrawnCardCount

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000001000000000000000400000000000000000000000000000000000080010080080004008001018000010801000000400000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000010000000000000004000000000000', '0x8001008008000400800101800001080100000040', 0), value: 0x0
Caller: [CREATOR], function: depositCardsAndMintTokens(uint256[],address), txdata: 0x0e4fae5f0000000000000000000000000000000000000000000000000000000000000000b8b8b8b8b8b8b8b8b8b8b8b80000000000000000040000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: depositCardsAndMintTokens(uint256[],address)
PC address: 3377
Estimated Gas Usage: 18511 - 97243
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x458d25123e0193838c887103fc1eb06fe14c7b4f.sol:572

cards

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000001000000000000000400000000000000000000000000000000000080010080080004008001018000010801000000400000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000010000000000000004000000000000', '0x8001008008000400800101800001080100000040', 0), value: 0x0
Caller: [CREATOR], function: depositCardsAndMintTokens(uint256[],address), txdata: 0x0e4fae5f0000000000000000000000000000000000000000000000000000000000000000b8b8b8b8b8b8b8b8b8b8b8b80000000000000000040000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: depositCardsAndMintTokens(uint256[],address)
PC address: 3616
Estimated Gas Usage: 18511 - 97243
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x458d25123e0193838c887103fc1eb06fe14c7b4f.sol:574

proto

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000001000000000000000400000000000000000000000000000000000080010080080004008001018000010801000000400000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000010000000000000004000000000000', '0x8001008008000400800101800001080100000040', 0), value: 0x0
Caller: [CREATOR], function: depositCardsAndMintTokens(uint256[],address), txdata: 0x0e4fae5f0000000000000000000000000000000000000000000000000000000000000000b8b8b8b8b8b8b8b8b8b8b8b80000000000000000040000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: depositCardsAndMintTokens(uint256[],address)
PC address: 3650
Estimated Gas Usage: 18511 - 97243
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x458d25123e0193838c887103fc1eb06fe14c7b4f.sol:574

quality

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000001000000000000000400000000000000000000000000000000000080010080080004008001018000010801000000400000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000010000000000000004000000000000', '0x8001008008000400800101800001080100000040', 0), value: 0x0
Caller: [CREATOR], function: depositCardsAndMintTokens(uint256[],address), txdata: 0x0e4fae5f0000000000000000000000000000000000000000000000000000000000000000b8b8b8b8b8b8b8b8b8b8b8b80000000000000000040000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardERC20Wrapper
Function name: depositCardsAndMintTokens(uint256[],address)
PC address: 3862
Estimated Gas Usage: 10004 - 83134
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x458d25123e0193838c887103fc1eb06fe14c7b4f.sol:123

function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000001002000000000000001014000000000000000000000000000000000000010101001010101408004200400014004200101010000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000010020000000000000010140000000000000', '0x1010100101010140800420040001400420010101', 0), value: 0x0
Caller: [ATTACKER], function: depositCardsAndMintTokens(uint256[],address), txdata: 0x0e4fae5f000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000018080808080808080808080808080808080808080808080808080020480808080, decoded_data: ([58123087930888129467517984631811969432229639361576439988433610657057902461056], '0x0000000000000000000000000000000000000001'), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardERC20Wrapper
Function name: depositedCards(uint256)
PC address: 3933
Estimated Gas Usage: 1106 - 1201
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x458d25123e0193838c887103fc1eb06fe14c7b4f.sol:544

uint256[]               public          depositedCards

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: depositedCards(uint256), txdata: 0x176b5d020202020202020202020202020202020202020202020202020202020202020202, decoded_data: (908173248920127022929968509872062022378588115024631874819275168689514742274,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: depositCardsAndMintTokens(uint256[],address)
PC address: 3959
Estimated Gas Usage: 18511 - 97243
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x458d25123e0193838c887103fc1eb06fe14c7b4f.sol:124

_totalSupply

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000001000000000000000400000000000000000000000000000000000080010080080004008001018000010801000000400000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000010000000000000004000000000000', '0x8001008008000400800101800001080100000040', 0), value: 0x0
Caller: [CREATOR], function: depositCardsAndMintTokens(uint256[],address), txdata: 0x0e4fae5f0000000000000000000000000000000000000000000000000000000000000000b8b8b8b8b8b8b8b8b8b8b8b80000000000000000040000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CardERC20Wrapper
Function name: burnTokensAndWithdrawCards(uint256,address)
PC address: 4644
Estimated Gas Usage: 17709 - 60232
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x458d25123e0193838c887103fc1eb06fe14c7b4f.sol:188

function _burn(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x4208700154093e4ef, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: burnTokensAndWithdrawCards(uint256,address), txdata: 0x465776f700004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: (441711766194596082395824375185729628956870974218904739530401550323154944, '0x0000000000000000000000000000000000000000'), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: depositCardsAndMintTokens(uint256[],address)
PC address: 7231
Estimated Gas Usage: 18511 - 97243
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x458d25123e0193838c887103fc1eb06fe14c7b4f.sol:182

_totalSupply

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000001000000000000000400000000000000000000000000000000000080010080080004008001018000010801000000400000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000010000000000000004000000000000', '0x8001008008000400800101800001080100000040', 0), value: 0x0
Caller: [CREATOR], function: depositCardsAndMintTokens(uint256[],address), txdata: 0x0e4fae5f0000000000000000000000000000000000000000000000000000000000000000b8b8b8b8b8b8b8b8b8b8b8b80000000000000000040000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: depositCardsAndMintTokens(uint256[],address)
PC address: 7250
Estimated Gas Usage: 18511 - 97243
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x458d25123e0193838c887103fc1eb06fe14c7b4f.sol:182

_totalSupply = _totalSupply.add(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000001000000000000000400000000000000000000000000000000000080010080080004008001018000010801000000400000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000010000000000000004000000000000', '0x8001008008000400800101800001080100000040', 0), value: 0x0
Caller: [CREATOR], function: depositCardsAndMintTokens(uint256[],address), txdata: 0x0e4fae5f0000000000000000000000000000000000000000000000000000000000000000b8b8b8b8b8b8b8b8b8b8b8b80000000000000000040000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CardERC20Wrapper
Function name: depositCardsAndMintTokens(uint256[],address)
PC address: 7318
Estimated Gas Usage: 18511 - 97243
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x458d25123e0193838c887103fc1eb06fe14c7b4f.sol:183

_balances[account]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000001000000000000000400000000000000000000000000000000000080010080080004008001018000010801000000400000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000010000000000000004000000000000', '0x8001008008000400800101800001080100000040', 0), value: 0x0
Caller: [CREATOR], function: depositCardsAndMintTokens(uint256[],address), txdata: 0x0e4fae5f0000000000000000000000000000000000000000000000000000000000000000b8b8b8b8b8b8b8b8b8b8b8b80000000000000000040000000000000000000000, value: 0x0


time_used: 36055.42319345474 seconds
#@contract_info_time
0x458d25123e0193838c887103fc1eb06fe14c7b4f.sol:0.5.0:CardERC20Wrapper:36055.42319345474:36100:60:36000
