++++ 0x890275d5797963678bfff0944776C1646144830e.sol  :  0.5.0  :  WithdrawStorage ++++
655251735853922694967911662580490717076041977877 is added into actors.
Starting preprocessing.
number of genesis states: 1
total instructions: 8689
['constructor']:writes at the last depth:['0', '1', '2', '3', '4']
preprocessing: Achieved 66.16% coverage.
dynamic svars:['1']
static svars:['0', '2', '4', '3']
Ending preprocessing.
preprocessing time(s): 56.1562066078186
contract coverage: 43.88%
Function Reads: State variables read in conditions
	setRewardsAmount(address,uint256):['2']
	getLastWithdrawalPrice(address,address):['2']
	getWithdrawalLimitBalance(address,address):['2']
	getCumulativePrice(address):['2']
	getStorageAddress():['2']
	unpause():['1', '2']
	isPauser(address):[]
	getWithdrawalLimitTotal(address,address):['2']
	getPendingWithdrawal(address,address):['2']
	paused():[]
	renouncePauser():['1']
	renounceOwnership():['0']
	setWithdrawalLimitTotal(address,address,uint256):['2']
	addPauser(address):['1']
	setLastWithdrawalPrice(address,address,uint256):['2']
	pause():['1', '2']
	owner():[]
	isOwner():[]
	setStorage(address):['0']
	setWithdrawalLimitBalance(address,address,uint256):['2']
	changeOwner(address):['0']
	setCumulativePrice(address,uint256):['2']
	configAddress():[]
	getRewardsAmount(address):['2']
	setPendingWithdrawal(address,address,uint256):['2']
	transferOwnership(address):['0']
	createStorage():['0', '2']
	deleteAddress(bytes32):[]
	getAddress(bytes32):[]
	deleteBool(bytes32):[]
	setInt(bytes32,int256):[]
	deleteBytes(bytes32):[]
	setString(bytes32,string):[]
	getBool(bytes32):[]
	deleteInt(bytes32):[]
	getString(bytes32):[]
	setBool(bytes32,bool):[]
	getUint(bytes32):[]
	getBytes(bytes32):[]
	setAddress(bytes32,address):[]
	setBytes(bytes32,bytes32):[]
	getInt(bytes32):[]
	setUint(bytes32,uint256):[]
	deleteUint(bytes32):[]
	deleteString(bytes32):[]
	validateAddress(address,address):[]
	validateAddresses(address,address,address):[]
	validateGroups(address,address,address):[]
	validateIllegalAddress(address):[]
	validateGroup(address,address):[]
Function Writes: State variables written
	renounceOwnership():['0']
	unpause():['2']
	renouncePauser():['1']
	setStorage(address):['2']
	pause():['2']
	constructor:['0']
	transferOwnership(address):['0']
	createStorage():['2']
	addPauser(address):['1']
============================
iteration:3
targets:['getCumulativePrice(address)', 'getRewardsAmount(address)', 'getLastWithdrawalPrice(address,address)', 'getWithdrawalLimitBalance(address,address)', 'getWithdrawalLimitTotal(address,address)', 'getPendingWithdrawal(address,address)', 'setWithdrawalLimitTotal(address,address,uint256)', 'setLastWithdrawalPrice(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)', 'setCumulativePrice(address,uint256)', 'getStorageAddress()', 'createStorage()', 'unpause()', 'pause()', 'changeOwner(address)']
['renounceOwnership()']:writes at the last depth:['0']
['setStorage(address)']:writes at the last depth:['2']
['renouncePauser()']:writes at the last depth:['1']
['pause()']:writes at the last depth:['2']
['transferOwnership(address)']:writes at the last depth:['0']
['createStorage()']:writes at the last depth:['2']
['addPauser(address)']:writes at the last depth:['1']
contract coverage: 44.86%
============================
iteration:4
['addPauser(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 44.86%
============================
iteration:5
['addPauser(address)', 'addPauser(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 44.86%
============================
iteration:6
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'addPauser(address)', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 63.51%
============================
iteration:7
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 63.51%
============================
iteration:8
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'transferOwnership(address)', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 63.51%
============================
iteration:9
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'changeOwner(address)', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 64.54%
============================
iteration:10
['addPauser(address)', 'addPauser(address)', 'pause()', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'pause()', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'pause()', 'unpause()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'pause()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'pause()', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'pause()', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'pause()', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'pause()', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 64.54%
============================
iteration:11
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'renouncePauser()', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 65.65%
============================
iteration:12
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'addPauser(address)', 'setStorage(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 65.65%
============================
iteration:13
['addPauser(address)', 'addPauser(address)', 'renounceOwnership()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'addPauser(address)', 'renounceOwnership()', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'addPauser(address)', 'renounceOwnership()', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 65.65%
============================
iteration:14
['addPauser(address)', 'createStorage()', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 65.65%
============================
iteration:15
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setPendingWithdrawal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 65.65%
============================
iteration:16
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitBalance(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 65.65%
============================
iteration:17
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setCumulativePrice(address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 65.65%
============================
iteration:18
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setLastWithdrawalPrice(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 65.65%
============================
iteration:19
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setWithdrawalLimitTotal(address,address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 65.65%
============================
iteration:20
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setRewardsAmount(address,uint256)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 65.65%
============================
iteration:21
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getRewardsAmount(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 65.65%
============================
iteration:22
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getPendingWithdrawal(address,address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 65.65%
============================
iteration:23
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitTotal(address,address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 65.65%
============================
iteration:24
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getWithdrawalLimitBalance(address,address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 65.65%
============================
iteration:25
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getLastWithdrawalPrice(address,address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 65.65%
============================
iteration:26
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'getCumulativePrice(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 65.65%
============================
iteration:27
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'changeOwner(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 65.65%
============================
iteration:28
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'addPauser(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 65.65%
============================
iteration:29
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'transferOwnership(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 66.08%
============================
iteration:30
['addPauser(address)', 'createStorage()', 'pause()', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'pause()', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'pause()', 'unpause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'pause()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'pause()', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'pause()', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'pause()', 'changeOwner(address)']:writes at the last depth:[]
contract coverage: 66.08%
============================
iteration:31
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'renouncePauser()', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 66.08%
============================
iteration:32
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'renounceOwnership()']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'setStorage(address)']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'renouncePauser()']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'pause()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'changeOwner(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'getCumulativePrice(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'createStorage()']:writes at the last depth:['2']
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'getLastWithdrawalPrice(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'getWithdrawalLimitBalance(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'addPauser(address)']:writes at the last depth:['1']
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'getWithdrawalLimitTotal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'getPendingWithdrawal(address,address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'getRewardsAmount(address)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'setRewardsAmount(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'setWithdrawalLimitTotal(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'setLastWithdrawalPrice(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'setCumulativePrice(address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'setWithdrawalLimitBalance(address,address,uint256)']:writes at the last depth:[]
['addPauser(address)', 'createStorage()', 'setStorage(address)', 'setPendingWithdrawal(address,address,uint256)']:writes at the last depth:[]
contract coverage: 66.08%
============================
iteration:33
contract coverage: 66.08%
============================
iteration:34
contract coverage: 66.08%
============================
iteration:35
contract coverage: 66.08%
============================
iteration:36
contract coverage: 66.08%
============================
iteration:37
contract coverage: 66.08%
============================
iteration:38
contract coverage: 66.08%
============================
iteration:39
contract coverage: 66.08%
============================
iteration:40
contract coverage: 66.08%
============================
iteration:41
contract coverage: 66.08%
============================
iteration:42
contract coverage: 66.08%
============================
iteration:43
contract coverage: 66.08%
============================
iteration:44
contract coverage: 66.08%
============================
iteration:45
contract coverage: 66.08%
#@statespace
18560 nodes, 18559 edges, 237835 total states
#@coverage
Achieved 3.54% coverage for code: 60806040523480156200001157600080fd5b506040516020806200590e833981018060405260208110156200003357600080fd5b810190808051906020019092919050505080600062000060620001fc640100000000026401000000009004565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620001306200011b620001fc640100000000026401000000009004565b62000204640100000000026401000000009004565b6000600260006101000a81548160ff02191690831515021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200019762000481565b604051809103906000f080158015620001b4573d6000803e3d6000fd5b50600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000492565b600033905090565b620002288160016200026e640100000000026200325e179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6200028982826200035d640100000000026401000000009004565b151515620002ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200042a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b604051610ad38062004e3b83390190565b61499980620004a26000396000f3fe60806040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630630ba681461016457806306aa2d48146101bf5780630ac252b9146102445780631382da2c146102c9578063393a4d341461032e5780633f4ba83a1461038557806346fbf68e1461039c5780634f9bce8f146104055780635699c7b11461048a5780635c975abb1461050f5780636ef8d66d1461053e578063715018a61461055557806376446e831461056c57806382dc1ec4146105e757806383b41a40146106385780638456cb59146106b35780638da5cb5b146106ca5780638f32d59b146107215780639137c1a714610750578063a6f797aa146107a1578063a6f9dae11461081c578063afca58a71461086d578063d6c31871146108c8578063dbe934511461091f578063dcaf498e14610984578063f2fde38b146109ff578063fb971d0114610a50575b600080fd5b34801561017057600080fd5b506101bd6004803603604081101561018757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a67565b005b3480156101cb57600080fd5b5061022e600480360360408110156101e257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c98565b6040518082815260200191505060405180910390f35b34801561025057600080fd5b506102b36004803603604081101561026757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d5a565b6040518082815260200191505060405180910390f35b3480156102d557600080fd5b50610318600480360360208110156102ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e1c565b6040518082815260200191505060405180910390f35b34801561033a57600080fd5b50610343610edc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561039157600080fd5b5061039a610fcc565b005b3480156103a857600080fd5b506103eb600480360360208110156103bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611181565b604051808215151515815260200191505060405180910390f35b34801561041157600080fd5b506104746004803603604081101561042857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061119e565b6040518082815260200191505060405180910390f35b34801561049657600080fd5b506104f9600480360360408110156104ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611260565b6040518082815260200191505060405180910390f35b34801561051b57600080fd5b50610524611322565b604051808215151515815260200191505060405180910390f35b34801561054a57600080fd5b50610553611339565b005b34801561056157600080fd5b5061056a61134b565b005b34801561057857600080fd5b506105e56004803603606081101561058f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611486565b005b3480156105f357600080fd5b506106366004803603602081101561060a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116b9565b005b34801561064457600080fd5b506106b16004803603606081101561065b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061176f565b005b3480156106bf57600080fd5b506106c86119a2565b005b3480156106d657600080fd5b506106df611b58565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561072d57600080fd5b50610736611b81565b604051808215151515815260200191505060405180910390f35b34801561075c57600080fd5b5061079f6004803603602081101561077357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bdf565b005b3480156107ad57600080fd5b5061081a600480360360608110156107c457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c9f565b005b34801561082857600080fd5b5061086b6004803603602081101561083f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ed2565b005b34801561087957600080fd5b506108c66004803603604081101561089057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612026565b005b3480156108d457600080fd5b506108dd612257565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561092b57600080fd5b5061096e6004803603602081101561094257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612281565b6040518082815260200191505060405180910390f35b34801561099057600080fd5b506109fd600480360360608110156109a757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612341565b005b348015610a0b57600080fd5b50610a4e60048036036020811015610a2257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612574565b005b348015610a5c57600080fd5b50610a656125fc565b005b610a6f6127ab565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933610a936127d5565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610af457600080fd5b505afa158015610b08573d6000803e3d6000fd5b505050506040513d6020811015610b1e57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015610bde57600080fd5b505afa158015610bf2573d6000803e3d6000fd5b50505050610bfe6127ff565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a610c2284612972565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610c7c57600080fd5b505af1158015610c90573d6000803e3d6000fd5b505050505050565b6000610ca26127ff565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610cc78585612a05565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610d1757600080fd5b505afa158015610d2b573d6000803e3d6000fd5b505050506040513d6020811015610d4157600080fd5b8101908080519060200190929190505050905092915050565b6000610d646127ff565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610d898585612adc565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610dd957600080fd5b505afa158015610ded573d6000803e3d6000fd5b505050506040513d6020811015610e0357600080fd5b8101908080519060200190929190505050905092915050565b6000610e266127ff565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610e4a84612bb3565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610e9a57600080fd5b505afa158015610eae573d6000803e3d6000fd5b505050506040513d6020811015610ec457600080fd5b81019080805190602001909291905050509050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610fa4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610fdc610fd7612c46565b611181565b1515611076576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900460ff1615156110fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61113e612c46565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000611197826001612c4e90919063ffffffff16565b9050919050565b60006111a86127ff565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56111cd8585612d71565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561121d57600080fd5b505afa158015611231573d6000803e3d6000fd5b505050506040513d602081101561124757600080fd5b8101908080519060200190929190505050905092915050565b600061126a6127ff565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f561128f8585612e48565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156112df57600080fd5b505afa1580156112f3573d6000803e3d6000fd5b505050506040513d602081101561130957600080fd5b8101908080519060200190929190505050905092915050565b6000600260009054906101000a900460ff16905090565b611349611344612c46565b612f1f565b565b611353611b81565b15156113c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b61148e6127ab565b73ffffffffffffffffffffffffffffffffffffffff166349616d79336114b26127d5565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561151357600080fd5b505afa158015611527573d6000803e3d6000fd5b505050506040513d602081101561153d57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156115fd57600080fd5b505afa158015611611573d6000803e3d6000fd5b5050505061161d6127ff565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6116428585612d71565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561169c57600080fd5b505af11580156116b0573d6000803e3d6000fd5b50505050505050565b6116c96116c4612c46565b611181565b1515611763576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b61176c81612f79565b50565b6117776127ab565b73ffffffffffffffffffffffffffffffffffffffff166349616d793361179b6127d5565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156117fc57600080fd5b505afa158015611810573d6000803e3d6000fd5b505050506040513d602081101561182657600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156118e657600080fd5b505afa1580156118fa573d6000803e3d6000fd5b505050506119066127ff565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a61192b8585612a05565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561198557600080fd5b505af1158015611999573d6000803e3d6000fd5b50505050505050565b6119b26119ad612c46565b611181565b1515611a4c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900460ff16151515611ad1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b15612c46565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611bc3612c46565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b611be7611b81565b1515611c5b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611ca76127ab565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611ccb6127d5565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611d2c57600080fd5b505afa158015611d40573d6000803e3d6000fd5b505050506040513d6020811015611d5657600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015611e1657600080fd5b505afa158015611e2a573d6000803e3d6000fd5b50505050611e366127ff565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611e5b8585612adc565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611eb557600080fd5b505af1158015611ec9573d6000803e3d6000fd5b50505050505050565b611eda611b81565b1515611f4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a6f9dae1826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561200b57600080fd5b505af115801561201f573d6000803e3d6000fd5b5050505050565b61202e6127ab565b73ffffffffffffffffffffffffffffffffffffffff166349616d79336120526127d5565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156120b357600080fd5b505afa1580156120c7573d6000803e3d6000fd5b505050506040513d60208110156120dd57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561219d57600080fd5b505afa1580156121b1573d6000803e3d6000fd5b505050506121bd6127ff565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6121e184612bb3565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561223b57600080fd5b505af115801561224f573d6000803e3d6000fd5b505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061228b6127ff565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56122af84612972565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156122ff57600080fd5b505afa158015612313573d6000803e3d6000fd5b505050506040513d602081101561232957600080fd5b81019080805190602001909291905050509050919050565b6123496127ab565b73ffffffffffffffffffffffffffffffffffffffff166349616d793361236d6127d5565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156123ce57600080fd5b505afa1580156123e2573d6000803e3d6000fd5b505050506040513d60208110156123f857600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156124b857600080fd5b505afa1580156124cc573d6000803e3d6000fd5b505050506124d86127ff565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6124fd8585612e48565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561255757600080fd5b505af115801561256b573d6000803e3d6000fd5b50505050505050565b61257c611b81565b15156125f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6125f981612fd3565b50565b612604611b81565b1515612678576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561273e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f73746f726167652069732073657474656400000000000000000000000000000081525060200191505060405180910390fd5b600061274861333b565b604051809103906000f080158015612764573d6000803e3d6000fd5b50905080600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156128c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b600015156128d3611322565b151514151561294a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f596f752063616e6e6f742075736520746861740000000000000000000000000081525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008160405160200180807f5f72657761726473416d6f756e74000000000000000000000000000000000000815250600e018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b6000828260405160200180807f5f6c6173745769746864726177616c50726963650000000000000000000000008152506014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b6000828260405160200180807f5f7769746864726177616c4c696d697442616c616e63650000000000000000008152506017018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b60008160405160200180807f5f63756d756c61746976655072696365000000000000000000000000000000008152506010018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612d1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000828260405160200180807f5f7769746864726177616c4c696d6974546f74616c00000000000000000000008152506015018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b6000828260405160200180807f5f70656e64696e675769746864726177616c00000000000000000000000000008152506012018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b612f3381600161315c90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b612f8d81600161325e90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561309e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6131668282612c4e565b1515613200576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c81526020017f650000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6132688282612c4e565b1515156132dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6040516116228061334c8339019056fe6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b506115c2806100606000396000f3fe608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a72305820d203c1548832a154f7caf6491cfabc469d3847876970ca3c4b0a4d366c9e79730029a165627a7a72305820f33cb4cdebdc47f288ceb710c2a3970efdb00ac1eea3ec20a8b60b6f320b878b0029608060405234801561001057600080fd5b50610ab3806100206000396000f3fe60806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806349616d79146100725780636dd893b9146100e3578063a219296314610174578063b292b54914610205578063d16ff47014610256575b600080fd5b34801561007e57600080fd5b506100e16004803603604081101561009557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102c7565b005b3480156100ef57600080fd5b506101726004803603606081101561010657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103d9565b005b34801561018057600080fd5b506102036004803603606081101561019757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610526565b005b34801561021157600080fd5b506102546004803603602081101561022857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107bd565b005b34801561026257600080fd5b506102c56004803603604081101561027957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108d0565b005b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156103d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561039957808201518184015260208101905061037e565b50505050905090810190601f1680156103c65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561041257610521565b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c206164647265737300000000000000000081525090151561051f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104e45780820151818401526020810190506104c9565b50505050905090810190601f1680156105115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b8173ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156105bf57600080fd5b505afa1580156105d3573d6000803e3d6000fd5b505050506040513d60208110156105e957600080fd5b810190808051906020019092919050505015610604576107b8565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561069d57600080fd5b505afa1580156106b1573d6000803e3d6000fd5b505050506040513d60208110156106c757600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561077b578082015181840152602081019050610760565b50505050905090810190601f1680156107a85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156108cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610891578082015181840152602081019050610876565b50505050905090810190601f1680156108be5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561096957600080fd5b505afa15801561097d573d6000803e3d6000fd5b505050506040513d602081101561099357600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610a82576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a47578082015181840152602081019050610a2c565b50505050905090810190601f168015610a745780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505056fea165627a7a723058205d5e6bbf848d6050833136bd06acc15897480ff0a66feb7789d41f4c1d5896b70029
#@coverage
Achieved 1.09% coverage for code: 608060405234801561001057600080fd5b50610ab3806100206000396000f3fe60806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806349616d79146100725780636dd893b9146100e3578063a219296314610174578063b292b54914610205578063d16ff47014610256575b600080fd5b34801561007e57600080fd5b506100e16004803603604081101561009557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102c7565b005b3480156100ef57600080fd5b506101726004803603606081101561010657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103d9565b005b34801561018057600080fd5b506102036004803603606081101561019757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610526565b005b34801561021157600080fd5b506102546004803603602081101561022857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107bd565b005b34801561026257600080fd5b506102c56004803603604081101561027957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108d0565b005b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156103d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561039957808201518184015260208101905061037e565b50505050905090810190601f1680156103c65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561041257610521565b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601781526020017f7468697320697320696c6c6567616c206164647265737300000000000000000081525090151561051f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104e45780820151818401526020810190506104c9565b50505050905090810190601f1680156105115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b8173ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156105bf57600080fd5b505afa1580156105d3573d6000803e3d6000fd5b505050506040513d60208110156105e957600080fd5b810190808051906020019092919050505015610604576107b8565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561069d57600080fd5b505afa1580156106b1573d6000803e3d6000fd5b505050506040513d60208110156106c757600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561077b578082015181840152602081019050610760565b50505050905090810190601f1680156107a85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601781526020017f7468697320697320696c6c6567616c20616464726573730000000000000000008152509015156108cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610891578082015181840152602081019050610876565b50505050905090810190601f1680156108be5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b8073ffffffffffffffffffffffffffffffffffffffff16639e0cc3c4836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561096957600080fd5b505afa15801561097d573d6000803e3d6000fd5b505050506040513d602081101561099357600080fd5b81019080805190602001909291905050506040805190810160405280601781526020017f7468697320697320696c6c6567616c2061646472657373000000000000000000815250901515610a82576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a47578082015181840152602081019050610a2c565b50505050905090810190601f168015610a745780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505056fea165627a7a723058205d5e6bbf848d6050833136bd06acc15897480ff0a66feb7789d41f4c1d5896b7002900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
#@coverage
Achieved 66.08% coverage for code: 60806040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630630ba681461016457806306aa2d48146101bf5780630ac252b9146102445780631382da2c146102c9578063393a4d341461032e5780633f4ba83a1461038557806346fbf68e1461039c5780634f9bce8f146104055780635699c7b11461048a5780635c975abb1461050f5780636ef8d66d1461053e578063715018a61461055557806376446e831461056c57806382dc1ec4146105e757806383b41a40146106385780638456cb59146106b35780638da5cb5b146106ca5780638f32d59b146107215780639137c1a714610750578063a6f797aa146107a1578063a6f9dae11461081c578063afca58a71461086d578063d6c31871146108c8578063dbe934511461091f578063dcaf498e14610984578063f2fde38b146109ff578063fb971d0114610a50575b600080fd5b34801561017057600080fd5b506101bd6004803603604081101561018757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a67565b005b3480156101cb57600080fd5b5061022e600480360360408110156101e257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c98565b6040518082815260200191505060405180910390f35b34801561025057600080fd5b506102b36004803603604081101561026757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d5a565b6040518082815260200191505060405180910390f35b3480156102d557600080fd5b50610318600480360360208110156102ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e1c565b6040518082815260200191505060405180910390f35b34801561033a57600080fd5b50610343610edc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561039157600080fd5b5061039a610fcc565b005b3480156103a857600080fd5b506103eb600480360360208110156103bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611181565b604051808215151515815260200191505060405180910390f35b34801561041157600080fd5b506104746004803603604081101561042857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061119e565b6040518082815260200191505060405180910390f35b34801561049657600080fd5b506104f9600480360360408110156104ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611260565b6040518082815260200191505060405180910390f35b34801561051b57600080fd5b50610524611322565b604051808215151515815260200191505060405180910390f35b34801561054a57600080fd5b50610553611339565b005b34801561056157600080fd5b5061056a61134b565b005b34801561057857600080fd5b506105e56004803603606081101561058f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611486565b005b3480156105f357600080fd5b506106366004803603602081101561060a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116b9565b005b34801561064457600080fd5b506106b16004803603606081101561065b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061176f565b005b3480156106bf57600080fd5b506106c86119a2565b005b3480156106d657600080fd5b506106df611b58565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561072d57600080fd5b50610736611b81565b604051808215151515815260200191505060405180910390f35b34801561075c57600080fd5b5061079f6004803603602081101561077357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bdf565b005b3480156107ad57600080fd5b5061081a600480360360608110156107c457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c9f565b005b34801561082857600080fd5b5061086b6004803603602081101561083f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ed2565b005b34801561087957600080fd5b506108c66004803603604081101561089057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612026565b005b3480156108d457600080fd5b506108dd612257565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561092b57600080fd5b5061096e6004803603602081101561094257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612281565b6040518082815260200191505060405180910390f35b34801561099057600080fd5b506109fd600480360360608110156109a757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612341565b005b348015610a0b57600080fd5b50610a4e60048036036020811015610a2257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612574565b005b348015610a5c57600080fd5b50610a656125fc565b005b610a6f6127ab565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933610a936127d5565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610af457600080fd5b505afa158015610b08573d6000803e3d6000fd5b505050506040513d6020811015610b1e57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015610bde57600080fd5b505afa158015610bf2573d6000803e3d6000fd5b50505050610bfe6127ff565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a610c2284612972565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610c7c57600080fd5b505af1158015610c90573d6000803e3d6000fd5b505050505050565b6000610ca26127ff565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610cc78585612a05565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610d1757600080fd5b505afa158015610d2b573d6000803e3d6000fd5b505050506040513d6020811015610d4157600080fd5b8101908080519060200190929190505050905092915050565b6000610d646127ff565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610d898585612adc565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610dd957600080fd5b505afa158015610ded573d6000803e3d6000fd5b505050506040513d6020811015610e0357600080fd5b8101908080519060200190929190505050905092915050565b6000610e266127ff565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5610e4a84612bb3565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610e9a57600080fd5b505afa158015610eae573d6000803e3d6000fd5b505050506040513d6020811015610ec457600080fd5b81019080805190602001909291905050509050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610fa4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610fdc610fd7612c46565b611181565b1515611076576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900460ff1615156110fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61113e612c46565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000611197826001612c4e90919063ffffffff16565b9050919050565b60006111a86127ff565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56111cd8585612d71565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561121d57600080fd5b505afa158015611231573d6000803e3d6000fd5b505050506040513d602081101561124757600080fd5b8101908080519060200190929190505050905092915050565b600061126a6127ff565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f561128f8585612e48565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156112df57600080fd5b505afa1580156112f3573d6000803e3d6000fd5b505050506040513d602081101561130957600080fd5b8101908080519060200190929190505050905092915050565b6000600260009054906101000a900460ff16905090565b611349611344612c46565b612f1f565b565b611353611b81565b15156113c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b61148e6127ab565b73ffffffffffffffffffffffffffffffffffffffff166349616d79336114b26127d5565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561151357600080fd5b505afa158015611527573d6000803e3d6000fd5b505050506040513d602081101561153d57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156115fd57600080fd5b505afa158015611611573d6000803e3d6000fd5b5050505061161d6127ff565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6116428585612d71565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561169c57600080fd5b505af11580156116b0573d6000803e3d6000fd5b50505050505050565b6116c96116c4612c46565b611181565b1515611763576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b61176c81612f79565b50565b6117776127ab565b73ffffffffffffffffffffffffffffffffffffffff166349616d793361179b6127d5565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156117fc57600080fd5b505afa158015611810573d6000803e3d6000fd5b505050506040513d602081101561182657600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156118e657600080fd5b505afa1580156118fa573d6000803e3d6000fd5b505050506119066127ff565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a61192b8585612a05565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561198557600080fd5b505af1158015611999573d6000803e3d6000fd5b50505050505050565b6119b26119ad612c46565b611181565b1515611a4c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f506175736572526f6c653a2063616c6c657220646f6573206e6f74206861766581526020017f207468652050617573657220726f6c650000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900460ff16151515611ad1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b15612c46565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611bc3612c46565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b611be7611b81565b1515611c5b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611ca76127ab565b73ffffffffffffffffffffffffffffffffffffffff166349616d7933611ccb6127d5565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611d2c57600080fd5b505afa158015611d40573d6000803e3d6000fd5b505050506040513d6020811015611d5657600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015611e1657600080fd5b505afa158015611e2a573d6000803e3d6000fd5b50505050611e366127ff565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a611e5b8585612adc565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611eb557600080fd5b505af1158015611ec9573d6000803e3d6000fd5b50505050505050565b611eda611b81565b1515611f4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a6f9dae1826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561200b57600080fd5b505af115801561201f573d6000803e3d6000fd5b5050505050565b61202e6127ab565b73ffffffffffffffffffffffffffffffffffffffff166349616d79336120526127d5565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156120b357600080fd5b505afa1580156120c7573d6000803e3d6000fd5b505050506040513d60208110156120dd57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561219d57600080fd5b505afa1580156121b1573d6000803e3d6000fd5b505050506121bd6127ff565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6121e184612bb3565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561223b57600080fd5b505af115801561224f573d6000803e3d6000fd5b505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061228b6127ff565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56122af84612972565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156122ff57600080fd5b505afa158015612313573d6000803e3d6000fd5b505050506040513d602081101561232957600080fd5b81019080805190602001909291905050509050919050565b6123496127ab565b73ffffffffffffffffffffffffffffffffffffffff166349616d793361236d6127d5565b73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156123ce57600080fd5b505afa1580156123e2573d6000803e3d6000fd5b505050506040513d60208110156123f857600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156124b857600080fd5b505afa1580156124cc573d6000803e3d6000fd5b505050506124d86127ff565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a6124fd8585612e48565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561255757600080fd5b505af115801561256b573d6000803e3d6000fd5b50505050505050565b61257c611b81565b15156125f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6125f981612fd3565b50565b612604611b81565b1515612678576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561273e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f73746f726167652069732073657474656400000000000000000000000000000081525060200191505060405180910390fd5b600061274861333b565b604051809103906000f080158015612764573d6000803e3d6000fd5b50905080600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156128c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f73746f72616765206973206e6f7420736574746564000000000000000000000081525060200191505060405180910390fd5b600015156128d3611322565b151514151561294a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f596f752063616e6e6f742075736520746861740000000000000000000000000081525060200191505060405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008160405160200180807f5f72657761726473416d6f756e74000000000000000000000000000000000000815250600e018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b6000828260405160200180807f5f6c6173745769746864726177616c50726963650000000000000000000000008152506014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b6000828260405160200180807f5f7769746864726177616c4c696d697442616c616e63650000000000000000008152506017018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b60008160405160200180807f5f63756d756c61746976655072696365000000000000000000000000000000008152506010018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050919050565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612d1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f526f6c65733a206163636f756e7420697320746865207a65726f20616464726581526020017f737300000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000828260405160200180807f5f7769746864726177616c4c696d6974546f74616c00000000000000000000008152506015018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b6000828260405160200180807f5f70656e64696e675769746864726177616c00000000000000000000000000008152506012018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405160208183030381529060405280519060200120905092915050565b612f3381600161315c90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b612f8d81600161325e90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561309e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6131668282612c4e565b1515613200576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c81526020017f650000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6132688282612c4e565b1515156132dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6040516116228061334c8339019056fe6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b506115c2806100606000396000f3fe608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a72305820d203c1548832a154f7caf6491cfabc469d3847876970ca3c4b0a4d366c9e79730029a165627a7a72305820f33cb4cdebdc47f288ceb710c2a3970efdb00ac1eea3ec20a8b60b6f320b878b0029
#@coverage
Achieved 1.25% coverage for code: 6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b506115c2806100606000396000f3fe608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a72305820d203c1548832a154f7caf6491cfabc469d3847876970ca3c4b0a4d366c9e797300290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
#@coverage
Achieved 15.25% coverage for code: 608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e14a3761461010c57806321f8a721146101475780632c62ff2d146101c25780633e49bed0146101fd578063616b59f6146102425780636e8995501461027d5780637ae1cfca1461030d5780638c16009514610360578063986e791a1461039b578063a6f9dae11461044f578063abfdcced146104a0578063bd02d0f5146104e7578063c031a18014610536578063ca446dd914610585578063d5d2c560146105e0578063dc97d96214610625578063e2a4853a14610674578063e2b202bf146106b9578063f6bb3cc4146106f4575b600080fd5b34801561011857600080fd5b506101456004803603602081101561012f57600080fd5b810190808035906020019092919050505061072f565b005b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b810190808035906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b506101fb600480360360208110156101e557600080fd5b8101908080359060200190929190505050610869565b005b34801561020957600080fd5b506102406004803603604081101561022057600080fd5b810190808035906020019092919080359060200190929190505050610953565b005b34801561024e57600080fd5b5061027b6004803603602081101561026557600080fd5b8101908080359060200190929190505050610a33565b005b34801561028957600080fd5b5061030b600480360360408110156102a057600080fd5b8101908080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b9091929391929390505050610b11565b005b34801561031957600080fd5b506103466004803603602081101561033057600080fd5b8101908080359060200190929190505050610bfd565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103996004803603602081101561038357600080fd5b8101908080359060200190929190505050610c27565b005b3480156103a757600080fd5b506103d4600480360360208110156103be57600080fd5b8101908080359060200190929190505050610d05565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104145780820151818401526020810190506103f9565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dba565b005b3480156104ac57600080fd5b506104e5600480360360408110156104c357600080fd5b8101908080359060200190929190803515159060200190929190505050610ec1565b005b3480156104f357600080fd5b506105206004803603602081101561050a57600080fd5b8101908080359060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b34801561054257600080fd5b5061056f6004803603602081101561055957600080fd5b8101908080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105de600480360360408110156105a857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fee565b005b3480156105ec57600080fd5b506106236004803603604081101561060357600080fd5b810190808035906020019092919080359060200190929190505050611108565b005b34801561063157600080fd5b5061065e6004803603602081101561064857600080fd5b81019080803590602001909291905050506111e8565b6040518082815260200191505060405180910390f35b34801561068057600080fd5b506106b76004803603604081101561069757600080fd5b810190808035906020019092919080359060200190929190505050611205565b005b3480156106c557600080fd5b506106f2600480360360208110156106dc57600080fd5b81019080803590602001909291905050506112e5565b005b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506113c3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6005600082815260200190815260200160002060006101000a81549060ff021916905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060066000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600460008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8181600260008681526020019081526020016000209190610bf79291906114a9565b50505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ceb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600660008281526020019081526020016000206000905550565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dae5780601f10610d8357610100808354040283529160200191610dae565b820191906000526020600020905b815481529060010190602001808311610d9157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806005600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060016000838152602001908152602001600020549050919050565b600060046000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060046000848152602001908152602001600020819055505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b8060016000848152602001908152602001600020819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b600160008281526020019081526020016000206000905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f742063757272656e74206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060006114a69190611529565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114ea57803560ff1916838001178555611518565b82800160010185558215611518579182015b828111156115175782358255916020019190600101906114fc565b5b5090506115259190611571565b5090565b50805460018160011615610100020316600290046000825580601f1061154f575061156e565b601f01602090049060005260206000209081019061156d9190611571565b5b50565b61159391905b8082111561158f576000816000905550600101611577565b5090565b9056fea165627a7a72305820d203c1548832a154f7caf6491cfabc469d3847876970ca3c4b0a4d366c9e79730029
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setRewardsAmount(address,uint256)
PC address: 3041
Estimated Gas Usage: 9682 - 115495
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x890275d5797963678bfff0944776C1646144830e.sol:551

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec400000000000000000000000072c68108a82e82617b93d1be0d7975d762035015, decoded_data: ('0x72c68108a82e82617b93d1be0d7975d762035015',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec4a8a8a8a8a8a8a8a8a8a8a8a80220af0180048010800101400404040801402080, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setRewardsAmount(address,uint256), txdata: 0x0630ba68d1d1d1d1d1d1d1d1d1d1d1d10000000000000000000000000000000000000000d1d1d1d1d1d1d1d1d1d1d1d10000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: WithdrawStorage
Function name: setRewardsAmount(address,uint256)
PC address: 3199
Estimated Gas Usage: 9682 - 115495
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x890275d5797963678bfff0944776C1646144830e.sol:553

eternalStorage().setUint(getRewardsAmountKey(_property), _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec4aaaaaaaaaaaaaaaaaaaaaaaa0000000004100000408000018040804002404080, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a7010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setRewardsAmount(address,uint256), txdata: 0x0630ba681e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e0000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setRewardsAmount(address,uint256)
PC address: 3199
Estimated Gas Usage: 9682 - 115495
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x890275d5797963678bfff0944776C1646144830e.sol:553

eternalStorage().setUint(getRewardsAmountKey(_property), _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000008004808001018004808010800180800120020110, decoded_data: ('0x8004808001018004808010800180800120020110',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c40100000000010000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a70101010101010101010101010880080110020020000108004008801080040140, value: 0x0
Caller: [SOMEGUY], function: setRewardsAmount(address,uint256), txdata: 0x0630ba681e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e0000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setWithdrawalLimitTotal(address,address,uint256)
PC address: 5632
Estimated Gas Usage: 10029 - 115937
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x890275d5797963678bfff0944776C1646144830e.sol:601

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000004001800801018080082080010108401040082020, decoded_data: ('0x4001800801018080082080010108401040082020',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec41e1e1e1e1e1e1e1e1e1e1e1e0401018001080104040804020400010101010840, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setWithdrawalLimitTotal(address,address,uint256), txdata: 0x76446e831d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000001d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000001d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setWithdrawalLimitTotal(address,address,uint256)
PC address: 5791
Estimated Gas Usage: 10029 - 115937
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x890275d5797963678bfff0944776C1646144830e.sol:603

eternalStorage().setUint(
			getWithdrawalLimitTotalKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec400000000000000000000000072c68108a82e82617b93d1be0d7975d762035015, decoded_data: ('0x72c68108a82e82617b93d1be0d7975d762035015',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec49393939393939393939393930000010000000000000008000000000000008001, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a7d1d1d1d1d1d1d1d1d1d1d1d18010012002021040020280208020200400401010, value: 0x0
Caller: [CREATOR], function: setWithdrawalLimitTotal(address,address,uint256), txdata: 0x76446e83d1d1d1d1d1d1d1d1d1d1d1d10000000000000000000000000000000000000000d1d1d1d1d1d1d1d1d1d1d1d10000000000000000000000000000000000000000d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setLastWithdrawalPrice(address,address,uint256)
PC address: 6377
Estimated Gas Usage: 10070 - 115978
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x890275d5797963678bfff0944776C1646144830e.sol:673

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000000008018002080000000808000400002001080201, decoded_data: ('0x0008018002080000000808000400002001080201',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec41e1e1e1e1e1e1e1e1e1e1e1e0408080410404002028010401010014010040401, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setLastWithdrawalPrice(address,address,uint256), txdata: 0x83b41a401d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000001d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000001d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: WithdrawStorage
Function name: setLastWithdrawalPrice(address,address,uint256)
PC address: 6536
Estimated Gas Usage: 10070 - 115978
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x890275d5797963678bfff0944776C1646144830e.sol:675

eternalStorage().setUint(
			getLastWithdrawalPriceKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c40404040004040480040404800104041080010408, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a7010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setLastWithdrawalPrice(address,address,uint256), txdata: 0x83b41a401e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setLastWithdrawalPrice(address,address,uint256)
PC address: 6536
Estimated Gas Usage: 10070 - 115978
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x890275d5797963678bfff0944776C1646144830e.sol:675

eternalStorage().setUint(
			getLastWithdrawalPriceKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000000000000100020000024002800810201001040280, decoded_data: ('0x0000000100020000024002800810201001040280',), value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [SOMEGUY], function: setLastWithdrawalPrice(address,address,uint256), txdata: 0x83b41a40010101010101010101010101100000000000000000000000000000000000000001010101010101010101010101000080800080200040008000404000000000000101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setWithdrawalLimitBalance(address,address,uint256)
PC address: 7705
Estimated Gas Usage: 10183 - 116091
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x890275d5797963678bfff0944776C1646144830e.sol:637

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec4c4c4c4c4c4c4c4c4c4c4c4c40100048080000200008001200004002080808040, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setWithdrawalLimitBalance(address,address,uint256), txdata: 0xa6f797aa1e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setWithdrawalLimitBalance(address,address,uint256)
PC address: 7864
Estimated Gas Usage: 10183 - 116091
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x890275d5797963678bfff0944776C1646144830e.sol:639

eternalStorage().setUint(
			getWithdrawalLimitBalanceKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000000102010080800240010104000140800080800440, decoded_data: ('0x0102010080800240010104000140800080800440',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec48080808080808080808080800000008000000000000000000001000000010001, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a7808080808080808080808080affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: setWithdrawalLimitBalance(address,address,uint256), txdata: 0xa6f797aa1e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setCumulativePrice(address,uint256)
PC address: 8608
Estimated Gas Usage: 10144 - 115957
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x890275d5797963678bfff0944776C1646144830e.sol:574

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec400000000000000000000000072c68108a82e82617b93d1be0d7975d762035015, decoded_data: ('0x72c68108a82e82617b93d1be0d7975d762035015',), value: 0x0
Caller: [SOMEGUY], function: addPauser(address), txdata: 0x82dc1ec49393939393939393939393934080010108010180800401000001041004010802, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setCumulativePrice(address,uint256), txdata: 0xafca58a7d1d1d1d1d1d1d1d1d1d1d1d10000000000000000000000000000000000000000d1d1d1d1d1d1d1d1d1d1d1d10000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: WithdrawStorage
Function name: setCumulativePrice(address,uint256)
PC address: 8766
Estimated Gas Usage: 10144 - 115957
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x890275d5797963678bfff0944776C1646144830e.sol:576

eternalStorage().setUint(getCumulativePriceKey(_property), _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000004040401008014001801080010480100402202002, decoded_data: ('0x4040401008014001801080010480100402202002',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec48080808080808080808080804004800000400100808001408001000000400201, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a7808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setCumulativePrice(address,uint256), txdata: 0xafca58a71e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e0000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setCumulativePrice(address,uint256)
PC address: 8766
Estimated Gas Usage: 10144 - 115957
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x890275d5797963678bfff0944776C1646144830e.sol:576

eternalStorage().setUint(getCumulativePriceKey(_property), _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec400000000000000000000000010100101008001fe010201408001010102010204, decoded_data: ('0x10100101008001fe010201408001010102010204',), value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec48080808080808080808080808020080101010101010801804001800001000020, value: 0x0
Caller: [CREATOR], function: setStorage(address), txdata: 0x9137c1a7808080808080808080808080affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: setCumulativePrice(address,uint256), txdata: 0xafca58a71e1e1e1e1e1e1e1e1e1e1e1e00000000000000000000000000000000000000001e1e1e1e1e1e1e1e1e1e1e1e0000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setPendingWithdrawal(address,address,uint256)
PC address: 9403
Estimated Gas Usage: 10290 - 116198
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x890275d5797963678bfff0944776C1646144830e.sol:709

addressValidator().validateAddress(msg.sender, config().withdraw())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0
Caller: [ATTACKER], function: addPauser(address), txdata: 0x82dc1ec4adadadadadadadadadadadad0010010001012000400240020140000140040810, value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [CREATOR], function: setPendingWithdrawal(address,address,uint256), txdata: 0xdcaf498e1d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000001d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000001d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WithdrawStorage
Function name: setPendingWithdrawal(address,address,uint256)
PC address: 9562
Estimated Gas Usage: 10290 - 116198
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x890275d5797963678bfff0944776C1646144830e.sol:711

eternalStorage().setUint(
			getPendingWithdrawalKey(_property, _user),
			_value
		)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: addPauser(address), txdata: 0x82dc1ec40000000000000000000000001002010104011002010101010801808001200480, decoded_data: ('0x1002010104011002010101010801808001200480',), value: 0x0
Caller: [CREATOR], function: createStorage(), txdata: 0xfb971d01, value: 0x0
Caller: [SOMEGUY], function: setPendingWithdrawal(address,address,uint256), txdata: 0xdcaf498e1e1e1e1e1e1e1e1e1e1e1e1e00200808000000010010010101401080200810021e1e1e1e1e1e1e1e1e1e1e1e00000080008080808080808080808040008000801e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e, value: 0x0


time_used: 36108.80029988289 seconds
#@contract_info_time
0x890275d5797963678bfff0944776C1646144830e.sol:0.5.0:WithdrawStorage:36108.80029988289:36100:60:36000
