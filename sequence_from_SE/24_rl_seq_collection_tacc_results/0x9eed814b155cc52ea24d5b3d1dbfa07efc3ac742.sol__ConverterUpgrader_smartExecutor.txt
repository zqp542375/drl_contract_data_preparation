++++ 0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol  :  0.4.26  :  ConverterUpgrader ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 4507
['constructor']:writes at the last depth:['0', '2', '3', '4']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 89.59% coverage.
dynamic svars:['41']
static svars:['3', '2', '0', '1', '4']
Ending preprocessing.
preprocessing time(s): 101.60818386077881
contract coverage: 94.50%
acceptOwnership() is not reachable
updateRegistry() is not reachable
upgrade(uint16) is not reachable
upgrade(bytes32) is not reachable
upgradeOld(address,bytes32) is not reachable
Function Reads: State variables read in conditions
	restrictRegistryUpdate(bool):[]
	onlyOwnerCanUpdateRegistry():[]
	updateRegistry():['0']
	prevRegistry():[]
	acceptOwnership():[]
	registry():[]
	owner():[]
	upgrade(uint16):[]
	restoreRegistry():[]
	etherToken():[]
	upgrade(bytes32):[]
	newOwner():[]
	upgradeOld(address,bytes32):[]
	transferOwnership(address):[]
Function Writes: State variables written
	restrictRegistryUpdate(bool):['3']
	restoreRegistry():['2']
	acceptOwnership():['0', '1']
	transferOwnership(address):['1']
	updateRegistry():['3', '2']
============================
iteration:3
targets:['acceptOwnership()', 'updateRegistry()', 'upgrade(uint16)', 'upgrade(bytes32)', 'upgradeOld(address,bytes32)']
['restrictRegistryUpdate(bool)']:writes at the last depth:['3']
['restoreRegistry()']:writes at the last depth:['2']
['transferOwnership(address)']:writes at the last depth:['1']
['updateRegistry()']:writes at the last depth:['3', '2']
['updateRegistry()']:writes at the last depth:['3', '2']
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgrade(bytes32)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgrade(uint16)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
['upgradeOld(address,bytes32)']:writes at the last depth:[]
contract coverage: 94.50%
============================
iteration:4
contract coverage: 94.50%
============================
iteration:5
contract coverage: 94.50%
============================
iteration:6
contract coverage: 94.50%
============================
iteration:7
contract coverage: 94.50%
============================
iteration:8
contract coverage: 94.50%
============================
iteration:9
contract coverage: 94.50%
============================
iteration:10
contract coverage: 94.50%
============================
iteration:11
contract coverage: 94.50%
============================
iteration:12
contract coverage: 94.50%
============================
iteration:13
contract coverage: 94.50%
============================
iteration:14
contract coverage: 94.50%
============================
iteration:15
contract coverage: 94.50%
============================
iteration:16
contract coverage: 94.50%
============================
iteration:17
contract coverage: 94.50%
============================
iteration:18
contract coverage: 94.50%
============================
iteration:19
contract coverage: 94.50%
============================
iteration:20
contract coverage: 94.50%
============================
iteration:21
contract coverage: 94.50%
============================
iteration:22
contract coverage: 94.50%
============================
iteration:23
contract coverage: 94.50%
============================
iteration:24
contract coverage: 94.50%
============================
iteration:25
contract coverage: 94.50%
============================
iteration:26
contract coverage: 94.50%
============================
iteration:27
contract coverage: 94.50%
============================
iteration:28
contract coverage: 94.50%
============================
iteration:29
contract coverage: 94.50%
============================
iteration:30
contract coverage: 94.50%
============================
iteration:31
contract coverage: 94.50%
============================
iteration:32
contract coverage: 94.50%
============================
iteration:33
contract coverage: 94.50%
============================
iteration:34
contract coverage: 94.50%
============================
iteration:35
contract coverage: 94.50%
============================
iteration:36
contract coverage: 94.50%
============================
iteration:37
contract coverage: 94.50%
============================
iteration:38
contract coverage: 94.50%
============================
iteration:39
contract coverage: 94.50%
============================
iteration:40
contract coverage: 94.50%
============================
iteration:41
contract coverage: 94.50%
============================
iteration:42
contract coverage: 94.50%
============================
iteration:43
contract coverage: 94.50%
============================
iteration:44
contract coverage: 94.50%
============================
iteration:45
contract coverage: 94.50%
============================
iteration:46
contract coverage: 94.50%
============================
iteration:47
contract coverage: 94.50%
============================
iteration:48
contract coverage: 94.50%
============================
iteration:49
contract coverage: 94.50%
============================
iteration:50
contract coverage: 94.50%
============================
iteration:51
contract coverage: 94.50%
============================
iteration:52
contract coverage: 94.50%
============================
iteration:53
contract coverage: 94.50%
============================
iteration:54
contract coverage: 94.50%
============================
iteration:55
contract coverage: 94.50%
============================
iteration:56
contract coverage: 94.50%
============================
iteration:57
contract coverage: 94.50%
============================
iteration:58
contract coverage: 94.50%
============================
iteration:59
contract coverage: 94.50%
============================
iteration:60
contract coverage: 94.50%
============================
iteration:61
contract coverage: 94.50%
============================
iteration:62
contract coverage: 94.50%
============================
iteration:63
contract coverage: 94.50%
============================
iteration:64
contract coverage: 94.50%
============================
iteration:65
contract coverage: 94.50%
============================
iteration:66
contract coverage: 94.50%
============================
iteration:67
contract coverage: 94.50%
============================
iteration:68
contract coverage: 94.50%
============================
iteration:69
contract coverage: 94.50%
============================
iteration:70
contract coverage: 94.50%
============================
iteration:71
contract coverage: 94.50%
============================
iteration:72
contract coverage: 94.50%
============================
iteration:73
contract coverage: 94.50%
============================
iteration:74
contract coverage: 94.50%
============================
iteration:75
contract coverage: 94.50%
============================
iteration:76
contract coverage: 94.50%
============================
iteration:77
contract coverage: 94.50%
============================
iteration:78
contract coverage: 94.50%
============================
iteration:79
contract coverage: 94.50%
============================
iteration:80
contract coverage: 94.50%
============================
iteration:81
contract coverage: 94.50%
============================
iteration:82
contract coverage: 94.50%
============================
iteration:83
contract coverage: 94.50%
============================
iteration:84
contract coverage: 94.50%
============================
iteration:85
contract coverage: 94.50%
============================
iteration:86
contract coverage: 94.50%
============================
iteration:87
contract coverage: 94.50%
============================
iteration:88
contract coverage: 94.50%
============================
iteration:89
contract coverage: 94.50%
============================
iteration:90
contract coverage: 94.50%
============================
iteration:91
contract coverage: 94.50%
============================
iteration:92
contract coverage: 94.50%
============================
iteration:93
contract coverage: 94.50%
============================
iteration:94
contract coverage: 94.50%
============================
iteration:95
contract coverage: 94.50%
============================
iteration:96
contract coverage: 94.50%
============================
iteration:97
contract coverage: 94.50%
============================
iteration:98
contract coverage: 94.50%
============================
iteration:99
contract coverage: 94.50%
============================
iteration:100
contract coverage: 94.50%
============================
iteration:101
contract coverage: 94.50%
============================
iteration:102
contract coverage: 94.50%
============================
iteration:103
contract coverage: 94.50%
============================
iteration:104
contract coverage: 94.50%
============================
iteration:105
contract coverage: 94.50%
============================
iteration:106
contract coverage: 94.50%
============================
iteration:107
contract coverage: 94.50%
============================
iteration:108
contract coverage: 94.50%
============================
iteration:109
contract coverage: 94.50%
============================
iteration:110
contract coverage: 94.50%
============================
iteration:111
contract coverage: 94.50%
============================
iteration:112
contract coverage: 94.50%
============================
iteration:113
contract coverage: 94.50%
============================
iteration:114
contract coverage: 94.50%
============================
iteration:115
contract coverage: 94.50%
============================
iteration:116
contract coverage: 94.50%
============================
iteration:117
contract coverage: 94.50%
============================
iteration:118
contract coverage: 94.50%
============================
iteration:119
contract coverage: 94.50%
============================
iteration:120
contract coverage: 94.50%
============================
iteration:121
contract coverage: 94.50%
============================
iteration:122
contract coverage: 94.50%
============================
iteration:123
contract coverage: 94.50%
============================
iteration:124
contract coverage: 94.50%
============================
iteration:125
contract coverage: 94.50%
============================
iteration:126
contract coverage: 94.50%
============================
iteration:127
contract coverage: 94.50%
============================
iteration:128
contract coverage: 94.50%
============================
iteration:129
contract coverage: 94.50%
============================
iteration:130
contract coverage: 94.50%
============================
iteration:131
contract coverage: 94.50%
============================
iteration:132
contract coverage: 94.50%
============================
iteration:133
contract coverage: 94.50%
============================
iteration:134
contract coverage: 94.50%
============================
iteration:135
contract coverage: 94.50%
============================
iteration:136
contract coverage: 94.50%
============================
iteration:137
contract coverage: 94.50%
============================
iteration:138
contract coverage: 94.50%
============================
iteration:139
contract coverage: 94.50%
============================
iteration:140
contract coverage: 94.50%
============================
iteration:141
contract coverage: 94.50%
============================
iteration:142
contract coverage: 94.50%
============================
iteration:143
contract coverage: 94.50%
============================
iteration:144
contract coverage: 94.50%
============================
iteration:145
contract coverage: 94.50%
============================
iteration:146
contract coverage: 94.50%
============================
iteration:147
contract coverage: 94.50%
============================
iteration:148
contract coverage: 94.50%
============================
iteration:149
contract coverage: 94.50%
============================
iteration:150
contract coverage: 94.50%
============================
iteration:151
contract coverage: 94.50%
============================
iteration:152
contract coverage: 94.50%
============================
iteration:153
contract coverage: 94.50%
============================
iteration:154
contract coverage: 94.50%
============================
iteration:155
contract coverage: 94.50%
============================
iteration:156
contract coverage: 94.50%
============================
iteration:157
contract coverage: 94.50%
============================
iteration:158
contract coverage: 94.50%
============================
iteration:159
contract coverage: 94.50%
============================
iteration:160
contract coverage: 94.50%
============================
iteration:161
contract coverage: 94.50%
============================
iteration:162
contract coverage: 94.50%
============================
iteration:163
contract coverage: 94.50%
============================
iteration:164
contract coverage: 94.50%
============================
iteration:165
contract coverage: 94.50%
============================
iteration:166
contract coverage: 94.50%
============================
iteration:167
contract coverage: 94.50%
============================
iteration:168
contract coverage: 94.50%
============================
iteration:169
contract coverage: 94.50%
============================
iteration:170
contract coverage: 94.50%
============================
iteration:171
contract coverage: 94.50%
============================
iteration:172
contract coverage: 94.50%
============================
iteration:173
contract coverage: 94.50%
============================
iteration:174
contract coverage: 94.50%
============================
iteration:175
contract coverage: 94.50%
============================
iteration:176
contract coverage: 94.50%
============================
iteration:177
contract coverage: 94.50%
============================
iteration:178
contract coverage: 94.50%
============================
iteration:179
contract coverage: 94.50%
============================
iteration:180
contract coverage: 94.50%
============================
iteration:181
contract coverage: 94.50%
============================
iteration:182
contract coverage: 94.50%
============================
iteration:183
contract coverage: 94.50%
============================
iteration:184
contract coverage: 94.50%
============================
iteration:185
contract coverage: 94.50%
============================
iteration:186
contract coverage: 94.50%
============================
iteration:187
contract coverage: 94.50%
============================
iteration:188
contract coverage: 94.50%
============================
iteration:189
contract coverage: 94.50%
============================
iteration:190
contract coverage: 94.50%
============================
iteration:191
contract coverage: 94.50%
============================
iteration:192
contract coverage: 94.50%
============================
iteration:193
contract coverage: 94.50%
============================
iteration:194
contract coverage: 94.50%
============================
iteration:195
contract coverage: 94.50%
============================
iteration:196
contract coverage: 94.50%
============================
iteration:197
contract coverage: 94.50%
============================
iteration:198
contract coverage: 94.50%
============================
iteration:199
contract coverage: 94.50%
============================
iteration:200
contract coverage: 94.50%
============================
iteration:201
contract coverage: 94.50%
============================
iteration:202
contract coverage: 94.50%
============================
iteration:203
contract coverage: 94.50%
============================
iteration:204
contract coverage: 94.50%
============================
iteration:205
contract coverage: 94.50%
============================
iteration:206
contract coverage: 94.50%
============================
iteration:207
contract coverage: 94.50%
============================
iteration:208
contract coverage: 94.50%
============================
iteration:209
contract coverage: 94.50%
============================
iteration:210
contract coverage: 94.50%
============================
iteration:211
contract coverage: 94.50%
============================
iteration:212
contract coverage: 94.50%
============================
iteration:213
contract coverage: 94.50%
============================
iteration:214
contract coverage: 94.50%
============================
iteration:215
contract coverage: 94.50%
============================
iteration:216
contract coverage: 94.50%
============================
iteration:217
contract coverage: 94.50%
============================
iteration:218
contract coverage: 94.50%
============================
iteration:219
contract coverage: 94.50%
============================
iteration:220
contract coverage: 94.50%
============================
iteration:221
contract coverage: 94.50%
============================
iteration:222
contract coverage: 94.50%
============================
iteration:223
contract coverage: 94.50%
============================
iteration:224
contract coverage: 94.50%
============================
iteration:225
contract coverage: 94.50%
============================
iteration:226
contract coverage: 94.50%
============================
iteration:227
contract coverage: 94.50%
============================
iteration:228
contract coverage: 94.50%
============================
iteration:229
contract coverage: 94.50%
============================
iteration:230
contract coverage: 94.50%
============================
iteration:231
contract coverage: 94.50%
============================
iteration:232
contract coverage: 94.50%
============================
iteration:233
contract coverage: 94.50%
============================
iteration:234
contract coverage: 94.50%
============================
iteration:235
contract coverage: 94.50%
============================
iteration:236
contract coverage: 94.50%
============================
iteration:237
contract coverage: 94.50%
============================
iteration:238
contract coverage: 94.50%
============================
iteration:239
contract coverage: 94.50%
============================
iteration:240
contract coverage: 94.50%
============================
iteration:241
contract coverage: 94.50%
============================
iteration:242
contract coverage: 94.50%
============================
iteration:243
contract coverage: 94.50%
============================
iteration:244
contract coverage: 94.50%
============================
iteration:245
contract coverage: 94.50%
============================
iteration:246
contract coverage: 94.50%
============================
iteration:247
contract coverage: 94.50%
============================
iteration:248
contract coverage: 94.50%
============================
iteration:249
contract coverage: 94.50%
============================
iteration:250
contract coverage: 94.50%
============================
iteration:251
contract coverage: 94.50%
============================
iteration:252
contract coverage: 94.50%
============================
iteration:253
contract coverage: 94.50%
============================
iteration:254
contract coverage: 94.50%
============================
iteration:255
contract coverage: 94.50%
============================
iteration:256
contract coverage: 94.50%
============================
iteration:257
contract coverage: 94.50%
============================
iteration:258
contract coverage: 94.50%
============================
iteration:259
contract coverage: 94.50%
============================
iteration:260
contract coverage: 94.50%
============================
iteration:261
contract coverage: 94.50%
============================
iteration:262
contract coverage: 94.50%
============================
iteration:263
contract coverage: 94.50%
============================
iteration:264
contract coverage: 94.50%
============================
iteration:265
contract coverage: 94.50%
============================
iteration:266
contract coverage: 94.50%
============================
iteration:267
contract coverage: 94.50%
============================
iteration:268
contract coverage: 94.50%
============================
iteration:269
contract coverage: 94.50%
============================
iteration:270
contract coverage: 94.50%
============================
iteration:271
contract coverage: 94.50%
============================
iteration:272
contract coverage: 94.50%
============================
iteration:273
contract coverage: 94.50%
============================
iteration:274
contract coverage: 94.50%
#@statespace
13859 nodes, 13858 edges, 264331 total states
#@coverage
Achieved 4.53% coverage for code: 
#@coverage
Achieved 94.50% coverage for code: 6080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063024c7ec7146100d55780632fe8a6ad1461010457806349d10b641461013357806361cd756e1461014a57806379ba5097146101a15780637b103999146101b85780638da5cb5b1461020f57806390f58c9614610266578063b4a176d314610297578063b8066bcb146102ae578063bc444e1314610305578063d4ee1d9014610336578063f2cfed871461038d578063f2fde38b146103de575b600080fd5b3480156100e157600080fd5b50610102600480360381019080803515159060200190929190505050610421565b005b34801561011057600080fd5b50610119610446565b604051808215151515815260200191505060405180910390f35b34801561013f57600080fd5b50610148610459565b005b34801561015657600080fd5b5061015f61087e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ad57600080fd5b506101b66108a4565b005b3480156101c457600080fd5b506101cd610aac565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561021b57600080fd5b50610224610ad2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027257600080fd5b50610295600480360381019080803561ffff169060200190929190505050610af7565b005b3480156102a357600080fd5b506102ac610b0b565b005b3480156102ba57600080fd5b506102c3610b78565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031157600080fd5b506103346004803603810190808035600019169060200190929190505050610b9e565b005b34801561034257600080fd5b5061034b610bab565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561039957600080fd5b506103dc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600019169060200190929190505050610bd1565b005b3480156103ea57600080fd5b5061041f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611118565b005b610429611229565b80600360146101000a81548160ff02191690831515021790555050565b600360149054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806104c35750600360149054906101000a900460ff16155b1515610537576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f4143434553535f44454e49454400000000000000000000000000000081525060200191505060405180910390fd5b6105607f436f6e74726163745265676973747279000000000000000000000000000000006112ef565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156105ed5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b1515610661576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4552525f494e56414c49445f524547495354525900000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663bb34534c7f436f6e74726163745265676973747279000000000000000000000000000000006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561071057600080fd5b505af1158015610724573d6000803e3d6000fd5b505050506040513d602081101561073a57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515156107d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4552525f494e56414c49445f524547495354525900000000000000000000000081525060200191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610969576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f4143434553535f44454e49454400000000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a60405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610b08338261ffff16600102610bd1565b50565b610b13611229565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610ba83382610bd1565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000808593508373ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610c3e57600080fd5b505af1158015610c52573d6000803e3d6000fd5b505050506040513d6020811015610c6857600080fd5b81019080805190602001909291905050509250610c84846113cc565b610c8d846114a5565b9150610c998483611965565b610ca38483611f11565b610cad848361204c565b8373ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d1157600080fd5b505af1158015610d25573d6000803e3d6000fd5b505050506040513d6020811015610d3b57600080fd5b810190808051906020019092919050505090508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610dc957600080fd5b505af1158015610ddd573d6000803e3d6000fd5b505050506040513d6020811015610df357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161415610f50578373ffffffffffffffffffffffffffffffffffffffff166321e6b53d836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610ebb57600080fd5b505af1158015610ecf573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663cdc91c696040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015610f3757600080fd5b505af1158015610f4b573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff1663f2fde38b846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610feb57600080fd5b505af1158015610fff573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663f2fde38b846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561109e57600080fd5b505af11580156110b2573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f522b846327aea07106ec4d64ae4b6d6dea47689884dab650fd3a1f2e1d6a270160405160405180910390a3505050505050565b611120611229565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156111e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4552525f53414d455f4f574e455200000000000000000000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f4143434553535f44454e49454400000000000000000000000000000081525060200191505060405180910390fd5b565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb34534c836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561138a57600080fd5b505af115801561139e573d6000803e3d6000fd5b505050506040513d60208110156113b457600080fd5b81019080805190602001909291905050509050919050565b8073ffffffffffffffffffffffffffffffffffffffff166379ba50976040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561143057600080fd5b505af1158015611444573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167ff764604894fa993d4370a9cb28b81c11deb1aafdb2909156173ae3833dad807560405160405180910390a350565b60008060008060008060008773ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561151457600080fd5b505af1158015611528573d6000803e3d6000fd5b505050506040513d602081101561153e57600080fd5b810190808051906020019092919050505095508773ffffffffffffffffffffffffffffffffffffffff166394c275ad6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156115b557600080fd5b505af11580156115c9573d6000803e3d6000fd5b505050506040513d60208110156115df57600080fd5b810190808051906020019092919050505094508773ffffffffffffffffffffffffffffffffffffffff166371f52bf36040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561165657600080fd5b505af115801561166a573d6000803e3d6000fd5b505050506040513d602081101561168057600080fd5b81019080805190602001909291905050509350600092506116a0886127df565b1561174b578773ffffffffffffffffffffffffffffffffffffffff16633e8ff43f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561170957600080fd5b505af115801561171d573d6000803e3d6000fd5b505050506040513d602081101561173357600080fd5b8101908080519060200190929190505050925061175e565b60018461ffff16111561175d57600192505b5b6117877f436f6e766572746572466163746f7279000000000000000000000000000000006112ef565b91508173ffffffffffffffffffffffffffffffffffffffff166315f64b6a8488600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808561ffff1661ffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018263ffffffff1663ffffffff168152602001945050505050602060405180830381600087803b15801561189e57600080fd5b505af11580156118b2573d6000803e3d6000fd5b505050506040513d60208110156118c857600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff166379ba50976040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561193f57600080fd5b505af1158015611953573d6000803e3d6000fd5b50505050809650505050505050919050565b6000806000808573ffffffffffffffffffffffffffffffffffffffff166371f52bf36040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156119cf57600080fd5b505af11580156119e3573d6000803e3d6000fd5b505050506040513d60208110156119f957600080fd5b81019080805190602001909291905050509350600092505b8361ffff168361ffff161015611f09578573ffffffffffffffffffffffffffffffffffffffff166319b64015846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808261ffff168152602001915050602060405180830381600087803b158015611a9457600080fd5b505af1158015611aa8573d6000803e3d6000fd5b505050506040513d6020811015611abe57600080fd5b810190808051906020019092919050505091508573ffffffffffffffffffffffffffffffffffffffff16630e53aae9836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060a060405180830381600087803b158015611b6c57600080fd5b505af1158015611b80573d6000803e3d6000fd5b505050506040513d60a0811015611b9657600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505050505091505073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611cfd578473ffffffffffffffffffffffffffffffffffffffff16636a49d2c473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018263ffffffff1663ffffffff16815260200192505050600060405180830381600087803b158015611ce057600080fd5b505af1158015611cf4573d6000803e3d6000fd5b50505050611efc565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e33578473ffffffffffffffffffffffffffffffffffffffff16636a49d2c473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018263ffffffff1663ffffffff16815260200192505050600060405180830381600087803b158015611e1657600080fd5b505af1158015611e2a573d6000803e3d6000fd5b50505050611efb565b8473ffffffffffffffffffffffffffffffffffffffff16636a49d2c483836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018263ffffffff1663ffffffff16815260200192505050600060405180830381600087803b158015611ee257600080fd5b505af1158015611ef6573d6000803e3d6000fd5b505050505b5b8280600101935050611a11565b505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663579cd3ca6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611f7757600080fd5b505af1158015611f8b573d6000803e3d6000fd5b505050506040513d6020811015611fa157600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663ecbca55d826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808263ffffffff1663ffffffff168152602001915050600060405180830381600087803b15801561202f57600080fd5b505af1158015612043573d6000803e3d6000fd5b50505050505050565b60008060008060008673ffffffffffffffffffffffffffffffffffffffff166371f52bf36040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156120b857600080fd5b505af11580156120cc573d6000803e3d6000fd5b505050506040513d60208110156120e257600080fd5b81019080805190602001909291905050509350600092505b8361ffff168361ffff1610156127d6578673ffffffffffffffffffffffffffffffffffffffff166319b64015846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808261ffff168152602001915050602060405180830381600087803b15801561217d57600080fd5b505af1158015612191573d6000803e3d6000fd5b505050506040513d60208110156121a757600080fd5b8101908080519060200190929190505050915073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156122ba578673ffffffffffffffffffffffffffffffffffffffff1663690d8320876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561229d57600080fd5b505af11580156122b1573d6000803e3d6000fd5b505050506127c9565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156125fd57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156123cd57600080fd5b505af11580156123e1573d6000803e3d6000fd5b505050506040513d60208110156123f757600080fd5b810190808051906020019092919050505094508673ffffffffffffffffffffffffffffffffffffffff16635e35359e600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561250357600080fd5b505af1158015612517573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663205c287887876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156125e057600080fd5b505af11580156125f4573d6000803e3d6000fd5b505050506127c8565b8190508073ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561269b57600080fd5b505af11580156126af573d6000803e3d6000fd5b505050506040513d60208110156126c557600080fd5b810190808051906020019092919050505094508673ffffffffffffffffffffffffffffffffffffffff16635e35359e8288886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156127af57600080fd5b505af11580156127c3573d6000803e3d6000fd5b505050505b5b82806001019350506120fa565b50505050505050565b6000806127ea6128a0565b606060405180807f69735632384f7248696768657228290000000000000000000000000000000000815250600f0190506040518091039020604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050602082825160208401885afa9250829350505050919050565b6020604051908101604052806001906020820280388339808201915050905050905600a165627a7a7230582045929ac687d517c3ebd528cadb03cc0b63bcace7a9c7c6c14e5e591e52099d400029
==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: updateRegistry()
PC address: 1384
Estimated Gas Usage: 19669 - 131198
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:276

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: updateRegistry()
PC address: 1811
Estimated Gas Usage: 19669 - 131198
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:279

newRegistry.addressOf(CONTRACT_REGISTRY)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ConverterUpgrader
Function name: updateRegistry()
PC address: 1811
Estimated Gas Usage: 19669 - 131198
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:279

newRegistry.addressOf(CONTRACT_REGISTRY)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: updateRegistry()
PC address: 1811
Estimated Gas Usage: 19669 - 131198
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:279

newRegistry.addressOf(CONTRACT_REGISTRY)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: updateRegistry()
PC address: 2013
Estimated Gas Usage: 19669 - 131198
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:282

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: updateRegistry()
PC address: 2052
Estimated Gas Usage: 19669 - 131198
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:282

prevRegistry = registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: updateRegistry()
PC address: 2105
Estimated Gas Usage: 19669 - 131198
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:282

prevRegistry = registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: updateRegistry()
PC address: 2117
Estimated Gas Usage: 19669 - 131198
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:285

registry = newRegistry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: updateRegistry()
PC address: 2170
Estimated Gas Usage: 19669 - 131198
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:285

registry = newRegistry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 3137
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:359

converter.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 3137
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:359

converter.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 3137
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:359

converter.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 3348
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:365

converter.token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 3348
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:365

converter.token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 3348
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:365

converter.token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 3348
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:365

converter.token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 3348
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:365

converter.token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 3348
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:365

converter.token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 3532
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:367

anchor.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 3532
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:367

anchor.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 3532
Estimated Gas Usage: 45388 - 877932
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:367

anchor.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 3532
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:367

anchor.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 3532
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:367

anchor.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 3532
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:367

anchor.owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 3774
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:368

converter.transferTokenOwnership(newConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 3774
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:368

converter.transferTokenOwnership(newConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 3774
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:368

converter.transferTokenOwnership(newConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 3774
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:368

converter.transferTokenOwnership(newConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 3774
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:368

converter.transferTokenOwnership(newConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 3774
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:368

converter.transferTokenOwnership(newConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 3898
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:369

newConverter.acceptAnchorOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 3898
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:369

newConverter.acceptAnchorOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 3898
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:369

newConverter.acceptAnchorOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 3898
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:369

newConverter.acceptAnchorOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 3898
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:369

newConverter.acceptAnchorOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 3898
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:369

newConverter.acceptAnchorOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 4078
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:372

converter.transferOwnership(prevOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 4078
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:372

converter.transferOwnership(prevOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 4078
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:372

converter.transferOwnership(prevOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 4078
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:372

converter.transferOwnership(prevOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 4078
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:372

converter.transferOwnership(prevOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 4078
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:372

converter.transferOwnership(prevOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 4257
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:373

newConverter.transferOwnership(prevOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 4257
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:373

newConverter.transferOwnership(prevOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 4257
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:373

newConverter.transferOwnership(prevOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 4257
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:373

newConverter.transferOwnership(prevOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 4257
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:373

newConverter.transferOwnership(prevOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 4257
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:373

newConverter.transferOwnership(prevOwner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 4855
Estimated Gas Usage: 46133 - 879288
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:302

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 4855
Estimated Gas Usage: 44536 - 877308
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:302

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 4855
Estimated Gas Usage: 45398 - 877942
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:302

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: updateRegistry()
PC address: 5005
Estimated Gas Usage: 19669 - 131198
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:302

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: updateRegistry(), txdata: 0x49d10b64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 5005
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:302

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 5005
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:302

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 5005
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:302

registry.addressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 5171
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:380

_oldConverter.acceptOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 5171
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:380

_oldConverter.acceptOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 5171
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:380

_oldConverter.acceptOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 5171
Estimated Gas Usage: 46133 - 879288
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:380

_oldConverter.acceptOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 5171
Estimated Gas Usage: 44536 - 877308
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:380

_oldConverter.acceptOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 5171
Estimated Gas Usage: 45398 - 877942
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:380

_oldConverter.acceptOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 5399
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:386

_oldConverter.token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 5399
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:386

_oldConverter.token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 5399
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:386

_oldConverter.token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 5560
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:387

_oldConverter.maxConversionFee()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 5560
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:387

_oldConverter.maxConversionFee()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 5560
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:387

_oldConverter.maxConversionFee()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 5721
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:388

_oldConverter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 5721
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:388

_oldConverter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 5721
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:388

_oldConverter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 5900
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:394

_oldConverter.converterType()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 5900
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:394

_oldConverter.converterType()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 5900
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:394

_oldConverter.converterType()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 6061
Estimated Gas Usage: 46133 - 879288
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:400

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 6061
Estimated Gas Usage: 44536 - 877308
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:400

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 6061
Estimated Gas Usage: 45398 - 877942
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:400

registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 6305
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:400

converterFactory.createConverter(newType, anchor, registry, maxConversionFee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 6305
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:400

converterFactory.createConverter(newType, anchor, registry, maxConversionFee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 6305
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:400

converterFactory.createConverter(newType, anchor, registry, maxConversionFee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 6305
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:400

converterFactory.createConverter(newType, anchor, registry, maxConversionFee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 6305
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:400

converterFactory.createConverter(newType, anchor, registry, maxConversionFee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 6305
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:400

converterFactory.createConverter(newType, anchor, registry, maxConversionFee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 6466
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:402

converter.acceptOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 6466
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:402

converter.acceptOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 6466
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:402

converter.acceptOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 6466
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:402

converter.acceptOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 6466
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:402

converter.acceptOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 6466
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:402

converter.acceptOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 6610
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:410

_oldConverter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 6610
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:410

_oldConverter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 6610
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:410

_oldConverter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 6610
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:410

_oldConverter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 6610
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:410

_oldConverter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 6610
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:410

_oldConverter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 6807
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:413

_oldConverter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 6807
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:413

_oldConverter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 6807
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:413

_oldConverter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 6807
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:413

_oldConverter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 6807
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:413

_oldConverter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 6807
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:413

_oldConverter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 7023
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:414

_oldConverter.connectors(reserveAddress)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 7023
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:414

_oldConverter.connectors(reserveAddress)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 7023
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:414

_oldConverter.connectors(reserveAddress)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 7023
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:414

_oldConverter.connectors(reserveAddress)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 7023
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:414

_oldConverter.connectors(reserveAddress)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 7023
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:414

_oldConverter.connectors(reserveAddress)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 7395
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:418

_newConverter.addReserve(IERC20Token(ETH_RESERVE_ADDRESS), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 7395
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:418

_newConverter.addReserve(IERC20Token(ETH_RESERVE_ADDRESS), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 7395
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:418

_newConverter.addReserve(IERC20Token(ETH_RESERVE_ADDRESS), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 7395
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:418

_newConverter.addReserve(IERC20Token(ETH_RESERVE_ADDRESS), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 7395
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:418

_newConverter.addReserve(IERC20Token(ETH_RESERVE_ADDRESS), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 7395
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:418

_newConverter.addReserve(IERC20Token(ETH_RESERVE_ADDRESS), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 7427
Estimated Gas Usage: 46133 - 879288
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:421

etherToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 7427
Estimated Gas Usage: 44536 - 877308
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:421

etherToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 7427
Estimated Gas Usage: 45398 - 877942
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:421

etherToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 7705
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:422

_newConverter.addReserve(IERC20Token(ETH_RESERVE_ADDRESS), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 7705
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:422

_newConverter.addReserve(IERC20Token(ETH_RESERVE_ADDRESS), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 7705
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:422

_newConverter.addReserve(IERC20Token(ETH_RESERVE_ADDRESS), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 7705
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:422

_newConverter.addReserve(IERC20Token(ETH_RESERVE_ADDRESS), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 7705
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:422

_newConverter.addReserve(IERC20Token(ETH_RESERVE_ADDRESS), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 7705
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:422

_newConverter.addReserve(IERC20Token(ETH_RESERVE_ADDRESS), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 7909
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:426

_newConverter.addReserve(IERC20Token(reserveAddress), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 7909
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:426

_newConverter.addReserve(IERC20Token(reserveAddress), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 7909
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:426

_newConverter.addReserve(IERC20Token(reserveAddress), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 7909
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:426

_newConverter.addReserve(IERC20Token(reserveAddress), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 7909
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:426

_newConverter.addReserve(IERC20Token(reserveAddress), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 7909
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:426

_newConverter.addReserve(IERC20Token(reserveAddress), weight)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 8058
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:433

_oldConverter.conversionFee()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 8058
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:433

_oldConverter.conversionFee()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 8058
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:433

_oldConverter.conversionFee()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 8058
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:433

_oldConverter.conversionFee()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 8058
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:433

_oldConverter.conversionFee()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 8058
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:433

_oldConverter.conversionFee()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 8242
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:434

_newConverter.setConversionFee(conversionFee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 8242
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:434

_newConverter.setConversionFee(conversionFee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 8242
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:434

_newConverter.setConversionFee(conversionFee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 8242
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:434

_newConverter.setConversionFee(conversionFee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 8242
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:434

_newConverter.setConversionFee(conversionFee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 8242
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:434

_newConverter.setConversionFee(conversionFee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 8379
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:442

_oldConverter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 8379
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:442

_oldConverter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 8379
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:442

_oldConverter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 8379
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:442

_oldConverter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 8379
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:442

_oldConverter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 8379
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:442

_oldConverter.connectorTokenCount()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 8576
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:445

_oldConverter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 8576
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:445

_oldConverter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 8576
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:445

_oldConverter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 8576
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:445

_oldConverter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 8576
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:445

_oldConverter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 8576
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:445

_oldConverter.connectorTokens(i)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 8864
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:448

_oldConverter.withdrawETH(address(_newConverter))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 8864
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:448

_oldConverter.withdrawETH(address(_newConverter))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 8864
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:448

_oldConverter.withdrawETH(address(_newConverter))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 8864
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:448

_oldConverter.withdrawETH(address(_newConverter))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 8864
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:448

_oldConverter.withdrawETH(address(_newConverter))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 8864
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:448

_oldConverter.withdrawETH(address(_newConverter))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 8896
Estimated Gas Usage: 46133 - 879288
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:451

etherToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 8896
Estimated Gas Usage: 44536 - 877308
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:451

etherToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 8896
Estimated Gas Usage: 45398 - 877942
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:451

etherToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 8982
Estimated Gas Usage: 46133 - 879288
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:452

etherToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 8982
Estimated Gas Usage: 44536 - 877308
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:452

etherToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 8982
Estimated Gas Usage: 45398 - 877942
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:452

etherToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 9168
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:452

etherToken.balanceOf(_oldConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010108010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 9168
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:452

etherToken.balanceOf(_oldConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010201010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 9168
Estimated Gas Usage: 45388 - 877932
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:452

etherToken.balanceOf(_oldConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 9168
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:452

etherToken.balanceOf(_oldConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 9168
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:452

etherToken.balanceOf(_oldConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 9168
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:452

etherToken.balanceOf(_oldConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 9260
Estimated Gas Usage: 46133 - 879288
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:453

etherToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010401010101010102010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 9260
Estimated Gas Usage: 44536 - 877308
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:453

etherToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010801010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 9260
Estimated Gas Usage: 45398 - 877942
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:453

etherToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 9478
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:453

_oldConverter.withdrawTokens(etherToken, address(this), reserveBalance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 9478
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:453

_oldConverter.withdrawTokens(etherToken, address(this), reserveBalance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 9478
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:453

_oldConverter.withdrawTokens(etherToken, address(this), reserveBalance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010401010101010102010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 9478
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:453

_oldConverter.withdrawTokens(etherToken, address(this), reserveBalance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010801010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 9505
Estimated Gas Usage: 46133 - 879288
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:454

etherToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 9699
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:454

etherToken.withdrawTo(address(_newConverter), reserveBalance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010108010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 9699
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:454

etherToken.withdrawTo(address(_newConverter), reserveBalance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 9886
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:459

connector.balanceOf(_oldConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 9886
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:459

connector.balanceOf(_oldConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 9886
Estimated Gas Usage: 45359 - 878184
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:459

connector.balanceOf(_oldConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 9886
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:459

connector.balanceOf(_oldConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 9886
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:459

connector.balanceOf(_oldConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 9886
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:459

connector.balanceOf(_oldConverter)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 10162
Estimated Gas Usage: 46133 - 879288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:460

_oldConverter.withdrawTokens(connector, address(_newConverter), reserveBalance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 10162
Estimated Gas Usage: 44536 - 877308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:460

_oldConverter.withdrawTokens(connector, address(_newConverter), reserveBalance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 10162
Estimated Gas Usage: 45398 - 877942
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:460

_oldConverter.withdrawTokens(connector, address(_newConverter), reserveBalance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(uint16)
PC address: 10162
Estimated Gas Usage: 46133 - 879288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:460

_oldConverter.withdrawTokens(connector, address(_newConverter), reserveBalance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(uint16), txdata: 0x90f58c96, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgrade(bytes32)
PC address: 10162
Estimated Gas Usage: 44536 - 877308
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:460

_oldConverter.withdrawTokens(connector, address(_newConverter), reserveBalance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, decoded_data: , value: 0x0
Caller: [ATTACKER], function: upgrade(bytes32), txdata: 0xbc444e13, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ConverterUpgrader
Function name: upgradeOld(address,bytes32)
PC address: 10162
Estimated Gas Usage: 45398 - 877942
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:460

_oldConverter.withdrawTokens(connector, address(_newConverter), reserveBalance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, decoded_data: , value: 0x0
Caller: [CREATOR], function: upgradeOld(address,bytes32), txdata: 0xf2cfed87efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0


time_used: 37179.84897494316 seconds
#@contract_info_time
0x9eed814b155cc52ea24d5b3d1dbfa07efc3ac742.sol:0.4.26:ConverterUpgrader:37179.84897494316:36100:60:36000
