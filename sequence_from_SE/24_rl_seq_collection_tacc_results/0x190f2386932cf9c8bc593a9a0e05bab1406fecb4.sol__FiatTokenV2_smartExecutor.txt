++++ 0x190f2386932cf9c8bc593a9a0e05bab1406fecb4.sol  :  0.4.24  :  FiatTokenV2 ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 6267
['constructor']:writes at the last depth:['1', '11', '0']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 86.95% coverage.
dynamic svars:['4', '5', '7', '3', '12', '13', '10', '9']
static svars:['1', '8', '2', '11', '0', '6']
Ending preprocessing.
preprocessing time(s): 102.07280492782593
contract coverage: 80.01%
name() is not reachable
symbol() is not reachable
currency() is not reachable
Function Reads: State variables read in conditions
	name():[]
	approve(address,uint256):['1', '3']
	totalSupply():[]
	unBlacklist(address):['2']
	transferFrom(address,address,uint256):['1', '3', '9', '10']
	removeMinter(address):['8']
	decimals():[]
	initialize(string,string,string,uint8,address,address,address,address):['8']
	masterMinter():[]
	unpause():['1']
	mint(address,uint256):['1', '12', '3', '13']
	burn(uint256):['1', '12', '3', '9', '11']
	configureMinter(address,uint256):['1', '8']
	updateSymbol(string):['0']
	updatePauser(address):['0']
	paused():[]
	balanceOf(address):[]
	pause():['1']
	updateName(string):['0']
	minterAllowance(address):[]
	owner():[]
	symbol():[]
	pauser():[]
	transfer(address,uint256):['1', '3', '9']
	updateMasterMinter(address):['0']
	isMinter(address):[]
	updateBlacklister(address):['0']
	blacklister():[]
	updateCurrency(string):['0']
	allowance(address,address):[]
	currency():[]
	transferOwnership(address):['0']
	blacklist(address):['2']
	isBlacklisted(address):[]
Function Writes: State variables written
	unpause():['1']
	unBlacklist(address):['3']
	removeMinter(address):['12', '13']
	pause():['1']
	updatePauser(address):['1']
	configureMinter(address,uint256):['12', '13']
	approve(address,uint256):['10']
	updateMasterMinter(address):['8']
	updateBlacklister(address):['2']
	updateSymbol(string):['5']
	blacklist(address):['3']
	burn(uint256):['11', '9']
	updateName(string):['4']
	transferOwnership(address):['0']
	updateCurrency(string):['7']
	mint(address,uint256):['11']
============================
iteration:3
targets:['removeMinter(address)', 'burn(uint256)', 'mint(address,uint256)', 'configureMinter(address,uint256)', 'unBlacklist(address)', 'blacklist(address)', 'unpause()', 'pause()', 'name()', 'symbol()', 'currency()', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'updateCurrency(string)', 'approve(address,uint256)', 'updateName(string)', 'updateSymbol(string)']
['updatePauser(address)']:writes at the last depth:['1']
['approve(address,uint256)']:writes at the last depth:['10']
['updateMasterMinter(address)']:writes at the last depth:['8']
['updateBlacklister(address)']:writes at the last depth:['2']
['transferOwnership(address)']:writes at the last depth:['0']
['updateSymbol(string)']:writes at the last depth:['5']
['updateName(string)']:writes at the last depth:['4']
['updateSymbol(string)']:writes at the last depth:['5']
['updateSymbol(string)']:writes at the last depth:['5']
['updateName(string)']:writes at the last depth:['4']
['updateCurrency(string)']:writes at the last depth:['7']
['updateName(string)']:writes at the last depth:['4']
['updateSymbol(string)']:writes at the last depth:['5']
['updateSymbol(string)']:writes at the last depth:['5']
['updateCurrency(string)']:writes at the last depth:['7']
['updateName(string)']:writes at the last depth:['4']
['updateCurrency(string)']:writes at the last depth:['7']
['updateName(string)']:writes at the last depth:['4']
['transfer(address,uint256)']:writes at the last depth:['9']
['updateCurrency(string)']:writes at the last depth:['7']
['updateCurrency(string)']:writes at the last depth:['7']
['transferFrom(address,address,uint256)']:writes at the last depth:['9', '10']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
['initialize(string,string,string,uint8,address,address,address,address)']:writes at the last depth:['5', '1', '7', '2', '4', '6', '8', '0']
contract coverage: 90.23%
============================
iteration:4
['initialize(string,string,string,uint8,address,address,address,address)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'pause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'removeMinter(address)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'updatePauser(address)']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'approve(address,uint256)']:writes at the last depth:['10']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateMasterMinter(address)']:writes at the last depth:['8']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateBlacklister(address)']:writes at the last depth:['2']
['initialize(string,string,string,uint8,address,address,address,address)', 'configureMinter(address,uint256)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'blacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateSymbol(string)']:writes at the last depth:['5']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateName(string)']:writes at the last depth:['4']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateSymbol(string)']:writes at the last depth:['5']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateSymbol(string)']:writes at the last depth:['5']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateName(string)']:writes at the last depth:['4']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateSymbol(string)']:writes at the last depth:['5']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateName(string)']:writes at the last depth:['4']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)']:writes at the last depth:['7']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateSymbol(string)']:writes at the last depth:['5']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateName(string)']:writes at the last depth:['4']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateName(string)']:writes at the last depth:['4']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)']:writes at the last depth:['7']
['initialize(string,string,string,uint8,address,address,address,address)', 'transfer(address,uint256)']:writes at the last depth:['9']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)']:writes at the last depth:['7']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)']:writes at the last depth:['7']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)']:writes at the last depth:['7']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['10', '9']
contract coverage: 90.23%
============================
iteration:5
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'pause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'removeMinter(address)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updatePauser(address)']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)']:writes at the last depth:['10']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateMasterMinter(address)']:writes at the last depth:['8']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateBlacklister(address)']:writes at the last depth:['2']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'configureMinter(address,uint256)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'blacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateName(string)']:writes at the last depth:['4']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)']:writes at the last depth:['7']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)']:writes at the last depth:['7']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)']:writes at the last depth:['7']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)']:writes at the last depth:['7']
contract coverage: 90.23%
============================
iteration:6
contract coverage: 90.23%
============================
iteration:7
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'pause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'updatePauser(address)']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'approve(address,uint256)']:writes at the last depth:['10']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'updateBlacklister(address)']:writes at the last depth:['2']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'blacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'transferOwnership(address)']:writes at the last depth:['0']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'updateSymbol(string)']:writes at the last depth:['5']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'updateSymbol(string)']:writes at the last depth:['5']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'updateName(string)']:writes at the last depth:['4']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'updateName(string)']:writes at the last depth:['4']
contract coverage: 90.23%
============================
iteration:8
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'updatePauser(address)']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'updateMasterMinter(address)']:writes at the last depth:['8']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'configureMinter(address,uint256)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'blacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'updateName(string)']:writes at the last depth:['4']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'updateCurrency(string)']:writes at the last depth:['7']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'updateName(string)']:writes at the last depth:['4']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'updateCurrency(string)']:writes at the last depth:['7']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'updateCurrency(string)']:writes at the last depth:['7']
contract coverage: 90.23%
============================
iteration:9
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'removeMinter(address)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'approve(address,uint256)']:writes at the last depth:['10']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateCurrency(string)', 'configureMinter(address,uint256)']:writes at the last depth:['13', '12']
contract coverage: 90.23%
============================
iteration:10
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateName(string)', 'blacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'updateName(string)', 'updateCurrency(string)']:writes at the last depth:['7']
contract coverage: 90.47%
============================
iteration:11
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'blacklist(address)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'blacklist(address)', 'blacklist(address)']:writes at the last depth:['3']
contract coverage: 90.47%
============================
iteration:12
contract coverage: 90.47%
============================
iteration:13
contract coverage: 90.47%
============================
iteration:14
contract coverage: 90.47%
============================
iteration:15
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'unBlacklist(address)']:writes at the last depth:['3']
contract coverage: 90.47%
============================
iteration:16
contract coverage: 90.47%
============================
iteration:17
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'removeMinter(address)', 'removeMinter(address)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'removeMinter(address)', 'approve(address,uint256)']:writes at the last depth:['10']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'removeMinter(address)', 'updateMasterMinter(address)']:writes at the last depth:['8']
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'removeMinter(address)', 'updateCurrency(string)']:writes at the last depth:['7']
contract coverage: 90.52%
============================
iteration:18
['initialize(string,string,string,uint8,address,address,address,address)', 'transferFrom(address,address,uint256)', 'pause()', 'transferOwnership(address)']:writes at the last depth:['0']
contract coverage: 90.52%
============================
iteration:19
contract coverage: 90.52%
============================
iteration:20
contract coverage: 90.52%
============================
iteration:21
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'pause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'removeMinter(address)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updatePauser(address)']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'approve(address,uint256)']:writes at the last depth:['10']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateMasterMinter(address)']:writes at the last depth:['8']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateBlacklister(address)']:writes at the last depth:['2']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'configureMinter(address,uint256)']:writes at the last depth:['13', '12']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'blacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'transferOwnership(address)']:writes at the last depth:['0']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateSymbol(string)']:writes at the last depth:['5']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateName(string)']:writes at the last depth:['4']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateSymbol(string)']:writes at the last depth:['5']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateSymbol(string)']:writes at the last depth:['5']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateName(string)']:writes at the last depth:['4']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateSymbol(string)']:writes at the last depth:['5']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateName(string)']:writes at the last depth:['4']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateCurrency(string)']:writes at the last depth:['7']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateSymbol(string)']:writes at the last depth:['5']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateName(string)']:writes at the last depth:['4']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateName(string)']:writes at the last depth:['4']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateCurrency(string)']:writes at the last depth:['7']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'transfer(address,uint256)']:writes at the last depth:['9']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateCurrency(string)']:writes at the last depth:['7']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateCurrency(string)']:writes at the last depth:['7']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateCurrency(string)']:writes at the last depth:['7']
contract coverage: 90.52%
============================
iteration:22
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateCurrency(string)', 'unpause()']:writes at the last depth:['1']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateCurrency(string)', 'unBlacklist(address)']:writes at the last depth:['3']
['initialize(string,string,string,uint8,address,address,address,address)', 'updateCurrency(string)', 'updateCurrency(string)', 'removeMinter(address)']:writes at the last depth:['13', '12']
contract coverage: 90.52%
============================
iteration:23
contract coverage: 90.52%
============================
iteration:24
contract coverage: 90.52%
============================
iteration:25
contract coverage: 90.52%
============================
iteration:26
contract coverage: 90.52%
============================
iteration:27
contract coverage: 90.52%
============================
iteration:28
contract coverage: 90.52%
============================
iteration:29
contract coverage: 90.52%
============================
iteration:30
contract coverage: 90.52%
============================
iteration:31
contract coverage: 90.52%
============================
iteration:32
contract coverage: 90.52%
============================
iteration:33
contract coverage: 90.52%
============================
iteration:34
contract coverage: 90.52%
============================
iteration:35
contract coverage: 90.52%
============================
iteration:36
contract coverage: 90.52%
============================
iteration:37
contract coverage: 90.52%
============================
iteration:38
contract coverage: 90.52%
============================
iteration:39
contract coverage: 90.52%
============================
iteration:40
contract coverage: 90.52%
============================
iteration:41
contract coverage: 90.52%
============================
iteration:42
contract coverage: 90.52%
============================
iteration:43
contract coverage: 90.52%
============================
iteration:44
contract coverage: 90.52%
============================
iteration:45
contract coverage: 90.52%
============================
iteration:46
contract coverage: 90.52%
============================
iteration:47
contract coverage: 90.52%
============================
iteration:48
contract coverage: 90.52%
============================
iteration:49
contract coverage: 90.52%
============================
iteration:50
contract coverage: 90.52%
============================
iteration:51
contract coverage: 90.52%
============================
iteration:52
contract coverage: 90.52%
============================
iteration:53
contract coverage: 90.52%
============================
iteration:54
contract coverage: 90.52%
============================
iteration:55
contract coverage: 90.52%
============================
iteration:56
contract coverage: 90.52%
============================
iteration:57
contract coverage: 90.52%
============================
iteration:58
contract coverage: 90.52%
============================
iteration:59
contract coverage: 90.52%
============================
iteration:60
contract coverage: 90.52%
============================
iteration:61
contract coverage: 90.52%
============================
iteration:62
contract coverage: 90.52%
============================
iteration:63
contract coverage: 90.52%
============================
iteration:64
contract coverage: 90.52%
============================
iteration:65
contract coverage: 90.52%
============================
iteration:66
contract coverage: 90.52%
============================
iteration:67
contract coverage: 90.52%
============================
iteration:68
contract coverage: 90.52%
============================
iteration:69
contract coverage: 90.52%
============================
iteration:70
contract coverage: 90.52%
============================
iteration:71
contract coverage: 90.52%
============================
iteration:72
contract coverage: 90.52%
============================
iteration:73
contract coverage: 90.52%
============================
iteration:74
contract coverage: 90.52%
============================
iteration:75
contract coverage: 90.52%
============================
iteration:76
contract coverage: 90.52%
============================
iteration:77
contract coverage: 90.52%
============================
iteration:78
contract coverage: 90.52%
============================
iteration:79
contract coverage: 90.52%
============================
iteration:80
contract coverage: 90.52%
============================
iteration:81
contract coverage: 90.52%
============================
iteration:82
contract coverage: 90.52%
============================
iteration:83
contract coverage: 90.52%
============================
iteration:84
contract coverage: 90.52%
============================
iteration:85
contract coverage: 90.52%
============================
iteration:86
contract coverage: 90.52%
============================
iteration:87
contract coverage: 90.52%
============================
iteration:88
contract coverage: 90.52%
============================
iteration:89
contract coverage: 90.52%
============================
iteration:90
contract coverage: 90.52%
============================
iteration:91
contract coverage: 90.52%
============================
iteration:92
contract coverage: 90.52%
============================
iteration:93
contract coverage: 90.52%
============================
iteration:94
contract coverage: 90.52%
============================
iteration:95
contract coverage: 90.52%
============================
iteration:96
contract coverage: 90.52%
============================
iteration:97
contract coverage: 90.52%
============================
iteration:98
contract coverage: 90.52%
============================
iteration:99
contract coverage: 90.52%
============================
iteration:100
contract coverage: 90.52%
============================
iteration:101
contract coverage: 90.52%
============================
iteration:102
contract coverage: 90.52%
============================
iteration:103
contract coverage: 90.52%
============================
iteration:104
contract coverage: 90.52%
============================
iteration:105
contract coverage: 90.52%
============================
iteration:106
contract coverage: 90.52%
============================
iteration:107
contract coverage: 90.52%
============================
iteration:108
contract coverage: 90.52%
============================
iteration:109
contract coverage: 90.52%
============================
iteration:110
contract coverage: 90.52%
============================
iteration:111
contract coverage: 90.52%
============================
iteration:112
contract coverage: 90.52%
============================
iteration:113
contract coverage: 90.52%
============================
iteration:114
contract coverage: 90.52%
============================
iteration:115
contract coverage: 90.52%
============================
iteration:116
contract coverage: 90.52%
============================
iteration:117
contract coverage: 90.52%
============================
iteration:118
contract coverage: 90.52%
============================
iteration:119
contract coverage: 90.52%
============================
iteration:120
contract coverage: 90.52%
============================
iteration:121
contract coverage: 90.52%
============================
iteration:122
contract coverage: 90.52%
============================
iteration:123
contract coverage: 90.52%
============================
iteration:124
contract coverage: 90.52%
============================
iteration:125
contract coverage: 90.52%
============================
iteration:126
contract coverage: 90.52%
============================
iteration:127
contract coverage: 90.52%
============================
iteration:128
contract coverage: 90.52%
============================
iteration:129
contract coverage: 90.52%
============================
iteration:130
contract coverage: 90.52%
============================
iteration:131
contract coverage: 90.52%
============================
iteration:132
contract coverage: 90.52%
============================
iteration:133
contract coverage: 90.52%
============================
iteration:134
contract coverage: 90.52%
============================
iteration:135
contract coverage: 90.52%
============================
iteration:136
contract coverage: 90.52%
============================
iteration:137
contract coverage: 90.52%
============================
iteration:138
contract coverage: 90.52%
============================
iteration:139
contract coverage: 90.52%
============================
iteration:140
contract coverage: 90.52%
============================
iteration:141
contract coverage: 90.52%
============================
iteration:142
contract coverage: 90.52%
============================
iteration:143
contract coverage: 90.52%
============================
iteration:144
contract coverage: 90.52%
============================
iteration:145
contract coverage: 90.52%
============================
iteration:146
contract coverage: 90.52%
============================
iteration:147
contract coverage: 90.52%
============================
iteration:148
contract coverage: 90.52%
============================
iteration:149
contract coverage: 90.52%
============================
iteration:150
contract coverage: 90.52%
============================
iteration:151
contract coverage: 90.52%
============================
iteration:152
contract coverage: 90.52%
============================
iteration:153
contract coverage: 90.52%
============================
iteration:154
contract coverage: 90.52%
============================
iteration:155
contract coverage: 90.52%
============================
iteration:156
contract coverage: 90.52%
============================
iteration:157
contract coverage: 90.52%
============================
iteration:158
contract coverage: 90.52%
============================
iteration:159
contract coverage: 90.52%
#@statespace
4531 nodes, 4530 edges, 65706 total states
#@coverage
Achieved 1.12% coverage for code: 60806040526000600160146101000a81548160ff0219169083151502179055506000600b5561003c33610041640100000000026401000000009004565b610084565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61339c80620000946000396000f3006080604052600436106101ac576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101b1578063095ea7b31461024157806318160ddd146102a65780631a895266146102d157806323b872dd146103145780633092afd514610399578063313ce567146103f45780633357162b1461042557806335d99f35146105a75780633f4ba83a146105fe57806340c10f191461061557806342966c681461067a5780634e44d956146106a7578063537f53121461070c578063554bab3c146107755780635c975abb146107b857806370a08231146107e75780638456cb591461083e57806384da92a7146108555780638a6db9c3146108be5780638da5cb5b1461091557806395d89b411461096c5780639fd0506d146109fc578063a9059cbb14610a53578063aa20e1e414610ab8578063aa271e1a14610afb578063ad38bf2214610b56578063bd10243014610b99578063d6a7e16914610bf0578063dd62ed3e14610c59578063e5a6b10f14610cd0578063f2fde38b14610d60578063f9f92be414610da3578063fe575a8714610de6575b600080fd5b3480156101bd57600080fd5b506101c6610e41565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102065780820151818401526020810190506101eb565b50505050905090810190601f1680156102335780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024d57600080fd5b5061028c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610edf565b604051808215151515815260200191505060405180910390f35b3480156102b257600080fd5b506102bb6110af565b6040518082815260200191505060405180910390f35b3480156102dd57600080fd5b50610312600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110b9565b005b34801561032057600080fd5b5061037f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111b3565b604051808215151515815260200191505060405180910390f35b3480156103a557600080fd5b506103da600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116b2565b604051808215151515815260200191505060405180910390f35b34801561040057600080fd5b506104096117f9565b604051808260ff1660ff16815260200191505060405180910390f35b34801561043157600080fd5b506105a5600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061180c565b005b3480156105b357600080fd5b506105bc611a69565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561060a57600080fd5b50610613611a8f565b005b34801561062157600080fd5b50610660600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b34565b604051808215151515815260200191505060405180910390f35b34801561068657600080fd5b506106a560048036038101908080359060200190929190505050611ed6565b005b3480156106b357600080fd5b506106f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061213d565b604051808215151515815260200191505060405180910390f35b34801561071857600080fd5b50610773600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506122ab565b005b34801561078157600080fd5b506107b6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123a2565b005b3480156107c457600080fd5b506107cd6124c8565b604051808215151515815260200191505060405180910390f35b3480156107f357600080fd5b50610828600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124db565b6040518082815260200191505060405180910390f35b34801561084a57600080fd5b50610853612524565b005b34801561086157600080fd5b506108bc600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506125c8565b005b3480156108ca57600080fd5b506108ff600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126bf565b6040518082815260200191505060405180910390f35b34801561092157600080fd5b5061092a612708565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561097857600080fd5b50610981612731565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109c15780820151818401526020810190506109a6565b50505050905090810190601f1680156109ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a0857600080fd5b50610a116127cf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a5f57600080fd5b50610a9e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506127f5565b604051808215151515815260200191505060405180910390f35b348015610ac457600080fd5b50610af9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612af8565b005b348015610b0757600080fd5b50610b3c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c1e565b604051808215151515815260200191505060405180910390f35b348015610b6257600080fd5b50610b97600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c74565b005b348015610ba557600080fd5b50610bae612d9a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bfc57600080fd5b50610c57600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612dc0565b005b348015610c6557600080fd5b50610cba600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612eb7565b6040518082815260200191505060405180910390f35b348015610cdc57600080fd5b50610ce5612f3e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d25578082015181840152602081019050610d0a565b50505050905090810190601f168015610d525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610d6c57600080fd5b50610da1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612fdc565b005b348015610daf57600080fd5b50610de4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613103565b005b348015610df257600080fd5b50610e27600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506131fd565b604051808215151515815260200191505060405180910390f35b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ed75780601f10610eac57610100808354040283529160200191610ed7565b820191906000526020600020905b815481529060010190602001808311610eba57829003601f168201915b505050505081565b6000600160149054906101000a900460ff16151515610efd57600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610f5d57600080fd5b8360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610fbd57600080fd5b83600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925866040518082815260200191505060405180910390a360019250505092915050565b6000600b54905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561111557600080fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f117e3210bb9aa7d9baff172026820255c6f6c30ba8999d1c2fd88e2848137c4e60405160405180910390a250565b6000600160149054906101000a900460ff161515156111d157600080fd5b8260001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561123157600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561129157600080fd5b8560001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156112f157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415151561132d57600080fd5b600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054851115151561137b57600080fd5b600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054851115151561140657600080fd5b61145885600960008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461325390919063ffffffff16565b600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114ed85600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461326c90919063ffffffff16565b600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115bf85600a60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461325390919063ffffffff16565b600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a3600193505050509392505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561171057600080fd5b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a260019050919050565b600660009054906101000a900460ff1681565b600860149054906101000a900460ff1615151561182857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561186457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156118a057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156118dc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561191857600080fd5b876004908051906020019061192e9291906132cb565b5086600590805190602001906119459291906132cb565b50856007908051906020019061195c9291906132cb565b5084600660006101000a81548160ff021916908360ff16021790555083600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611a4481613288565b6001600860146101000a81548160ff0219169083151502179055505050505050505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611aeb57600080fd5b6000600160146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600080600160149054906101000a900460ff16151515611b5357600080fd5b60011515600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611bb257600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611c1257600080fd5b8460001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611c7257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515611cae57600080fd5b600085111515611cbd57600080fd5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250828511151515611d0e57600080fd5b611d2385600b5461326c90919063ffffffff16565b600b81905550611d7b85600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461326c90919063ffffffff16565b600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611dd1858461325390919063ffffffff16565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8876040518082815260200191505060405180910390a38573ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a36001935050505092915050565b6000600160149054906101000a900460ff16151515611ef457600080fd5b60011515600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611f5357600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611fb357600080fd5b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915060008311151561200457600080fd5b82821015151561201357600080fd5b61202883600b5461325390919063ffffffff16565b600b81905550612041838361325390919063ffffffff16565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5846040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3505050565b6000600160149054906101000a900460ff1615151561215b57600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121b757600080fd5b6001600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f46980fca912ef9bcdbd36877427b6b90e860769f604e89c0e67720cece530d20836040518082815260200191505060405180910390a26001905092915050565b6122b3612708565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122ec57600080fd5b80600590805190602001906123029291906132cb565b507f57c940aa14b51ea5f96b7a2bea757ce355d996e2c5d7a3c68aff1c75a326269b816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561236557808201518184015260208101905061234a565b50505050905090810190601f1680156123925780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b6123aa612708565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156123e357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561241f57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a60460405160405180910390a250565b600160149054906101000a900460ff1681565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561258057600080fd5b60018060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6125d0612708565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561260957600080fd5b806004908051906020019061261f9291906132cb565b507f4737457377f528cc8afd815f73ecb8b05df80d047dbffc41c17750a4033592bc816040518080602001828103825283818151815260200191508051906020019080838360005b83811015612682578082015181840152602081019050612667565b50505050905090810190601f1680156126af5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127c75780601f1061279c576101008083540402835291602001916127c7565b820191906000526020600020905b8154815290600101906020018083116127aa57829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160149054906101000a900460ff1615151561281357600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561287357600080fd5b8360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156128d357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561290f57600080fd5b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054841115151561295d57600080fd5b6129af84600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461325390919063ffffffff16565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612a4484600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461326c90919063ffffffff16565b600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b612b00612708565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b3957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612b7557600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdb66dfa9c6b8f5226fe9aac7e51897ae8ee94ac31dc70bb6c9900b2574b707e660405160405180910390a250565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b612c7c612708565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612cb557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612cf157600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fc67398012c111ce95ecb7429b933096c977380ee6c421175a71a4a4c6c88c06e60405160405180910390a250565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612dc8612708565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e0157600080fd5b8060079080519060200190612e179291906132cb565b507f090744aade2513ca7dfecbcc083ae790107fadabd457ea5161de4ef1bc2819bf816040518080602001828103825283818151815260200191508051906020019080838360005b83811015612e7a578082015181840152602081019050612e5f565b50505050905090810190601f168015612ea75780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612fd45780601f10612fa957610100808354040283529160200191612fd4565b820191906000526020600020905b815481529060010190602001808311612fb757829003601f168201915b505050505081565b612fe4612708565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561301d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561305957600080fd5b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0613082612708565b82604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a161310081613288565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561315f57600080fd5b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b85560405160405180910390a250565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600082821115151561326157fe5b818303905092915050565b6000818301905082811015151561327f57fe5b80905092915050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061330c57805160ff191683800117855561333a565b8280016001018555821561333a579182015b8281111561333957825182559160200191906001019061331e565b5b509050613347919061334b565b5090565b61336d91905b80821115613369576000816000905550600101613351565b5090565b905600a165627a7a723058207542c316272bb2e2ebeaeecd3b650d1dc653169ec027c58ecc9ebe02ba99040b0029
#@coverage
Achieved 90.52% coverage for code: 6080604052600436106101ac576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101b1578063095ea7b31461024157806318160ddd146102a65780631a895266146102d157806323b872dd146103145780633092afd514610399578063313ce567146103f45780633357162b1461042557806335d99f35146105a75780633f4ba83a146105fe57806340c10f191461061557806342966c681461067a5780634e44d956146106a7578063537f53121461070c578063554bab3c146107755780635c975abb146107b857806370a08231146107e75780638456cb591461083e57806384da92a7146108555780638a6db9c3146108be5780638da5cb5b1461091557806395d89b411461096c5780639fd0506d146109fc578063a9059cbb14610a53578063aa20e1e414610ab8578063aa271e1a14610afb578063ad38bf2214610b56578063bd10243014610b99578063d6a7e16914610bf0578063dd62ed3e14610c59578063e5a6b10f14610cd0578063f2fde38b14610d60578063f9f92be414610da3578063fe575a8714610de6575b600080fd5b3480156101bd57600080fd5b506101c6610e41565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102065780820151818401526020810190506101eb565b50505050905090810190601f1680156102335780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024d57600080fd5b5061028c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610edf565b604051808215151515815260200191505060405180910390f35b3480156102b257600080fd5b506102bb6110af565b6040518082815260200191505060405180910390f35b3480156102dd57600080fd5b50610312600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110b9565b005b34801561032057600080fd5b5061037f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111b3565b604051808215151515815260200191505060405180910390f35b3480156103a557600080fd5b506103da600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116b2565b604051808215151515815260200191505060405180910390f35b34801561040057600080fd5b506104096117f9565b604051808260ff1660ff16815260200191505060405180910390f35b34801561043157600080fd5b506105a5600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061180c565b005b3480156105b357600080fd5b506105bc611a69565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561060a57600080fd5b50610613611a8f565b005b34801561062157600080fd5b50610660600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b34565b604051808215151515815260200191505060405180910390f35b34801561068657600080fd5b506106a560048036038101908080359060200190929190505050611ed6565b005b3480156106b357600080fd5b506106f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061213d565b604051808215151515815260200191505060405180910390f35b34801561071857600080fd5b50610773600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506122ab565b005b34801561078157600080fd5b506107b6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123a2565b005b3480156107c457600080fd5b506107cd6124c8565b604051808215151515815260200191505060405180910390f35b3480156107f357600080fd5b50610828600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124db565b6040518082815260200191505060405180910390f35b34801561084a57600080fd5b50610853612524565b005b34801561086157600080fd5b506108bc600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506125c8565b005b3480156108ca57600080fd5b506108ff600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126bf565b6040518082815260200191505060405180910390f35b34801561092157600080fd5b5061092a612708565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561097857600080fd5b50610981612731565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109c15780820151818401526020810190506109a6565b50505050905090810190601f1680156109ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a0857600080fd5b50610a116127cf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a5f57600080fd5b50610a9e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506127f5565b604051808215151515815260200191505060405180910390f35b348015610ac457600080fd5b50610af9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612af8565b005b348015610b0757600080fd5b50610b3c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c1e565b604051808215151515815260200191505060405180910390f35b348015610b6257600080fd5b50610b97600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c74565b005b348015610ba557600080fd5b50610bae612d9a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bfc57600080fd5b50610c57600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612dc0565b005b348015610c6557600080fd5b50610cba600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612eb7565b6040518082815260200191505060405180910390f35b348015610cdc57600080fd5b50610ce5612f3e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d25578082015181840152602081019050610d0a565b50505050905090810190601f168015610d525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610d6c57600080fd5b50610da1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612fdc565b005b348015610daf57600080fd5b50610de4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613103565b005b348015610df257600080fd5b50610e27600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506131fd565b604051808215151515815260200191505060405180910390f35b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ed75780601f10610eac57610100808354040283529160200191610ed7565b820191906000526020600020905b815481529060010190602001808311610eba57829003601f168201915b505050505081565b6000600160149054906101000a900460ff16151515610efd57600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610f5d57600080fd5b8360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610fbd57600080fd5b83600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925866040518082815260200191505060405180910390a360019250505092915050565b6000600b54905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561111557600080fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f117e3210bb9aa7d9baff172026820255c6f6c30ba8999d1c2fd88e2848137c4e60405160405180910390a250565b6000600160149054906101000a900460ff161515156111d157600080fd5b8260001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561123157600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561129157600080fd5b8560001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156112f157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415151561132d57600080fd5b600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054851115151561137b57600080fd5b600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054851115151561140657600080fd5b61145885600960008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461325390919063ffffffff16565b600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114ed85600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461326c90919063ffffffff16565b600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115bf85600a60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461325390919063ffffffff16565b600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a3600193505050509392505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561171057600080fd5b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a260019050919050565b600660009054906101000a900460ff1681565b600860149054906101000a900460ff1615151561182857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561186457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156118a057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156118dc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561191857600080fd5b876004908051906020019061192e9291906132cb565b5086600590805190602001906119459291906132cb565b50856007908051906020019061195c9291906132cb565b5084600660006101000a81548160ff021916908360ff16021790555083600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611a4481613288565b6001600860146101000a81548160ff0219169083151502179055505050505050505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611aeb57600080fd5b6000600160146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600080600160149054906101000a900460ff16151515611b5357600080fd5b60011515600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611bb257600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611c1257600080fd5b8460001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611c7257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515611cae57600080fd5b600085111515611cbd57600080fd5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250828511151515611d0e57600080fd5b611d2385600b5461326c90919063ffffffff16565b600b81905550611d7b85600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461326c90919063ffffffff16565b600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611dd1858461325390919063ffffffff16565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8876040518082815260200191505060405180910390a38573ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a36001935050505092915050565b6000600160149054906101000a900460ff16151515611ef457600080fd5b60011515600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611f5357600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611fb357600080fd5b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915060008311151561200457600080fd5b82821015151561201357600080fd5b61202883600b5461325390919063ffffffff16565b600b81905550612041838361325390919063ffffffff16565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5846040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3505050565b6000600160149054906101000a900460ff1615151561215b57600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121b757600080fd5b6001600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f46980fca912ef9bcdbd36877427b6b90e860769f604e89c0e67720cece530d20836040518082815260200191505060405180910390a26001905092915050565b6122b3612708565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122ec57600080fd5b80600590805190602001906123029291906132cb565b507f57c940aa14b51ea5f96b7a2bea757ce355d996e2c5d7a3c68aff1c75a326269b816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561236557808201518184015260208101905061234a565b50505050905090810190601f1680156123925780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b6123aa612708565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156123e357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561241f57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a60460405160405180910390a250565b600160149054906101000a900460ff1681565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561258057600080fd5b60018060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6125d0612708565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561260957600080fd5b806004908051906020019061261f9291906132cb565b507f4737457377f528cc8afd815f73ecb8b05df80d047dbffc41c17750a4033592bc816040518080602001828103825283818151815260200191508051906020019080838360005b83811015612682578082015181840152602081019050612667565b50505050905090810190601f1680156126af5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127c75780601f1061279c576101008083540402835291602001916127c7565b820191906000526020600020905b8154815290600101906020018083116127aa57829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160149054906101000a900460ff1615151561281357600080fd5b3360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561287357600080fd5b8360001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156128d357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561290f57600080fd5b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054841115151561295d57600080fd5b6129af84600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461325390919063ffffffff16565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612a4484600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461326c90919063ffffffff16565b600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b612b00612708565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b3957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612b7557600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdb66dfa9c6b8f5226fe9aac7e51897ae8ee94ac31dc70bb6c9900b2574b707e660405160405180910390a250565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b612c7c612708565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612cb557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612cf157600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fc67398012c111ce95ecb7429b933096c977380ee6c421175a71a4a4c6c88c06e60405160405180910390a250565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612dc8612708565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e0157600080fd5b8060079080519060200190612e179291906132cb565b507f090744aade2513ca7dfecbcc083ae790107fadabd457ea5161de4ef1bc2819bf816040518080602001828103825283818151815260200191508051906020019080838360005b83811015612e7a578082015181840152602081019050612e5f565b50505050905090810190601f168015612ea75780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612fd45780601f10612fa957610100808354040283529160200191612fd4565b820191906000526020600020905b815481529060010190602001808311612fb757829003601f168201915b505050505081565b612fe4612708565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561301d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561305957600080fd5b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0613082612708565b82604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a161310081613288565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561315f57600080fd5b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b85560405160405180910390a250565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600082821115151561326157fe5b818303905092915050565b6000818301905082811015151561327f57fe5b80905092915050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061330c57805160ff191683800117855561333a565b8280016001018555821561333a579182015b8281111561333957825182559160200191906001019061331e565b5b509050613347919061334b565b5090565b61336d91905b80821115613369576000816000905550600101613351565b5090565b905600a165627a7a723058207542c316272bb2e2ebeaeecd3b650d1dc653169ec027c58ecc9ebe02ba99040b0029
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV2
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 1101
Estimated Gas Usage: 86311 - 397599
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x190f2386932cf9c8bc593a9a0e05bab1406fecb4.sol:253

function initialize(
        string _name,
        string _symbol,
        string _currency,
        uint8 _decimals,
        address _masterMinter,
        address _pauser,
        address _blacklister,
        address _owner
    ) public {
        require(!initialized);
        require(_masterMinter != address(0));
        require(_pauser != address(0));
        require(_blacklister != address(0));
        require(_owner != address(0));

        name = _name;
        symbol = _symbol;
        currency = _currency;
        decimals = _decimals;
        masterMinter = _masterMinter;
        pauser = _pauser;
        blacklister = _blacklister;
        setOwner(_owner);
        initialized = true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdcd44545041041115404800103fffffffffffffffffffffffffffffffffffffff6913f69319994671dcc429bd4564855b4fa7f6de460125d5cca0e989400000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004010201010208080101400801100402010102040000000000000000000000008004408080010401010810800202800202040180000000000000000000000000010101010201010101040204010401400101010100000000000000000000000002, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV2
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 1107
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x190f2386932cf9c8bc593a9a0e05bab1406fecb4.sol:253

function initialize(
        string _name,
        string _symbol,
        string _currency,
        uint8 _decimals,
        address _masterMinter,
        address _pauser,
        address _blacklister,
        address _owner
    ) public {
        require(!initialized);
        require(_masterMinter != address(0));
        require(_pauser != address(0));
        require(_blacklister != address(0));
        require(_owner != address(0));

        name = _name;
        symbol = _symbol;
        currency = _currency;
        decimals = _decimals;
        masterMinter = _masterMinter;
        pauser = _pauser;
        blacklister = _blacklister;
        setOwner(_owner);
        initialized = true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x51283151d410cd4c0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162bc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc2000000000000000000000000000000000000000000000000000000000000004000000000000000000000000001010140202002080101040104010108028001010000000000000000000000000440010004008001040108200110010108011001000000000000000000000000010101010101010101010101040401010101010100000000000000000000000004, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV2
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 1116
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x190f2386932cf9c8bc593a9a0e05bab1406fecb4.sol:253

function initialize(
        string _name,
        string _symbol,
        string _currency,
        uint8 _decimals,
        address _masterMinter,
        address _pauser,
        address _blacklister,
        address _owner
    ) public {
        require(!initialized);
        require(_masterMinter != address(0));
        require(_pauser != address(0));
        require(_blacklister != address(0));
        require(_owner != address(0));

        name = _name;
        symbol = _symbol;
        currency = _currency;
        decimals = _decimals;
        masterMinter = _masterMinter;
        pauser = _pauser;
        blacklister = _blacklister;
        setOwner(_owner);
        initialized = true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162b9000000000000000000000000000000000000000000000000000000000000000c1d5a1dffffffff1fffffffffffffffffffffffffffffffffffffffffffffffe8000000000000000000000000000000000000000000000000000000000000de6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010102010110800120010101010201400000000000000000000000000110200102010101010201401002400101080101000000000000000000000000010201010101010140010101010101010101010100000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV2
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 1122
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x190f2386932cf9c8bc593a9a0e05bab1406fecb4.sol:253

function initialize(
        string _name,
        string _symbol,
        string _currency,
        uint8 _decimals,
        address _masterMinter,
        address _pauser,
        address _blacklister,
        address _owner
    ) public {
        require(!initialized);
        require(_masterMinter != address(0));
        require(_pauser != address(0));
        require(_blacklister != address(0));
        require(_owner != address(0));

        name = _name;
        symbol = _symbol;
        currency = _currency;
        decimals = _decimals;
        masterMinter = _masterMinter;
        pauser = _pauser;
        blacklister = _blacklister;
        setOwner(_owner);
        initialized = true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x82404, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162bc09ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffca0000000000000400000000000000000000000000000000000000000000000008078a8d8a92806c8429440c0ac70d304e0a882ea7446601ab8bc50c440000b21000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001040100100802010404020104010102010101200000000000000000000000000101010102021040010101080201020210081020000000000000000000000000010101020101010101010102010102400101012000000000000000000000000002, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV2
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 1177
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x190f2386932cf9c8bc593a9a0e05bab1406fecb4.sol:253

function initialize(
        string _name,
        string _symbol,
        string _currency,
        uint8 _decimals,
        address _masterMinter,
        address _pauser,
        address _blacklister,
        address _owner
    ) public {
        require(!initialized);
        require(_masterMinter != address(0));
        require(_pauser != address(0));
        require(_blacklister != address(0));
        require(_owner != address(0));

        name = _name;
        symbol = _symbol;
        currency = _currency;
        decimals = _decimals;
        masterMinter = _masterMinter;
        pauser = _pauser;
        blacklister = _blacklister;
        setOwner(_owner);
        initialized = true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162bc0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008100240010101020102400101010801010102020000000000000000000000000101010104022001100102010101010410020180000000000000000000000000010102010101040108010101010101010101800100000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV2
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 1186
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x190f2386932cf9c8bc593a9a0e05bab1406fecb4.sol:253

function initialize(
        string _name,
        string _symbol,
        string _currency,
        uint8 _decimals,
        address _masterMinter,
        address _pauser,
        address _blacklister,
        address _owner
    ) public {
        require(!initialized);
        require(_masterMinter != address(0));
        require(_pauser != address(0));
        require(_blacklister != address(0));
        require(_owner != address(0));

        name = _name;
        symbol = _symbol;
        currency = _currency;
        decimals = _decimals;
        masterMinter = _masterMinter;
        pauser = _pauser;
        blacklister = _blacklister;
        setOwner(_owner);
        initialized = true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x45422668401048000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162bffffffffffffffffffffffff0000000000000000000000000000000000000000fffffffffffffffffffffffbffffffffffffffffffffffffffffffffffffffec9ddca10100000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002404001020110014020010104108008018040020000000000000000000000001040020108042040011004010880018010040204000000000000000000000000808040100480040104400802408010808001080200000000000000000000000004, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV2
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 1192
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x190f2386932cf9c8bc593a9a0e05bab1406fecb4.sol:253

function initialize(
        string _name,
        string _symbol,
        string _currency,
        uint8 _decimals,
        address _masterMinter,
        address _pauser,
        address _blacklister,
        address _owner
    ) public {
        require(!initialized);
        require(_masterMinter != address(0));
        require(_pauser != address(0));
        require(_blacklister != address(0));
        require(_owner != address(0));

        name = _name;
        symbol = _symbol;
        currency = _currency;
        decimals = _decimals;
        masterMinter = _masterMinter;
        pauser = _pauser;
        blacklister = _blacklister;
        setOwner(_owner);
        initialized = true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162b8000000000000000000000000000000000000000000000000000000000001ffc80009000280e31074601fffffffffffffffffffffffffffffffffffffffffffc845a8c76c6574a60e0b8e8400000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001012001010101010802400210020402012008100000000000000000000000002002021002010810020102010420010202081001000000000000000000000000010101010410010101010208010101020102020100000000000000000000000004, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV2
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 1262
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x190f2386932cf9c8bc593a9a0e05bab1406fecb4.sol:253

function initialize(
        string _name,
        string _symbol,
        string _currency,
        uint8 _decimals,
        address _masterMinter,
        address _pauser,
        address _blacklister,
        address _owner
    ) public {
        require(!initialized);
        require(_masterMinter != address(0));
        require(_pauser != address(0));
        require(_blacklister != address(0));
        require(_owner != address(0));

        name = _name;
        symbol = _symbol;
        currency = _currency;
        decimals = _decimals;
        masterMinter = _masterMinter;
        pauser = _pauser;
        blacklister = _blacklister;
        setOwner(_owner);
        initialized = true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162bffffffffffffffffffffffff00000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcaffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0201011004010201400440024010201010022004ffffffffffffffffffffffff0110041004020408400820400104012040010801ffffffffffffffffffffffff0101020410100180010101020101010201010101ffffffffffffffffffffffff01, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV2
Function name: updateSymbol(string)
PC address: 1844
Estimated Gas Usage: 19071 - 84169
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x190f2386932cf9c8bc593a9a0e05bab1406fecb4.sol:406

function updateSymbol(string newSymbol) onlyOwner public {
        symbol = newSymbol;
        emit SymbolChanged(newSymbol);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateSymbol(string), txdata: 0x537f5312ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV2
Function name: updateName(string)
PC address: 2173
Estimated Gas Usage: 19181 - 84279
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x190f2386932cf9c8bc593a9a0e05bab1406fecb4.sol:411

function updateName(string newName) onlyOwner public {
        name = newName;
        emit NameChanged(newName);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateName(string), txdata: 0x84da92a7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FiatTokenV2
Function name: updateCurrency(string)
PC address: 3096
Estimated Gas Usage: 19401 - 84499
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x190f2386932cf9c8bc593a9a0e05bab1406fecb4.sol:416

function updateCurrency(string newCurrency) onlyOwner public {
        currency = newCurrency;
        emit CurrencyChanged(newCurrency);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: updateCurrency(string), txdata: 0xd6a7e169ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: FiatTokenV2
Function name: updateSymbol(string)
PC address: 13018
Estimated Gas Usage: 18917 - 83216
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162bc0000000000000000000000000000000000000000000000000000000008000008000000000000000000000000000000000000000000000002000000000000000c000000000004e00004f044000000000000051000fffffffffffffffffffffe20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800801010802020220010101400101010802010100000000000000000000000001200240040110020404010108022002020101080000000000000000000000000208010401021002400180010102080101080808000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: updateSymbol(string), txdata: 0x537f531280, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: FiatTokenV2
Function name: updateName(string)
PC address: 13018
Estimated Gas Usage: 19181 - 84279
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162b80000000878000000000000000000000000000000000000000000000000000df80000000000000000000000000000000000000000000000000000000000000018840a0204000ec20400804886210ca5ce02ac8bc2aea200080200004087a20120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010210800140100101048001081001020801010200000000000000000000000001100102021008014001100208800240010808010000000000000000000000000808010101080480040180028040400804100101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateName(string), txdata: 0x84da92a780, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: FiatTokenV2
Function name: updateCurrency(string)
PC address: 13018
Estimated Gas Usage: 19126 - 83237
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162b800000000010000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa9fffffffa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea9f4d4f81048522032799da2c7890fafc086d2f013ab1183f980000000000002b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010202100220010440100120012002010101010200000000000000000000000020010108200101020401010201200101040208010000000000000000000000002002040201010820020208204001200101010104000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: updateCurrency(string), txdata: 0xd6a7e169, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: FiatTokenV2
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 13071
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162b80004ec0040000000000000000000000000000000000000000000000000000008032c416800ffffffffffffffffffffffffffffffffffffffffffffffffffff2800008000000200004000000000000000000000000010000000000000000044b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008020101010101010101010101800101010101100000000000000000000000000201080102010180010102010102040202102020000000000000000000000000010101010101010101010101010180010101010100000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: FiatTokenV2
Function name: initialize(string,string,string,uint8,address,address,address,address)
PC address: 13085
Estimated Gas Usage: 76171 - 347273
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x401c05405fa5f9280, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: initialize(string,string,string,uint8,address,address,address,address), txdata: 0x3357162b8c0200000000000000000000000000000000000000000000000000000000000080000000000000010000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000049000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001080401802001020102040102400202200101400000000000000000000000002080801040010201020101020208080201010108000000000000000000000000010101010201010110010101010201020101012000000000000000000000000020, value: 0x0


time_used: 36062.237864494324 seconds
#@contract_info_time
0x190f2386932cf9c8bc593a9a0e05bab1406fecb4.sol:0.4.24:FiatTokenV2:36062.237864494324:36100:60:36000
