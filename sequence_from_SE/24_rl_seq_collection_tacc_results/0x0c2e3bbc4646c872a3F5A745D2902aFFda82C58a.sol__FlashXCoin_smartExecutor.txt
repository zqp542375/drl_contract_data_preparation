++++ 0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol  :  0.4.25  :  FlashXCoin ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 4668
['constructor']:writes at the last depth:['1', '5', '6', '7', '8', '10', '11', '12', '13', '9', '2']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 65.66% coverage.
dynamic svars:['2', '3', '4']
static svars:['8', '10', '13', '5', '7', '6', '9', '1', '12', '11']
Ending preprocessing.
preprocessing time(s): 102.42232537269592
contract coverage: 93.14%
fallback is not reachable
Function Reads: State variables read in conditions
	name():[]
	approve(address,uint256):['3']
	add(uint256):['1', '8']
	totalSupply():[]
	transferFrom(address,address,uint256):['2', '3']
	deadline():[]
	withdraw(uint256):['1']
	decimals():[]
	burn(uint256):['1', '2']
	round2():[]
	balanceOf(address):[]
	requestMinimum():[]
	DistributeAirdrop(address,uint256):['1', '9', '8']
	round1():[]
	progress0drop():[]
	withdrawAll():['1']
	symbol():[]
	finishDistribution():['1', '13']
	updateTokensPerEth(uint256):['1']
	transfer(address,uint256):[]
	getTokens():['13']
	Claimed(address):[]
	distributionFinished():[]
	getTokenBalance(address,address):[]
	tokensPerEth():[]
	allowance(address,address):[]
	withdrawForeignTokens(address):[]
	target0drop():[]
	totalDistributed():[]
	transferOwnership(address):[]
	DistributeAirdropMultiple(address[],uint256):[]
Function Writes: State variables written
	approve(address,uint256):['3']
	add(uint256):['8']
	updateTokensPerEth(uint256):['10']
	finishDistribution():['13']
============================
iteration:3
targets:['fallback', 'DistributeAirdrop(address,uint256)', 'getTokens()', 'finishDistribution()', 'approve(address,uint256)']
['add(uint256)']:writes at the last depth:['8']
['withdraw(uint256)']:writes at the last depth:[]
['approve(address,uint256)']:writes at the last depth:['3']
['withdrawAll()']:writes at the last depth:[]
['updateTokensPerEth(uint256)']:writes at the last depth:['10']
['finishDistribution()']:writes at the last depth:['13']
['approve(address,uint256)']:writes at the last depth:['3']
['transferOwnership(address)']:writes at the last depth:['1']
['getTokenBalance(address,address)']:writes at the last depth:[]
['burn(uint256)']:writes at the last depth:['8', '9', '2']
['transfer(address,uint256)']:writes at the last depth:['2']
['withdrawForeignTokens(address)']:writes at the last depth:[]
['fallback']:writes at the last depth:['13', '9', '2']
['fallback']:writes at the last depth:['13', '9', '2']
['fallback']:writes at the last depth:['13', '9', '2']
['fallback']:writes at the last depth:['13', '9', '2']
['transferFrom(address,address,uint256)']:writes at the last depth:['3', '2']
['fallback']:writes at the last depth:['13', '9', '2']
['fallback']:writes at the last depth:['4', '9', '2', '12', '13']
['getTokens()']:writes at the last depth:['13', '9', '2']
['getTokens()']:writes at the last depth:['13', '9', '2']
['getTokens()']:writes at the last depth:['13', '9', '2']
['getTokens()']:writes at the last depth:['13', '9', '2']
['getTokens()']:writes at the last depth:['13', '9', '2']
['getTokens()']:writes at the last depth:['13', '9', '2']
['getTokens()']:writes at the last depth:['4', '9', '2', '12', '13']
['fallback']:writes at the last depth:['13', '9', '2']
['fallback']:writes at the last depth:['13', '9', '2']
['fallback']:writes at the last depth:['13', '9', '2']
['fallback']:writes at the last depth:['13', '9', '2']
['fallback']:writes at the last depth:['13', '9', '2']
['fallback']:writes at the last depth:['13', '9', '2']
['fallback']:writes at the last depth:['4', '9', '2', '12', '13']
contract coverage: 93.29%
============================
iteration:4
['fallback', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'withdraw(uint256)']:writes at the last depth:[]
['fallback', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['fallback', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferOwnership(address)']:writes at the last depth:['1']
['fallback', 'getTokenBalance(address,address)']:writes at the last depth:[]
['fallback', 'burn(uint256)']:writes at the last depth:['8', '9', '2']
['fallback', 'transfer(address,uint256)']:writes at the last depth:['2']
['fallback', 'withdrawForeignTokens(address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)']:writes at the last depth:['3', '2']
contract coverage: 93.29%
============================
iteration:5
['fallback', 'transferFrom(address,address,uint256)', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'transferFrom(address,address,uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['1']
['fallback', 'transferFrom(address,address,uint256)', 'getTokenBalance(address,address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'burn(uint256)']:writes at the last depth:['8', '9', '2']
['fallback', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['2']
['fallback', 'transferFrom(address,address,uint256)', 'withdrawForeignTokens(address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['3', '2']
contract coverage: 93.29%
============================
iteration:6
['fallback', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['fallback', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferOwnership(address)']:writes at the last depth:['1']
['fallback', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'getTokenBalance(address,address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'burn(uint256)']:writes at the last depth:['8', '9', '2']
['fallback', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['2']
['fallback', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'withdrawForeignTokens(address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['3', '2']
contract coverage: 93.29%
============================
iteration:7
['fallback', 'transferFrom(address,address,uint256)', 'withdrawForeignTokens(address)', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'transferFrom(address,address,uint256)', 'withdrawForeignTokens(address)', 'withdraw(uint256)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'withdrawForeignTokens(address)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'withdrawForeignTokens(address)', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'withdrawForeignTokens(address)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['fallback', 'transferFrom(address,address,uint256)', 'withdrawForeignTokens(address)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'withdrawForeignTokens(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['fallback', 'transferFrom(address,address,uint256)', 'withdrawForeignTokens(address)', 'getTokenBalance(address,address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'withdrawForeignTokens(address)', 'burn(uint256)']:writes at the last depth:['8', '9', '2']
['fallback', 'transferFrom(address,address,uint256)', 'withdrawForeignTokens(address)', 'transfer(address,uint256)']:writes at the last depth:['2']
['fallback', 'transferFrom(address,address,uint256)', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'withdrawForeignTokens(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['3', '2']
contract coverage: 93.29%
============================
iteration:8
['fallback', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['fallback', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'getTokenBalance(address,address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'burn(uint256)']:writes at the last depth:['8', '9', '2']
['fallback', 'transferFrom(address,address,uint256)', 'transfer(address,uint256)', 'withdrawForeignTokens(address)']:writes at the last depth:[]
contract coverage: 93.29%
============================
iteration:9
['fallback', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['fallback', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'transferOwnership(address)']:writes at the last depth:['1']
['fallback', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'getTokenBalance(address,address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'burn(uint256)']:writes at the last depth:['8', '9', '2']
['fallback', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'transfer(address,uint256)']:writes at the last depth:['2']
['fallback', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'withdrawForeignTokens(address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'burn(uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['3', '2']
contract coverage: 93.29%
============================
iteration:10
['fallback', 'transferFrom(address,address,uint256)', 'getTokenBalance(address,address)', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'transferFrom(address,address,uint256)', 'getTokenBalance(address,address)', 'withdraw(uint256)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'getTokenBalance(address,address)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'getTokenBalance(address,address)', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'getTokenBalance(address,address)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['fallback', 'transferFrom(address,address,uint256)', 'getTokenBalance(address,address)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'getTokenBalance(address,address)', 'transferOwnership(address)']:writes at the last depth:['1']
['fallback', 'transferFrom(address,address,uint256)', 'getTokenBalance(address,address)', 'getTokenBalance(address,address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'getTokenBalance(address,address)', 'burn(uint256)']:writes at the last depth:['8', '9', '2']
['fallback', 'transferFrom(address,address,uint256)', 'getTokenBalance(address,address)', 'transfer(address,uint256)']:writes at the last depth:['2']
['fallback', 'transferFrom(address,address,uint256)', 'getTokenBalance(address,address)', 'withdrawForeignTokens(address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'getTokenBalance(address,address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['3', '2']
contract coverage: 93.29%
============================
iteration:11
['fallback', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'withdraw(uint256)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['fallback', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['fallback', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'getTokenBalance(address,address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'transfer(address,uint256)']:writes at the last depth:['2']
['fallback', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'withdrawForeignTokens(address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'transferOwnership(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['3', '2']
contract coverage: 93.40%
============================
iteration:12
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['1']
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'getTokenBalance(address,address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'burn(uint256)']:writes at the last depth:['8', '9', '2']
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['2']
contract coverage: 93.40%
============================
iteration:13
['fallback', 'transferFrom(address,address,uint256)', 'updateTokensPerEth(uint256)', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'transferFrom(address,address,uint256)', 'updateTokensPerEth(uint256)', 'withdraw(uint256)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'updateTokensPerEth(uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'updateTokensPerEth(uint256)', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'updateTokensPerEth(uint256)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['fallback', 'transferFrom(address,address,uint256)', 'updateTokensPerEth(uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'updateTokensPerEth(uint256)', 'getTokenBalance(address,address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'updateTokensPerEth(uint256)', 'burn(uint256)']:writes at the last depth:['8', '9', '2']
['fallback', 'transferFrom(address,address,uint256)', 'updateTokensPerEth(uint256)', 'transfer(address,uint256)']:writes at the last depth:['2']
['fallback', 'transferFrom(address,address,uint256)', 'updateTokensPerEth(uint256)', 'withdrawForeignTokens(address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'updateTokensPerEth(uint256)', 'transferFrom(address,address,uint256)']:writes at the last depth:['3', '2']
contract coverage: 93.40%
============================
iteration:14
['fallback', 'transferFrom(address,address,uint256)', 'withdrawAll()', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'transferFrom(address,address,uint256)', 'withdrawAll()', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'withdrawAll()', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['fallback', 'transferFrom(address,address,uint256)', 'withdrawAll()', 'transferOwnership(address)']:writes at the last depth:['1']
['fallback', 'transferFrom(address,address,uint256)', 'withdrawAll()', 'getTokenBalance(address,address)']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'withdrawAll()', 'burn(uint256)']:writes at the last depth:['8', '9', '2']
['fallback', 'transferFrom(address,address,uint256)', 'withdrawAll()', 'transfer(address,uint256)']:writes at the last depth:['2']
contract coverage: 93.40%
============================
iteration:15
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'transferOwnership(address)']:writes at the last depth:['1']
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'burn(uint256)']:writes at the last depth:['8', '9', '2']
['fallback', 'transferFrom(address,address,uint256)', 'approve(address,uint256)', 'transfer(address,uint256)']:writes at the last depth:['2']
contract coverage: 93.40%
============================
iteration:16
['fallback', 'transferFrom(address,address,uint256)', 'withdraw(uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'withdraw(uint256)', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'withdraw(uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'withdraw(uint256)', 'transferOwnership(address)']:writes at the last depth:['1']
contract coverage: 93.40%
============================
iteration:17
['fallback', 'transferFrom(address,address,uint256)', 'add(uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'transferFrom(address,address,uint256)', 'add(uint256)', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'transferFrom(address,address,uint256)', 'add(uint256)', 'approve(address,uint256)']:writes at the last depth:['3']
contract coverage: 93.40%
============================
iteration:18
['fallback', 'withdrawForeignTokens(address)', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'withdrawForeignTokens(address)', 'withdraw(uint256)']:writes at the last depth:[]
['fallback', 'withdrawForeignTokens(address)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'withdrawForeignTokens(address)', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'withdrawForeignTokens(address)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['fallback', 'withdrawForeignTokens(address)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'withdrawForeignTokens(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['fallback', 'withdrawForeignTokens(address)', 'getTokenBalance(address,address)']:writes at the last depth:[]
['fallback', 'withdrawForeignTokens(address)', 'burn(uint256)']:writes at the last depth:['8', '9', '2']
['fallback', 'withdrawForeignTokens(address)', 'transfer(address,uint256)']:writes at the last depth:['2']
['fallback', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)']:writes at the last depth:[]
['fallback', 'withdrawForeignTokens(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['3', '2']
contract coverage: 93.40%
============================
iteration:19
['fallback', 'withdrawForeignTokens(address)', 'transferFrom(address,address,uint256)', 'withdrawAll()']:writes at the last depth:[]
contract coverage: 93.40%
============================
iteration:20
['fallback', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'add(uint256)']:writes at the last depth:['8']
['fallback', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'withdraw(uint256)']:writes at the last depth:[]
['fallback', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'withdrawAll()']:writes at the last depth:[]
['fallback', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'updateTokensPerEth(uint256)']:writes at the last depth:['10']
['fallback', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'approve(address,uint256)']:writes at the last depth:['3']
['fallback', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'transferOwnership(address)']:writes at the last depth:['1']
['fallback', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'getTokenBalance(address,address)']:writes at the last depth:[]
['fallback', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'burn(uint256)']:writes at the last depth:['8', '9', '2']
['fallback', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'transfer(address,uint256)']:writes at the last depth:['2']
['fallback', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)']:writes at the last depth:[]
['fallback', 'withdrawForeignTokens(address)', 'withdrawForeignTokens(address)', 'transferFrom(address,address,uint256)']:writes at the last depth:['3', '2']
contract coverage: 93.40%
============================
iteration:21
contract coverage: 93.40%
============================
iteration:22
contract coverage: 93.40%
============================
iteration:23
contract coverage: 93.40%
============================
iteration:24
contract coverage: 93.40%
============================
iteration:25
contract coverage: 93.40%
============================
iteration:26
contract coverage: 93.40%
============================
iteration:27
contract coverage: 93.40%
============================
iteration:28
contract coverage: 93.40%
============================
iteration:29
contract coverage: 93.40%
============================
iteration:30
contract coverage: 93.40%
============================
iteration:31
contract coverage: 93.40%
============================
iteration:32
contract coverage: 93.40%
============================
iteration:33
contract coverage: 93.40%
============================
iteration:34
contract coverage: 93.40%
============================
iteration:35
contract coverage: 93.40%
============================
iteration:36
contract coverage: 93.40%
============================
iteration:37
contract coverage: 93.40%
============================
iteration:38
contract coverage: 93.40%
============================
iteration:39
contract coverage: 93.40%
============================
iteration:40
contract coverage: 93.40%
============================
iteration:41
contract coverage: 93.40%
============================
iteration:42
contract coverage: 93.40%
============================
iteration:43
contract coverage: 93.40%
============================
iteration:44
contract coverage: 93.40%
============================
iteration:45
contract coverage: 93.40%
============================
iteration:46
contract coverage: 93.40%
============================
iteration:47
contract coverage: 93.40%
============================
iteration:48
contract coverage: 93.40%
============================
iteration:49
contract coverage: 93.40%
============================
iteration:50
contract coverage: 93.40%
============================
iteration:51
contract coverage: 93.40%
============================
iteration:52
contract coverage: 93.40%
============================
iteration:53
contract coverage: 93.40%
============================
iteration:54
contract coverage: 93.40%
============================
iteration:55
contract coverage: 93.40%
============================
iteration:56
contract coverage: 93.40%
============================
iteration:57
contract coverage: 93.40%
============================
iteration:58
contract coverage: 93.40%
============================
iteration:59
contract coverage: 93.40%
============================
iteration:60
contract coverage: 93.40%
============================
iteration:61
contract coverage: 93.40%
============================
iteration:62
contract coverage: 93.40%
============================
iteration:63
contract coverage: 93.40%
============================
iteration:64
contract coverage: 93.40%
============================
iteration:65
contract coverage: 93.40%
============================
iteration:66
contract coverage: 93.40%
============================
iteration:67
contract coverage: 93.40%
============================
iteration:68
contract coverage: 93.40%
============================
iteration:69
contract coverage: 93.40%
============================
iteration:70
contract coverage: 93.40%
============================
iteration:71
contract coverage: 93.40%
============================
iteration:72
contract coverage: 93.40%
#@statespace
5324 nodes, 5323 edges, 69894 total states
#@coverage
Achieved 6.37% coverage for code: 608060405233600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062015180420160055562015180420160065562015180420160075567016345785d8a0000600855655af3107a4000600a556317d78400600b556000600c556000600d60006101000a81548160ff021916908315150217905550348015620000ab57600080fd5b50600067016345785d8a0000905033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000137600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826200013f640100000000026401000000009004565b505062000309565b6000600d60009054906101000a900460ff161515156200015e57600080fd5b6200018382600954620002ec640100000000026200232a179091906401000000009004565b600981905550620001eb82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620002ec640100000000026200232a179091906401000000009004565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600081830190508281101515156200030057fe5b80905092915050565b6125e080620003196000396000f30060806040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610195578063095ea7b3146102255780631003e2d21461028a57806318160ddd146102b757806323b872dd146102e257806329dcb0cf146103675780632e1a7d4d14610392578063313ce567146103bf57806342966c68146103ea578063532b581c1461041757806370a082311461044257806374ff2324146104995780637809231c146104c4578063836e81801461051157806383afd6da1461053c578063853828b61461056757806395d89b411461057e5780639b1cbccc1461060e5780639ea407be1461063d578063a9059cbb1461066a578063aa6ca808146106cf578063b449c24d146106d9578063c108d54214610734578063c489744b14610763578063cbdd69b5146107da578063dd62ed3e14610805578063e58fc54c1461087c578063e6a092f5146108d7578063efca2eed14610902578063f2fde38b1461092d578063f3ccb40114610970575b6101936109b5565b005b3480156101a157600080fd5b506101aa610d4d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ea5780820151818401526020810190506101cf565b50505050905090810190601f1680156102175780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023157600080fd5b50610270600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d86565b604051808215151515815260200191505060405180910390f35b34801561029657600080fd5b506102b560048036038101908080359060200190929190505050610f14565b005b3480156102c357600080fd5b506102cc610fcb565b6040518082815260200191505060405180910390f35b3480156102ee57600080fd5b5061034d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fd1565b604051808215151515815260200191505060405180910390f35b34801561037357600080fd5b5061037c6113a7565b6040518082815260200191505060405180910390f35b34801561039e57600080fd5b506103bd600480360381019080803590602001909291905050506113ad565b005b3480156103cb57600080fd5b506103d461147b565b6040518082815260200191505060405180910390f35b3480156103f657600080fd5b5061041560048036038101908080359060200190929190505050611480565b005b34801561042357600080fd5b5061042c61164c565b6040518082815260200191505060405180910390f35b34801561044e57600080fd5b50610483600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611652565b6040518082815260200191505060405180910390f35b3480156104a557600080fd5b506104ae61169b565b6040518082815260200191505060405180910390f35b3480156104d057600080fd5b5061050f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116a6565b005b34801561051d57600080fd5b50610526611710565b6040518082815260200191505060405180910390f35b34801561054857600080fd5b50610551611716565b6040518082815260200191505060405180910390f35b34801561057357600080fd5b5061057c61171c565b005b34801561058a57600080fd5b50610593611805565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105d35780820151818401526020810190506105b8565b50505050905090810190601f1680156106005780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561061a57600080fd5b5061062361183e565b604051808215151515815260200191505060405180910390f35b34801561064957600080fd5b5061066860048036038101908080359060200190929190505050611906565b005b34801561067657600080fd5b506106b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506119a3565b604051808215151515815260200191505060405180910390f35b6106d76109b5565b005b3480156106e557600080fd5b5061071a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bde565b604051808215151515815260200191505060405180910390f35b34801561074057600080fd5b50610749611bfe565b604051808215151515815260200191505060405180910390f35b34801561076f57600080fd5b506107c4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c11565b6040518082815260200191505060405180910390f35b3480156107e657600080fd5b506107ef611cfc565b6040518082815260200191505060405180910390f35b34801561081157600080fd5b50610866600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d02565b6040518082815260200191505060405180910390f35b34801561088857600080fd5b506108bd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d89565b604051808215151515815260200191505060405180910390f35b3480156108e357600080fd5b506108ec611fce565b6040518082815260200191505060405180910390f35b34801561090e57600080fd5b50610917611fd4565b6040518082815260200191505060405180910390f35b34801561093957600080fd5b5061096e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fda565b005b34801561097c57600080fd5b506109b3600480360381019080803590602001908201803590602001919091929391929390803590602001909291905050506120b1565b005b600080600080600080600080600d60009054906101000a900460ff161515156109dd57600080fd5b60009750600096506000955067016345785d8a000094506706f05b59d3b200009350670de0b6b3a76400009250670de0b6b3a7640000610a2834600a5461216690919063ffffffff16565b811515610a3157fe5b049750339150662386f26fc100003410158015610a4f575060055442105b8015610a5c575060075442105b8015610a69575060065442105b15610ae757843410158015610a7d57508334105b15610a9957606460008902811515610a9157fe5b049550610ae2565b833410158015610aa857508234105b15610ac457606460008902811515610abc57fe5b049550610ae1565b8234101515610ae057606460008902811515610adc57fe5b0495505b5b5b610b71565b662386f26fc100003410158015610aff575060055442105b8015610b0c575060075442115b8015610b19575060065442105b15610b6b57833410158015610b2d57508234105b15610b4957606460008902811515610b4157fe5b049550610b66565b8234101515610b6557606460008902811515610b6157fe5b0495505b5b610b70565b600095505b5b85880196506000881415610c85576305f5e100905060001515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515148015610bea5750600b54600c5411155b15610c6957610bf9828261219e565b506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600c60008154809291906001019190505550610c80565b662386f26fc100003410151515610c7f57600080fd5b5b610d1a565b600088118015610c9c5750662386f26fc100003410155b15610d02576005544210158015610cb557506007544210155b8015610cc2575060065442105b15610cd757610cd1828961219e565b50610cfd565b8434101515610cf057610cea828861219e565b50610cfc565b610cfa828961219e565b505b5b610d19565b662386f26fc100003410151515610d1857600080fd5b5b5b600854600954101515610d43576001600d60006101000a81548160ff0219169083151502179055505b5050505050505050565b6040805190810160405280600b81526020017f466c6173685820436f696e00000000000000000000000000000000000000000081525081565b6000808214158015610e1557506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610e235760009050610f0e565b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f7257600080fd5b610f878260085461232a90919063ffffffff16565b9050806008819055507f90f1f758f0e2b40929b1fd48df7ebe10afc272a362e1f0d63a90b8b4715d799f826040518082815260200191505060405180910390a15050565b60085481565b6000606060048101600036905010151515610fe857fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561102457600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561107257600080fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111515156110fd57600080fd5b61114f83600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461234690919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061122183600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461234690919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112f383600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461232a90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60055481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561140b57600080fd5b819050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611476573d6000803e3d6000fd5b505050565b600881565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114de57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561152c57600080fd5b33905061158182600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461234690919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115d98260085461234690919063ffffffff16565b6008819055506115f48260095461234690919063ffffffff16565b6009819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b60065481565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b662386f26fc1000081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561170257600080fd5b61170c828261235f565b5050565b60075481565b600c5481565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561177b57600080fd5b3091508173ffffffffffffffffffffffffffffffffffffffff16319050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611800573d6000803e3d6000fd5b505050565b6040805190810160405280600481526020017f465358430000000000000000000000000000000000000000000000000000000081525081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561189c57600080fd5b600d60009054906101000a900460ff161515156118b857600080fd5b6001600d60006101000a81548160ff0219169083151502179055507f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc60405160405180910390a16001905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561196257600080fd5b80600a819055507ff7729fa834bbef70b6d3257c2317a562aa88b56c81b544814f93dc5963a2c003816040518082815260200191505060405180910390a150565b60006040600481016000369050101515156119ba57fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156119f657600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515611a4457600080fd5b611a9683600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461234690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b2b83600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461232a90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b60046020528060005260406000206000915054906101000a900460ff1681565b600d60009054906101000a900460ff1681565b60008060008491508173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611cb457600080fd5b505af1158015611cc8573d6000803e3d6000fd5b505050506040513d6020811015611cde57600080fd5b81019080805190602001909291905050509050809250505092915050565b600a5481565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611dea57600080fd5b8391508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611e8857600080fd5b505af1158015611e9c573d6000803e3d6000fd5b505050506040513d6020811015611eb257600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611f8a57600080fd5b505af1158015611f9e573d6000803e3d6000fd5b505050506040513d6020811015611fb457600080fd5b810190808051906020019092919050505092505050919050565b600b5481565b60095481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561203657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156120ae5780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561210f57600080fd5b600090505b8383905081101561216057612153848483818110151561213057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168361235f565b8080600101915050612114565b50505050565b6000808314156121795760009050612198565b818302905081838281151561218a57fe5b0414151561219457fe5b8090505b92915050565b6000600d60009054906101000a900460ff161515156121bc57600080fd5b6121d18260095461232a90919063ffffffff16565b60098190555061222982600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461232a90919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000818301905082811015151561233d57fe5b80905092915050565b600082821115151561235457fe5b818303905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156123bb57600080fd5b6000811115156123ca57600080fd5b6008546009541015156123dc57600080fd5b61242e81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461232a90919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506124868160095461232a90919063ffffffff16565b6009819055506008546009541015156124b5576001600d60006101000a81548160ff0219169083151502179055505b8173ffffffffffffffffffffffffffffffffffffffff167fada993ad066837289fe186cd37227aa338d27519a8a1547472ecb9831486d27282600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808381526020018281526020019250505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505600a165627a7a723058203b8255332a897483cca4109064d86a09cc9ab5fdb267072505be8f697ed8a80b0029
#@coverage
Achieved 93.40% coverage for code: 60806040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610195578063095ea7b3146102255780631003e2d21461028a57806318160ddd146102b757806323b872dd146102e257806329dcb0cf146103675780632e1a7d4d14610392578063313ce567146103bf57806342966c68146103ea578063532b581c1461041757806370a082311461044257806374ff2324146104995780637809231c146104c4578063836e81801461051157806383afd6da1461053c578063853828b61461056757806395d89b411461057e5780639b1cbccc1461060e5780639ea407be1461063d578063a9059cbb1461066a578063aa6ca808146106cf578063b449c24d146106d9578063c108d54214610734578063c489744b14610763578063cbdd69b5146107da578063dd62ed3e14610805578063e58fc54c1461087c578063e6a092f5146108d7578063efca2eed14610902578063f2fde38b1461092d578063f3ccb40114610970575b6101936109b5565b005b3480156101a157600080fd5b506101aa610d4d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ea5780820151818401526020810190506101cf565b50505050905090810190601f1680156102175780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023157600080fd5b50610270600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d86565b604051808215151515815260200191505060405180910390f35b34801561029657600080fd5b506102b560048036038101908080359060200190929190505050610f14565b005b3480156102c357600080fd5b506102cc610fcb565b6040518082815260200191505060405180910390f35b3480156102ee57600080fd5b5061034d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fd1565b604051808215151515815260200191505060405180910390f35b34801561037357600080fd5b5061037c6113a7565b6040518082815260200191505060405180910390f35b34801561039e57600080fd5b506103bd600480360381019080803590602001909291905050506113ad565b005b3480156103cb57600080fd5b506103d461147b565b6040518082815260200191505060405180910390f35b3480156103f657600080fd5b5061041560048036038101908080359060200190929190505050611480565b005b34801561042357600080fd5b5061042c61164c565b6040518082815260200191505060405180910390f35b34801561044e57600080fd5b50610483600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611652565b6040518082815260200191505060405180910390f35b3480156104a557600080fd5b506104ae61169b565b6040518082815260200191505060405180910390f35b3480156104d057600080fd5b5061050f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116a6565b005b34801561051d57600080fd5b50610526611710565b6040518082815260200191505060405180910390f35b34801561054857600080fd5b50610551611716565b6040518082815260200191505060405180910390f35b34801561057357600080fd5b5061057c61171c565b005b34801561058a57600080fd5b50610593611805565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105d35780820151818401526020810190506105b8565b50505050905090810190601f1680156106005780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561061a57600080fd5b5061062361183e565b604051808215151515815260200191505060405180910390f35b34801561064957600080fd5b5061066860048036038101908080359060200190929190505050611906565b005b34801561067657600080fd5b506106b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506119a3565b604051808215151515815260200191505060405180910390f35b6106d76109b5565b005b3480156106e557600080fd5b5061071a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bde565b604051808215151515815260200191505060405180910390f35b34801561074057600080fd5b50610749611bfe565b604051808215151515815260200191505060405180910390f35b34801561076f57600080fd5b506107c4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c11565b6040518082815260200191505060405180910390f35b3480156107e657600080fd5b506107ef611cfc565b6040518082815260200191505060405180910390f35b34801561081157600080fd5b50610866600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d02565b6040518082815260200191505060405180910390f35b34801561088857600080fd5b506108bd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d89565b604051808215151515815260200191505060405180910390f35b3480156108e357600080fd5b506108ec611fce565b6040518082815260200191505060405180910390f35b34801561090e57600080fd5b50610917611fd4565b6040518082815260200191505060405180910390f35b34801561093957600080fd5b5061096e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fda565b005b34801561097c57600080fd5b506109b3600480360381019080803590602001908201803590602001919091929391929390803590602001909291905050506120b1565b005b600080600080600080600080600d60009054906101000a900460ff161515156109dd57600080fd5b60009750600096506000955067016345785d8a000094506706f05b59d3b200009350670de0b6b3a76400009250670de0b6b3a7640000610a2834600a5461216690919063ffffffff16565b811515610a3157fe5b049750339150662386f26fc100003410158015610a4f575060055442105b8015610a5c575060075442105b8015610a69575060065442105b15610ae757843410158015610a7d57508334105b15610a9957606460008902811515610a9157fe5b049550610ae2565b833410158015610aa857508234105b15610ac457606460008902811515610abc57fe5b049550610ae1565b8234101515610ae057606460008902811515610adc57fe5b0495505b5b5b610b71565b662386f26fc100003410158015610aff575060055442105b8015610b0c575060075442115b8015610b19575060065442105b15610b6b57833410158015610b2d57508234105b15610b4957606460008902811515610b4157fe5b049550610b66565b8234101515610b6557606460008902811515610b6157fe5b0495505b5b610b70565b600095505b5b85880196506000881415610c85576305f5e100905060001515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515148015610bea5750600b54600c5411155b15610c6957610bf9828261219e565b506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600c60008154809291906001019190505550610c80565b662386f26fc100003410151515610c7f57600080fd5b5b610d1a565b600088118015610c9c5750662386f26fc100003410155b15610d02576005544210158015610cb557506007544210155b8015610cc2575060065442105b15610cd757610cd1828961219e565b50610cfd565b8434101515610cf057610cea828861219e565b50610cfc565b610cfa828961219e565b505b5b610d19565b662386f26fc100003410151515610d1857600080fd5b5b5b600854600954101515610d43576001600d60006101000a81548160ff0219169083151502179055505b5050505050505050565b6040805190810160405280600b81526020017f466c6173685820436f696e00000000000000000000000000000000000000000081525081565b6000808214158015610e1557506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610e235760009050610f0e565b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f7257600080fd5b610f878260085461232a90919063ffffffff16565b9050806008819055507f90f1f758f0e2b40929b1fd48df7ebe10afc272a362e1f0d63a90b8b4715d799f826040518082815260200191505060405180910390a15050565b60085481565b6000606060048101600036905010151515610fe857fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561102457600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561107257600080fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111515156110fd57600080fd5b61114f83600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461234690919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061122183600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461234690919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112f383600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461232a90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60055481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561140b57600080fd5b819050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611476573d6000803e3d6000fd5b505050565b600881565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114de57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561152c57600080fd5b33905061158182600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461234690919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115d98260085461234690919063ffffffff16565b6008819055506115f48260095461234690919063ffffffff16565b6009819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b60065481565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b662386f26fc1000081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561170257600080fd5b61170c828261235f565b5050565b60075481565b600c5481565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561177b57600080fd5b3091508173ffffffffffffffffffffffffffffffffffffffff16319050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611800573d6000803e3d6000fd5b505050565b6040805190810160405280600481526020017f465358430000000000000000000000000000000000000000000000000000000081525081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561189c57600080fd5b600d60009054906101000a900460ff161515156118b857600080fd5b6001600d60006101000a81548160ff0219169083151502179055507f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc60405160405180910390a16001905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561196257600080fd5b80600a819055507ff7729fa834bbef70b6d3257c2317a562aa88b56c81b544814f93dc5963a2c003816040518082815260200191505060405180910390a150565b60006040600481016000369050101515156119ba57fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156119f657600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515611a4457600080fd5b611a9683600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461234690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b2b83600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461232a90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b60046020528060005260406000206000915054906101000a900460ff1681565b600d60009054906101000a900460ff1681565b60008060008491508173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611cb457600080fd5b505af1158015611cc8573d6000803e3d6000fd5b505050506040513d6020811015611cde57600080fd5b81019080805190602001909291905050509050809250505092915050565b600a5481565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611dea57600080fd5b8391508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611e8857600080fd5b505af1158015611e9c573d6000803e3d6000fd5b505050506040513d6020811015611eb257600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611f8a57600080fd5b505af1158015611f9e573d6000803e3d6000fd5b505050506040513d6020811015611fb457600080fd5b810190808051906020019092919050505092505050919050565b600b5481565b60095481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561203657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156120ae5780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561210f57600080fd5b600090505b8383905081101561216057612153848483818110151561213057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168361235f565b8080600101915050612114565b50505050565b6000808314156121795760009050612198565b818302905081838281151561218a57fe5b0414151561219457fe5b8090505b92915050565b6000600d60009054906101000a900460ff161515156121bc57600080fd5b6121d18260095461232a90919063ffffffff16565b60098190555061222982600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461232a90919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000818301905082811015151561233d57fe5b80905092915050565b600082821115151561235457fe5b818303905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156123bb57600080fd5b6000811115156123ca57600080fd5b6008546009541015156123dc57600080fd5b61242e81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461232a90919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506124868160095461232a90919063ffffffff16565b6009819055506008546009541015156124b5576001600d60006101000a81548160ff0219169083151502179055505b8173ffffffffffffffffffffffffffffffffffffffff167fada993ad066837289fe186cd37227aa338d27519a8a1547472ecb9831486d27282600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808381526020018281526020019250505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505600a165627a7a723058203b8255332a897483cca4109064d86a09cc9ab5fdb267072505be8f697ed8a80b0029
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FlashXCoin
Function name: constructor
PC address: 75
Estimated Gas Usage: 70415 - 315918
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:69

now + 1 * 1 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FlashXCoin
Function name: constructor
PC address: 84
Estimated Gas Usage: 70415 - 315918
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:70

now + 1 * 1 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FlashXCoin
Function name: constructor
PC address: 93
Estimated Gas Usage: 70415 - 315918
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:71

now + 1 * 1 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FlashXCoin
Function name: fallback
PC address: 2645
Estimated Gas Usage: 2850 - 3275
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:179

msg.value >= requestMinimum && now < deadline && now < round1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x208ba5cf997e1a3f3, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FlashXCoin
Function name: fallback
PC address: 2658
Estimated Gas Usage: 2870 - 3295
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:179

msg.value >= requestMinimum && now < deadline && now < round1 && now < round2

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FlashXCoin
Function name: fallback
PC address: 2670
Estimated Gas Usage: 2887 - 3312
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:179

if (msg.value >= requestMinimum && now < deadline && now < round1 && now < round2) {
            if(msg.value >= bonusCond1 && msg.value < bonusCond2){
                countbonus = tokens * 0 / 100;
            }else if(msg.value >= bonusCond2 && msg.value < bonusCond3){
                countbonus = tokens * 0 / 100;
            }else if(msg.value >= bonusCond3){
                countbonus = tokens * 0 / 100;
            }
        }else if(msg.value >= requestMinimum && now < deadline && now > round1 && now < round2){
            if(msg.value >= bonusCond2 && msg.value < bonusCond3){
                countbonus = tokens * 0 / 100;
            }else if(msg.value >= bonusCond3){
                countbonus = tokens * 0 / 100;
            }
        }else{
            countbonus = 0;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40a24cff422657202, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FlashXCoin
Function name: fallback
PC address: 2821
Estimated Gas Usage: 3748 - 4173
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:187

msg.value >= requestMinimum && now < deadline && now > round1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FlashXCoin
Function name: fallback
PC address: 2834
Estimated Gas Usage: 3768 - 4193
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:187

msg.value >= requestMinimum && now < deadline && now > round1 && now < round2

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FlashXCoin
Function name: fallback
PC address: 2846
Estimated Gas Usage: 3785 - 4210
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:187

if(msg.value >= requestMinimum && now < deadline && now > round1 && now < round2){
            if(msg.value >= bonusCond2 && msg.value < bonusCond3){
                countbonus = tokens * 0 / 100;
            }else if(msg.value >= bonusCond3){
                countbonus = tokens * 0 / 100;
            }
        }else{
            countbonus = 0;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FlashXCoin
Function name: fallback
PC address: 3245
Estimated Gas Usage: 4724 - 5149
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:209

now >= deadline && now >= round1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100067d340916c100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FlashXCoin
Function name: fallback
PC address: 3259
Estimated Gas Usage: 5557 - 5982
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:209

now >= deadline && now >= round1 && now < round2

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x5122f8f9e97bb0000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FlashXCoin
Function name: fallback
PC address: 3271
Estimated Gas Usage: 5600 - 6025
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:209

if( now >= deadline && now >= round1 && now < round2){
                distr(investor, tokens);
            }else{
                if(msg.value >= bonusCond1){
                    distr(investor, bonus);
                }else{
                    distr(investor, tokens);
                }   
            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x16345785d8a0000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FlashXCoin
Function name: transferFrom(address,address,uint256)
PC address: 4071
Estimated Gas Usage: 384 - 479
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:247

function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {

        require(_to != address(0));
        require(_amount <= balances[_from]);
        require(_amount <= allowed[_from][msg.sender]);
        
        balances[_from] = balances[_from].sub(_amount);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(_from, _to, _amount);
        return true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FlashXCoin
Function name: transfer(address,uint256)
PC address: 6585
Estimated Gas Usage: 681 - 776
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:236

function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

        require(_to != address(0));
        require(_amount <= balances[msg.sender]);
        
        balances[msg.sender] = balances[msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(msg.sender, _to, _amount);
        return true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FlashXCoin
Function name: getTokenBalance(address,address)
PC address: 7351
Estimated Gas Usage: 2490 - 37428
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:273

t.balanceOf(who)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getTokenBalance(address,address), txdata: 0xc489744b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FlashXCoin
Function name: withdrawForeignTokens(address)
PC address: 7819
Estimated Gas Usage: 5918 - 76173
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:306

token.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashXCoin
Function name: withdrawForeignTokens(address)
PC address: 7911
Estimated Gas Usage: 5918 - 76173
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:307

owner

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FlashXCoin
Function name: withdrawForeignTokens(address)
PC address: 8077
Estimated Gas Usage: 5918 - 76173
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:307

token.transfer(owner, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: FlashXCoin
Function name: withdrawForeignTokens(address)
PC address: 8077
Estimated Gas Usage: 5918 - 76173
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:307

token.transfer(owner, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashXCoin
Function name: withdrawForeignTokens(address)
PC address: 8077
Estimated Gas Usage: 5918 - 76173
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:307

token.transfer(owner, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FlashXCoin
Function name: add(uint256)
PC address: 9020
Estimated Gas Usage: 1987 - 2412
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:298

totalSupply.add(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: add(uint256), txdata: 0x1003e2d2ffffffffffffffffffffffffffffffffffffffffffffffffff, decoded_data: (115792089237316195423570985008687907853269984665640564039457511950319091712000,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FlashXCoin
Function name: burn(uint256)
PC address: 9043
Estimated Gas Usage: 9128 - 30123
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:292

totalSupply.sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x0
Caller: [CREATOR], function: burn(uint256), txdata: 0x42966c68000000000000000000000000000000000000000000000000016345785f, decoded_data: (100000000024510464,), value: 0x0


time_used: 36054.36981034279 seconds
#@contract_info_time
0x0c2e3bbc4646c872a3F5A745D2902aFFda82C58a.sol:0.4.25:FlashXCoin:36054.36981034279:36100:60:36000
