++++ 0x06ec2d284764c510816e2433f5106fa6d7a77fb9.sol  :  0.5.13  :  GreenEnergy ++++
Starting preprocessing.
number of genesis states: 1
total instructions: 1915
['constructor']:writes at the last depth:['3', '0', '0', '1', '2']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 98.90% coverage.
dynamic svars:['0', '2']
static svars:['3', '1']
Ending preprocessing.
preprocessing time(s): 105.04419660568237
contract coverage: 98.12%
Function Reads: State variables read in conditions
	transfer(address,uint256):['3', '2']
	allAddresses(uint256):['0']
	allowance(address,address):[]
	whitelist(address,bool):['3']
	balanceOf(address):[]
	stopped(bool):['3']
	symbol():[]
	name():[]
	approve(address,uint256):[]
	totalSupply():[]
	transferFrom(address,address,uint256):[]
	decimals():[]
	isWhitelisted(address):[]
Function Writes: State variables written
	stopped(bool):['3']
	approve(address,uint256):['2']
	whitelist(address,bool):['2']
	transferFrom(address,address,uint256):['2', '0', '1']
	transfer(address,uint256):['2', '0', '1']
============================
iteration:3
targets:['transfer(address,uint256)']
['stopped(bool)']:writes at the last depth:['3']
['whitelist(address,bool)']:writes at the last depth:['2']
['approve(address,uint256)']:writes at the last depth:['2']
['transfer(address,uint256)']:writes at the last depth:['', '1', '2', '0']
['transfer(address,uint256)']:writes at the last depth:['', '1', '2', '0']
['transferFrom(address,address,uint256)']:writes at the last depth:['2']
['transferFrom(address,address,uint256)']:writes at the last depth:['2']
['transfer(address,uint256)']:writes at the last depth:['', '1', '2', '0']
contract coverage: 98.12%
============================
iteration:4
contract coverage: 98.12%
============================
iteration:5
['transferFrom(address,address,uint256)', 'whitelist(address,bool)']:writes at the last depth:['2']
['transferFrom(address,address,uint256)', 'approve(address,uint256)']:writes at the last depth:['2']
contract coverage: 98.12%
============================
iteration:6
contract coverage: 98.12%
============================
iteration:7
contract coverage: 98.12%
============================
iteration:8
contract coverage: 98.12%
============================
iteration:9
contract coverage: 98.12%
============================
iteration:10
['transfer(address,uint256)', 'stopped(bool)']:writes at the last depth:['3']
['transfer(address,uint256)', 'whitelist(address,bool)']:writes at the last depth:['2']
contract coverage: 98.12%
============================
iteration:11
contract coverage: 98.64%
============================
iteration:12
['transfer(address,uint256)', 'stopped(bool)', 'stopped(bool)']:writes at the last depth:['3']
['transfer(address,uint256)', 'stopped(bool)', 'approve(address,uint256)']:writes at the last depth:['2']
['transfer(address,uint256)', 'stopped(bool)', 'transferFrom(address,address,uint256)']:writes at the last depth:['2']
contract coverage: 98.64%
============================
iteration:13
['transfer(address,uint256)', 'stopped(bool)', 'transferFrom(address,address,uint256)', 'approve(address,uint256)']:writes at the last depth:['2']
contract coverage: 98.64%
============================
iteration:14
['transfer(address,uint256)', 'stopped(bool)', 'approve(address,uint256)', 'approve(address,uint256)']:writes at the last depth:['2']
contract coverage: 98.64%
============================
iteration:15
['transfer(address,uint256)', 'stopped(bool)', 'stopped(bool)', 'stopped(bool)']:writes at the last depth:['3']
['transfer(address,uint256)', 'stopped(bool)', 'stopped(bool)', 'approve(address,uint256)']:writes at the last depth:['2']
['transfer(address,uint256)', 'stopped(bool)', 'stopped(bool)', 'transferFrom(address,address,uint256)']:writes at the last depth:['2']
['transfer(address,uint256)', 'stopped(bool)', 'stopped(bool)', 'transferFrom(address,address,uint256)']:writes at the last depth:['2']
contract coverage: 98.64%
============================
iteration:16
contract coverage: 98.64%
============================
iteration:17
contract coverage: 98.64%
============================
iteration:18
contract coverage: 98.64%
#@statespace
644 nodes, 643 edges, 9898 total states
#@coverage
Achieved 7.44% coverage for code: 
#@coverage
Achieved 98.64% coverage for code: 608060405234801561001057600080fd5b50600436106100cf5760003560e01c806370a082311161008c578063a9059cbb11610066578063a9059cbb146103ec578063dacc537014610452578063dd62ed3e146104c0578063f59c370814610538576100cf565b806370a08231146102e15780637b3628c91461033957806395d89b4114610369576100cf565b806306fdde03146100d4578063095ea7b31461015757806318160ddd146101bd57806323b872dd146101db578063313ce567146102615780633af32abf14610285575b600080fd5b6100dc610588565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561011c578082015181840152602081019050610101565b50505050905090810190601f1680156101495780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101a36004803603604081101561016d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105c1565b604051808215151515815260200191505060405180910390f35b6101c56106b8565b6040518082815260200191505060405180910390f35b610247600480360360608110156101f157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106c5565b604051808215151515815260200191505060405180910390f35b6102696107fb565b604051808260ff1660ff16815260200191505060405180910390f35b6102c76004803603602081101561029b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610800565b604051808215151515815260200191505060405180910390f35b610323600480360360208110156102f757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061085b565b6040518082815260200191505060405180910390f35b6103676004803603602081101561034f57600080fd5b810190808035151590602001909291905050506108a9565b005b610371610926565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103b1578082015181840152602081019050610396565b50505050905090810190601f1680156103de5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104386004803603604081101561040257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061095f565b604051808215151515815260200191505060405180910390f35b61047e6004803603602081101561046857600080fd5b8101908080359060200190929190505050610977565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610522600480360360408110156104d657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109b3565b6040518082815260200191505060405180910390f35b6105866004803603604081101561054e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610a3f565b005b6040518060400160405280600b81526020017f477265656e456e6572677900000000000000000000000000000000000000000081525081565b6000816001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600160000154905090565b6000816001800160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561075557600080fd5b816001800160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506107ef848484610afc565b50600190509392505050565b600381565b60006001800160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff169050919050565b60006001800160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b600160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461090657600080fd5b80600160020160146101000a81548160ff02191690831515021790555050565b6040518060400160405280600281526020017f474500000000000000000000000000000000000000000000000000000000000081525081565b600061096c338484610afc565b506001905092915050565b6000818154811061098457fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001800160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a9c57600080fd5b806001800160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055505050565b6000600160020160149054906101000a900460ff1615610b2957610b1f84610800565b610b2857600080fd5b5b81610b338561085b565b1015610b3e57600080fd5b6000806001800160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154149050826001800160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825403925050819055506000839050806001800160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282540192505081905550818015610c3f5750600084115b15610e195760008590806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060008090505b600080549050811015610e03576000600180016000808481548110610cd157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905060006001600001549050600081620186a0840281610d5657fe5b0490506000620186a080830281610d6957fe5b04905080600180016000808881548110610d7f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254019250508190555060018501945050505050610cb0565b620186a060016000015401600160000181905550505b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38092505050939250505056fea265627a7a72315820c78a84f72cbe4b51807458ae0b8a2c810a31679a1f8bde70411d8550769ed9ba64736f6c634300050d0032
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GreenEnergy
Function name: allAddresses(uint256)
PC address: 2435
Estimated Gas Usage: 1089 - 1184
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0x06ec2d284764c510816e2433f5106fa6d7a77fb9.sol:219

address[] public allAddresses

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: allAddresses(uint256), txdata: 0xdacc53700000000000010000000000000000000000000000000100000000000000000000, decoded_data: (411376139330301510538742295639337626246892892228009595011858432,), value: 0x0


time_used: 5025.415718078613 seconds
#@contract_info_time
0x06ec2d284764c510816e2433f5106fa6d7a77fb9.sol:0.5.13:GreenEnergy:5025.415718078613:36100:60:36000
