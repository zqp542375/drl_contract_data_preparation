++++ 0xaddc4986e9cdd158c3bf27d3612b288af3345ade.sol  :  0.5.12  :  CheezyExchange ++++
77350683811357973289821533212725504066965371861 is added into actors.
Starting preprocessing.
number of genesis states: 1
total instructions: 8189
['constructor']:writes at the last depth:['5', '6', '0', '1', '2', '3']
hit the exec_preprocessing excution time, return.
preprocessing: Achieved 93.44% coverage.
dynamic svars:['1', '4', '7', '8']
static svars:['3', '5', '2', '0', '6']
Ending preprocessing.
preprocessing time(s): 135.563622713089
contract coverage: 47.48%
cancelSellOrder(uint256,address) is not reachable
getIsOrderCurrentlyValid(uint256,address) is not reachable
Function Reads: State variables read in conditions
	addressToFeeEarnings(address):[]
	wizardGuildAddress():[]
	transferOwnership(address):['0']
	successfulTradeFeeInBasisPoints():[]
	cancelSellOrder(uint256,address):[]
	getIsOrderCurrentlyValid(uint256,address):[]
	getOrder(uint256,address):[]
	addPauser(address):['1']
	pause():['1', '2']
	createSellOrder(uint256,uint256,address):['2']
	owner():[]
	fillSellOrder(uint256,uint256,address,address):['2']
	isOwner():[]
	isPauser(address):[]
	paused():[]
	removePauser(address):['0', '1']
	renouncePauser():['1']
	getIsInFightWindow(address):[]
	renounceOwnership():['0']
	updateSellOrder(uint256,uint256,address):['2']
	lastSuccessfulPricePerPowerForTournamentAddress(address):[]
	withdrawFeeEarningsForAddress():['4', '3']
	getCurrentPriceForOrder(uint256,address):[]
	setSuccessfulTradeFeeInBasisPoints(uint256):['0']
	unpause():['1', '2']
Function Writes: State variables written
	withdrawFeeEarningsForAddress():['3', '4']
	cancelSellOrder(uint256,address):['3', '7']
	updateSellOrder(uint256,uint256,address):['3', '7']
	createSellOrder(uint256,uint256,address):['3', '7']
	setSuccessfulTradeFeeInBasisPoints(uint256):['5']
	fillSellOrder(uint256,uint256,address,address):['3', '8', '7']
	pause():['2']
	renounceOwnership():['0']
	unpause():['2']
	renouncePauser():['1']
	transferOwnership(address):['0']
	removePauser(address):['1']
	addPauser(address):['1']
============================
iteration:3
targets:['createSellOrder(uint256,uint256,address)', 'fillSellOrder(uint256,uint256,address,address)', 'updateSellOrder(uint256,uint256,address)', 'cancelSellOrder(uint256,address)', 'getIsOrderCurrentlyValid(uint256,address)', 'withdrawFeeEarningsForAddress()', 'unpause()']
['setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['renounceOwnership()']:writes at the last depth:['0']
['pause()']:writes at the last depth:['2']
['transferOwnership(address)']:writes at the last depth:['0']
['renouncePauser()']:writes at the last depth:['1']
['removePauser(address)']:writes at the last depth:['1']
['addPauser(address)']:writes at the last depth:['1']
['getIsInFightWindow(address)']:writes at the last depth:[]
['getIsInFightWindow(address)']:writes at the last depth:[]
['getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
contract coverage: 47.48%
============================
iteration:4
contract coverage: 47.48%
============================
iteration:5
['getCurrentPriceForOrder(uint256,address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'pause()']:writes at the last depth:['2']
['getCurrentPriceForOrder(uint256,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'renouncePauser()']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'removePauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'addPauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
contract coverage: 47.48%
============================
iteration:6
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renounceOwnership()']:writes at the last depth:['0']
contract coverage: 47.48%
============================
iteration:7
contract coverage: 47.48%
============================
iteration:8
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'pause()']:writes at the last depth:['2']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renouncePauser()']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'removePauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
contract coverage: 47.48%
============================
iteration:9
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
contract coverage: 47.48%
============================
iteration:10
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'pause()']:writes at the last depth:['2']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renouncePauser()']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'removePauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
contract coverage: 47.48%
============================
iteration:11
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'pause()']:writes at the last depth:['2']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'renouncePauser()']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'removePauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'addPauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
contract coverage: 47.48%
============================
iteration:12
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'pause()']:writes at the last depth:['2']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'renouncePauser()']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'removePauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'addPauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
contract coverage: 47.48%
============================
iteration:13
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'pause()']:writes at the last depth:['2']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'renouncePauser()']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'removePauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'addPauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
contract coverage: 87.57%
============================
iteration:14
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'pause()']:writes at the last depth:['2']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'renouncePauser()']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'removePauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'addPauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'cancelSellOrder(uint256,address)']:writes at the last depth:['7', '3']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'createSellOrder(uint256,uint256,address)']:writes at the last depth:['7', '3']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'fillSellOrder(uint256,uint256,address,address)']:writes at the last depth:['', '3', '7', '4', '8']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'fillSellOrder(uint256,uint256,address,address)']:writes at the last depth:['', '3', '7', '4', '8']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'fillSellOrder(uint256,uint256,address,address)']:writes at the last depth:['', '3', '7', '4', '8']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)', 'fillSellOrder(uint256,uint256,address,address)']:writes at the last depth:['', '3', '7', '4', '8']
contract coverage: 87.57%
============================
iteration:15
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'removePauser(address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'removePauser(address)', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'removePauser(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'removePauser(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'removePauser(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'removePauser(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'removePauser(address)', 'cancelSellOrder(uint256,address)']:writes at the last depth:['7', '3']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'removePauser(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'removePauser(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'removePauser(address)', 'createSellOrder(uint256,uint256,address)']:writes at the last depth:['7', '3']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'removePauser(address)', 'fillSellOrder(uint256,uint256,address,address)']:writes at the last depth:['', '3', '7', '4', '8']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'removePauser(address)', 'fillSellOrder(uint256,uint256,address,address)']:writes at the last depth:['', '3', '7', '4', '8']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'removePauser(address)', 'fillSellOrder(uint256,uint256,address,address)']:writes at the last depth:['', '3', '7', '4', '8']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'removePauser(address)', 'fillSellOrder(uint256,uint256,address,address)']:writes at the last depth:['', '3', '7', '4', '8']
contract coverage: 87.57%
============================
iteration:16
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renouncePauser()', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renouncePauser()', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renouncePauser()', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renouncePauser()', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renouncePauser()', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renouncePauser()', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renouncePauser()', 'cancelSellOrder(uint256,address)']:writes at the last depth:['7', '3']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renouncePauser()', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renouncePauser()', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renouncePauser()', 'createSellOrder(uint256,uint256,address)']:writes at the last depth:['7', '3']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renouncePauser()', 'fillSellOrder(uint256,uint256,address,address)']:writes at the last depth:['', '3', '7', '4', '8']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renouncePauser()', 'fillSellOrder(uint256,uint256,address,address)']:writes at the last depth:['', '3', '7', '4', '8']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renouncePauser()', 'fillSellOrder(uint256,uint256,address,address)']:writes at the last depth:['', '3', '7', '4', '8']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renouncePauser()', 'fillSellOrder(uint256,uint256,address,address)']:writes at the last depth:['', '3', '7', '4', '8']
contract coverage: 87.57%
============================
iteration:17
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'transferOwnership(address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'transferOwnership(address)', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'transferOwnership(address)', 'pause()']:writes at the last depth:['2']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'transferOwnership(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'transferOwnership(address)', 'renouncePauser()']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'transferOwnership(address)', 'removePauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'transferOwnership(address)', 'addPauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'transferOwnership(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'transferOwnership(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'transferOwnership(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'transferOwnership(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'transferOwnership(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
contract coverage: 88.31%
============================
iteration:18
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'pause()', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'pause()', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'pause()', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'pause()', 'renouncePauser()']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'pause()', 'unpause()']:writes at the last depth:['2']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'pause()', 'removePauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'pause()', 'addPauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'pause()', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'pause()', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'pause()', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'pause()', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'pause()', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
contract coverage: 88.31%
============================
iteration:19
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renounceOwnership()', 'pause()']:writes at the last depth:['2']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renounceOwnership()', 'renouncePauser()']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renounceOwnership()', 'addPauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renounceOwnership()', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renounceOwnership()', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renounceOwnership()', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renounceOwnership()', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'renounceOwnership()', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
contract coverage: 88.31%
============================
iteration:20
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)', 'pause()']:writes at the last depth:['2']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)', 'renouncePauser()']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)', 'removePauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)', 'addPauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
contract coverage: 88.31%
============================
iteration:21
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'pause()']:writes at the last depth:['2']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'renouncePauser()']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'removePauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'addPauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
contract coverage: 88.31%
============================
iteration:22
contract coverage: 88.31%
============================
iteration:23
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)', 'pause()']:writes at the last depth:['2']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)', 'renouncePauser()']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)', 'removePauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)', 'addPauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
contract coverage: 88.31%
============================
iteration:24
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'pause()']:writes at the last depth:['2']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'renouncePauser()']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'removePauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'addPauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
contract coverage: 88.31%
============================
iteration:25
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'pause()']:writes at the last depth:['2']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'renouncePauser()']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'removePauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'addPauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
contract coverage: 88.31%
============================
iteration:26
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'pause()']:writes at the last depth:['2']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'renouncePauser()']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'removePauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'addPauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)']:writes at the last depth:[]
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'getIsInFightWindow(address)', 'getCurrentPriceForOrder(uint256,address)']:writes at the last depth:[]
contract coverage: 88.31%
============================
iteration:27
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'addPauser(address)', 'setSuccessfulTradeFeeInBasisPoints(uint256)']:writes at the last depth:['5']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'addPauser(address)', 'renounceOwnership()']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'addPauser(address)', 'pause()']:writes at the last depth:['2']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'addPauser(address)', 'transferOwnership(address)']:writes at the last depth:['0']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'addPauser(address)', 'renouncePauser()']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'addPauser(address)', 'removePauser(address)']:writes at the last depth:['1']
['getCurrentPriceForOrder(uint256,address)', 'getIsInFightWindow(address)', 'addPauser(address)', 'addPauser(address)']:writes at the last depth:['1']
contract coverage: 88.31%
============================
iteration:28
contract coverage: 88.31%
============================
iteration:29
contract coverage: 88.31%
============================
iteration:30
contract coverage: 88.31%
============================
iteration:31
contract coverage: 88.31%
============================
iteration:32
contract coverage: 88.31%
============================
iteration:33
contract coverage: 88.31%
============================
iteration:34
contract coverage: 88.31%
============================
iteration:35
contract coverage: 88.31%
============================
iteration:36
contract coverage: 88.31%
============================
iteration:37
contract coverage: 88.31%
============================
iteration:38
contract coverage: 88.31%
============================
iteration:39
contract coverage: 88.31%
============================
iteration:40
contract coverage: 88.31%
============================
iteration:41
contract coverage: 88.31%
============================
iteration:42
contract coverage: 88.31%
============================
iteration:43
contract coverage: 88.31%
============================
iteration:44
contract coverage: 88.31%
============================
iteration:45
contract coverage: 88.31%
============================
iteration:46
contract coverage: 88.31%
============================
iteration:47
contract coverage: 88.31%
============================
iteration:48
contract coverage: 88.31%
============================
iteration:49
contract coverage: 88.31%
============================
iteration:50
contract coverage: 88.31%
============================
iteration:51
contract coverage: 88.31%
============================
iteration:52
contract coverage: 88.31%
#@statespace
7117 nodes, 7116 edges, 106778 total states
#@coverage
Achieved 3.40% coverage for code: 
#@coverage
Achieved 88.31% coverage for code: 
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CheezyExchange
Function name: getIsInFightWindow(address)
PC address: 15272
Estimated Gas Usage: 3014 - 40006
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0xaddc4986e9cdd158c3bf27d3612b288af3345ade.sol:430

uint256(tournamentStartBlock) + uint256(admissionDuration)

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getIsInFightWindow(address), txdata: 0x70fada5f0101010101010101010101010000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CheezyExchange
Function name: getIsInFightWindow(address)
PC address: 15281
Estimated Gas Usage: 3014 - 40006
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0xaddc4986e9cdd158c3bf27d3612b288af3345ade.sol:431

uint256(ascensionWindowDuration) + uint256(fightWindowDuration)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getIsInFightWindow(address), txdata: 0x70fada5f0101010101010101010101010000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CheezyExchange
Function name: getIsInFightWindow(address)
PC address: 15282
Estimated Gas Usage: 3014 - 40006
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0xaddc4986e9cdd158c3bf27d3612b288af3345ade.sol:431

uint256(ascensionWindowDuration) + uint256(fightWindowDuration) + uint256(duelTimeoutDuration)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getIsInFightWindow(address), txdata: 0x70fada5f0101010101010101010101010000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CheezyExchange
Function name: getIsInFightWindow(address)
PC address: 15283
Estimated Gas Usage: 3014 - 40006
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0xaddc4986e9cdd158c3bf27d3612b288af3345ade.sol:431

uint256(ascensionWindowDuration) + uint256(fightWindowDuration) + uint256(duelTimeoutDuration) + uint256(cullingWindowDuration)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2208085c242000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getIsInFightWindow(address), txdata: 0x70fada5f1020000101010000010100010000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CheezyExchange
Function name: getIsInFightWindow(address)
PC address: 15302
Estimated Gas Usage: 3014 - 40006
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./solidity_files/0xaddc4986e9cdd158c3bf27d3612b288af3345ade.sol:434

uint256(firstSessionStartBlock) + uint256(ascensionWindowDuration)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getIsInFightWindow(address), txdata: 0x70fada5f0101010101010101010101010000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: CheezyExchange
Function name: getIsInFightWindow(address)
PC address: 16096
Estimated Gas Usage: 2720 - 39059
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0xaddc4986e9cdd158c3bf27d3612b288af3345ade.sol:382

if (block.number < localParams.pauseEndedBlock) {
            return false;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: getIsInFightWindow(address), txdata: 0x70fada5f0101010101010101010101100000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: CheezyExchange
Function name: getIsInFightWindow(address)
PC address: 16125
Estimated Gas Usage: 2760 - 39192
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./solidity_files/0xaddc4986e9cdd158c3bf27d3612b288af3345ade.sol:388

if (block.number < localParams.firstWindowStartBlock) {
            return false;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getIsInFightWindow(address), txdata: 0x70fada5f0101010101010101080101010010000100808004800800002040012000208000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CheezyExchange
Function name: getIsInFightWindow(address)
PC address: 16168
Estimated Gas Usage: 2831 - 39449
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./solidity_files/0xaddc4986e9cdd158c3bf27d3612b288af3345ade.sol:433

_isInWindow(WindowParameters({
            firstWindowStartBlock: uint48(uint256(firstSessionStartBlock) + uint256(ascensionWindowDuration)),
            pauseEndedBlock: uint48(pauseEndedBlock),
            sessionDuration: uint32(sessionDuration),
            windowDuration: uint32(fightWindowDuration)
        }))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getIsInFightWindow(address), txdata: 0x70fada5f0101010101010104012008010820011020200200402008100408200200000000, value: 0x0


time_used: 36066.98152375221 seconds
#@contract_info_time
0xaddc4986e9cdd158c3bf27d3612b288af3345ade.sol:0.5.12:CheezyExchange:36066.98152375221:36100:60:36000
